
STM32WLFanet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001042c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009a0  08010570  08010570  00020570  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010f10  08010f10  000301e4  2**0
                  CONTENTS
  4 .ARM          00000008  08010f10  08010f10  00020f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010f18  08010f18  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  08010f18  08010f18  00020f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   0000000c  08010f28  08010f28  00020f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08010f34  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000480  200001e4  08011118  000301e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000664  08011118  00030664  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00033579  00000000  00000000  0003020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006c8d  00000000  00000000  00063787  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e30  00000000  00000000  0006a418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c70  00000000  00000000  0006c248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000240c1  00000000  00000000  0006deb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021f37  00000000  00000000  00091f79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b50c3  00000000  00000000  000b3eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00168f73  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000092fc  00000000  00000000  00168fc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e4 	.word	0x200001e4
 800015c:	00000000 	.word	0x00000000
 8000160:	08010554 	.word	0x08010554

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e8 	.word	0x200001e8
 800017c:	08010554 	.word	0x08010554

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_d2uiz>:
 8000adc:	004a      	lsls	r2, r1, #1
 8000ade:	d211      	bcs.n	8000b04 <__aeabi_d2uiz+0x28>
 8000ae0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ae4:	d211      	bcs.n	8000b0a <__aeabi_d2uiz+0x2e>
 8000ae6:	d50d      	bpl.n	8000b04 <__aeabi_d2uiz+0x28>
 8000ae8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af0:	d40e      	bmi.n	8000b10 <__aeabi_d2uiz+0x34>
 8000af2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000afa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000afe:	fa23 f002 	lsr.w	r0, r3, r2
 8000b02:	4770      	bx	lr
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b0e:	d102      	bne.n	8000b16 <__aeabi_d2uiz+0x3a>
 8000b10:	f04f 30ff 	mov.w	r0, #4294967295
 8000b14:	4770      	bx	lr
 8000b16:	f04f 0000 	mov.w	r0, #0
 8000b1a:	4770      	bx	lr

08000b1c <__aeabi_d2f>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b24:	bf24      	itt	cs
 8000b26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b2e:	d90d      	bls.n	8000b4c <__aeabi_d2f+0x30>
 8000b30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b44:	bf08      	it	eq
 8000b46:	f020 0001 	biceq.w	r0, r0, #1
 8000b4a:	4770      	bx	lr
 8000b4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b50:	d121      	bne.n	8000b96 <__aeabi_d2f+0x7a>
 8000b52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b56:	bfbc      	itt	lt
 8000b58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	4770      	bxlt	lr
 8000b5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b66:	f1c2 0218 	rsb	r2, r2, #24
 8000b6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b72:	fa20 f002 	lsr.w	r0, r0, r2
 8000b76:	bf18      	it	ne
 8000b78:	f040 0001 	orrne.w	r0, r0, #1
 8000b7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b88:	ea40 000c 	orr.w	r0, r0, ip
 8000b8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b94:	e7cc      	b.n	8000b30 <__aeabi_d2f+0x14>
 8000b96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b9a:	d107      	bne.n	8000bac <__aeabi_d2f+0x90>
 8000b9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ba0:	bf1e      	ittt	ne
 8000ba2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ba6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000baa:	4770      	bxne	lr
 8000bac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_frsub>:
 8000bbc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bc0:	e002      	b.n	8000bc8 <__addsf3>
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_fsub>:
 8000bc4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bc8 <__addsf3>:
 8000bc8:	0042      	lsls	r2, r0, #1
 8000bca:	bf1f      	itttt	ne
 8000bcc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bd0:	ea92 0f03 	teqne	r2, r3
 8000bd4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bd8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bdc:	d06a      	beq.n	8000cb4 <__addsf3+0xec>
 8000bde:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000be2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000be6:	bfc1      	itttt	gt
 8000be8:	18d2      	addgt	r2, r2, r3
 8000bea:	4041      	eorgt	r1, r0
 8000bec:	4048      	eorgt	r0, r1
 8000bee:	4041      	eorgt	r1, r0
 8000bf0:	bfb8      	it	lt
 8000bf2:	425b      	neglt	r3, r3
 8000bf4:	2b19      	cmp	r3, #25
 8000bf6:	bf88      	it	hi
 8000bf8:	4770      	bxhi	lr
 8000bfa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bfe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c02:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c06:	bf18      	it	ne
 8000c08:	4240      	negne	r0, r0
 8000c0a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c0e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c12:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c16:	bf18      	it	ne
 8000c18:	4249      	negne	r1, r1
 8000c1a:	ea92 0f03 	teq	r2, r3
 8000c1e:	d03f      	beq.n	8000ca0 <__addsf3+0xd8>
 8000c20:	f1a2 0201 	sub.w	r2, r2, #1
 8000c24:	fa41 fc03 	asr.w	ip, r1, r3
 8000c28:	eb10 000c 	adds.w	r0, r0, ip
 8000c2c:	f1c3 0320 	rsb	r3, r3, #32
 8000c30:	fa01 f103 	lsl.w	r1, r1, r3
 8000c34:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c38:	d502      	bpl.n	8000c40 <__addsf3+0x78>
 8000c3a:	4249      	negs	r1, r1
 8000c3c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c40:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c44:	d313      	bcc.n	8000c6e <__addsf3+0xa6>
 8000c46:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c4a:	d306      	bcc.n	8000c5a <__addsf3+0x92>
 8000c4c:	0840      	lsrs	r0, r0, #1
 8000c4e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c52:	f102 0201 	add.w	r2, r2, #1
 8000c56:	2afe      	cmp	r2, #254	; 0xfe
 8000c58:	d251      	bcs.n	8000cfe <__addsf3+0x136>
 8000c5a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c5e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c62:	bf08      	it	eq
 8000c64:	f020 0001 	biceq.w	r0, r0, #1
 8000c68:	ea40 0003 	orr.w	r0, r0, r3
 8000c6c:	4770      	bx	lr
 8000c6e:	0049      	lsls	r1, r1, #1
 8000c70:	eb40 0000 	adc.w	r0, r0, r0
 8000c74:	3a01      	subs	r2, #1
 8000c76:	bf28      	it	cs
 8000c78:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c7c:	d2ed      	bcs.n	8000c5a <__addsf3+0x92>
 8000c7e:	fab0 fc80 	clz	ip, r0
 8000c82:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c86:	ebb2 020c 	subs.w	r2, r2, ip
 8000c8a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c8e:	bfaa      	itet	ge
 8000c90:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c94:	4252      	neglt	r2, r2
 8000c96:	4318      	orrge	r0, r3
 8000c98:	bfbc      	itt	lt
 8000c9a:	40d0      	lsrlt	r0, r2
 8000c9c:	4318      	orrlt	r0, r3
 8000c9e:	4770      	bx	lr
 8000ca0:	f092 0f00 	teq	r2, #0
 8000ca4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ca8:	bf06      	itte	eq
 8000caa:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cae:	3201      	addeq	r2, #1
 8000cb0:	3b01      	subne	r3, #1
 8000cb2:	e7b5      	b.n	8000c20 <__addsf3+0x58>
 8000cb4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cbc:	bf18      	it	ne
 8000cbe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cc2:	d021      	beq.n	8000d08 <__addsf3+0x140>
 8000cc4:	ea92 0f03 	teq	r2, r3
 8000cc8:	d004      	beq.n	8000cd4 <__addsf3+0x10c>
 8000cca:	f092 0f00 	teq	r2, #0
 8000cce:	bf08      	it	eq
 8000cd0:	4608      	moveq	r0, r1
 8000cd2:	4770      	bx	lr
 8000cd4:	ea90 0f01 	teq	r0, r1
 8000cd8:	bf1c      	itt	ne
 8000cda:	2000      	movne	r0, #0
 8000cdc:	4770      	bxne	lr
 8000cde:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ce2:	d104      	bne.n	8000cee <__addsf3+0x126>
 8000ce4:	0040      	lsls	r0, r0, #1
 8000ce6:	bf28      	it	cs
 8000ce8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cec:	4770      	bx	lr
 8000cee:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cf2:	bf3c      	itt	cc
 8000cf4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cf8:	4770      	bxcc	lr
 8000cfa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cfe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d02:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d06:	4770      	bx	lr
 8000d08:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d0c:	bf16      	itet	ne
 8000d0e:	4608      	movne	r0, r1
 8000d10:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d14:	4601      	movne	r1, r0
 8000d16:	0242      	lsls	r2, r0, #9
 8000d18:	bf06      	itte	eq
 8000d1a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d1e:	ea90 0f01 	teqeq	r0, r1
 8000d22:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_ui2f>:
 8000d28:	f04f 0300 	mov.w	r3, #0
 8000d2c:	e004      	b.n	8000d38 <__aeabi_i2f+0x8>
 8000d2e:	bf00      	nop

08000d30 <__aeabi_i2f>:
 8000d30:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d34:	bf48      	it	mi
 8000d36:	4240      	negmi	r0, r0
 8000d38:	ea5f 0c00 	movs.w	ip, r0
 8000d3c:	bf08      	it	eq
 8000d3e:	4770      	bxeq	lr
 8000d40:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d44:	4601      	mov	r1, r0
 8000d46:	f04f 0000 	mov.w	r0, #0
 8000d4a:	e01c      	b.n	8000d86 <__aeabi_l2f+0x2a>

08000d4c <__aeabi_ul2f>:
 8000d4c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d50:	bf08      	it	eq
 8000d52:	4770      	bxeq	lr
 8000d54:	f04f 0300 	mov.w	r3, #0
 8000d58:	e00a      	b.n	8000d70 <__aeabi_l2f+0x14>
 8000d5a:	bf00      	nop

08000d5c <__aeabi_l2f>:
 8000d5c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d60:	bf08      	it	eq
 8000d62:	4770      	bxeq	lr
 8000d64:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d68:	d502      	bpl.n	8000d70 <__aeabi_l2f+0x14>
 8000d6a:	4240      	negs	r0, r0
 8000d6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d70:	ea5f 0c01 	movs.w	ip, r1
 8000d74:	bf02      	ittt	eq
 8000d76:	4684      	moveq	ip, r0
 8000d78:	4601      	moveq	r1, r0
 8000d7a:	2000      	moveq	r0, #0
 8000d7c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d80:	bf08      	it	eq
 8000d82:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d86:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d8a:	fabc f28c 	clz	r2, ip
 8000d8e:	3a08      	subs	r2, #8
 8000d90:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d94:	db10      	blt.n	8000db8 <__aeabi_l2f+0x5c>
 8000d96:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d9a:	4463      	add	r3, ip
 8000d9c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000da0:	f1c2 0220 	rsb	r2, r2, #32
 8000da4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000da8:	fa20 f202 	lsr.w	r2, r0, r2
 8000dac:	eb43 0002 	adc.w	r0, r3, r2
 8000db0:	bf08      	it	eq
 8000db2:	f020 0001 	biceq.w	r0, r0, #1
 8000db6:	4770      	bx	lr
 8000db8:	f102 0220 	add.w	r2, r2, #32
 8000dbc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dc0:	f1c2 0220 	rsb	r2, r2, #32
 8000dc4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dc8:	fa21 f202 	lsr.w	r2, r1, r2
 8000dcc:	eb43 0002 	adc.w	r0, r3, r2
 8000dd0:	bf08      	it	eq
 8000dd2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dd6:	4770      	bx	lr

08000dd8 <__aeabi_fmul>:
 8000dd8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ddc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000de0:	bf1e      	ittt	ne
 8000de2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000de6:	ea92 0f0c 	teqne	r2, ip
 8000dea:	ea93 0f0c 	teqne	r3, ip
 8000dee:	d06f      	beq.n	8000ed0 <__aeabi_fmul+0xf8>
 8000df0:	441a      	add	r2, r3
 8000df2:	ea80 0c01 	eor.w	ip, r0, r1
 8000df6:	0240      	lsls	r0, r0, #9
 8000df8:	bf18      	it	ne
 8000dfa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dfe:	d01e      	beq.n	8000e3e <__aeabi_fmul+0x66>
 8000e00:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e04:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e08:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e0c:	fba0 3101 	umull	r3, r1, r0, r1
 8000e10:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e14:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e18:	bf3e      	ittt	cc
 8000e1a:	0049      	lslcc	r1, r1, #1
 8000e1c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e20:	005b      	lslcc	r3, r3, #1
 8000e22:	ea40 0001 	orr.w	r0, r0, r1
 8000e26:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e2a:	2afd      	cmp	r2, #253	; 0xfd
 8000e2c:	d81d      	bhi.n	8000e6a <__aeabi_fmul+0x92>
 8000e2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e36:	bf08      	it	eq
 8000e38:	f020 0001 	biceq.w	r0, r0, #1
 8000e3c:	4770      	bx	lr
 8000e3e:	f090 0f00 	teq	r0, #0
 8000e42:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e46:	bf08      	it	eq
 8000e48:	0249      	lsleq	r1, r1, #9
 8000e4a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e4e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e52:	3a7f      	subs	r2, #127	; 0x7f
 8000e54:	bfc2      	ittt	gt
 8000e56:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e5a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e5e:	4770      	bxgt	lr
 8000e60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e64:	f04f 0300 	mov.w	r3, #0
 8000e68:	3a01      	subs	r2, #1
 8000e6a:	dc5d      	bgt.n	8000f28 <__aeabi_fmul+0x150>
 8000e6c:	f112 0f19 	cmn.w	r2, #25
 8000e70:	bfdc      	itt	le
 8000e72:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e76:	4770      	bxle	lr
 8000e78:	f1c2 0200 	rsb	r2, r2, #0
 8000e7c:	0041      	lsls	r1, r0, #1
 8000e7e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e82:	f1c2 0220 	rsb	r2, r2, #32
 8000e86:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e8a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e8e:	f140 0000 	adc.w	r0, r0, #0
 8000e92:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e96:	bf08      	it	eq
 8000e98:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e9c:	4770      	bx	lr
 8000e9e:	f092 0f00 	teq	r2, #0
 8000ea2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ea6:	bf02      	ittt	eq
 8000ea8:	0040      	lsleq	r0, r0, #1
 8000eaa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000eae:	3a01      	subeq	r2, #1
 8000eb0:	d0f9      	beq.n	8000ea6 <__aeabi_fmul+0xce>
 8000eb2:	ea40 000c 	orr.w	r0, r0, ip
 8000eb6:	f093 0f00 	teq	r3, #0
 8000eba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ebe:	bf02      	ittt	eq
 8000ec0:	0049      	lsleq	r1, r1, #1
 8000ec2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ec6:	3b01      	subeq	r3, #1
 8000ec8:	d0f9      	beq.n	8000ebe <__aeabi_fmul+0xe6>
 8000eca:	ea41 010c 	orr.w	r1, r1, ip
 8000ece:	e78f      	b.n	8000df0 <__aeabi_fmul+0x18>
 8000ed0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ed4:	ea92 0f0c 	teq	r2, ip
 8000ed8:	bf18      	it	ne
 8000eda:	ea93 0f0c 	teqne	r3, ip
 8000ede:	d00a      	beq.n	8000ef6 <__aeabi_fmul+0x11e>
 8000ee0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ee4:	bf18      	it	ne
 8000ee6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000eea:	d1d8      	bne.n	8000e9e <__aeabi_fmul+0xc6>
 8000eec:	ea80 0001 	eor.w	r0, r0, r1
 8000ef0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ef4:	4770      	bx	lr
 8000ef6:	f090 0f00 	teq	r0, #0
 8000efa:	bf17      	itett	ne
 8000efc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f00:	4608      	moveq	r0, r1
 8000f02:	f091 0f00 	teqne	r1, #0
 8000f06:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f0a:	d014      	beq.n	8000f36 <__aeabi_fmul+0x15e>
 8000f0c:	ea92 0f0c 	teq	r2, ip
 8000f10:	d101      	bne.n	8000f16 <__aeabi_fmul+0x13e>
 8000f12:	0242      	lsls	r2, r0, #9
 8000f14:	d10f      	bne.n	8000f36 <__aeabi_fmul+0x15e>
 8000f16:	ea93 0f0c 	teq	r3, ip
 8000f1a:	d103      	bne.n	8000f24 <__aeabi_fmul+0x14c>
 8000f1c:	024b      	lsls	r3, r1, #9
 8000f1e:	bf18      	it	ne
 8000f20:	4608      	movne	r0, r1
 8000f22:	d108      	bne.n	8000f36 <__aeabi_fmul+0x15e>
 8000f24:	ea80 0001 	eor.w	r0, r0, r1
 8000f28:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f34:	4770      	bx	lr
 8000f36:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f3a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f3e:	4770      	bx	lr

08000f40 <__aeabi_fdiv>:
 8000f40:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f44:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f48:	bf1e      	ittt	ne
 8000f4a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f4e:	ea92 0f0c 	teqne	r2, ip
 8000f52:	ea93 0f0c 	teqne	r3, ip
 8000f56:	d069      	beq.n	800102c <__aeabi_fdiv+0xec>
 8000f58:	eba2 0203 	sub.w	r2, r2, r3
 8000f5c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f60:	0249      	lsls	r1, r1, #9
 8000f62:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f66:	d037      	beq.n	8000fd8 <__aeabi_fdiv+0x98>
 8000f68:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f6c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f70:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f74:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f78:	428b      	cmp	r3, r1
 8000f7a:	bf38      	it	cc
 8000f7c:	005b      	lslcc	r3, r3, #1
 8000f7e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f82:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f86:	428b      	cmp	r3, r1
 8000f88:	bf24      	itt	cs
 8000f8a:	1a5b      	subcs	r3, r3, r1
 8000f8c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f90:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f94:	bf24      	itt	cs
 8000f96:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f9a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f9e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000fa2:	bf24      	itt	cs
 8000fa4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fa8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fac:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fb0:	bf24      	itt	cs
 8000fb2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fb6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000fba:	011b      	lsls	r3, r3, #4
 8000fbc:	bf18      	it	ne
 8000fbe:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fc2:	d1e0      	bne.n	8000f86 <__aeabi_fdiv+0x46>
 8000fc4:	2afd      	cmp	r2, #253	; 0xfd
 8000fc6:	f63f af50 	bhi.w	8000e6a <__aeabi_fmul+0x92>
 8000fca:	428b      	cmp	r3, r1
 8000fcc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fd0:	bf08      	it	eq
 8000fd2:	f020 0001 	biceq.w	r0, r0, #1
 8000fd6:	4770      	bx	lr
 8000fd8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fdc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fe0:	327f      	adds	r2, #127	; 0x7f
 8000fe2:	bfc2      	ittt	gt
 8000fe4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fe8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fec:	4770      	bxgt	lr
 8000fee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ff2:	f04f 0300 	mov.w	r3, #0
 8000ff6:	3a01      	subs	r2, #1
 8000ff8:	e737      	b.n	8000e6a <__aeabi_fmul+0x92>
 8000ffa:	f092 0f00 	teq	r2, #0
 8000ffe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001002:	bf02      	ittt	eq
 8001004:	0040      	lsleq	r0, r0, #1
 8001006:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800100a:	3a01      	subeq	r2, #1
 800100c:	d0f9      	beq.n	8001002 <__aeabi_fdiv+0xc2>
 800100e:	ea40 000c 	orr.w	r0, r0, ip
 8001012:	f093 0f00 	teq	r3, #0
 8001016:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800101a:	bf02      	ittt	eq
 800101c:	0049      	lsleq	r1, r1, #1
 800101e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001022:	3b01      	subeq	r3, #1
 8001024:	d0f9      	beq.n	800101a <__aeabi_fdiv+0xda>
 8001026:	ea41 010c 	orr.w	r1, r1, ip
 800102a:	e795      	b.n	8000f58 <__aeabi_fdiv+0x18>
 800102c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001030:	ea92 0f0c 	teq	r2, ip
 8001034:	d108      	bne.n	8001048 <__aeabi_fdiv+0x108>
 8001036:	0242      	lsls	r2, r0, #9
 8001038:	f47f af7d 	bne.w	8000f36 <__aeabi_fmul+0x15e>
 800103c:	ea93 0f0c 	teq	r3, ip
 8001040:	f47f af70 	bne.w	8000f24 <__aeabi_fmul+0x14c>
 8001044:	4608      	mov	r0, r1
 8001046:	e776      	b.n	8000f36 <__aeabi_fmul+0x15e>
 8001048:	ea93 0f0c 	teq	r3, ip
 800104c:	d104      	bne.n	8001058 <__aeabi_fdiv+0x118>
 800104e:	024b      	lsls	r3, r1, #9
 8001050:	f43f af4c 	beq.w	8000eec <__aeabi_fmul+0x114>
 8001054:	4608      	mov	r0, r1
 8001056:	e76e      	b.n	8000f36 <__aeabi_fmul+0x15e>
 8001058:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800105c:	bf18      	it	ne
 800105e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001062:	d1ca      	bne.n	8000ffa <__aeabi_fdiv+0xba>
 8001064:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001068:	f47f af5c 	bne.w	8000f24 <__aeabi_fmul+0x14c>
 800106c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001070:	f47f af3c 	bne.w	8000eec <__aeabi_fmul+0x114>
 8001074:	e75f      	b.n	8000f36 <__aeabi_fmul+0x15e>
 8001076:	bf00      	nop

08001078 <__gesf2>:
 8001078:	f04f 3cff 	mov.w	ip, #4294967295
 800107c:	e006      	b.n	800108c <__cmpsf2+0x4>
 800107e:	bf00      	nop

08001080 <__lesf2>:
 8001080:	f04f 0c01 	mov.w	ip, #1
 8001084:	e002      	b.n	800108c <__cmpsf2+0x4>
 8001086:	bf00      	nop

08001088 <__cmpsf2>:
 8001088:	f04f 0c01 	mov.w	ip, #1
 800108c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001090:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001094:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001098:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800109c:	bf18      	it	ne
 800109e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010a2:	d011      	beq.n	80010c8 <__cmpsf2+0x40>
 80010a4:	b001      	add	sp, #4
 80010a6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010aa:	bf18      	it	ne
 80010ac:	ea90 0f01 	teqne	r0, r1
 80010b0:	bf58      	it	pl
 80010b2:	ebb2 0003 	subspl.w	r0, r2, r3
 80010b6:	bf88      	it	hi
 80010b8:	17c8      	asrhi	r0, r1, #31
 80010ba:	bf38      	it	cc
 80010bc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010c0:	bf18      	it	ne
 80010c2:	f040 0001 	orrne.w	r0, r0, #1
 80010c6:	4770      	bx	lr
 80010c8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010cc:	d102      	bne.n	80010d4 <__cmpsf2+0x4c>
 80010ce:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010d2:	d105      	bne.n	80010e0 <__cmpsf2+0x58>
 80010d4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010d8:	d1e4      	bne.n	80010a4 <__cmpsf2+0x1c>
 80010da:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010de:	d0e1      	beq.n	80010a4 <__cmpsf2+0x1c>
 80010e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop

080010e8 <__aeabi_cfrcmple>:
 80010e8:	4684      	mov	ip, r0
 80010ea:	4608      	mov	r0, r1
 80010ec:	4661      	mov	r1, ip
 80010ee:	e7ff      	b.n	80010f0 <__aeabi_cfcmpeq>

080010f0 <__aeabi_cfcmpeq>:
 80010f0:	b50f      	push	{r0, r1, r2, r3, lr}
 80010f2:	f7ff ffc9 	bl	8001088 <__cmpsf2>
 80010f6:	2800      	cmp	r0, #0
 80010f8:	bf48      	it	mi
 80010fa:	f110 0f00 	cmnmi.w	r0, #0
 80010fe:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001100 <__aeabi_fcmpeq>:
 8001100:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001104:	f7ff fff4 	bl	80010f0 <__aeabi_cfcmpeq>
 8001108:	bf0c      	ite	eq
 800110a:	2001      	moveq	r0, #1
 800110c:	2000      	movne	r0, #0
 800110e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001112:	bf00      	nop

08001114 <__aeabi_fcmplt>:
 8001114:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001118:	f7ff ffea 	bl	80010f0 <__aeabi_cfcmpeq>
 800111c:	bf34      	ite	cc
 800111e:	2001      	movcc	r0, #1
 8001120:	2000      	movcs	r0, #0
 8001122:	f85d fb08 	ldr.w	pc, [sp], #8
 8001126:	bf00      	nop

08001128 <__aeabi_fcmple>:
 8001128:	f84d ed08 	str.w	lr, [sp, #-8]!
 800112c:	f7ff ffe0 	bl	80010f0 <__aeabi_cfcmpeq>
 8001130:	bf94      	ite	ls
 8001132:	2001      	movls	r0, #1
 8001134:	2000      	movhi	r0, #0
 8001136:	f85d fb08 	ldr.w	pc, [sp], #8
 800113a:	bf00      	nop

0800113c <__aeabi_fcmpge>:
 800113c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001140:	f7ff ffd2 	bl	80010e8 <__aeabi_cfrcmple>
 8001144:	bf94      	ite	ls
 8001146:	2001      	movls	r0, #1
 8001148:	2000      	movhi	r0, #0
 800114a:	f85d fb08 	ldr.w	pc, [sp], #8
 800114e:	bf00      	nop

08001150 <__aeabi_fcmpgt>:
 8001150:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001154:	f7ff ffc8 	bl	80010e8 <__aeabi_cfrcmple>
 8001158:	bf34      	ite	cc
 800115a:	2001      	movcc	r0, #1
 800115c:	2000      	movcs	r0, #0
 800115e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001162:	bf00      	nop

08001164 <__aeabi_fcmpun>:
 8001164:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001168:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800116c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001170:	d102      	bne.n	8001178 <__aeabi_fcmpun+0x14>
 8001172:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001176:	d108      	bne.n	800118a <__aeabi_fcmpun+0x26>
 8001178:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800117c:	d102      	bne.n	8001184 <__aeabi_fcmpun+0x20>
 800117e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001182:	d102      	bne.n	800118a <__aeabi_fcmpun+0x26>
 8001184:	f04f 0000 	mov.w	r0, #0
 8001188:	4770      	bx	lr
 800118a:	f04f 0001 	mov.w	r0, #1
 800118e:	4770      	bx	lr

08001190 <__aeabi_f2iz>:
 8001190:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001194:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001198:	d30f      	bcc.n	80011ba <__aeabi_f2iz+0x2a>
 800119a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800119e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011a2:	d90d      	bls.n	80011c0 <__aeabi_f2iz+0x30>
 80011a4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011ac:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80011b0:	fa23 f002 	lsr.w	r0, r3, r2
 80011b4:	bf18      	it	ne
 80011b6:	4240      	negne	r0, r0
 80011b8:	4770      	bx	lr
 80011ba:	f04f 0000 	mov.w	r0, #0
 80011be:	4770      	bx	lr
 80011c0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011c4:	d101      	bne.n	80011ca <__aeabi_f2iz+0x3a>
 80011c6:	0242      	lsls	r2, r0, #9
 80011c8:	d105      	bne.n	80011d6 <__aeabi_f2iz+0x46>
 80011ca:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80011ce:	bf08      	it	eq
 80011d0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80011d4:	4770      	bx	lr
 80011d6:	f04f 0000 	mov.w	r0, #0
 80011da:	4770      	bx	lr

080011dc <__aeabi_uldivmod>:
 80011dc:	b953      	cbnz	r3, 80011f4 <__aeabi_uldivmod+0x18>
 80011de:	b94a      	cbnz	r2, 80011f4 <__aeabi_uldivmod+0x18>
 80011e0:	2900      	cmp	r1, #0
 80011e2:	bf08      	it	eq
 80011e4:	2800      	cmpeq	r0, #0
 80011e6:	bf1c      	itt	ne
 80011e8:	f04f 31ff 	movne.w	r1, #4294967295
 80011ec:	f04f 30ff 	movne.w	r0, #4294967295
 80011f0:	f000 b9ac 	b.w	800154c <__aeabi_idiv0>
 80011f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80011f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011fc:	f000 f83e 	bl	800127c <__udivmoddi4>
 8001200:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001204:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001208:	b004      	add	sp, #16
 800120a:	4770      	bx	lr

0800120c <__aeabi_d2lz>:
 800120c:	b538      	push	{r3, r4, r5, lr}
 800120e:	4605      	mov	r5, r0
 8001210:	460c      	mov	r4, r1
 8001212:	4628      	mov	r0, r5
 8001214:	4621      	mov	r1, r4
 8001216:	2200      	movs	r2, #0
 8001218:	2300      	movs	r3, #0
 800121a:	f7ff fc37 	bl	8000a8c <__aeabi_dcmplt>
 800121e:	b928      	cbnz	r0, 800122c <__aeabi_d2lz+0x20>
 8001220:	4628      	mov	r0, r5
 8001222:	4621      	mov	r1, r4
 8001224:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001228:	f000 b80a 	b.w	8001240 <__aeabi_d2ulz>
 800122c:	4628      	mov	r0, r5
 800122e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001232:	f000 f805 	bl	8001240 <__aeabi_d2ulz>
 8001236:	4240      	negs	r0, r0
 8001238:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800123c:	bd38      	pop	{r3, r4, r5, pc}
 800123e:	bf00      	nop

08001240 <__aeabi_d2ulz>:
 8001240:	b5d0      	push	{r4, r6, r7, lr}
 8001242:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <__aeabi_d2ulz+0x34>)
 8001244:	2200      	movs	r2, #0
 8001246:	4606      	mov	r6, r0
 8001248:	460f      	mov	r7, r1
 800124a:	f7ff f9ad 	bl	80005a8 <__aeabi_dmul>
 800124e:	f7ff fc45 	bl	8000adc <__aeabi_d2uiz>
 8001252:	4604      	mov	r4, r0
 8001254:	f7ff f92e 	bl	80004b4 <__aeabi_ui2d>
 8001258:	4b07      	ldr	r3, [pc, #28]	; (8001278 <__aeabi_d2ulz+0x38>)
 800125a:	2200      	movs	r2, #0
 800125c:	f7ff f9a4 	bl	80005a8 <__aeabi_dmul>
 8001260:	4602      	mov	r2, r0
 8001262:	460b      	mov	r3, r1
 8001264:	4630      	mov	r0, r6
 8001266:	4639      	mov	r1, r7
 8001268:	f7fe ffe6 	bl	8000238 <__aeabi_dsub>
 800126c:	f7ff fc36 	bl	8000adc <__aeabi_d2uiz>
 8001270:	4621      	mov	r1, r4
 8001272:	bdd0      	pop	{r4, r6, r7, pc}
 8001274:	3df00000 	.word	0x3df00000
 8001278:	41f00000 	.word	0x41f00000

0800127c <__udivmoddi4>:
 800127c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001280:	9e08      	ldr	r6, [sp, #32]
 8001282:	460d      	mov	r5, r1
 8001284:	4604      	mov	r4, r0
 8001286:	4688      	mov	r8, r1
 8001288:	2b00      	cmp	r3, #0
 800128a:	d14d      	bne.n	8001328 <__udivmoddi4+0xac>
 800128c:	428a      	cmp	r2, r1
 800128e:	4694      	mov	ip, r2
 8001290:	d968      	bls.n	8001364 <__udivmoddi4+0xe8>
 8001292:	fab2 f282 	clz	r2, r2
 8001296:	b152      	cbz	r2, 80012ae <__udivmoddi4+0x32>
 8001298:	fa01 f302 	lsl.w	r3, r1, r2
 800129c:	f1c2 0120 	rsb	r1, r2, #32
 80012a0:	fa20 f101 	lsr.w	r1, r0, r1
 80012a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80012a8:	ea41 0803 	orr.w	r8, r1, r3
 80012ac:	4094      	lsls	r4, r2
 80012ae:	ea4f 451c 	mov.w	r5, ip, lsr #16
 80012b2:	0c21      	lsrs	r1, r4, #16
 80012b4:	fbb8 fef5 	udiv	lr, r8, r5
 80012b8:	fa1f f78c 	uxth.w	r7, ip
 80012bc:	fb05 831e 	mls	r3, r5, lr, r8
 80012c0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80012c4:	fb0e f107 	mul.w	r1, lr, r7
 80012c8:	4299      	cmp	r1, r3
 80012ca:	d90b      	bls.n	80012e4 <__udivmoddi4+0x68>
 80012cc:	eb1c 0303 	adds.w	r3, ip, r3
 80012d0:	f10e 30ff 	add.w	r0, lr, #4294967295
 80012d4:	f080 811e 	bcs.w	8001514 <__udivmoddi4+0x298>
 80012d8:	4299      	cmp	r1, r3
 80012da:	f240 811b 	bls.w	8001514 <__udivmoddi4+0x298>
 80012de:	f1ae 0e02 	sub.w	lr, lr, #2
 80012e2:	4463      	add	r3, ip
 80012e4:	1a5b      	subs	r3, r3, r1
 80012e6:	b2a4      	uxth	r4, r4
 80012e8:	fbb3 f0f5 	udiv	r0, r3, r5
 80012ec:	fb05 3310 	mls	r3, r5, r0, r3
 80012f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80012f4:	fb00 f707 	mul.w	r7, r0, r7
 80012f8:	42a7      	cmp	r7, r4
 80012fa:	d90a      	bls.n	8001312 <__udivmoddi4+0x96>
 80012fc:	eb1c 0404 	adds.w	r4, ip, r4
 8001300:	f100 33ff 	add.w	r3, r0, #4294967295
 8001304:	f080 8108 	bcs.w	8001518 <__udivmoddi4+0x29c>
 8001308:	42a7      	cmp	r7, r4
 800130a:	f240 8105 	bls.w	8001518 <__udivmoddi4+0x29c>
 800130e:	4464      	add	r4, ip
 8001310:	3802      	subs	r0, #2
 8001312:	1be4      	subs	r4, r4, r7
 8001314:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8001318:	2100      	movs	r1, #0
 800131a:	b11e      	cbz	r6, 8001324 <__udivmoddi4+0xa8>
 800131c:	40d4      	lsrs	r4, r2
 800131e:	2300      	movs	r3, #0
 8001320:	e9c6 4300 	strd	r4, r3, [r6]
 8001324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001328:	428b      	cmp	r3, r1
 800132a:	d908      	bls.n	800133e <__udivmoddi4+0xc2>
 800132c:	2e00      	cmp	r6, #0
 800132e:	f000 80ee 	beq.w	800150e <__udivmoddi4+0x292>
 8001332:	2100      	movs	r1, #0
 8001334:	e9c6 0500 	strd	r0, r5, [r6]
 8001338:	4608      	mov	r0, r1
 800133a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800133e:	fab3 f183 	clz	r1, r3
 8001342:	2900      	cmp	r1, #0
 8001344:	d14a      	bne.n	80013dc <__udivmoddi4+0x160>
 8001346:	42ab      	cmp	r3, r5
 8001348:	d302      	bcc.n	8001350 <__udivmoddi4+0xd4>
 800134a:	4282      	cmp	r2, r0
 800134c:	f200 80f9 	bhi.w	8001542 <__udivmoddi4+0x2c6>
 8001350:	1a84      	subs	r4, r0, r2
 8001352:	eb65 0303 	sbc.w	r3, r5, r3
 8001356:	2001      	movs	r0, #1
 8001358:	4698      	mov	r8, r3
 800135a:	2e00      	cmp	r6, #0
 800135c:	d0e2      	beq.n	8001324 <__udivmoddi4+0xa8>
 800135e:	e9c6 4800 	strd	r4, r8, [r6]
 8001362:	e7df      	b.n	8001324 <__udivmoddi4+0xa8>
 8001364:	b902      	cbnz	r2, 8001368 <__udivmoddi4+0xec>
 8001366:	deff      	udf	#255	; 0xff
 8001368:	fab2 f282 	clz	r2, r2
 800136c:	2a00      	cmp	r2, #0
 800136e:	f040 8091 	bne.w	8001494 <__udivmoddi4+0x218>
 8001372:	eba1 050c 	sub.w	r5, r1, ip
 8001376:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800137a:	fa1f fe8c 	uxth.w	lr, ip
 800137e:	2101      	movs	r1, #1
 8001380:	fbb5 f3f7 	udiv	r3, r5, r7
 8001384:	fb07 5013 	mls	r0, r7, r3, r5
 8001388:	0c25      	lsrs	r5, r4, #16
 800138a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800138e:	fb0e f003 	mul.w	r0, lr, r3
 8001392:	42a8      	cmp	r0, r5
 8001394:	d908      	bls.n	80013a8 <__udivmoddi4+0x12c>
 8001396:	eb1c 0505 	adds.w	r5, ip, r5
 800139a:	f103 38ff 	add.w	r8, r3, #4294967295
 800139e:	d202      	bcs.n	80013a6 <__udivmoddi4+0x12a>
 80013a0:	42a8      	cmp	r0, r5
 80013a2:	f200 80cb 	bhi.w	800153c <__udivmoddi4+0x2c0>
 80013a6:	4643      	mov	r3, r8
 80013a8:	1a2d      	subs	r5, r5, r0
 80013aa:	b2a4      	uxth	r4, r4
 80013ac:	fbb5 f0f7 	udiv	r0, r5, r7
 80013b0:	fb07 5510 	mls	r5, r7, r0, r5
 80013b4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80013b8:	fb0e fe00 	mul.w	lr, lr, r0
 80013bc:	45a6      	cmp	lr, r4
 80013be:	d908      	bls.n	80013d2 <__udivmoddi4+0x156>
 80013c0:	eb1c 0404 	adds.w	r4, ip, r4
 80013c4:	f100 35ff 	add.w	r5, r0, #4294967295
 80013c8:	d202      	bcs.n	80013d0 <__udivmoddi4+0x154>
 80013ca:	45a6      	cmp	lr, r4
 80013cc:	f200 80bb 	bhi.w	8001546 <__udivmoddi4+0x2ca>
 80013d0:	4628      	mov	r0, r5
 80013d2:	eba4 040e 	sub.w	r4, r4, lr
 80013d6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80013da:	e79e      	b.n	800131a <__udivmoddi4+0x9e>
 80013dc:	f1c1 0720 	rsb	r7, r1, #32
 80013e0:	408b      	lsls	r3, r1
 80013e2:	fa22 fc07 	lsr.w	ip, r2, r7
 80013e6:	ea4c 0c03 	orr.w	ip, ip, r3
 80013ea:	fa20 f407 	lsr.w	r4, r0, r7
 80013ee:	fa05 f301 	lsl.w	r3, r5, r1
 80013f2:	431c      	orrs	r4, r3
 80013f4:	40fd      	lsrs	r5, r7
 80013f6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80013fa:	fa00 f301 	lsl.w	r3, r0, r1
 80013fe:	fbb5 f8f9 	udiv	r8, r5, r9
 8001402:	0c20      	lsrs	r0, r4, #16
 8001404:	fa1f fe8c 	uxth.w	lr, ip
 8001408:	fb09 5518 	mls	r5, r9, r8, r5
 800140c:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8001410:	fb08 f00e 	mul.w	r0, r8, lr
 8001414:	42a8      	cmp	r0, r5
 8001416:	fa02 f201 	lsl.w	r2, r2, r1
 800141a:	d90b      	bls.n	8001434 <__udivmoddi4+0x1b8>
 800141c:	eb1c 0505 	adds.w	r5, ip, r5
 8001420:	f108 3aff 	add.w	sl, r8, #4294967295
 8001424:	f080 8088 	bcs.w	8001538 <__udivmoddi4+0x2bc>
 8001428:	42a8      	cmp	r0, r5
 800142a:	f240 8085 	bls.w	8001538 <__udivmoddi4+0x2bc>
 800142e:	f1a8 0802 	sub.w	r8, r8, #2
 8001432:	4465      	add	r5, ip
 8001434:	1a2d      	subs	r5, r5, r0
 8001436:	b2a4      	uxth	r4, r4
 8001438:	fbb5 f0f9 	udiv	r0, r5, r9
 800143c:	fb09 5510 	mls	r5, r9, r0, r5
 8001440:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8001444:	fb00 fe0e 	mul.w	lr, r0, lr
 8001448:	45ae      	cmp	lr, r5
 800144a:	d908      	bls.n	800145e <__udivmoddi4+0x1e2>
 800144c:	eb1c 0505 	adds.w	r5, ip, r5
 8001450:	f100 34ff 	add.w	r4, r0, #4294967295
 8001454:	d26c      	bcs.n	8001530 <__udivmoddi4+0x2b4>
 8001456:	45ae      	cmp	lr, r5
 8001458:	d96a      	bls.n	8001530 <__udivmoddi4+0x2b4>
 800145a:	3802      	subs	r0, #2
 800145c:	4465      	add	r5, ip
 800145e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001462:	fba0 9402 	umull	r9, r4, r0, r2
 8001466:	eba5 050e 	sub.w	r5, r5, lr
 800146a:	42a5      	cmp	r5, r4
 800146c:	46c8      	mov	r8, r9
 800146e:	46a6      	mov	lr, r4
 8001470:	d356      	bcc.n	8001520 <__udivmoddi4+0x2a4>
 8001472:	d053      	beq.n	800151c <__udivmoddi4+0x2a0>
 8001474:	b15e      	cbz	r6, 800148e <__udivmoddi4+0x212>
 8001476:	ebb3 0208 	subs.w	r2, r3, r8
 800147a:	eb65 050e 	sbc.w	r5, r5, lr
 800147e:	fa05 f707 	lsl.w	r7, r5, r7
 8001482:	fa22 f301 	lsr.w	r3, r2, r1
 8001486:	40cd      	lsrs	r5, r1
 8001488:	431f      	orrs	r7, r3
 800148a:	e9c6 7500 	strd	r7, r5, [r6]
 800148e:	2100      	movs	r1, #0
 8001490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001494:	f1c2 0320 	rsb	r3, r2, #32
 8001498:	fa20 f103 	lsr.w	r1, r0, r3
 800149c:	fa0c fc02 	lsl.w	ip, ip, r2
 80014a0:	fa25 f303 	lsr.w	r3, r5, r3
 80014a4:	4095      	lsls	r5, r2
 80014a6:	430d      	orrs	r5, r1
 80014a8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80014ac:	fa1f fe8c 	uxth.w	lr, ip
 80014b0:	fbb3 f1f7 	udiv	r1, r3, r7
 80014b4:	fb07 3011 	mls	r0, r7, r1, r3
 80014b8:	0c2b      	lsrs	r3, r5, #16
 80014ba:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80014be:	fb01 f00e 	mul.w	r0, r1, lr
 80014c2:	4298      	cmp	r0, r3
 80014c4:	fa04 f402 	lsl.w	r4, r4, r2
 80014c8:	d908      	bls.n	80014dc <__udivmoddi4+0x260>
 80014ca:	eb1c 0303 	adds.w	r3, ip, r3
 80014ce:	f101 38ff 	add.w	r8, r1, #4294967295
 80014d2:	d22f      	bcs.n	8001534 <__udivmoddi4+0x2b8>
 80014d4:	4298      	cmp	r0, r3
 80014d6:	d92d      	bls.n	8001534 <__udivmoddi4+0x2b8>
 80014d8:	3902      	subs	r1, #2
 80014da:	4463      	add	r3, ip
 80014dc:	1a1b      	subs	r3, r3, r0
 80014de:	b2ad      	uxth	r5, r5
 80014e0:	fbb3 f0f7 	udiv	r0, r3, r7
 80014e4:	fb07 3310 	mls	r3, r7, r0, r3
 80014e8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80014ec:	fb00 f30e 	mul.w	r3, r0, lr
 80014f0:	42ab      	cmp	r3, r5
 80014f2:	d908      	bls.n	8001506 <__udivmoddi4+0x28a>
 80014f4:	eb1c 0505 	adds.w	r5, ip, r5
 80014f8:	f100 38ff 	add.w	r8, r0, #4294967295
 80014fc:	d216      	bcs.n	800152c <__udivmoddi4+0x2b0>
 80014fe:	42ab      	cmp	r3, r5
 8001500:	d914      	bls.n	800152c <__udivmoddi4+0x2b0>
 8001502:	3802      	subs	r0, #2
 8001504:	4465      	add	r5, ip
 8001506:	1aed      	subs	r5, r5, r3
 8001508:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800150c:	e738      	b.n	8001380 <__udivmoddi4+0x104>
 800150e:	4631      	mov	r1, r6
 8001510:	4630      	mov	r0, r6
 8001512:	e707      	b.n	8001324 <__udivmoddi4+0xa8>
 8001514:	4686      	mov	lr, r0
 8001516:	e6e5      	b.n	80012e4 <__udivmoddi4+0x68>
 8001518:	4618      	mov	r0, r3
 800151a:	e6fa      	b.n	8001312 <__udivmoddi4+0x96>
 800151c:	454b      	cmp	r3, r9
 800151e:	d2a9      	bcs.n	8001474 <__udivmoddi4+0x1f8>
 8001520:	ebb9 0802 	subs.w	r8, r9, r2
 8001524:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001528:	3801      	subs	r0, #1
 800152a:	e7a3      	b.n	8001474 <__udivmoddi4+0x1f8>
 800152c:	4640      	mov	r0, r8
 800152e:	e7ea      	b.n	8001506 <__udivmoddi4+0x28a>
 8001530:	4620      	mov	r0, r4
 8001532:	e794      	b.n	800145e <__udivmoddi4+0x1e2>
 8001534:	4641      	mov	r1, r8
 8001536:	e7d1      	b.n	80014dc <__udivmoddi4+0x260>
 8001538:	46d0      	mov	r8, sl
 800153a:	e77b      	b.n	8001434 <__udivmoddi4+0x1b8>
 800153c:	3b02      	subs	r3, #2
 800153e:	4465      	add	r5, ip
 8001540:	e732      	b.n	80013a8 <__udivmoddi4+0x12c>
 8001542:	4608      	mov	r0, r1
 8001544:	e709      	b.n	800135a <__udivmoddi4+0xde>
 8001546:	4464      	add	r4, ip
 8001548:	3802      	subs	r0, #2
 800154a:	e742      	b.n	80013d2 <__udivmoddi4+0x156>

0800154c <__aeabi_idiv0>:
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop

08001550 <_ZN11TimerObjectC1EmPFvvE>:

TimerObject::TimerObject(unsigned long int ms){
	Create(ms, NULL, false);
}

TimerObject::TimerObject(unsigned long int ms, CallBackType callback){
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	607a      	str	r2, [r7, #4]
	Create(ms, callback, false);
 800155c:	2300      	movs	r3, #0
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	68b9      	ldr	r1, [r7, #8]
 8001562:	68f8      	ldr	r0, [r7, #12]
 8001564:	f000 f805 	bl	8001572 <_ZN11TimerObject6CreateEmPFvvEb>
}
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	4618      	mov	r0, r3
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <_ZN11TimerObject6CreateEmPFvvEb>:

TimerObject::TimerObject(unsigned long int ms, CallBackType callback, bool isSingle){
	Create(ms, callback, isSingle);
}

void TimerObject::Create(unsigned long int ms, CallBackType callback, bool isSingle){
 8001572:	b580      	push	{r7, lr}
 8001574:	b084      	sub	sp, #16
 8001576:	af00      	add	r7, sp, #0
 8001578:	60f8      	str	r0, [r7, #12]
 800157a:	60b9      	str	r1, [r7, #8]
 800157c:	607a      	str	r2, [r7, #4]
 800157e:	70fb      	strb	r3, [r7, #3]
	setInterval(ms);
 8001580:	68b9      	ldr	r1, [r7, #8]
 8001582:	68f8      	ldr	r0, [r7, #12]
 8001584:	f000 f814 	bl	80015b0 <_ZN11TimerObject11setIntervalEm>
	setEnabled(false);
 8001588:	2100      	movs	r1, #0
 800158a:	68f8      	ldr	r0, [r7, #12]
 800158c:	f000 f81d 	bl	80015ca <_ZN11TimerObject10setEnabledEb>


	setSingleShot(isSingle);
 8001590:	78fb      	ldrb	r3, [r7, #3]
 8001592:	4619      	mov	r1, r3
 8001594:	68f8      	ldr	r0, [r7, #12]
 8001596:	f000 f826 	bl	80015e6 <_ZN11TimerObject13setSingleShotEb>

	setOnTimer(callback);
 800159a:	6879      	ldr	r1, [r7, #4]
 800159c:	68f8      	ldr	r0, [r7, #12]
 800159e:	f000 f830 	bl	8001602 <_ZN11TimerObject10setOnTimerEPFvvE>
	LastTime = 0;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	2200      	movs	r2, #0
 80015a6:	60da      	str	r2, [r3, #12]
}
 80015a8:	bf00      	nop
 80015aa:	3710      	adds	r7, #16
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <_ZN11TimerObject11setIntervalEm>:

void TimerObject::setInterval(unsigned long int ms){
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	6039      	str	r1, [r7, #0]
	msInterval = (ms > 0) ? ms : 0;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	683a      	ldr	r2, [r7, #0]
 80015be:	601a      	str	r2, [r3, #0]
}
 80015c0:	bf00      	nop
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bc80      	pop	{r7}
 80015c8:	4770      	bx	lr

080015ca <_ZN11TimerObject10setEnabledEb>:

void TimerObject::setEnabled(bool Enabled){
 80015ca:	b480      	push	{r7}
 80015cc:	b083      	sub	sp, #12
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
 80015d2:	460b      	mov	r3, r1
 80015d4:	70fb      	strb	r3, [r7, #3]
	blEnabled = Enabled;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	78fa      	ldrb	r2, [r7, #3]
 80015da:	711a      	strb	r2, [r3, #4]
}
 80015dc:	bf00      	nop
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bc80      	pop	{r7}
 80015e4:	4770      	bx	lr

080015e6 <_ZN11TimerObject13setSingleShotEb>:

void TimerObject::setSingleShot(bool isSingle){
 80015e6:	b480      	push	{r7}
 80015e8:	b083      	sub	sp, #12
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
 80015ee:	460b      	mov	r3, r1
 80015f0:	70fb      	strb	r3, [r7, #3]
	blSingleShot = isSingle;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	78fa      	ldrb	r2, [r7, #3]
 80015f6:	715a      	strb	r2, [r3, #5]
}
 80015f8:	bf00      	nop
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bc80      	pop	{r7}
 8001600:	4770      	bx	lr

08001602 <_ZN11TimerObject10setOnTimerEPFvvE>:

void TimerObject::setOnTimer(CallBackType callback){
 8001602:	b480      	push	{r7}
 8001604:	b083      	sub	sp, #12
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
 800160a:	6039      	str	r1, [r7, #0]
	onRun = callback;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	683a      	ldr	r2, [r7, #0]
 8001610:	609a      	str	r2, [r3, #8]
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	bc80      	pop	{r7}
 800161a:	4770      	bx	lr

0800161c <_ZN11TimerObject5StartEv>:

void TimerObject::Start(){
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
	LastTime = HAL_GetTick();
 8001624:	f004 fd92 	bl	800614c <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	60da      	str	r2, [r3, #12]
	setEnabled(true);
 800162e:	2101      	movs	r1, #1
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f7ff ffca 	bl	80015ca <_ZN11TimerObject10setEnabledEb>
}
 8001636:	bf00      	nop
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <_ZN11TimerObject4StopEv>:
void TimerObject::Resume(){
	LastTime = HAL_GetTick() - DiffTime;
	setEnabled(true);
}

void TimerObject::Stop(){
 800163e:	b580      	push	{r7, lr}
 8001640:	b082      	sub	sp, #8
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
	setEnabled(false);
 8001646:	2100      	movs	r1, #0
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f7ff ffbe 	bl	80015ca <_ZN11TimerObject10setEnabledEb>

}
 800164e:	bf00      	nop
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <_ZN11TimerObject6UpdateEv>:
	DiffTime = HAL_GetTick() - LastTime;
	setEnabled(false);

}

void TimerObject::Update(){
 8001656:	b580      	push	{r7, lr}
 8001658:	b082      	sub	sp, #8
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
	if(Tick())
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f000 f80a 	bl	8001678 <_ZN11TimerObject4TickEv>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d002      	beq.n	8001670 <_ZN11TimerObject6UpdateEv+0x1a>
		onRun();
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	4798      	blx	r3
}
 8001670:	bf00      	nop
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <_ZN11TimerObject4TickEv>:

bool TimerObject::Tick(){
 8001678:	b590      	push	{r4, r7, lr}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
	if(!blEnabled)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	791b      	ldrb	r3, [r3, #4]
 8001684:	f083 0301 	eor.w	r3, r3, #1
 8001688:	b2db      	uxtb	r3, r3
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <_ZN11TimerObject4TickEv+0x1a>
		return false;
 800168e:	2300      	movs	r3, #0
 8001690:	e030      	b.n	80016f4 <_ZN11TimerObject4TickEv+0x7c>
	if(LastTime > HAL_GetTick()*2)//millis restarted
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	68dc      	ldr	r4, [r3, #12]
 8001696:	f004 fd59 	bl	800614c <HAL_GetTick>
 800169a:	4603      	mov	r3, r0
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	429c      	cmp	r4, r3
 80016a0:	bf8c      	ite	hi
 80016a2:	2301      	movhi	r3, #1
 80016a4:	2300      	movls	r3, #0
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d002      	beq.n	80016b2 <_ZN11TimerObject4TickEv+0x3a>
		LastTime = 0;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	60da      	str	r2, [r3, #12]
	if ((unsigned long int)(HAL_GetTick() - LastTime) >= msInterval) {
 80016b2:	f004 fd4b 	bl	800614c <HAL_GetTick>
 80016b6:	4602      	mov	r2, r0
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	1ad2      	subs	r2, r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	bf2c      	ite	cs
 80016c6:	2301      	movcs	r3, #1
 80016c8:	2300      	movcc	r3, #0
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d010      	beq.n	80016f2 <_ZN11TimerObject4TickEv+0x7a>
		LastTime = HAL_GetTick();
 80016d0:	f004 fd3c 	bl	800614c <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	60da      	str	r2, [r3, #12]
		if(isSingleShot())
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f000 f80e 	bl	80016fc <_ZN11TimerObject12isSingleShotEv>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <_ZN11TimerObject4TickEv+0x76>
			setEnabled(false);
 80016e6:	2100      	movs	r1, #0
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f7ff ff6e 	bl	80015ca <_ZN11TimerObject10setEnabledEb>
	    return true;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e000      	b.n	80016f4 <_ZN11TimerObject4TickEv+0x7c>
	}
	return false;
 80016f2:	2300      	movs	r3, #0
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd90      	pop	{r4, r7, pc}

080016fc <_ZN11TimerObject12isSingleShotEv>:

bool TimerObject::isEnabled(){
	return blEnabled;
}

bool TimerObject::isSingleShot(){
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
	return blSingleShot;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	795b      	ldrb	r3, [r3, #5]
}
 8001708:	4618      	mov	r0, r3
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	bc80      	pop	{r7}
 8001710:	4770      	bx	lr

08001712 <_ZSt5isnanf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr bool
  isnan(float __x)
  { return __builtin_isnan(__x); }
 8001712:	b590      	push	{r4, r7, lr}
 8001714:	b083      	sub	sp, #12
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
 800171a:	2301      	movs	r3, #1
 800171c:	461c      	mov	r4, r3
 800171e:	6879      	ldr	r1, [r7, #4]
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f7ff fd1f 	bl	8001164 <__aeabi_fcmpun>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d101      	bne.n	8001730 <_ZSt5isnanf+0x1e>
 800172c:	2300      	movs	r3, #0
 800172e:	461c      	mov	r4, r3
 8001730:	b2e3      	uxtb	r3, r4
 8001732:	2b00      	cmp	r3, #0
 8001734:	bf14      	ite	ne
 8001736:	2301      	movne	r3, #1
 8001738:	2300      	moveq	r3, #0
 800173a:	b2db      	uxtb	r3, r3
 800173c:	4618      	mov	r0, r3
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	bd90      	pop	{r4, r7, pc}

08001744 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f00b fc89 	bl	800d064 <roundf>
 8001752:	4603      	mov	r3, r0
 8001754:	4618      	mov	r0, r3
 8001756:	3708      	adds	r7, #8
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}

0800175c <_ZN7MacAddrC1Ev>:
public:
	int manufacturer;
	int id;

	MacAddr(int manufacturer_addr, int id_addr): manufacturer(manufacturer_addr), id(id_addr) {};
	MacAddr() : manufacturer(0), id(0) {};									//broadcast address
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	605a      	str	r2, [r3, #4]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4618      	mov	r0, r3
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	bc80      	pop	{r7}
 800177a:	4770      	bx	lr

0800177c <_ZN7MacAddrC1ERKS_>:
	MacAddr(const MacAddr &ma) : manufacturer(ma.manufacturer), id(ma.id) {};
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685a      	ldr	r2, [r3, #4]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4618      	mov	r0, r3
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	bc80      	pop	{r7}
 80017a0:	4770      	bx	lr

080017a2 <_ZN5FrameC1E7MacAddr>:
	/* Received stuff */
	int rssi = 0;

	int serialize(uint8_t*& buffer);

	Frame(MacAddr addr) : src(addr) { }
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b082      	sub	sp, #8
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
 80017aa:	6039      	str	r1, [r7, #0]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6839      	ldr	r1, [r7, #0]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff ffe3 	bl	800177c <_ZN7MacAddrC1ERKS_>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	3308      	adds	r3, #8
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff ffce 	bl	800175c <_ZN7MacAddrC1Ev>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2200      	movs	r2, #0
 80017c4:	611a      	str	r2, [r3, #16]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	751a      	strb	r2, [r3, #20]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	619a      	str	r2, [r3, #24]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	61da      	str	r2, [r3, #28]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	621a      	str	r2, [r3, #32]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	625a      	str	r2, [r3, #36]	; 0x24
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	629a      	str	r2, [r3, #40]	; 0x28
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	62da      	str	r2, [r3, #44]	; 0x2c
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2200      	movs	r2, #0
 80017f4:	631a      	str	r2, [r3, #48]	; 0x30
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4618      	mov	r0, r3
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <_ZN4FappC1Ev>:
};

class Fapp
{
public:
	Fapp() { }
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	4a04      	ldr	r2, [pc, #16]	; (800181c <_ZN4FappC1Ev+0x1c>)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4618      	mov	r0, r3
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	bc80      	pop	{r7}
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	080107d0 	.word	0x080107d0

08001820 <_ZN4FappD1Ev>:
	virtual ~Fapp() { }
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	4a04      	ldr	r2, [pc, #16]	; (800183c <_ZN4FappD1Ev+0x1c>)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4618      	mov	r0, r3
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	bc80      	pop	{r7}
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	080107d0 	.word	0x080107d0

08001840 <_ZN4FappD0Ev>:
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f7ff ffe9 	bl	8001820 <_ZN4FappD1Ev>
 800184e:	2104      	movs	r1, #4
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f00b fbd1 	bl	800cff8 <_ZdlPvj>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4618      	mov	r0, r3
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <_ZN3App20broadcast_successfulEi>:

	void set(float lat, float lon, float alt, float speed, float climb, float heading, float turnrate = NAN, float qneOffset = NAN);

	/* device -> air */
	bool is_broadcast_ready(int num_neighbors);
	void broadcast_successful(int type) { last_tx = HAL_GetTick(); }
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
 800186a:	f004 fc6f 	bl	800614c <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	62da      	str	r2, [r3, #44]	; 0x2c
 8001874:	bf00      	nop
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <_ZN3App12handle_ackedEbR7MacAddr>:

	/* air -> device */
	void handle_acked(bool ack, MacAddr &addr) { if(mySerialInt == NULL) return; mySerialInt->handle_acked(ack, addr); }
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	460b      	mov	r3, r1
 8001886:	607a      	str	r2, [r7, #4]
 8001888:	72fb      	strb	r3, [r7, #11]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188e:	2b00      	cmp	r3, #0
 8001890:	d007      	beq.n	80018a2 <_ZN3App12handle_ackedEbR7MacAddr+0x26>
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001896:	7af9      	ldrb	r1, [r7, #11]
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	4618      	mov	r0, r3
 800189c:	f003 fdae 	bl	80053fc <_ZN16Serial_Interface12handle_ackedEbR7MacAddr>
 80018a0:	e000      	b.n	80018a4 <_ZN3App12handle_ackedEbR7MacAddr+0x28>
 80018a2:	bf00      	nop
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <_ZN3App12handle_frameEP5Frame>:
	void handle_frame(Frame *frm) {	if(mySerialInt == NULL)	return; mySerialInt->handle_frame(frm);	}
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b082      	sub	sp, #8
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
 80018b2:	6039      	str	r1, [r7, #0]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d006      	beq.n	80018ca <_ZN3App12handle_frameEP5Frame+0x20>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c0:	6839      	ldr	r1, [r7, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f003 fdca 	bl	800545c <_ZN16Serial_Interface12handle_frameEP5Frame>
 80018c8:	e000      	b.n	80018cc <_ZN3App12handle_frameEP5Frame+0x22>
 80018ca:	bf00      	nop
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
	...

080018d4 <_ZN3App17serializeTrackingERPh>:
#include "constrain.h"

#include "app.h"

int App::serializeTracking(uint8_t*& buffer)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b098      	sub	sp, #96	; 0x60
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
	buffer = new uint8_t[APP_TYPE1_SIZE];
 80018de:	200d      	movs	r0, #13
 80018e0:	f00b fb9f 	bl	800d022 <_Znaj>
 80018e4:	4603      	mov	r3, r0
 80018e6:	461a      	mov	r2, r3
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	601a      	str	r2, [r3, #0]

	/* position */
	Frame::coord2payload_absolut(latitude, longitude, buffer);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6858      	ldr	r0, [r3, #4]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6899      	ldr	r1, [r3, #8]
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	461a      	mov	r2, r3
 80018fa:	f002 fa57 	bl	8003dac <_ZN5Frame21coord2payload_absolutEffPh>

	/* altitude set the lower 12bit */
	int alt = constrain(altitude, 0, 8190);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	330c      	adds	r3, #12
 8001902:	2200      	movs	r2, #0
 8001904:	60ba      	str	r2, [r7, #8]
 8001906:	f641 72fe 	movw	r2, #8190	; 0x1ffe
 800190a:	60fa      	str	r2, [r7, #12]
 800190c:	f107 020c 	add.w	r2, r7, #12
 8001910:	f107 0108 	add.w	r1, r7, #8
 8001914:	4618      	mov	r0, r3
 8001916:	f000 fafb 	bl	8001f10 <_Z9constrainIiERKT_S2_S2_S2_>
 800191a:	4603      	mov	r3, r0
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	65fb      	str	r3, [r7, #92]	; 0x5c
	if(alt > 2047)
 8001920:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001922:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001926:	db0f      	blt.n	8001948 <_ZN3App17serializeTrackingERPh+0x74>
		((uint16_t*)buffer)[3] = ((alt+2)/4) | (1<<11);				//set scale factor
 8001928:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800192a:	3302      	adds	r3, #2
 800192c:	2b00      	cmp	r3, #0
 800192e:	da00      	bge.n	8001932 <_ZN3App17serializeTrackingERPh+0x5e>
 8001930:	3303      	adds	r3, #3
 8001932:	109b      	asrs	r3, r3, #2
 8001934:	b21b      	sxth	r3, r3
 8001936:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800193a:	b21a      	sxth	r2, r3
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	3306      	adds	r3, #6
 8001942:	b292      	uxth	r2, r2
 8001944:	801a      	strh	r2, [r3, #0]
 8001946:	e005      	b.n	8001954 <_ZN3App17serializeTrackingERPh+0x80>
	else
		((uint16_t*)buffer)[3] = alt;
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	3306      	adds	r3, #6
 800194e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001950:	b292      	uxth	r2, r2
 8001952:	801a      	strh	r2, [r3, #0]
	/* online tracking */
	((uint16_t*)buffer)[3] |= !!doOnlineTracking<<15;
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	3306      	adds	r3, #6
 800195a:	881b      	ldrh	r3, [r3, #0]
 800195c:	b21a      	sxth	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001964:	03db      	lsls	r3, r3, #15
 8001966:	b21b      	sxth	r3, r3
 8001968:	4313      	orrs	r3, r2
 800196a:	b21a      	sxth	r2, r3
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	3306      	adds	r3, #6
 8001972:	b292      	uxth	r2, r2
 8001974:	801a      	strh	r2, [r3, #0]
	/* aircraft type */
	((uint16_t*)buffer)[3] |= (aircraft&0x7)<<12;
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	3306      	adds	r3, #6
 800197c:	881b      	ldrh	r3, [r3, #0]
 800197e:	b21a      	sxth	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001986:	031b      	lsls	r3, r3, #12
 8001988:	b21b      	sxth	r3, r3
 800198a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800198e:	b21b      	sxth	r3, r3
 8001990:	4313      	orrs	r3, r2
 8001992:	b21a      	sxth	r2, r3
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	3306      	adds	r3, #6
 800199a:	b292      	uxth	r2, r2
 800199c:	801a      	strh	r2, [r3, #0]

	/* Speed */
	int speed2 = constrain((int)std::round(speed*2.0f), 0, 635);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	691b      	ldr	r3, [r3, #16]
 80019a2:	4619      	mov	r1, r3
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff f90f 	bl	8000bc8 <__addsf3>
 80019aa:	4603      	mov	r3, r0
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff fec9 	bl	8001744 <_ZSt5roundf>
 80019b2:	4603      	mov	r3, r0
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff fbeb 	bl	8001190 <__aeabi_f2iz>
 80019ba:	4603      	mov	r3, r0
 80019bc:	613b      	str	r3, [r7, #16]
 80019be:	2300      	movs	r3, #0
 80019c0:	617b      	str	r3, [r7, #20]
 80019c2:	f240 237b 	movw	r3, #635	; 0x27b
 80019c6:	61bb      	str	r3, [r7, #24]
 80019c8:	f107 0218 	add.w	r2, r7, #24
 80019cc:	f107 0114 	add.w	r1, r7, #20
 80019d0:	f107 0310 	add.w	r3, r7, #16
 80019d4:	4618      	mov	r0, r3
 80019d6:	f000 fa9b 	bl	8001f10 <_Z9constrainIiERKT_S2_S2_S2_>
 80019da:	4603      	mov	r3, r0
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	65bb      	str	r3, [r7, #88]	; 0x58
	if(speed2 > 127)
 80019e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80019e2:	2b7f      	cmp	r3, #127	; 0x7f
 80019e4:	dd11      	ble.n	8001a0a <_ZN3App17serializeTrackingERPh+0x136>
		buffer[8] = ((speed2+2)/5) | (1<<7);					//set scale factor
 80019e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80019e8:	3302      	adds	r3, #2
 80019ea:	4a99      	ldr	r2, [pc, #612]	; (8001c50 <_ZN3App17serializeTrackingERPh+0x37c>)
 80019ec:	fb82 1203 	smull	r1, r2, r2, r3
 80019f0:	1052      	asrs	r2, r2, #1
 80019f2:	17db      	asrs	r3, r3, #31
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	b25b      	sxtb	r3, r3
 80019f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80019fc:	b25a      	sxtb	r2, r3
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	3308      	adds	r3, #8
 8001a04:	b2d2      	uxtb	r2, r2
 8001a06:	701a      	strb	r2, [r3, #0]
 8001a08:	e005      	b.n	8001a16 <_ZN3App17serializeTrackingERPh+0x142>
	else
		buffer[8] = speed2;
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	3308      	adds	r3, #8
 8001a10:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001a12:	b2d2      	uxtb	r2, r2
 8001a14:	701a      	strb	r2, [r3, #0]

	/* Climb */
	int climb10 = constrain((int)std::round(climb*10.0f), -315, 315);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	695b      	ldr	r3, [r3, #20]
 8001a1a:	498e      	ldr	r1, [pc, #568]	; (8001c54 <_ZN3App17serializeTrackingERPh+0x380>)
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff f9db 	bl	8000dd8 <__aeabi_fmul>
 8001a22:	4603      	mov	r3, r0
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff fe8d 	bl	8001744 <_ZSt5roundf>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff fbaf 	bl	8001190 <__aeabi_f2iz>
 8001a32:	4603      	mov	r3, r0
 8001a34:	61fb      	str	r3, [r7, #28]
 8001a36:	f46f 739d 	mvn.w	r3, #314	; 0x13a
 8001a3a:	623b      	str	r3, [r7, #32]
 8001a3c:	f240 133b 	movw	r3, #315	; 0x13b
 8001a40:	627b      	str	r3, [r7, #36]	; 0x24
 8001a42:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001a46:	f107 0120 	add.w	r1, r7, #32
 8001a4a:	f107 031c 	add.w	r3, r7, #28
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f000 fa5e 	bl	8001f10 <_Z9constrainIiERKT_S2_S2_S2_>
 8001a54:	4603      	mov	r3, r0
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	657b      	str	r3, [r7, #84]	; 0x54
	if(std::abs(climb10) > 63)
 8001a5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	bfb8      	it	lt
 8001a60:	425b      	neglt	r3, r3
 8001a62:	2b3f      	cmp	r3, #63	; 0x3f
 8001a64:	dd18      	ble.n	8001a98 <_ZN3App17serializeTrackingERPh+0x1c4>
		buffer[9] = ((climb10 + (climb10>=0?2:-2))/5) | (1<<7);			//set scale factor
 8001a66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	db01      	blt.n	8001a70 <_ZN3App17serializeTrackingERPh+0x19c>
 8001a6c:	2202      	movs	r2, #2
 8001a6e:	e001      	b.n	8001a74 <_ZN3App17serializeTrackingERPh+0x1a0>
 8001a70:	f06f 0201 	mvn.w	r2, #1
 8001a74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a76:	4413      	add	r3, r2
 8001a78:	4a75      	ldr	r2, [pc, #468]	; (8001c50 <_ZN3App17serializeTrackingERPh+0x37c>)
 8001a7a:	fb82 1203 	smull	r1, r2, r2, r3
 8001a7e:	1052      	asrs	r2, r2, #1
 8001a80:	17db      	asrs	r3, r3, #31
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	b25b      	sxtb	r3, r3
 8001a86:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a8a:	b25a      	sxtb	r2, r3
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	3309      	adds	r3, #9
 8001a92:	b2d2      	uxtb	r2, r2
 8001a94:	701a      	strb	r2, [r3, #0]
 8001a96:	e008      	b.n	8001aaa <_ZN3App17serializeTrackingERPh+0x1d6>
	else
		buffer[9] = climb10 & 0x7F;
 8001a98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a9a:	b2da      	uxtb	r2, r3
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	3309      	adds	r3, #9
 8001aa2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001aa6:	b2d2      	uxtb	r2, r2
 8001aa8:	701a      	strb	r2, [r3, #0]

	/* Heading */
	buffer[10] = constrain((int)std::round(heading*256.0f/360.0f), 0, 255);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff f990 	bl	8000dd8 <__aeabi_fmul>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	4967      	ldr	r1, [pc, #412]	; (8001c58 <_ZN3App17serializeTrackingERPh+0x384>)
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff fa3f 	bl	8000f40 <__aeabi_fdiv>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff fe3d 	bl	8001744 <_ZSt5roundf>
 8001aca:	4603      	mov	r3, r0
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff fb5f 	bl	8001190 <__aeabi_f2iz>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ada:	23ff      	movs	r3, #255	; 0xff
 8001adc:	633b      	str	r3, [r7, #48]	; 0x30
 8001ade:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001ae2:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001ae6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001aea:	4618      	mov	r0, r3
 8001aec:	f000 fa10 	bl	8001f10 <_Z9constrainIiERKT_S2_S2_S2_>
 8001af0:	4603      	mov	r3, r0
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	330a      	adds	r3, #10
 8001afa:	b2d2      	uxtb	r2, r2
 8001afc:	701a      	strb	r2, [r3, #0]

	/* no optional data */
	if(std::isnan(turnrate) && qneOffset == 0)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	69db      	ldr	r3, [r3, #28]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff fe05 	bl	8001712 <_ZSt5isnanf>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d005      	beq.n	8001b1a <_ZN3App17serializeTrackingERPh+0x246>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a1b      	ldr	r3, [r3, #32]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d101      	bne.n	8001b1a <_ZN3App17serializeTrackingERPh+0x246>
 8001b16:	2301      	movs	r3, #1
 8001b18:	e000      	b.n	8001b1c <_ZN3App17serializeTrackingERPh+0x248>
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <_ZN3App17serializeTrackingERPh+0x250>
		return APP_TYPE1_SIZE - 2;
 8001b20:	230b      	movs	r3, #11
 8001b22:	e091      	b.n	8001c48 <_ZN3App17serializeTrackingERPh+0x374>

	/* emulate turn rate in case only QNE is present */
	float tr = turnrate;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	69db      	ldr	r3, [r3, #28]
 8001b28:	653b      	str	r3, [r7, #80]	; 0x50
	if(std::isnan(tr))
 8001b2a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001b2c:	f7ff fdf1 	bl	8001712 <_ZSt5isnanf>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d002      	beq.n	8001b3c <_ZN3App17serializeTrackingERPh+0x268>
		tr = 0.0f;
 8001b36:	f04f 0300 	mov.w	r3, #0
 8001b3a:	653b      	str	r3, [r7, #80]	; 0x50

	int trOs = constrain((int)std::round(turnrate * 4.0f), -254, 254);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	69db      	ldr	r3, [r3, #28]
 8001b40:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff f947 	bl	8000dd8 <__aeabi_fmul>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff fdf9 	bl	8001744 <_ZSt5roundf>
 8001b52:	4603      	mov	r3, r0
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff fb1b 	bl	8001190 <__aeabi_f2iz>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	637b      	str	r3, [r7, #52]	; 0x34
 8001b5e:	f06f 03fd 	mvn.w	r3, #253	; 0xfd
 8001b62:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b64:	23fe      	movs	r3, #254	; 0xfe
 8001b66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b68:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001b6c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001b70:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b74:	4618      	mov	r0, r3
 8001b76:	f000 f9cb 	bl	8001f10 <_Z9constrainIiERKT_S2_S2_S2_>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if(std::abs(trOs) >= 63)
 8001b80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	bfb8      	it	lt
 8001b86:	425b      	neglt	r3, r3
 8001b88:	2b3e      	cmp	r3, #62	; 0x3e
 8001b8a:	dd16      	ble.n	8001bba <_ZN3App17serializeTrackingERPh+0x2e6>
		buffer[11] = ((trOs + (trOs>=0?2:-2))/4) | (1<<7);			//set scale factor
 8001b8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	db01      	blt.n	8001b96 <_ZN3App17serializeTrackingERPh+0x2c2>
 8001b92:	2202      	movs	r2, #2
 8001b94:	e001      	b.n	8001b9a <_ZN3App17serializeTrackingERPh+0x2c6>
 8001b96:	f06f 0201 	mvn.w	r2, #1
 8001b9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b9c:	4413      	add	r3, r2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	da00      	bge.n	8001ba4 <_ZN3App17serializeTrackingERPh+0x2d0>
 8001ba2:	3303      	adds	r3, #3
 8001ba4:	109b      	asrs	r3, r3, #2
 8001ba6:	b25b      	sxtb	r3, r3
 8001ba8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001bac:	b25a      	sxtb	r2, r3
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	330b      	adds	r3, #11
 8001bb4:	b2d2      	uxtb	r2, r2
 8001bb6:	701a      	strb	r2, [r3, #0]
 8001bb8:	e008      	b.n	8001bcc <_ZN3App17serializeTrackingERPh+0x2f8>
	else
		buffer[11] = trOs & 0x7f;
 8001bba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bbc:	b2da      	uxtb	r2, r3
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	330b      	adds	r3, #11
 8001bc4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001bc8:	b2d2      	uxtb	r2, r2
 8001bca:	701a      	strb	r2, [r3, #0]

	/* QNE offset */
	if(qneOffset != 0)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6a1b      	ldr	r3, [r3, #32]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d038      	beq.n	8001c46 <_ZN3App17serializeTrackingERPh+0x372>
	{

		int qneOs = constrain(qneOffset, -254, 254);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3320      	adds	r3, #32
 8001bd8:	f06f 02fd 	mvn.w	r2, #253	; 0xfd
 8001bdc:	643a      	str	r2, [r7, #64]	; 0x40
 8001bde:	22fe      	movs	r2, #254	; 0xfe
 8001be0:	647a      	str	r2, [r7, #68]	; 0x44
 8001be2:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8001be6:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001bea:	4618      	mov	r0, r3
 8001bec:	f000 f990 	bl	8001f10 <_Z9constrainIiERKT_S2_S2_S2_>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	64bb      	str	r3, [r7, #72]	; 0x48
		if(std::abs(qneOs) > 63)
 8001bf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	bfb8      	it	lt
 8001bfc:	425b      	neglt	r3, r3
 8001bfe:	2b3f      	cmp	r3, #63	; 0x3f
 8001c00:	dd16      	ble.n	8001c30 <_ZN3App17serializeTrackingERPh+0x35c>
			buffer[12] = ((qneOs + (qneOs>=0?2:-2))/4) | (1<<7);		//set scale factor
 8001c02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	db01      	blt.n	8001c0c <_ZN3App17serializeTrackingERPh+0x338>
 8001c08:	2202      	movs	r2, #2
 8001c0a:	e001      	b.n	8001c10 <_ZN3App17serializeTrackingERPh+0x33c>
 8001c0c:	f06f 0201 	mvn.w	r2, #1
 8001c10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c12:	4413      	add	r3, r2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	da00      	bge.n	8001c1a <_ZN3App17serializeTrackingERPh+0x346>
 8001c18:	3303      	adds	r3, #3
 8001c1a:	109b      	asrs	r3, r3, #2
 8001c1c:	b25b      	sxtb	r3, r3
 8001c1e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001c22:	b25a      	sxtb	r2, r3
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	330c      	adds	r3, #12
 8001c2a:	b2d2      	uxtb	r2, r2
 8001c2c:	701a      	strb	r2, [r3, #0]
 8001c2e:	e008      	b.n	8001c42 <_ZN3App17serializeTrackingERPh+0x36e>
		else
			buffer[12] = qneOs & 0x7f;
 8001c30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c32:	b2da      	uxtb	r2, r3
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	330c      	adds	r3, #12
 8001c3a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c3e:	b2d2      	uxtb	r2, r2
 8001c40:	701a      	strb	r2, [r3, #0]
		return APP_TYPE1_SIZE;
 8001c42:	230d      	movs	r3, #13
 8001c44:	e000      	b.n	8001c48 <_ZN3App17serializeTrackingERPh+0x374>
	}
	else
	{
		return APP_TYPE1_SIZE - 1;
 8001c46:	230c      	movs	r3, #12
	}
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3760      	adds	r7, #96	; 0x60
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	66666667 	.word	0x66666667
 8001c54:	41200000 	.word	0x41200000
 8001c58:	43b40000 	.word	0x43b40000

08001c5c <_ZN3App23serializeGroundTrackingERPh>:

int App::serializeGroundTracking(uint8_t*& buffer)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
	buffer = new uint8_t[APP_TYPE7_SIZE];
 8001c66:	2007      	movs	r0, #7
 8001c68:	f00b f9db 	bl	800d022 <_Znaj>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	461a      	mov	r2, r3
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	601a      	str	r2, [r3, #0]

	/* position */
	Frame::coord2payload_absolut(latitude, longitude, buffer);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6858      	ldr	r0, [r3, #4]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6899      	ldr	r1, [r3, #8]
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	461a      	mov	r2, r3
 8001c82:	f002 f893 	bl	8003dac <_ZN5Frame21coord2payload_absolutEffPh>

	/* state */
	buffer[6] = (state&0x0F)<<4 | (!!doOnlineTracking);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001c8a:	011b      	lsls	r3, r3, #4
 8001c8c:	b25a      	sxtb	r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c94:	b25b      	sxtb	r3, r3
 8001c96:	4313      	orrs	r3, r2
 8001c98:	b25a      	sxtb	r2, r3
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	3306      	adds	r3, #6
 8001ca0:	b2d2      	uxtb	r2, r2
 8001ca2:	701a      	strb	r2, [r3, #0]

	return APP_TYPE7_SIZE;
 8001ca4:	2307      	movs	r3, #7
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
	...

08001cb0 <_ZN3App3setEffffffff>:

void App::set(float lat, float lon, float alt, float speed, float climb, float heading, float turnrate, float qneOffset)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
 8001cbc:	603b      	str	r3, [r7, #0]
	/* currently only used in linear mode */
	//noInterrupts();

	latitude = lat;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	68ba      	ldr	r2, [r7, #8]
 8001cc2:	605a      	str	r2, [r3, #4]
	longitude = lon;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	609a      	str	r2, [r3, #8]
	altitude = (int)roundf(alt);
 8001cca:	6838      	ldr	r0, [r7, #0]
 8001ccc:	f00b f9ca 	bl	800d064 <roundf>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff fa5c 	bl	8001190 <__aeabi_f2iz>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	60da      	str	r2, [r3, #12]
	this->speed = speed;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	611a      	str	r2, [r3, #16]
	this->climb = climb;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	69fa      	ldr	r2, [r7, #28]
 8001ce8:	615a      	str	r2, [r3, #20]
	if(heading < 0.0f)
 8001cea:	f04f 0100 	mov.w	r1, #0
 8001cee:	6a38      	ldr	r0, [r7, #32]
 8001cf0:	f7ff fa10 	bl	8001114 <__aeabi_fcmplt>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d005      	beq.n	8001d06 <_ZN3App3setEffffffff+0x56>
		heading += 360.0f;
 8001cfa:	491b      	ldr	r1, [pc, #108]	; (8001d68 <_ZN3App3setEffffffff+0xb8>)
 8001cfc:	6a38      	ldr	r0, [r7, #32]
 8001cfe:	f7fe ff63 	bl	8000bc8 <__addsf3>
 8001d02:	4603      	mov	r3, r0
 8001d04:	623b      	str	r3, [r7, #32]
	if(heading > 360.0f)
 8001d06:	4918      	ldr	r1, [pc, #96]	; (8001d68 <_ZN3App3setEffffffff+0xb8>)
 8001d08:	6a38      	ldr	r0, [r7, #32]
 8001d0a:	f7ff fa21 	bl	8001150 <__aeabi_fcmpgt>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d005      	beq.n	8001d20 <_ZN3App3setEffffffff+0x70>
		heading -= 360.0f;
 8001d14:	4914      	ldr	r1, [pc, #80]	; (8001d68 <_ZN3App3setEffffffff+0xb8>)
 8001d16:	6a38      	ldr	r0, [r7, #32]
 8001d18:	f7fe ff54 	bl	8000bc4 <__aeabi_fsub>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	623b      	str	r3, [r7, #32]
	this->heading = heading;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6a3a      	ldr	r2, [r7, #32]
 8001d24:	619a      	str	r2, [r3, #24]
	this->turnrate = turnrate;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d2a:	61da      	str	r2, [r3, #28]
	this->qneOffset = std::isnan(qneOffset) ? 0 : (int)roundf(qneOffset);
 8001d2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001d2e:	f7ff fcf0 	bl	8001712 <_ZSt5isnanf>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <_ZN3App3setEffffffff+0x8c>
 8001d38:	2300      	movs	r3, #0
 8001d3a:	e007      	b.n	8001d4c <_ZN3App3setEffffffff+0x9c>
 8001d3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001d3e:	f00b f991 	bl	800d064 <roundf>
 8001d42:	4603      	mov	r3, r0
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff fa23 	bl	8001190 <__aeabi_f2iz>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	68fa      	ldr	r2, [r7, #12]
 8001d4e:	6213      	str	r3, [r2, #32]

	valid_until = HAL_GetTick() + APP_VALID_STATE_MS;
 8001d50:	f004 f9fc 	bl	800614c <HAL_GetTick>
 8001d54:	4603      	mov	r3, r0
 8001d56:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8001d5a:	3310      	adds	r3, #16
 8001d5c:	68fa      	ldr	r2, [r7, #12]
 8001d5e:	6293      	str	r3, [r2, #40]	; 0x28

	//interrupts();
}
 8001d60:	bf00      	nop
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	43b40000 	.word	0x43b40000

08001d6c <_ZN3App18is_broadcast_readyEi>:

bool App::is_broadcast_ready(int num_neighbors)
{
 8001d6c:	b590      	push	{r4, r7, lr}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
	/* is the state valid? */
	if(HAL_GetTick() > valid_until || isnan(latitude) || isnan(longitude))
 8001d76:	f004 f9e9 	bl	800614c <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d80f      	bhi.n	8001da4 <_ZN3App18is_broadcast_readyEi+0x38>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff fcc2 	bl	8001712 <_ZSt5isnanf>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d107      	bne.n	8001da4 <_ZN3App18is_broadcast_readyEi+0x38>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff fcba 	bl	8001712 <_ZSt5isnanf>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <_ZN3App18is_broadcast_readyEi+0x3c>
 8001da4:	2301      	movs	r3, #1
 8001da6:	e000      	b.n	8001daa <_ZN3App18is_broadcast_readyEi+0x3e>
 8001da8:	2300      	movs	r3, #0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <_ZN3App18is_broadcast_readyEi+0x46>
		return false;
 8001dae:	2300      	movs	r3, #0
 8001db0:	e02b      	b.n	8001e0a <_ZN3App18is_broadcast_readyEi+0x9e>

	/* in case of a busy channel, ensure that frames from the fifo get also a change */
	if(next_tx > HAL_GetTick())
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8001db6:	f004 f9c9 	bl	800614c <HAL_GetTick>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	429c      	cmp	r4, r3
 8001dbe:	bf8c      	ite	hi
 8001dc0:	2301      	movhi	r3, #1
 8001dc2:	2300      	movls	r3, #0
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <_ZN3App18is_broadcast_readyEi+0x62>
		return false;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	e01d      	b.n	8001e0a <_ZN3App18is_broadcast_readyEi+0x9e>

	/* determine if its time to send something (again) */
	const int tau_add = (num_neighbors/10 + 1) * APP_TYPE1OR7_TAU_MS;
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	4a10      	ldr	r2, [pc, #64]	; (8001e14 <_ZN3App18is_broadcast_readyEi+0xa8>)
 8001dd2:	fb82 1203 	smull	r1, r2, r2, r3
 8001dd6:	1092      	asrs	r2, r2, #2
 8001dd8:	17db      	asrs	r3, r3, #31
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	3301      	adds	r3, #1
 8001dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001de2:	fb02 f303 	mul.w	r3, r2, r3
 8001de6:	60fb      	str	r3, [r7, #12]
	if(last_tx + tau_add > HAL_GetTick())
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	18d4      	adds	r4, r2, r3
 8001df0:	f004 f9ac 	bl	800614c <HAL_GetTick>
 8001df4:	4603      	mov	r3, r0
 8001df6:	429c      	cmp	r4, r3
 8001df8:	bf8c      	ite	hi
 8001dfa:	2301      	movhi	r3, #1
 8001dfc:	2300      	movls	r3, #0
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <_ZN3App18is_broadcast_readyEi+0x9c>
		return false;
 8001e04:	2300      	movs	r3, #0
 8001e06:	e000      	b.n	8001e0a <_ZN3App18is_broadcast_readyEi+0x9e>

	return true;
 8001e08:	2301      	movs	r3, #1
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3714      	adds	r7, #20
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd90      	pop	{r4, r7, pc}
 8001e12:	bf00      	nop
 8001e14:	66666667 	.word	0x66666667

08001e18 <_ZN3App9get_frameEv>:

Frame *App::get_frame()
{
 8001e18:	b5b0      	push	{r4, r5, r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
	/* prepare frame */
	Frame *frm = new Frame(fmac.myAddr);
 8001e20:	4b1f      	ldr	r3, [pc, #124]	; (8001ea0 <_ZN3App9get_frameEv+0x88>)
 8001e22:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8001e26:	f107 030c 	add.w	r3, r7, #12
 8001e2a:	4611      	mov	r1, r2
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff fca5 	bl	800177c <_ZN7MacAddrC1ERKS_>
 8001e32:	f107 050c 	add.w	r5, r7, #12
 8001e36:	2034      	movs	r0, #52	; 0x34
 8001e38:	f00b f8e2 	bl	800d000 <_Znwj>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	461c      	mov	r4, r3
 8001e40:	4629      	mov	r1, r5
 8001e42:	4620      	mov	r0, r4
 8001e44:	f7ff fcad 	bl	80017a2 <_ZN5FrameC1E7MacAddr>
 8001e48:	617c      	str	r4, [r7, #20]
	}
	else
	{
#endif
		/* broadcast tracking information */
		if(onGround == false)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d10c      	bne.n	8001e6e <_ZN3App9get_frameEv+0x56>
		{
			frm->type = FRM_TYPE_TRACKING;
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	2201      	movs	r2, #1
 8001e58:	61da      	str	r2, [r3, #28]
			frm->payload_length = serializeTracking(frm->payload);
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	3324      	adds	r3, #36	; 0x24
 8001e5e:	4619      	mov	r1, r3
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f7ff fd37 	bl	80018d4 <_ZN3App17serializeTrackingERPh>
 8001e66:	4602      	mov	r2, r0
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	621a      	str	r2, [r3, #32]
 8001e6c:	e00b      	b.n	8001e86 <_ZN3App9get_frameEv+0x6e>
		}
		else
		{
			frm->type = FRM_TYPE_GROUNDTRACKING;
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	2207      	movs	r2, #7
 8001e72:	61da      	str	r2, [r3, #28]
			frm->payload_length = serializeGroundTracking(frm->payload);
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	3324      	adds	r3, #36	; 0x24
 8001e78:	4619      	mov	r1, r3
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f7ff feee 	bl	8001c5c <_ZN3App23serializeGroundTrackingERPh>
 8001e80:	4602      	mov	r2, r0
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	621a      	str	r2, [r3, #32]
	}
	framecount++;
#endif

	/* in case of a busy channel, ensure that frames from the fifo gets also a change */
	next_tx = HAL_GetTick() + APP_TYPE1OR7_MINTAU_MS;
 8001e86:	f004 f961 	bl	800614c <HAL_GetTick>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	f103 02fa 	add.w	r2, r3, #250	; 0xfa
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	631a      	str	r2, [r3, #48]	; 0x30

	return frm;
 8001e94:	697b      	ldr	r3, [r7, #20]
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3718      	adds	r7, #24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bdb0      	pop	{r4, r5, r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	20000240 	.word	0x20000240

08001ea4 <_ZN3AppC1Ev>:
class App : public Fapp
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff fca6 	bl	8001800 <_ZN4FappC1Ev>
 8001eb4:	4a14      	ldr	r2, [pc, #80]	; (8001f08 <_ZN3AppC1Ev+0x64>)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a13      	ldr	r2, [pc, #76]	; (8001f0c <_ZN3AppC1Ev+0x68>)
 8001ebe:	605a      	str	r2, [r3, #4]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4a12      	ldr	r2, [pc, #72]	; (8001f0c <_ZN3AppC1Ev+0x68>)
 8001ec4:	609a      	str	r2, [r3, #8]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	625a      	str	r2, [r3, #36]	; 0x24
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	629a      	str	r2, [r3, #40]	; 0x28
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	631a      	str	r2, [r3, #48]	; 0x30
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	871a      	strh	r2, [r3, #56]	; 0x38
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4618      	mov	r0, r3
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	080107ac 	.word	0x080107ac
 8001f0c:	7fc00000 	.word	0x7fc00000

08001f10 <_Z9constrainIiERKT_S2_S2_S2_>:
#ifndef CONSTRAIN_H_
#define CONSTRAIN_H_


template<class T>
const T& constrain(const T& x, const T& lo, const T& hi)
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
{
	if(x < lo)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	da01      	bge.n	8001f2c <_Z9constrainIiERKT_S2_S2_S2_+0x1c>
		return lo;
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	e008      	b.n	8001f3e <_Z9constrainIiERKT_S2_S2_S2_+0x2e>
	else if(hi < x)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	da01      	bge.n	8001f3c <_Z9constrainIiERKT_S2_S2_S2_+0x2c>
		return hi;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	e000      	b.n	8001f3e <_Z9constrainIiERKT_S2_S2_S2_+0x2e>
	else
		return x;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3714      	adds	r7, #20
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bc80      	pop	{r7}
 8001f46:	4770      	bx	lr

08001f48 <_ZN3AppD1Ev>:
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	4a05      	ldr	r2, [pc, #20]	; (8001f68 <_ZN3AppD1Ev+0x20>)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff fc61 	bl	8001820 <_ZN4FappD1Ev>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4618      	mov	r0, r3
 8001f62:	3708      	adds	r7, #8
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	080107ac 	.word	0x080107ac

08001f6c <_ZN3AppD0Ev>:
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f7ff ffe7 	bl	8001f48 <_ZN3AppD1Ev>
 8001f7a:	213c      	movs	r1, #60	; 0x3c
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f00b f83b 	bl	800cff8 <_ZdlPvj>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4618      	mov	r0, r3
 8001f86:	3708      	adds	r7, #8
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <_Z41__static_initialization_and_destruction_0ii>:


App app = App();
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d10e      	bne.n	8001fba <_Z41__static_initialization_and_destruction_0ii+0x2e>
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d109      	bne.n	8001fba <_Z41__static_initialization_and_destruction_0ii+0x2e>
 8001fa6:	4b0c      	ldr	r3, [pc, #48]	; (8001fd8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8001fa8:	4618      	mov	r0, r3
 8001faa:	233c      	movs	r3, #60	; 0x3c
 8001fac:	461a      	mov	r2, r3
 8001fae:	2100      	movs	r1, #0
 8001fb0:	f00b f8d4 	bl	800d15c <memset>
 8001fb4:	4808      	ldr	r0, [pc, #32]	; (8001fd8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8001fb6:	f7ff ff75 	bl	8001ea4 <_ZN3AppC1Ev>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d107      	bne.n	8001fd0 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d102      	bne.n	8001fd0 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8001fca:	4803      	ldr	r0, [pc, #12]	; (8001fd8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8001fcc:	f7ff ffbc 	bl	8001f48 <_ZN3AppD1Ev>
 8001fd0:	bf00      	nop
 8001fd2:	3708      	adds	r7, #8
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	20000200 	.word	0x20000200

08001fdc <_GLOBAL__sub_I__ZN3App17serializeTrackingERPh>:
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001fe4:	2001      	movs	r0, #1
 8001fe6:	f7ff ffd1 	bl	8001f8c <_Z41__static_initialization_and_destruction_0ii>
 8001fea:	bd80      	pop	{r7, pc}

08001fec <_GLOBAL__sub_D__ZN3App17serializeTrackingERPh>:
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001ff4:	2000      	movs	r0, #0
 8001ff6:	f7ff ffc9 	bl	8001f8c <_Z41__static_initialization_and_destruction_0ii>
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <circ_buf_pop>:
	c->head = next;            // head to next data offset.
	return 0;  // return success to indicate successful push.
}

int circ_buf_pop(circBuf_t *c, uint8_t *data)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
	// if the head isn't ahead of the tail, we don't have any characters
	if (c->head == c->tail) // check if circular buffer is empty
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685a      	ldr	r2, [r3, #4]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	429a      	cmp	r2, r3
 8002010:	d102      	bne.n	8002018 <circ_buf_pop+0x1c>
		return -1;          // and return with an error
 8002012:	f04f 33ff 	mov.w	r3, #4294967295
 8002016:	e016      	b.n	8002046 <circ_buf_pop+0x4a>

	// next is where tail will point to after this read.
	int next = c->tail + 1;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	3301      	adds	r3, #1
 800201e:	60fb      	str	r3, [r7, #12]
	if (next >= c->maxLen)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	68fa      	ldr	r2, [r7, #12]
 8002026:	429a      	cmp	r2, r3
 8002028:	db01      	blt.n	800202e <circ_buf_pop+0x32>
		next = 0;
 800202a:	2300      	movs	r3, #0
 800202c:	60fb      	str	r3, [r7, #12]

	*data = c->buffer[c->tail]; // Read data and then move
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	6892      	ldr	r2, [r2, #8]
 8002036:	4413      	add	r3, r2
 8002038:	781a      	ldrb	r2, [r3, #0]
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	701a      	strb	r2, [r3, #0]
	c->tail = next;             // tail to next data offset.
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	68fa      	ldr	r2, [r7, #12]
 8002042:	609a      	str	r2, [r3, #8]
	return 0;  // return success to indicate successful push.
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3714      	adds	r7, #20
 800204a:	46bd      	mov	sp, r7
 800204c:	bc80      	pop	{r7}
 800204e:	4770      	bx	lr

08002050 <_ZN8FanetMac6handleEv>:

	FanetMac() : myTimer(MAC_SLOT_MS, stateWrapper), myAddr(_myAddr) { }
	~FanetMac() { }

	bool begin(Fapp &app);
	void handle() { myTimer.Update(); }
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4618      	mov	r0, r3
 800205c:	f7ff fafb 	bl	8001656 <_ZN11TimerObject6UpdateEv>
 8002060:	bf00      	nop
 8002062:	3708      	adds	r7, #8
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <fanet_init_fake>:
	serial_int.print_line(FN_REPLYM_INITIALIZED);
}


void fanet_init_fake(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
	//serial_int.begin(serial);

	/* FANET */
	//app.begin(serial_int);
	while(fmac.begin(app) == false)
 800206c:	4907      	ldr	r1, [pc, #28]	; (800208c <fanet_init_fake+0x24>)
 800206e:	4808      	ldr	r0, [pc, #32]	; (8002090 <fanet_init_fake+0x28>)
 8002070:	f000 fb24 	bl	80026bc <_ZN8FanetMac5beginER4Fapp>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	bf0c      	ite	eq
 800207a:	2301      	moveq	r3, #1
 800207c:	2300      	movne	r3, #0
 800207e:	b2db      	uxtb	r3, r3
 8002080:	2b00      	cmp	r3, #0
 8002082:	d000      	beq.n	8002086 <fanet_init_fake+0x1e>
 8002084:	e7f2      	b.n	800206c <fanet_init_fake+0x4>
	if(casw.begin(fmac.myAddr) == false)
		serial_int.print_line(FA_REPLYE_FLARMADDRISSUE);
#endif

	//serial_int.print_line(FN_REPLYM_INITIALIZED);
}
 8002086:	bf00      	nop
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	20000200 	.word	0x20000200
 8002090:	20000240 	.word	0x20000240

08002094 <fanet_pps_int>:
{
	fanet_sxirq++;
}

void fanet_pps_int(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
#ifdef FLARM
	casw_ppsIrq++;
	casw_ppsTstamp = HAL_GetTick();
#endif
}
 8002098:	bf00      	nop
 800209a:	46bd      	mov	sp, r7
 800209c:	bc80      	pop	{r7}
 800209e:	4770      	bx	lr

080020a0 <fanet_loop>:

void fanet_loop(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
	/* get commands from serial */
	serial_int.handle_rx();
 80020a4:	4809      	ldr	r0, [pc, #36]	; (80020cc <fanet_loop+0x2c>)
 80020a6:	f003 f939 	bl	800531c <_ZN16Serial_Interface9handle_rxEv>

	/* update MAC state machine */
	if(fanet_sxirq != fanet_sxexec)
 80020aa:	4b09      	ldr	r3, [pc, #36]	; (80020d0 <fanet_loop+0x30>)
 80020ac:	781a      	ldrb	r2, [r3, #0]
 80020ae:	4b09      	ldr	r3, [pc, #36]	; (80020d4 <fanet_loop+0x34>)
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d005      	beq.n	80020c2 <fanet_loop+0x22>
	{
		fanet_sxexec++;
 80020b6:	4b07      	ldr	r3, [pc, #28]	; (80020d4 <fanet_loop+0x34>)
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	3301      	adds	r3, #1
 80020bc:	b2da      	uxtb	r2, r3
 80020be:	4b05      	ldr	r3, [pc, #20]	; (80020d4 <fanet_loop+0x34>)
 80020c0:	701a      	strb	r2, [r3, #0]
		//sx1272_irq(); //todo: insert radio interrupt or manage it othewise. Commented to make it compile
	}
	fmac.handle();
 80020c2:	4805      	ldr	r0, [pc, #20]	; (80020d8 <fanet_loop+0x38>)
 80020c4:	f7ff ffc4 	bl	8002050 <_ZN8FanetMac6handleEv>
	}

	/* regular execution */
	casw.handle(HAL_GetTick());
#endif
}
 80020c8:	bf00      	nop
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	200003c8 	.word	0x200003c8
 80020d0:	2000023c 	.word	0x2000023c
 80020d4:	2000023d 	.word	0x2000023d
 80020d8:	20000240 	.word	0x20000240

080020dc <_ZN11TimerObjectD1Ev>:

public:
	TimerObject(unsigned long int ms);
	TimerObject(unsigned long int ms, CallBackType callback);
	TimerObject(unsigned long int ms, CallBackType callback, bool isSingle);
	~TimerObject(){Stop();};
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f7ff faaa 	bl	800163e <_ZN11TimerObject4StopEv>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4618      	mov	r0, r3
 80020ee:	3708      	adds	r7, #8
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <_ZN7MacAddrC1Eii>:
	MacAddr(int manufacturer_addr, int id_addr): manufacturer(manufacturer_addr), id(id_addr) {};
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	68ba      	ldr	r2, [r7, #8]
 8002104:	601a      	str	r2, [r3, #0]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	605a      	str	r2, [r3, #4]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	4618      	mov	r0, r3
 8002110:	3714      	adds	r7, #20
 8002112:	46bd      	mov	sp, r7
 8002114:	bc80      	pop	{r7}
 8002116:	4770      	bx	lr

08002118 <_ZNK7MacAddreqERKS_>:

	inline bool operator == (const MacAddr& rhs) const { return ((id == rhs.id) && (manufacturer == rhs.manufacturer));};
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685a      	ldr	r2, [r3, #4]
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	429a      	cmp	r2, r3
 800212c:	d107      	bne.n	800213e <_ZNK7MacAddreqERKS_+0x26>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	429a      	cmp	r2, r3
 8002138:	d101      	bne.n	800213e <_ZNK7MacAddreqERKS_+0x26>
 800213a:	2301      	movs	r3, #1
 800213c:	e000      	b.n	8002140 <_ZNK7MacAddreqERKS_+0x28>
 800213e:	2300      	movs	r3, #0
 8002140:	4618      	mov	r0, r3
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	bc80      	pop	{r7}
 8002148:	4770      	bx	lr

0800214a <_ZNK7MacAddrneERKS_>:
	inline bool operator != (const MacAddr& rhs) const { return ((id != rhs.id) || (manufacturer != rhs.manufacturer));};
 800214a:	b480      	push	{r7}
 800214c:	b083      	sub	sp, #12
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
 8002152:	6039      	str	r1, [r7, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685a      	ldr	r2, [r3, #4]
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	429a      	cmp	r2, r3
 800215e:	d105      	bne.n	800216c <_ZNK7MacAddrneERKS_+0x22>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	429a      	cmp	r2, r3
 800216a:	d001      	beq.n	8002170 <_ZNK7MacAddrneERKS_+0x26>
 800216c:	2301      	movs	r3, #1
 800216e:	e000      	b.n	8002172 <_ZNK7MacAddrneERKS_+0x28>
 8002170:	2300      	movs	r3, #0
 8002172:	4618      	mov	r0, r3
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	bc80      	pop	{r7}
 800217a:	4770      	bx	lr

0800217c <_ZN5FrameD1Ev>:
	Frame();
	Frame(int length, uint8_t *data);				// deserialize packet
	~Frame() { delete [] payload; }
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002188:	2b00      	cmp	r3, #0
 800218a:	d004      	beq.n	8002196 <_ZN5FrameD1Ev+0x1a>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002190:	4618      	mov	r0, r3
 8002192:	f00a ff33 	bl	800cffc <_ZdaPv>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4618      	mov	r0, r3
 800219a:	3708      	adds	r7, #8
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <_ZN12NeighborNodeC1E7MacAddrb>:
	NeighborNode(MacAddr addr, bool tracking = false) : addr(addr), hasTracking(tracking) { last_seen = HAL_GetTick(); }
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	4613      	mov	r3, r2
 80021ac:	71fb      	strb	r3, [r7, #7]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	3304      	adds	r3, #4
 80021b2:	68b9      	ldr	r1, [r7, #8]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff fae1 	bl	800177c <_ZN7MacAddrC1ERKS_>
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	79fa      	ldrb	r2, [r7, #7]
 80021be:	731a      	strb	r2, [r3, #12]
 80021c0:	f003 ffc4 	bl	800614c <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	601a      	str	r2, [r3, #0]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	4618      	mov	r0, r3
 80021ce:	3710      	adds	r7, #16
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <_ZN12NeighborNode4seenEv>:
	void seen(void) { last_seen = HAL_GetTick(); }
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	f003 ffb6 	bl	800614c <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	601a      	str	r2, [r3, #0]
 80021e6:	bf00      	nop
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <_ZN12NeighborNode8isAroundEv>:
	bool isAround(void) { return last_seen + NEIGHBOR_MAX_TIMEOUT_MS > HAL_GetTick(); }
 80021ee:	b590      	push	{r4, r7, lr}
 80021f0:	b083      	sub	sp, #12
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f503 3474 	add.w	r4, r3, #249856	; 0x3d000
 80021fe:	3490      	adds	r4, #144	; 0x90
 8002200:	f003 ffa4 	bl	800614c <HAL_GetTick>
 8002204:	4603      	mov	r3, r0
 8002206:	429c      	cmp	r4, r3
 8002208:	bf8c      	ite	hi
 800220a:	2301      	movhi	r3, #1
 800220c:	2300      	movls	r3, #0
 800220e:	b2db      	uxtb	r3, r3
 8002210:	4618      	mov	r0, r3
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	bd90      	pop	{r4, r7, pc}

08002218 <_ZN7MacFifo4sizeEv>:
	int size() { return fifo.size(); }
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4618      	mov	r0, r3
 8002224:	f000 ff6c 	bl	8003100 <_ZN10LinkedListIP5FrameE4sizeEv>
 8002228:	4603      	mov	r3, r0
 800222a:	4618      	mov	r0, r3
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <_ZN7MacFifoC1Ev>:
class MacFifo
 8002232:	b580      	push	{r7, lr}
 8002234:	b082      	sub	sp, #8
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4618      	mov	r0, r3
 800223e:	f000 ff6b 	bl	8003118 <_ZN10LinkedListIP5FrameEC1Ev>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4618      	mov	r0, r3
 8002246:	3708      	adds	r7, #8
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <_ZN7MacFifoD1Ev>:
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4618      	mov	r0, r3
 8002258:	f000 ff80 	bl	800315c <_ZN10LinkedListIP5FrameED1Ev>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4618      	mov	r0, r3
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
	...

08002268 <_ZN8FanetMacC1Ev>:
	FanetMac() : myTimer(MAC_SLOT_MS, stateWrapper), myAddr(_myAddr) { }
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4a1b      	ldr	r2, [pc, #108]	; (80022e0 <_ZN8FanetMacC1Ev+0x78>)
 8002274:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff f969 	bl	8001550 <_ZN11TimerObjectC1EmPFvvE>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	3314      	adds	r3, #20
 8002282:	4618      	mov	r0, r3
 8002284:	f7ff ffd5 	bl	8002232 <_ZN7MacFifoC1Ev>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3330      	adds	r3, #48	; 0x30
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff ffd0 	bl	8002232 <_ZN7MacFifoC1Ev>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	334c      	adds	r3, #76	; 0x4c
 8002296:	4618      	mov	r0, r3
 8002298:	f000 ff8c 	bl	80031b4 <_ZN10LinkedListIP12NeighborNodeEC1Ev>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	669a      	str	r2, [r3, #104]	; 0x68
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	336c      	adds	r3, #108	; 0x6c
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7ff fa58 	bl	800175c <_ZN7MacAddrC1Ev>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	675a      	str	r2, [r3, #116]	; 0x74
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2207      	movs	r2, #7
 80022b6:	679a      	str	r2, [r3, #120]	; 0x78
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4618      	mov	r0, r3
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	08002731 	.word	0x08002731

080022e4 <_ZN8FanetMacD1Ev>:
	~FanetMac() { }
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	334c      	adds	r3, #76	; 0x4c
 80022f0:	4618      	mov	r0, r3
 80022f2:	f000 ff81 	bl	80031f8 <_ZN10LinkedListIP12NeighborNodeED1Ev>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	3330      	adds	r3, #48	; 0x30
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7ff ffa6 	bl	800224c <_ZN7MacFifoD1Ev>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	3314      	adds	r3, #20
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff ffa1 	bl	800224c <_ZN7MacFifoD1Ev>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4618      	mov	r0, r3
 800230e:	f7ff fee5 	bl	80020dc <_ZN11TimerObjectD1Ev>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4618      	mov	r0, r3
 8002316:	3708      	adds	r7, #8
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <_ZN7MacFifo10get_nexttxEv>:


/* get next frame which can be sent out */
//previoustodo: this is potentially dangerous, as frm may be deleted in another place.
Frame* MacFifo::get_nexttx()
{
 800231c:	b590      	push	{r4, r7, lr}
 800231e:	b087      	sub	sp, #28
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002324:	f3ef 8310 	mrs	r3, PRIMASK
 8002328:	60bb      	str	r3, [r7, #8]
  return(result);
 800232a:	68bb      	ldr	r3, [r7, #8]
	int next;
	uint32_t prim = __get_PRIMASK();
 800232c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800232e:	b672      	cpsid	i
}
 8002330:	bf00      	nop
	__disable_irq();
	for (next = 0; next < fifo.size(); next++)
 8002332:	2300      	movs	r3, #0
 8002334:	617b      	str	r3, [r7, #20]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4618      	mov	r0, r3
 800233a:	f000 fee1 	bl	8003100 <_ZN10LinkedListIP5FrameE4sizeEv>
 800233e:	4602      	mov	r2, r0
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	4293      	cmp	r3, r2
 8002344:	bfb4      	ite	lt
 8002346:	2301      	movlt	r3, #1
 8002348:	2300      	movge	r3, #0
 800234a:	b2db      	uxtb	r3, r3
 800234c:	2b00      	cmp	r3, #0
 800234e:	d015      	beq.n	800237c <_ZN7MacFifo10get_nexttxEv+0x60>
		if (fifo.get(next)->next_tx < HAL_GetTick())
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6979      	ldr	r1, [r7, #20]
 8002354:	4618      	mov	r0, r3
 8002356:	f000 ff86 	bl	8003266 <_ZN10LinkedListIP5FrameE3getEi>
 800235a:	4603      	mov	r3, r0
 800235c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800235e:	f003 fef5 	bl	800614c <HAL_GetTick>
 8002362:	4603      	mov	r3, r0
 8002364:	429c      	cmp	r4, r3
 8002366:	bf34      	ite	cc
 8002368:	2301      	movcc	r3, #1
 800236a:	2300      	movcs	r3, #0
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d103      	bne.n	800237a <_ZN7MacFifo10get_nexttxEv+0x5e>
	for (next = 0; next < fifo.size(); next++)
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	3301      	adds	r3, #1
 8002376:	617b      	str	r3, [r7, #20]
 8002378:	e7dd      	b.n	8002336 <_ZN7MacFifo10get_nexttxEv+0x1a>
			break;
 800237a:	bf00      	nop
	Frame *frm;
	if (next == fifo.size())
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4618      	mov	r0, r3
 8002380:	f000 febe 	bl	8003100 <_ZN10LinkedListIP5FrameE4sizeEv>
 8002384:	4602      	mov	r2, r0
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	4293      	cmp	r3, r2
 800238a:	bf0c      	ite	eq
 800238c:	2301      	moveq	r3, #1
 800238e:	2300      	movne	r3, #0
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b00      	cmp	r3, #0
 8002394:	d002      	beq.n	800239c <_ZN7MacFifo10get_nexttxEv+0x80>
		frm = NULL;
 8002396:	2300      	movs	r3, #0
 8002398:	613b      	str	r3, [r7, #16]
 800239a:	e005      	b.n	80023a8 <_ZN7MacFifo10get_nexttxEv+0x8c>
	else
		frm = fifo.get(next);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6979      	ldr	r1, [r7, #20]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f000 ff60 	bl	8003266 <_ZN10LinkedListIP5FrameE3getEi>
 80023a6:	6138      	str	r0, [r7, #16]
	if (!prim)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d101      	bne.n	80023b2 <_ZN7MacFifo10get_nexttxEv+0x96>
  __ASM volatile ("cpsie i" : : : "memory");
 80023ae:	b662      	cpsie	i
}
 80023b0:	bf00      	nop
		__enable_irq();

	return frm;
 80023b2:	693b      	ldr	r3, [r7, #16]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	371c      	adds	r7, #28
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd90      	pop	{r4, r7, pc}

080023bc <_ZN7MacFifo13frame_in_listEP5Frame>:

Frame* MacFifo::frame_in_list(Frame *frm)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023c6:	f3ef 8310 	mrs	r3, PRIMASK
 80023ca:	60bb      	str	r3, [r7, #8]
  return(result);
 80023cc:	68bb      	ldr	r3, [r7, #8]
	uint32_t prim = __get_PRIMASK();
 80023ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80023d0:	b672      	cpsid	i
}
 80023d2:	bf00      	nop
	__disable_irq();

	for (int i = 0; i < fifo.size(); i++)
 80023d4:	2300      	movs	r3, #0
 80023d6:	617b      	str	r3, [r7, #20]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4618      	mov	r0, r3
 80023dc:	f000 fe90 	bl	8003100 <_ZN10LinkedListIP5FrameE4sizeEv>
 80023e0:	4602      	mov	r2, r0
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	4293      	cmp	r3, r2
 80023e6:	bfb4      	ite	lt
 80023e8:	2301      	movlt	r3, #1
 80023ea:	2300      	movge	r3, #0
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d017      	beq.n	8002422 <_ZN7MacFifo13frame_in_listEP5Frame+0x66>
	{
		Frame *frm_list = fifo.get(i);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6979      	ldr	r1, [r7, #20]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f000 ff35 	bl	8003266 <_ZN10LinkedListIP5FrameE3getEi>
 80023fc:	60f8      	str	r0, [r7, #12]
		if (*frm_list == *frm)
 80023fe:	6839      	ldr	r1, [r7, #0]
 8002400:	68f8      	ldr	r0, [r7, #12]
 8002402:	f001 fe6a 	bl	80040da <_ZNK5FrameeqERKS_>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d006      	beq.n	800241a <_ZN7MacFifo13frame_in_listEP5Frame+0x5e>
		{
			if (!prim)
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d101      	bne.n	8002416 <_ZN7MacFifo13frame_in_listEP5Frame+0x5a>
  __ASM volatile ("cpsie i" : : : "memory");
 8002412:	b662      	cpsie	i
}
 8002414:	bf00      	nop
				__enable_irq();
			return frm_list;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	e009      	b.n	800242e <_ZN7MacFifo13frame_in_listEP5Frame+0x72>
	for (int i = 0; i < fifo.size(); i++)
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	3301      	adds	r3, #1
 800241e:	617b      	str	r3, [r7, #20]
 8002420:	e7da      	b.n	80023d8 <_ZN7MacFifo13frame_in_listEP5Frame+0x1c>
		}
	}

	if (!prim)
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d101      	bne.n	800242c <_ZN7MacFifo13frame_in_listEP5Frame+0x70>
  __ASM volatile ("cpsie i" : : : "memory");
 8002428:	b662      	cpsie	i
}
 800242a:	bf00      	nop
		__enable_irq();

	return NULL;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3718      	adds	r7, #24
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <_ZN7MacFifo5frontEv>:

Frame* MacFifo::front()
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b086      	sub	sp, #24
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800243e:	f3ef 8310 	mrs	r3, PRIMASK
 8002442:	60fb      	str	r3, [r7, #12]
  return(result);
 8002444:	68fb      	ldr	r3, [r7, #12]
	uint32_t prim = __get_PRIMASK();
 8002446:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002448:	b672      	cpsid	i
}
 800244a:	bf00      	nop
	__disable_irq();
	Frame *frm = fifo.shift();
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4618      	mov	r0, r3
 8002450:	f000 ff1e 	bl	8003290 <_ZN10LinkedListIP5FrameE5shiftEv>
 8002454:	6138      	str	r0, [r7, #16]
	if (!prim)
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d101      	bne.n	8002460 <_ZN7MacFifo5frontEv+0x2a>
  __ASM volatile ("cpsie i" : : : "memory");
 800245c:	b662      	cpsie	i
}
 800245e:	bf00      	nop
		__enable_irq();

	return frm;
 8002460:	693b      	ldr	r3, [r7, #16]
}
 8002462:	4618      	mov	r0, r3
 8002464:	3718      	adds	r7, #24
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
	...

0800246c <_ZN7MacFifo3addEP5Frame>:

/* add frame to fifo */
int MacFifo::add(Frame *frm)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002476:	f3ef 8310 	mrs	r3, PRIMASK
 800247a:	60bb      	str	r3, [r7, #8]
  return(result);
 800247c:	68bb      	ldr	r3, [r7, #8]
	uint32_t prim = __get_PRIMASK();
 800247e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002480:	b672      	cpsid	i
}
 8002482:	bf00      	nop
	__disable_irq();

	/* buffer full */
	/* note: ACKs will always fit */
	if (fifo.size() >= MAC_FIFO_SIZE && frm->type != FRM_TYPE_ACK)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4618      	mov	r0, r3
 8002488:	f000 fe3a 	bl	8003100 <_ZN10LinkedListIP5FrameE4sizeEv>
 800248c:	4603      	mov	r3, r0
 800248e:	2b07      	cmp	r3, #7
 8002490:	dd05      	ble.n	800249e <_ZN7MacFifo3addEP5Frame+0x32>
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	69db      	ldr	r3, [r3, #28]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <_ZN7MacFifo3addEP5Frame+0x32>
 800249a:	2301      	movs	r3, #1
 800249c:	e000      	b.n	80024a0 <_ZN7MacFifo3addEP5Frame+0x34>
 800249e:	2300      	movs	r3, #0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d007      	beq.n	80024b4 <_ZN7MacFifo3addEP5Frame+0x48>
	{
		if (!prim)
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <_ZN7MacFifo3addEP5Frame+0x42>
  __ASM volatile ("cpsie i" : : : "memory");
 80024aa:	b662      	cpsie	i
}
 80024ac:	bf00      	nop
			__enable_irq();
		return -1;
 80024ae:	f04f 33ff 	mov.w	r3, #4294967295
 80024b2:	e059      	b.n	8002568 <_ZN7MacFifo3addEP5Frame+0xfc>
	}

	/* only one ack_requested from us to a specific address at a time is allowed in the queue */
	//in order not to screw with the awaiting of ACK
	if (frm->ack_requested)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	691b      	ldr	r3, [r3, #16]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d040      	beq.n	800253e <_ZN7MacFifo3addEP5Frame+0xd2>
	{
		for (int i = 0; i < fifo.size(); i++)
 80024bc:	2300      	movs	r3, #0
 80024be:	617b      	str	r3, [r7, #20]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f000 fe1c 	bl	8003100 <_ZN10LinkedListIP5FrameE4sizeEv>
 80024c8:	4602      	mov	r2, r0
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	4293      	cmp	r3, r2
 80024ce:	bfb4      	ite	lt
 80024d0:	2301      	movlt	r3, #1
 80024d2:	2300      	movge	r3, #0
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d031      	beq.n	800253e <_ZN7MacFifo3addEP5Frame+0xd2>
		{
			//note: this never succeeds for received packets -> tx condition only
			Frame *ffrm = fifo.get(i);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6979      	ldr	r1, [r7, #20]
 80024de:	4618      	mov	r0, r3
 80024e0:	f000 fec1 	bl	8003266 <_ZN10LinkedListIP5FrameE3getEi>
 80024e4:	60f8      	str	r0, [r7, #12]
			if (ffrm->ack_requested && ffrm->src == fmac.myAddr && ffrm->dest == frm->dest)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d018      	beq.n	8002520 <_ZN7MacFifo3addEP5Frame+0xb4>
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	4a1f      	ldr	r2, [pc, #124]	; (8002570 <_ZN7MacFifo3addEP5Frame+0x104>)
 80024f2:	f8d2 2184 	ldr.w	r2, [r2, #388]	; 0x184
 80024f6:	4611      	mov	r1, r2
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7ff fe0d 	bl	8002118 <_ZNK7MacAddreqERKS_>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d00d      	beq.n	8002520 <_ZN7MacFifo3addEP5Frame+0xb4>
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f103 0208 	add.w	r2, r3, #8
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	3308      	adds	r3, #8
 800250e:	4619      	mov	r1, r3
 8002510:	4610      	mov	r0, r2
 8002512:	f7ff fe01 	bl	8002118 <_ZNK7MacAddreqERKS_>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <_ZN7MacFifo3addEP5Frame+0xb4>
 800251c:	2301      	movs	r3, #1
 800251e:	e000      	b.n	8002522 <_ZN7MacFifo3addEP5Frame+0xb6>
 8002520:	2300      	movs	r3, #0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d007      	beq.n	8002536 <_ZN7MacFifo3addEP5Frame+0xca>
			{
				if (!prim)
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d101      	bne.n	8002530 <_ZN7MacFifo3addEP5Frame+0xc4>
  __ASM volatile ("cpsie i" : : : "memory");
 800252c:	b662      	cpsie	i
}
 800252e:	bf00      	nop
					__enable_irq();
				return -2;
 8002530:	f06f 0301 	mvn.w	r3, #1
 8002534:	e018      	b.n	8002568 <_ZN7MacFifo3addEP5Frame+0xfc>
		for (int i = 0; i < fifo.size(); i++)
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	3301      	adds	r3, #1
 800253a:	617b      	str	r3, [r7, #20]
 800253c:	e7c0      	b.n	80024c0 <_ZN7MacFifo3addEP5Frame+0x54>
			}
		}
	}

	if (frm->type == FRM_TYPE_ACK)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	69db      	ldr	r3, [r3, #28]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d105      	bne.n	8002552 <_ZN7MacFifo3addEP5Frame+0xe6>
		/* add to front */
		fifo.unshift(frm);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6839      	ldr	r1, [r7, #0]
 800254a:	4618      	mov	r0, r3
 800254c:	f000 fed7 	bl	80032fe <_ZN10LinkedListIP5FrameE7unshiftES1_>
 8002550:	e004      	b.n	800255c <_ZN7MacFifo3addEP5Frame+0xf0>
	else
		/* add to tail */
		fifo.add(frm);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6839      	ldr	r1, [r7, #0]
 8002556:	4618      	mov	r0, r3
 8002558:	f000 ff03 	bl	8003362 <_ZN10LinkedListIP5FrameE3addES1_>

	if (!prim)
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d101      	bne.n	8002566 <_ZN7MacFifo3addEP5Frame+0xfa>
  __ASM volatile ("cpsie i" : : : "memory");
 8002562:	b662      	cpsie	i
}
 8002564:	bf00      	nop
		__enable_irq();
	return 0;
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	3718      	adds	r7, #24
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	20000240 	.word	0x20000240

08002574 <_ZN7MacFifo13remove_deleteEP5Frame>:

/* remove frame from linked list and delete it */
bool MacFifo::remove_delete(Frame *frm)
{
 8002574:	b590      	push	{r4, r7, lr}
 8002576:	b087      	sub	sp, #28
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
	bool found = false;
 800257e:	2300      	movs	r3, #0
 8002580:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002582:	f3ef 8310 	mrs	r3, PRIMASK
 8002586:	60bb      	str	r3, [r7, #8]
  return(result);
 8002588:	68bb      	ldr	r3, [r7, #8]

	uint32_t prim = __get_PRIMASK();
 800258a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800258c:	b672      	cpsid	i
}
 800258e:	bf00      	nop
	__disable_irq();
	for (int i = 0; i < fifo.size() && !found; i++)
 8002590:	2300      	movs	r3, #0
 8002592:	613b      	str	r3, [r7, #16]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4618      	mov	r0, r3
 8002598:	f000 fdb2 	bl	8003100 <_ZN10LinkedListIP5FrameE4sizeEv>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	4293      	cmp	r3, r2
 80025a2:	da07      	bge.n	80025b4 <_ZN7MacFifo13remove_deleteEP5Frame+0x40>
 80025a4:	7dfb      	ldrb	r3, [r7, #23]
 80025a6:	f083 0301 	eor.w	r3, r3, #1
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <_ZN7MacFifo13remove_deleteEP5Frame+0x40>
 80025b0:	2301      	movs	r3, #1
 80025b2:	e000      	b.n	80025b6 <_ZN7MacFifo13remove_deleteEP5Frame+0x42>
 80025b4:	2300      	movs	r3, #0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d022      	beq.n	8002600 <_ZN7MacFifo13remove_deleteEP5Frame+0x8c>
		if (frm == fifo.get(i))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6939      	ldr	r1, [r7, #16]
 80025be:	4618      	mov	r0, r3
 80025c0:	f000 fe51 	bl	8003266 <_ZN10LinkedListIP5FrameE3getEi>
 80025c4:	4602      	mov	r2, r0
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	4293      	cmp	r3, r2
 80025ca:	bf0c      	ite	eq
 80025cc:	2301      	moveq	r3, #1
 80025ce:	2300      	movne	r3, #0
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d010      	beq.n	80025f8 <_ZN7MacFifo13remove_deleteEP5Frame+0x84>
		{
			delete fifo.remove(i);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6939      	ldr	r1, [r7, #16]
 80025da:	4618      	mov	r0, r3
 80025dc:	f000 fef4 	bl	80033c8 <_ZN10LinkedListIP5FrameE6removeEi>
 80025e0:	4604      	mov	r4, r0
 80025e2:	2c00      	cmp	r4, #0
 80025e4:	d006      	beq.n	80025f4 <_ZN7MacFifo13remove_deleteEP5Frame+0x80>
 80025e6:	4620      	mov	r0, r4
 80025e8:	f7ff fdc8 	bl	800217c <_ZN5FrameD1Ev>
 80025ec:	2134      	movs	r1, #52	; 0x34
 80025ee:	4620      	mov	r0, r4
 80025f0:	f00a fd02 	bl	800cff8 <_ZdlPvj>
			found = true;
 80025f4:	2301      	movs	r3, #1
 80025f6:	75fb      	strb	r3, [r7, #23]
	for (int i = 0; i < fifo.size() && !found; i++)
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	3301      	adds	r3, #1
 80025fc:	613b      	str	r3, [r7, #16]
 80025fe:	e7c9      	b.n	8002594 <_ZN7MacFifo13remove_deleteEP5Frame+0x20>
		}
	if (!prim)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <_ZN7MacFifo13remove_deleteEP5Frame+0x96>
  __ASM volatile ("cpsie i" : : : "memory");
 8002606:	b662      	cpsie	i
}
 8002608:	bf00      	nop
		__enable_irq();

	return found;
 800260a:	7dfb      	ldrb	r3, [r7, #23]
}
 800260c:	4618      	mov	r0, r3
 800260e:	371c      	adds	r7, #28
 8002610:	46bd      	mov	sp, r7
 8002612:	bd90      	pop	{r4, r7, pc}

08002614 <_ZN7MacFifo25remove_delete_acked_frameE7MacAddr>:

/* remove any pending frame that waits on an ACK from a host */
bool MacFifo::remove_delete_acked_frame(MacAddr dest)
{
 8002614:	b590      	push	{r4, r7, lr}
 8002616:	b089      	sub	sp, #36	; 0x24
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
	bool found = false;
 800261e:	2300      	movs	r3, #0
 8002620:	77fb      	strb	r3, [r7, #31]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002622:	f3ef 8310 	mrs	r3, PRIMASK
 8002626:	60fb      	str	r3, [r7, #12]
  return(result);
 8002628:	68fb      	ldr	r3, [r7, #12]
	uint32_t prim = __get_PRIMASK();
 800262a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800262c:	b672      	cpsid	i
}
 800262e:	bf00      	nop
	__disable_irq();

	for (int i = 0; i < fifo.size(); i++)
 8002630:	2300      	movs	r3, #0
 8002632:	61bb      	str	r3, [r7, #24]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4618      	mov	r0, r3
 8002638:	f000 fd62 	bl	8003100 <_ZN10LinkedListIP5FrameE4sizeEv>
 800263c:	4602      	mov	r2, r0
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	4293      	cmp	r3, r2
 8002642:	bfb4      	ite	lt
 8002644:	2301      	movlt	r3, #1
 8002646:	2300      	movge	r3, #0
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d02c      	beq.n	80026a8 <_ZN7MacFifo25remove_delete_acked_frameE7MacAddr+0x94>
	{
		Frame* frm = fifo.get(i);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	69b9      	ldr	r1, [r7, #24]
 8002652:	4618      	mov	r0, r3
 8002654:	f000 fe07 	bl	8003266 <_ZN10LinkedListIP5FrameE3getEi>
 8002658:	6138      	str	r0, [r7, #16]
		if (frm->ack_requested && frm->dest == dest)
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00a      	beq.n	8002678 <_ZN7MacFifo25remove_delete_acked_frameE7MacAddr+0x64>
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	3308      	adds	r3, #8
 8002666:	6839      	ldr	r1, [r7, #0]
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff fd55 	bl	8002118 <_ZNK7MacAddreqERKS_>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <_ZN7MacFifo25remove_delete_acked_frameE7MacAddr+0x64>
 8002674:	2301      	movs	r3, #1
 8002676:	e000      	b.n	800267a <_ZN7MacFifo25remove_delete_acked_frameE7MacAddr+0x66>
 8002678:	2300      	movs	r3, #0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d010      	beq.n	80026a0 <_ZN7MacFifo25remove_delete_acked_frameE7MacAddr+0x8c>
		{
			delete fifo.remove(i);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	69b9      	ldr	r1, [r7, #24]
 8002682:	4618      	mov	r0, r3
 8002684:	f000 fea0 	bl	80033c8 <_ZN10LinkedListIP5FrameE6removeEi>
 8002688:	4604      	mov	r4, r0
 800268a:	2c00      	cmp	r4, #0
 800268c:	d006      	beq.n	800269c <_ZN7MacFifo25remove_delete_acked_frameE7MacAddr+0x88>
 800268e:	4620      	mov	r0, r4
 8002690:	f7ff fd74 	bl	800217c <_ZN5FrameD1Ev>
 8002694:	2134      	movs	r1, #52	; 0x34
 8002696:	4620      	mov	r0, r4
 8002698:	f00a fcae 	bl	800cff8 <_ZdlPvj>
			found = true;
 800269c:	2301      	movs	r3, #1
 800269e:	77fb      	strb	r3, [r7, #31]
	for (int i = 0; i < fifo.size(); i++)
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	3301      	adds	r3, #1
 80026a4:	61bb      	str	r3, [r7, #24]
 80026a6:	e7c5      	b.n	8002634 <_ZN7MacFifo25remove_delete_acked_frameE7MacAddr+0x20>
		}
	}
	if (!prim)
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <_ZN7MacFifo25remove_delete_acked_frameE7MacAddr+0x9e>
  __ASM volatile ("cpsie i" : : : "memory");
 80026ae:	b662      	cpsie	i
}
 80026b0:	bf00      	nop
		__enable_irq();
	return found;
 80026b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3724      	adds	r7, #36	; 0x24
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd90      	pop	{r4, r7, pc}

080026bc <_ZN8FanetMac5beginER4Fapp>:
{
	fmac.frameReceived(length);
}

bool FanetMac::begin(Fapp &app)
{
 80026bc:	b590      	push	{r4, r7, lr}
 80026be:	b087      	sub	sp, #28
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
	myApp = &app;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	669a      	str	r2, [r3, #104]	; 0x68
	sx1272_setLnaGain(LNAGAIN_G1_MAX, true);
	sx1272_setIrqReceiver(frameRxWrapper);*/

	/* region specific. default is EU */
	sx_region_t region;
	region.channel = CH_868_200;
 80026cc:	4b17      	ldr	r3, [pc, #92]	; (800272c <_ZN8FanetMac5beginER4Fapp+0x70>)
 80026ce:	60bb      	str	r3, [r7, #8]
	region.dBm = 10;			//+4dB antenna gain (skytraxx/lynx) -> max allowed output (14dBm)
 80026d0:	230a      	movs	r3, #10
 80026d2:	60fb      	str	r3, [r7, #12]
	sx1272_setRegion(region);
 80026d4:	f107 0308 	add.w	r3, r7, #8
 80026d8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80026dc:	f003 f85b 	bl	8005796 <sx1272_setRegion>

	/* enter sleep mode */
	//sx1272_setArmed(false);

	/* address */
	_myAddr = readAddr();
 80026e0:	f107 0310 	add.w	r3, r7, #16
 80026e4:	6879      	ldr	r1, [r7, #4]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f000 fc54 	bl	8002f94 <_ZN8FanetMac8readAddrEv>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	336c      	adds	r3, #108	; 0x6c
 80026f0:	f107 0210 	add.w	r2, r7, #16
 80026f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80026f8:	e883 0003 	stmia.w	r3, {r0, r1}

	/* start state machine */
	myTimer.Start();
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4618      	mov	r0, r3
 8002700:	f7fe ff8c 	bl	800161c <_ZN11TimerObject5StartEv>

	/* start random machine */
	randomSeed(HAL_GetUIDw0() + HAL_GetUIDw1() + HAL_GetUIDw2());
 8002704:	f003 fd2c 	bl	8006160 <HAL_GetUIDw0>
 8002708:	4604      	mov	r4, r0
 800270a:	f003 fd33 	bl	8006174 <HAL_GetUIDw1>
 800270e:	4603      	mov	r3, r0
 8002710:	441c      	add	r4, r3
 8002712:	f003 fd39 	bl	8006188 <HAL_GetUIDw2>
 8002716:	4603      	mov	r3, r0
 8002718:	4423      	add	r3, r4
 800271a:	4618      	mov	r0, r3
 800271c:	f001 fda8 	bl	8004270 <_Z10randomSeedm>

	return true;
 8002720:	2301      	movs	r3, #1
}
 8002722:	4618      	mov	r0, r3
 8002724:	371c      	adds	r7, #28
 8002726:	46bd      	mov	sp, r7
 8002728:	bd90      	pop	{r4, r7, pc}
 800272a:	bf00      	nop
 800272c:	00d90ccd 	.word	0x00d90ccd

08002730 <_ZN8FanetMac12stateWrapperEv>:

/* wrapper to fit callback into c++ */
void FanetMac::stateWrapper()
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
	fmac.handleRx();
 8002734:	4803      	ldr	r0, [pc, #12]	; (8002744 <_ZN8FanetMac12stateWrapperEv+0x14>)
 8002736:	f000 f884 	bl	8002842 <_ZN8FanetMac8handleRxEv>
	fmac.handleTx();
 800273a:	4802      	ldr	r0, [pc, #8]	; (8002744 <_ZN8FanetMac12stateWrapperEv+0x14>)
 800273c:	f000 fa66 	bl	8002c0c <_ZN8FanetMac8handleTxEv>
}
 8002740:	bf00      	nop
 8002742:	bd80      	pop	{r7, pc}
 8002744:	20000240 	.word	0x20000240

08002748 <_ZN8FanetMac10isNeighborE7MacAddr>:

bool FanetMac::isNeighbor(MacAddr addr)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < neighbors.size(); i++)
 8002752:	2300      	movs	r3, #0
 8002754:	60fb      	str	r3, [r7, #12]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	334c      	adds	r3, #76	; 0x4c
 800275a:	4618      	mov	r0, r3
 800275c:	f000 fd78 	bl	8003250 <_ZN10LinkedListIP12NeighborNodeE4sizeEv>
 8002760:	4602      	mov	r2, r0
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	4293      	cmp	r3, r2
 8002766:	bfb4      	ite	lt
 8002768:	2301      	movlt	r3, #1
 800276a:	2300      	movge	r3, #0
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b00      	cmp	r3, #0
 8002770:	d014      	beq.n	800279c <_ZN8FanetMac10isNeighborE7MacAddr+0x54>
		if (neighbors.get(i)->addr == addr)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	334c      	adds	r3, #76	; 0x4c
 8002776:	68f9      	ldr	r1, [r7, #12]
 8002778:	4618      	mov	r0, r3
 800277a:	f000 fe73 	bl	8003464 <_ZN10LinkedListIP12NeighborNodeE3getEi>
 800277e:	4603      	mov	r3, r0
 8002780:	3304      	adds	r3, #4
 8002782:	6839      	ldr	r1, [r7, #0]
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff fcc7 	bl	8002118 <_ZNK7MacAddreqERKS_>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <_ZN8FanetMac10isNeighborE7MacAddr+0x4c>
			return true;
 8002790:	2301      	movs	r3, #1
 8002792:	e004      	b.n	800279e <_ZN8FanetMac10isNeighborE7MacAddr+0x56>
	for (int i = 0; i < neighbors.size(); i++)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	3301      	adds	r3, #1
 8002798:	60fb      	str	r3, [r7, #12]
 800279a:	e7dc      	b.n	8002756 <_ZN8FanetMac10isNeighborE7MacAddr+0xe>

	return false;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3710      	adds	r7, #16
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <_ZN8FanetMac3ackEP5Frame>:

/*
 * Generates ACK frame
 */
void FanetMac::ack(Frame* frm)
{
 80027a6:	b5b0      	push	{r4, r5, r7, lr}
 80027a8:	b086      	sub	sp, #24
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
 80027ae:	6039      	str	r1, [r7, #0]
#if MAC_debug_mode > 0
	printf("### generating ACK\n");
#endif

	/* generate reply */
	Frame *ack = new Frame(myAddr);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 80027b6:	f107 030c 	add.w	r3, r7, #12
 80027ba:	4611      	mov	r1, r2
 80027bc:	4618      	mov	r0, r3
 80027be:	f7fe ffdd 	bl	800177c <_ZN7MacAddrC1ERKS_>
 80027c2:	f107 050c 	add.w	r5, r7, #12
 80027c6:	2034      	movs	r0, #52	; 0x34
 80027c8:	f00a fc1a 	bl	800d000 <_Znwj>
 80027cc:	4603      	mov	r3, r0
 80027ce:	461c      	mov	r4, r3
 80027d0:	4629      	mov	r1, r5
 80027d2:	4620      	mov	r0, r4
 80027d4:	f7fe ffe5 	bl	80017a2 <_ZN5FrameC1E7MacAddr>
 80027d8:	617c      	str	r4, [r7, #20]
	ack->type = FRM_TYPE_ACK;
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	2200      	movs	r2, #0
 80027de:	61da      	str	r2, [r3, #28]
	ack->dest = frm->src;
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	683a      	ldr	r2, [r7, #0]
 80027e4:	3308      	adds	r3, #8
 80027e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027ea:	e883 0003 	stmia.w	r3, {r0, r1}

	/* only do a 2 hop ACK in case it was requested and we received it via a two hop link (= forward bit is not set anymore) */
	if (frm->ack_requested == FRM_ACK_TWOHOP && !frm->forward)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d109      	bne.n	800280a <_ZN8FanetMac3ackEP5Frame+0x64>
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	7d1b      	ldrb	r3, [r3, #20]
 80027fa:	f083 0301 	eor.w	r3, r3, #1
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	2b00      	cmp	r3, #0
 8002802:	d002      	beq.n	800280a <_ZN8FanetMac3ackEP5Frame+0x64>
		ack->forward = true;
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	2201      	movs	r2, #1
 8002808:	751a      	strb	r2, [r3, #20]

	/* add to front of fifo */
	//note: this will not fail by define
	if (tx_fifo.add(ack) != 0)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	3314      	adds	r3, #20
 800280e:	6979      	ldr	r1, [r7, #20]
 8002810:	4618      	mov	r0, r3
 8002812:	f7ff fe2b 	bl	800246c <_ZN7MacFifo3addEP5Frame>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	bf14      	ite	ne
 800281c:	2301      	movne	r3, #1
 800281e:	2300      	moveq	r3, #0
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b00      	cmp	r3, #0
 8002824:	d009      	beq.n	800283a <_ZN8FanetMac3ackEP5Frame+0x94>
		delete ack;
 8002826:	697c      	ldr	r4, [r7, #20]
 8002828:	2c00      	cmp	r4, #0
 800282a:	d006      	beq.n	800283a <_ZN8FanetMac3ackEP5Frame+0x94>
 800282c:	4620      	mov	r0, r4
 800282e:	f7ff fca5 	bl	800217c <_ZN5FrameD1Ev>
 8002832:	2134      	movs	r1, #52	; 0x34
 8002834:	4620      	mov	r0, r4
 8002836:	f00a fbdf 	bl	800cff8 <_ZdlPvj>
}
 800283a:	bf00      	nop
 800283c:	3718      	adds	r7, #24
 800283e:	46bd      	mov	sp, r7
 8002840:	bdb0      	pop	{r4, r5, r7, pc}

08002842 <_ZN8FanetMac8handleRxEv>:

/*
 * Processes stuff from rx_fifo
 */
void FanetMac::handleRx()
{
 8002842:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002844:	b093      	sub	sp, #76	; 0x4c
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
	/* nothing to do */
	if (rx_fifo.size() == 0)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	3330      	adds	r3, #48	; 0x30
 800284e:	4618      	mov	r0, r3
 8002850:	f7ff fce2 	bl	8002218 <_ZN7MacFifo4sizeEv>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	bf0c      	ite	eq
 800285a:	2301      	moveq	r3, #1
 800285c:	2300      	movne	r3, #0
 800285e:	b2db      	uxtb	r3, r3
 8002860:	2b00      	cmp	r3, #0
 8002862:	d033      	beq.n	80028cc <_ZN8FanetMac8handleRxEv+0x8a>
	{
		/* clean neighbors list */
		for (int i = 0; i < neighbors.size(); i++)
 8002864:	2300      	movs	r3, #0
 8002866:	647b      	str	r3, [r7, #68]	; 0x44
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	334c      	adds	r3, #76	; 0x4c
 800286c:	4618      	mov	r0, r3
 800286e:	f000 fcef 	bl	8003250 <_ZN10LinkedListIP12NeighborNodeE4sizeEv>
 8002872:	4602      	mov	r2, r0
 8002874:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002876:	4293      	cmp	r3, r2
 8002878:	bfb4      	ite	lt
 800287a:	2301      	movlt	r3, #1
 800287c:	2300      	movge	r3, #0
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2b00      	cmp	r3, #0
 8002882:	f000 81bd 	beq.w	8002c00 <_ZN8FanetMac8handleRxEv+0x3be>
		{
			if (neighbors.get(i)->isAround() == false)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	334c      	adds	r3, #76	; 0x4c
 800288a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800288c:	4618      	mov	r0, r3
 800288e:	f000 fde9 	bl	8003464 <_ZN10LinkedListIP12NeighborNodeE3getEi>
 8002892:	4603      	mov	r3, r0
 8002894:	4618      	mov	r0, r3
 8002896:	f7ff fcaa 	bl	80021ee <_ZN12NeighborNode8isAroundEv>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	bf0c      	ite	eq
 80028a0:	2301      	moveq	r3, #1
 80028a2:	2300      	movne	r3, #0
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d00c      	beq.n	80028c4 <_ZN8FanetMac8handleRxEv+0x82>
				delete neighbors.remove(i);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	334c      	adds	r3, #76	; 0x4c
 80028ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80028b0:	4618      	mov	r0, r3
 80028b2:	f000 fdec 	bl	800348e <_ZN10LinkedListIP12NeighborNodeE6removeEi>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d003      	beq.n	80028c4 <_ZN8FanetMac8handleRxEv+0x82>
 80028bc:	2110      	movs	r1, #16
 80028be:	4618      	mov	r0, r3
 80028c0:	f00a fb9a 	bl	800cff8 <_ZdlPvj>
		for (int i = 0; i < neighbors.size(); i++)
 80028c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028c6:	3301      	adds	r3, #1
 80028c8:	647b      	str	r3, [r7, #68]	; 0x44
 80028ca:	e7cd      	b.n	8002868 <_ZN8FanetMac8handleRxEv+0x26>
		}

		return;
	}

	Frame *frm = rx_fifo.front();
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	3330      	adds	r3, #48	; 0x30
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7ff fdb0 	bl	8002436 <_ZN7MacFifo5frontEv>
 80028d6:	63b8      	str	r0, [r7, #56]	; 0x38
	if(frm == nullptr)
 80028d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f000 8192 	beq.w	8002c04 <_ZN8FanetMac8handleRxEv+0x3c2>
		return;

	/* build up neighbors list */
	bool neighbor_known = false;
 80028e0:	2300      	movs	r3, #0
 80028e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	for (int i = 0; i < neighbors.size(); i++)
 80028e6:	2300      	movs	r3, #0
 80028e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	334c      	adds	r3, #76	; 0x4c
 80028ee:	4618      	mov	r0, r3
 80028f0:	f000 fcae 	bl	8003250 <_ZN10LinkedListIP12NeighborNodeE4sizeEv>
 80028f4:	4602      	mov	r2, r0
 80028f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028f8:	4293      	cmp	r3, r2
 80028fa:	bfb4      	ite	lt
 80028fc:	2301      	movlt	r3, #1
 80028fe:	2300      	movge	r3, #0
 8002900:	b2db      	uxtb	r3, r3
 8002902:	2b00      	cmp	r3, #0
 8002904:	d032      	beq.n	800296c <_ZN8FanetMac8handleRxEv+0x12a>
	{
		if (neighbors.get(i)->addr == frm->src)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	334c      	adds	r3, #76	; 0x4c
 800290a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800290c:	4618      	mov	r0, r3
 800290e:	f000 fda9 	bl	8003464 <_ZN10LinkedListIP12NeighborNodeE3getEi>
 8002912:	4603      	mov	r3, r0
 8002914:	3304      	adds	r3, #4
 8002916:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002918:	4611      	mov	r1, r2
 800291a:	4618      	mov	r0, r3
 800291c:	f7ff fbfc 	bl	8002118 <_ZNK7MacAddreqERKS_>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d01e      	beq.n	8002964 <_ZN8FanetMac8handleRxEv+0x122>
		{
			/* update presents */
			neighbors.get(i)->seen();
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	334c      	adds	r3, #76	; 0x4c
 800292a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800292c:	4618      	mov	r0, r3
 800292e:	f000 fd99 	bl	8003464 <_ZN10LinkedListIP12NeighborNodeE3getEi>
 8002932:	4603      	mov	r3, r0
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff fc4d 	bl	80021d4 <_ZN12NeighborNode4seenEv>
			if(frm->type == FRM_TYPE_TRACKING || frm->type == FRM_TYPE_GROUNDTRACKING)
 800293a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800293c:	69db      	ldr	r3, [r3, #28]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d003      	beq.n	800294a <_ZN8FanetMac8handleRxEv+0x108>
 8002942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002944:	69db      	ldr	r3, [r3, #28]
 8002946:	2b07      	cmp	r3, #7
 8002948:	d108      	bne.n	800295c <_ZN8FanetMac8handleRxEv+0x11a>
				neighbors.get(i)->hasTracking = true;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	334c      	adds	r3, #76	; 0x4c
 800294e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002950:	4618      	mov	r0, r3
 8002952:	f000 fd87 	bl	8003464 <_ZN10LinkedListIP12NeighborNodeE3getEi>
 8002956:	4603      	mov	r3, r0
 8002958:	2201      	movs	r2, #1
 800295a:	731a      	strb	r2, [r3, #12]
			neighbor_known = true;
 800295c:	2301      	movs	r3, #1
 800295e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
			break;
 8002962:	e003      	b.n	800296c <_ZN8FanetMac8handleRxEv+0x12a>
	for (int i = 0; i < neighbors.size(); i++)
 8002964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002966:	3301      	adds	r3, #1
 8002968:	63fb      	str	r3, [r7, #60]	; 0x3c
 800296a:	e7be      	b.n	80028ea <_ZN8FanetMac8handleRxEv+0xa8>
		}
	}

	/* neighbor unknown until now, add to list */
	if (neighbor_known == false)
 800296c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002970:	2b00      	cmp	r3, #0
 8002972:	d13d      	bne.n	80029f0 <_ZN8FanetMac8handleRxEv+0x1ae>
	{
		/* too many neighbors, delete oldest member */
		if (neighbors.size() > MAC_NEIGHBOR_SIZE)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	334c      	adds	r3, #76	; 0x4c
 8002978:	4618      	mov	r0, r3
 800297a:	f000 fc69 	bl	8003250 <_ZN10LinkedListIP12NeighborNodeE4sizeEv>
 800297e:	4603      	mov	r3, r0
 8002980:	2b40      	cmp	r3, #64	; 0x40
 8002982:	bfcc      	ite	gt
 8002984:	2301      	movgt	r3, #1
 8002986:	2300      	movle	r3, #0
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d00b      	beq.n	80029a6 <_ZN8FanetMac8handleRxEv+0x164>
			delete neighbors.shift();
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	334c      	adds	r3, #76	; 0x4c
 8002992:	4618      	mov	r0, r3
 8002994:	f000 fdc9 	bl	800352a <_ZN10LinkedListIP12NeighborNodeE5shiftEv>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d003      	beq.n	80029a6 <_ZN8FanetMac8handleRxEv+0x164>
 800299e:	2110      	movs	r1, #16
 80029a0:	4618      	mov	r0, r3
 80029a2:	f00a fb29 	bl	800cff8 <_ZdlPvj>

		neighbors.add(new NeighborNode(frm->src, frm->type == FRM_TYPE_TRACKING || frm->type == FRM_TYPE_GROUNDTRACKING));
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f103 044c 	add.w	r4, r3, #76	; 0x4c
 80029ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80029ae:	f107 030c 	add.w	r3, r7, #12
 80029b2:	4611      	mov	r1, r2
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7fe fee1 	bl	800177c <_ZN7MacAddrC1ERKS_>
 80029ba:	f107 050c 	add.w	r5, r7, #12
 80029be:	2010      	movs	r0, #16
 80029c0:	f00a fb1e 	bl	800d000 <_Znwj>
 80029c4:	4603      	mov	r3, r0
 80029c6:	461e      	mov	r6, r3
 80029c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ca:	69db      	ldr	r3, [r3, #28]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d003      	beq.n	80029d8 <_ZN8FanetMac8handleRxEv+0x196>
 80029d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029d2:	69db      	ldr	r3, [r3, #28]
 80029d4:	2b07      	cmp	r3, #7
 80029d6:	d101      	bne.n	80029dc <_ZN8FanetMac8handleRxEv+0x19a>
 80029d8:	2301      	movs	r3, #1
 80029da:	e000      	b.n	80029de <_ZN8FanetMac8handleRxEv+0x19c>
 80029dc:	2300      	movs	r3, #0
 80029de:	461a      	mov	r2, r3
 80029e0:	4629      	mov	r1, r5
 80029e2:	4630      	mov	r0, r6
 80029e4:	f7ff fbdc 	bl	80021a0 <_ZN12NeighborNodeC1E7MacAddrb>
 80029e8:	4631      	mov	r1, r6
 80029ea:	4620      	mov	r0, r4
 80029ec:	f000 fdd4 	bl	8003598 <_ZN10LinkedListIP12NeighborNodeE3addES1_>
	}

	/* is the frame a forwarded one and is it still in the tx queue? */
	Frame *frm_list = tx_fifo.frame_in_list(frm);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	3314      	adds	r3, #20
 80029f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7ff fce0 	bl	80023bc <_ZN7MacFifo13frame_in_listEP5Frame>
 80029fc:	6378      	str	r0, [r7, #52]	; 0x34
	if (frm_list != NULL)
 80029fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d01a      	beq.n	8002a3a <_ZN8FanetMac8handleRxEv+0x1f8>
	{
		/* frame already in tx queue */

		if (frm->rssi > frm_list->rssi + MAC_FORWARD_MIN_DB_BOOST)
 8002a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0c:	3314      	adds	r3, #20
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	dd06      	ble.n	8002a20 <_ZN8FanetMac8handleRxEv+0x1de>
			/* somebody broadcasted it already towards our direction */
#if MAC_debug_mode > 0
			printf("### rx frame better than org. dropping both.\n");
#endif
			/* received frame is at least 20dB better than the original -> no need to rebroadcast */
			tx_fifo.remove_delete(frm_list);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	3314      	adds	r3, #20
 8002a16:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7ff fdab 	bl	8002574 <_ZN7MacFifo13remove_deleteEP5Frame>
 8002a1e:	e0e4      	b.n	8002bea <_ZN8FanetMac8handleRxEv+0x3a8>
		{
#if MAC_debug_mode >= 2
			printf("### adjusting tx time");
#endif
			/* adjusting new departure time */
			frm_list->next_tx = HAL_GetTick() + random(MAC_FORWARD_DELAY_MIN, MAC_FORWARD_DELAY_MAX);
 8002a20:	f003 fb94 	bl	800614c <HAL_GetTick>
 8002a24:	4604      	mov	r4, r0
 8002a26:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002a2a:	2064      	movs	r0, #100	; 0x64
 8002a2c:	f001 fc45 	bl	80042ba <_Z6randomii>
 8002a30:	4603      	mov	r3, r0
 8002a32:	18e2      	adds	r2, r4, r3
 8002a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a36:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a38:	e0d7      	b.n	8002bea <_ZN8FanetMac8handleRxEv+0x3a8>
		}
	}
	else
	{
		if ((frm->dest == MacAddr() || frm->dest == myAddr) && frm->src != myAddr)
 8002a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a3c:	f103 0408 	add.w	r4, r3, #8
 8002a40:	f107 0314 	add.w	r3, r7, #20
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7fe fe89 	bl	800175c <_ZN7MacAddrC1Ev>
 8002a4a:	f107 0314 	add.w	r3, r7, #20
 8002a4e:	4619      	mov	r1, r3
 8002a50:	4620      	mov	r0, r4
 8002a52:	f7ff fb61 	bl	8002118 <_ZNK7MacAddreqERKS_>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d10c      	bne.n	8002a76 <_ZN8FanetMac8handleRxEv+0x234>
 8002a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a5e:	f103 0208 	add.w	r2, r3, #8
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8002a68:	4619      	mov	r1, r3
 8002a6a:	4610      	mov	r0, r2
 8002a6c:	f7ff fb54 	bl	8002118 <_ZNK7MacAddreqERKS_>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00c      	beq.n	8002a90 <_ZN8FanetMac8handleRxEv+0x24e>
 8002a76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8002a7e:	4619      	mov	r1, r3
 8002a80:	4610      	mov	r0, r2
 8002a82:	f7ff fb62 	bl	800214a <_ZNK7MacAddrneERKS_>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <_ZN8FanetMac8handleRxEv+0x24e>
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e000      	b.n	8002a92 <_ZN8FanetMac8handleRxEv+0x250>
 8002a90:	2300      	movs	r3, #0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d040      	beq.n	8002b18 <_ZN8FanetMac8handleRxEv+0x2d6>
		{
			/* a relevant frame */
			if (frm->type == FRM_TYPE_ACK)
 8002a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a98:	69db      	ldr	r3, [r3, #28]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d126      	bne.n	8002aec <_ZN8FanetMac8handleRxEv+0x2aa>
			{
				if (tx_fifo.remove_delete_acked_frame(frm->src) && myApp != NULL)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f103 0414 	add.w	r4, r3, #20
 8002aa4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002aa6:	f107 031c 	add.w	r3, r7, #28
 8002aaa:	4611      	mov	r1, r2
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7fe fe65 	bl	800177c <_ZN7MacAddrC1ERKS_>
 8002ab2:	f107 031c 	add.w	r3, r7, #28
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	4620      	mov	r0, r4
 8002aba:	f7ff fdab 	bl	8002614 <_ZN7MacFifo25remove_delete_acked_frameE7MacAddr>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d005      	beq.n	8002ad0 <_ZN8FanetMac8handleRxEv+0x28e>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <_ZN8FanetMac8handleRxEv+0x28e>
 8002acc:	2301      	movs	r3, #1
 8002ace:	e000      	b.n	8002ad2 <_ZN8FanetMac8handleRxEv+0x290>
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d020      	beq.n	8002b18 <_ZN8FanetMac8handleRxEv+0x2d6>
					myApp->handle_acked(true, frm->src);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	3314      	adds	r3, #20
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ae6:	2101      	movs	r1, #1
 8002ae8:	4798      	blx	r3
 8002aea:	e015      	b.n	8002b18 <_ZN8FanetMac8handleRxEv+0x2d6>
			}
			else
			{
				/* generate ACK */
				if (frm->ack_requested)
 8002aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d003      	beq.n	8002afc <_ZN8FanetMac8handleRxEv+0x2ba>
					ack(frm);
 8002af4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f7ff fe55 	bl	80027a6 <_ZN8FanetMac3ackEP5Frame>

				/* forward frame */
				if (myApp != NULL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d009      	beq.n	8002b18 <_ZN8FanetMac8handleRxEv+0x2d6>
					myApp->handle_frame(frm);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	3318      	adds	r3, #24
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b14:	4610      	mov	r0, r2
 8002b16:	4798      	blx	r3
			}
		}

		/* Forward frame */
		if (doForward && frm->forward && tx_fifo.size() < MAC_FIFO_SIZE - 3 && frm->rssi <= MAC_FORWARD_MAX_RSSI_DBM
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
				&& (frm->dest == MacAddr() || isNeighbor(frm->dest)) && sx1272_get_airlimit() < 0.5f)
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d040      	beq.n	8002ba4 <_ZN8FanetMac8handleRxEv+0x362>
		if (doForward && frm->forward && tx_fifo.size() < MAC_FIFO_SIZE - 3 && frm->rssi <= MAC_FORWARD_MAX_RSSI_DBM
 8002b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b24:	7d1b      	ldrb	r3, [r3, #20]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d03c      	beq.n	8002ba4 <_ZN8FanetMac8handleRxEv+0x362>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	3314      	adds	r3, #20
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7ff fb72 	bl	8002218 <_ZN7MacFifo4sizeEv>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b04      	cmp	r3, #4
 8002b38:	dc34      	bgt.n	8002ba4 <_ZN8FanetMac8handleRxEv+0x362>
 8002b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3e:	f113 0f59 	cmn.w	r3, #89	; 0x59
 8002b42:	da2f      	bge.n	8002ba4 <_ZN8FanetMac8handleRxEv+0x362>
				&& (frm->dest == MacAddr() || isNeighbor(frm->dest)) && sx1272_get_airlimit() < 0.5f)
 8002b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b46:	f103 0408 	add.w	r4, r3, #8
 8002b4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7fe fe04 	bl	800175c <_ZN7MacAddrC1Ev>
 8002b54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b58:	4619      	mov	r1, r3
 8002b5a:	4620      	mov	r0, r4
 8002b5c:	f7ff fadc 	bl	8002118 <_ZNK7MacAddreqERKS_>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d111      	bne.n	8002b8a <_ZN8FanetMac8handleRxEv+0x348>
 8002b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b68:	f103 0208 	add.w	r2, r3, #8
 8002b6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b70:	4611      	mov	r1, r2
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7fe fe02 	bl	800177c <_ZN7MacAddrC1ERKS_>
 8002b78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f7ff fde2 	bl	8002748 <_ZN8FanetMac10isNeighborE7MacAddr>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00c      	beq.n	8002ba4 <_ZN8FanetMac8handleRxEv+0x362>
 8002b8a:	f002 fddd 	bl	8005748 <sx1272_get_airlimit>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7fe fabd 	bl	8001114 <__aeabi_fcmplt>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <_ZN8FanetMac8handleRxEv+0x362>
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e000      	b.n	8002ba6 <_ZN8FanetMac8handleRxEv+0x364>
 8002ba4:	2300      	movs	r3, #0
		if (doForward && frm->forward && tx_fifo.size() < MAC_FIFO_SIZE - 3 && frm->rssi <= MAC_FORWARD_MAX_RSSI_DBM
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d01f      	beq.n	8002bea <_ZN8FanetMac8handleRxEv+0x3a8>
		{
#if MAC_debug_mode >= 2
			printf("### adding new forward frame\n");
#endif
			/* prevent from re-forwarding */
			frm->forward = false;
 8002baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bac:	2200      	movs	r2, #0
 8002bae:	751a      	strb	r2, [r3, #20]

			/* generate new tx time */
			frm->next_tx = HAL_GetTick() + random(MAC_FORWARD_DELAY_MIN, MAC_FORWARD_DELAY_MAX);
 8002bb0:	f003 facc 	bl	800614c <HAL_GetTick>
 8002bb4:	4604      	mov	r4, r0
 8002bb6:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002bba:	2064      	movs	r0, #100	; 0x64
 8002bbc:	f001 fb7d 	bl	80042ba <_Z6randomii>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	18e2      	adds	r2, r4, r3
 8002bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bc6:	62da      	str	r2, [r3, #44]	; 0x2c
			frm->num_tx = !!frm->ack_requested;
 8002bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bca:	691b      	ldr	r3, [r3, #16]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	bf14      	ite	ne
 8002bd0:	2301      	movne	r3, #1
 8002bd2:	2300      	moveq	r3, #0
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bda:	629a      	str	r2, [r3, #40]	; 0x28

			/* add to list */
			tx_fifo.add(frm);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	3314      	adds	r3, #20
 8002be0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7ff fc42 	bl	800246c <_ZN7MacFifo3addEP5Frame>
			return;
 8002be8:	e00d      	b.n	8002c06 <_ZN8FanetMac8handleRxEv+0x3c4>
		}
	}

	/* discard frame */
	delete frm;
 8002bea:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8002bec:	2c00      	cmp	r4, #0
 8002bee:	d00a      	beq.n	8002c06 <_ZN8FanetMac8handleRxEv+0x3c4>
 8002bf0:	4620      	mov	r0, r4
 8002bf2:	f7ff fac3 	bl	800217c <_ZN5FrameD1Ev>
 8002bf6:	2134      	movs	r1, #52	; 0x34
 8002bf8:	4620      	mov	r0, r4
 8002bfa:	f00a f9fd 	bl	800cff8 <_ZdlPvj>
 8002bfe:	e002      	b.n	8002c06 <_ZN8FanetMac8handleRxEv+0x3c4>
		return;
 8002c00:	bf00      	nop
 8002c02:	e000      	b.n	8002c06 <_ZN8FanetMac8handleRxEv+0x3c4>
		return;
 8002c04:	bf00      	nop
}
 8002c06:	374c      	adds	r7, #76	; 0x4c
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c0c <_ZN8FanetMac8handleTxEv>:

/*
 * get a from from tx_fifo (or the app layer) and transmit it
 */
void FanetMac::handleTx()
{
 8002c0c:	b5b0      	push	{r4, r5, r7, lr}
 8002c0e:	b08c      	sub	sp, #48	; 0x30
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
	/* still in backoff or chip turned off*/
	if (HAL_GetTick() < csma_next_tx  || !sx1272_isArmed())
 8002c14:	f003 fa9a 	bl	800614c <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d307      	bcc.n	8002c32 <_ZN8FanetMac8handleTxEv+0x26>
 8002c22:	f002 fd99 	bl	8005758 <sx1272_isArmed>
 8002c26:	4603      	mov	r3, r0
 8002c28:	f083 0301 	eor.w	r3, r3, #1
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <_ZN8FanetMac8handleTxEv+0x2a>
 8002c32:	2301      	movs	r3, #1
 8002c34:	e000      	b.n	8002c38 <_ZN8FanetMac8handleTxEv+0x2c>
 8002c36:	2300      	movs	r3, #0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f040 819e 	bne.w	8002f7a <_ZN8FanetMac8handleTxEv+0x36e>
		return;

	/* find next send-able packet */
	/* this breaks the layering. however, this approach is much more efficient as the app layer now has a much higher priority */
	Frame* frm;
	bool app_tx = false;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	if (myApp->is_broadcast_ready(neighbors.size()))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	3308      	adds	r3, #8
 8002c50:	681c      	ldr	r4, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	334c      	adds	r3, #76	; 0x4c
 8002c56:	4618      	mov	r0, r3
 8002c58:	f000 fafa 	bl	8003250 <_ZN10LinkedListIP12NeighborNodeE4sizeEv>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	4619      	mov	r1, r3
 8002c60:	4628      	mov	r0, r5
 8002c62:	47a0      	blx	r4
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d025      	beq.n	8002cb6 <_ZN8FanetMac8handleTxEv+0xaa>
	{
		/* the app wants to broadcast the glider state */
		frm = myApp->get_frame();
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	3310      	adds	r3, #16
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4610      	mov	r0, r2
 8002c7a:	4798      	blx	r3
 8002c7c:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (frm == NULL)
 8002c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	f000 817c 	beq.w	8002f7e <_ZN8FanetMac8handleTxEv+0x372>
			return;

		if (neighbors.size() <= MAC_MAXNEIGHBORS_4_TRACKING_2HOP)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	334c      	adds	r3, #76	; 0x4c
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f000 fae0 	bl	8003250 <_ZN10LinkedListIP12NeighborNodeE4sizeEv>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b05      	cmp	r3, #5
 8002c94:	bfd4      	ite	le
 8002c96:	2301      	movle	r3, #1
 8002c98:	2300      	movgt	r3, #0
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d003      	beq.n	8002ca8 <_ZN8FanetMac8handleTxEv+0x9c>
			frm->forward = true;
 8002ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	751a      	strb	r2, [r3, #20]
 8002ca6:	e002      	b.n	8002cae <_ZN8FanetMac8handleTxEv+0xa2>
		else
			frm->forward = false;
 8002ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002caa:	2200      	movs	r2, #0
 8002cac:	751a      	strb	r2, [r3, #20]

		app_tx = true;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002cb4:	e07b      	b.n	8002dae <_ZN8FanetMac8handleTxEv+0x1a2>
	}
	else if(sx1272_get_airlimit() < 0.9f)
 8002cb6:	f002 fd47 	bl	8005748 <sx1272_get_airlimit>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	4614      	mov	r4, r2
 8002cc0:	49a5      	ldr	r1, [pc, #660]	; (8002f58 <_ZN8FanetMac8handleTxEv+0x34c>)
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7fe fa26 	bl	8001114 <__aeabi_fcmplt>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d101      	bne.n	8002cd2 <_ZN8FanetMac8handleTxEv+0xc6>
 8002cce:	2300      	movs	r3, #0
 8002cd0:	461c      	mov	r4, r3
 8002cd2:	b2e3      	uxtb	r3, r4
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	f000 8154 	beq.w	8002f82 <_ZN8FanetMac8handleTxEv+0x376>
			queue_length = current_qlen;
		}
#endif

		/* get a frame from the fifo */
		frm = tx_fifo.get_nexttx();
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	3314      	adds	r3, #20
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7ff fb1c 	bl	800231c <_ZN7MacFifo10get_nexttxEv>
 8002ce4:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (frm == nullptr)
 8002ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	f000 814c 	beq.w	8002f86 <_ZN8FanetMac8handleTxEv+0x37a>
			return;

		/* frame w/o a received ack and no more re-transmissions left */
		if (frm->ack_requested && frm->num_tx <= 0)
 8002cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d029      	beq.n	8002d4a <_ZN8FanetMac8handleTxEv+0x13e>
 8002cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	dc25      	bgt.n	8002d4a <_ZN8FanetMac8handleTxEv+0x13e>
		{
#if MAC_debug_mode > 0
			printf("### Frame, 0x%02X NACK!\n", frm->type);
#endif
			if (myApp != nullptr && frm->src == myAddr)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00c      	beq.n	8002d20 <_ZN8FanetMac8handleTxEv+0x114>
 8002d06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8002d0e:	4619      	mov	r1, r3
 8002d10:	4610      	mov	r0, r2
 8002d12:	f7ff fa01 	bl	8002118 <_ZNK7MacAddreqERKS_>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d001      	beq.n	8002d20 <_ZN8FanetMac8handleTxEv+0x114>
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e000      	b.n	8002d22 <_ZN8FanetMac8handleTxEv+0x116>
 8002d20:	2300      	movs	r3, #0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00a      	beq.n	8002d3c <_ZN8FanetMac8handleTxEv+0x130>
				myApp->handle_acked(false, frm->dest);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	3314      	adds	r3, #20
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d36:	3208      	adds	r2, #8
 8002d38:	2100      	movs	r1, #0
 8002d3a:	4798      	blx	r3
			tx_fifo.remove_delete(frm);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	3314      	adds	r3, #20
 8002d40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7ff fc16 	bl	8002574 <_ZN7MacFifo13remove_deleteEP5Frame>
			return;
 8002d48:	e120      	b.n	8002f8c <_ZN8FanetMac8handleTxEv+0x380>
		}

		/* unicast frame w/o forwarding and it is not a direct neighbor */
		if (frm->forward == false && frm->dest != MacAddr() && isNeighbor(frm->dest) == false)
 8002d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d4c:	7d1b      	ldrb	r3, [r3, #20]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d124      	bne.n	8002d9c <_ZN8FanetMac8handleTxEv+0x190>
 8002d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d54:	f103 0408 	add.w	r4, r3, #8
 8002d58:	f107 0310 	add.w	r3, r7, #16
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7fe fcfd 	bl	800175c <_ZN7MacAddrC1Ev>
 8002d62:	f107 0310 	add.w	r3, r7, #16
 8002d66:	4619      	mov	r1, r3
 8002d68:	4620      	mov	r0, r4
 8002d6a:	f7ff f9ee 	bl	800214a <_ZNK7MacAddrneERKS_>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d013      	beq.n	8002d9c <_ZN8FanetMac8handleTxEv+0x190>
 8002d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d76:	f103 0208 	add.w	r2, r3, #8
 8002d7a:	f107 0318 	add.w	r3, r7, #24
 8002d7e:	4611      	mov	r1, r2
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7fe fcfb 	bl	800177c <_ZN7MacAddrC1ERKS_>
 8002d86:	f107 0318 	add.w	r3, r7, #24
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f7ff fcdb 	bl	8002748 <_ZN8FanetMac10isNeighborE7MacAddr>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d101      	bne.n	8002d9c <_ZN8FanetMac8handleTxEv+0x190>
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e000      	b.n	8002d9e <_ZN8FanetMac8handleTxEv+0x192>
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d002      	beq.n	8002da8 <_ZN8FanetMac8handleTxEv+0x19c>
			frm->forward = true;
 8002da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da4:	2201      	movs	r2, #1
 8002da6:	751a      	strb	r2, [r3, #20]

		app_tx = false;
 8002da8:	2300      	movs	r3, #0
 8002daa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		return;
	}

	/* serialize frame */
	uint8_t* buffer;
	int blength = frm->serialize(buffer);
 8002dae:	f107 030c 	add.w	r3, r7, #12
 8002db2:	4619      	mov	r1, r3
 8002db4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002db6:	f001 f843 	bl	8003e40 <_ZN5Frame9serializeERPh>
 8002dba:	6278      	str	r0, [r7, #36]	; 0x24
	if (blength < 0)
 8002dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	da16      	bge.n	8002df0 <_ZN8FanetMac8handleTxEv+0x1e4>
	{
#if MAC_debug_mode > 0
		printf("### Problem serialization type 0x%02X. removing.\n", frm->type);
#endif
		/* problem while assembling the frame */
		if (app_tx)
 8002dc2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00b      	beq.n	8002de2 <_ZN8FanetMac8handleTxEv+0x1d6>
			delete frm;
 8002dca:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8002dcc:	2c00      	cmp	r4, #0
 8002dce:	f000 80dc 	beq.w	8002f8a <_ZN8FanetMac8handleTxEv+0x37e>
 8002dd2:	4620      	mov	r0, r4
 8002dd4:	f7ff f9d2 	bl	800217c <_ZN5FrameD1Ev>
 8002dd8:	2134      	movs	r1, #52	; 0x34
 8002dda:	4620      	mov	r0, r4
 8002ddc:	f00a f90c 	bl	800cff8 <_ZdlPvj>
		else
			tx_fifo.remove_delete(frm);
		return;
 8002de0:	e0d3      	b.n	8002f8a <_ZN8FanetMac8handleTxEv+0x37e>
			tx_fifo.remove_delete(frm);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	3314      	adds	r3, #20
 8002de6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7ff fbc3 	bl	8002574 <_ZN7MacFifo13remove_deleteEP5Frame>
		return;
 8002dee:	e0cc      	b.n	8002f8a <_ZN8FanetMac8handleTxEv+0x37e>
	printf(" ");
#endif

	/* channel free and transmit? */
	//note: for only a few nodes around, increase the coding rate to ensure a more robust transmission
	int tx_ret = sx1272_sendFrame(buffer, blength, neighbors.size() < MAC_CODING48_THRESHOLD ? CR_8 : CR_5);
 8002df0:	68fc      	ldr	r4, [r7, #12]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	334c      	adds	r3, #76	; 0x4c
 8002df6:	4618      	mov	r0, r3
 8002df8:	f000 fa2a 	bl	8003250 <_ZN10LinkedListIP12NeighborNodeE4sizeEv>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b07      	cmp	r3, #7
 8002e00:	dc01      	bgt.n	8002e06 <_ZN8FanetMac8handleTxEv+0x1fa>
 8002e02:	2320      	movs	r3, #32
 8002e04:	e000      	b.n	8002e08 <_ZN8FanetMac8handleTxEv+0x1fc>
 8002e06:	2308      	movs	r3, #8
 8002e08:	461a      	mov	r2, r3
 8002e0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e0c:	4620      	mov	r0, r4
 8002e0e:	f002 fcaa 	bl	8005766 <sx1272_sendFrame>
 8002e12:	6238      	str	r0, [r7, #32]
	delete[] buffer;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d003      	beq.n	8002e22 <_ZN8FanetMac8handleTxEv+0x216>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f00a f8ed 	bl	800cffc <_ZdaPv>

	if (tx_ret == TX_OK)
 8002e22:	6a3b      	ldr	r3, [r7, #32]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d166      	bne.n	8002ef6 <_ZN8FanetMac8handleTxEv+0x2ea>
	{
#if MAC_debug_mode > 0
		printf("done.\n");
#endif

		if (app_tx)
 8002e28:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d015      	beq.n	8002e5c <_ZN8FanetMac8handleTxEv+0x250>
		{
			/* app tx */
			myApp->broadcast_successful(frm->type);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	330c      	adds	r3, #12
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e40:	69d2      	ldr	r2, [r2, #28]
 8002e42:	4611      	mov	r1, r2
 8002e44:	4798      	blx	r3
			delete frm;
 8002e46:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8002e48:	2c00      	cmp	r4, #0
 8002e4a:	d046      	beq.n	8002eda <_ZN8FanetMac8handleTxEv+0x2ce>
 8002e4c:	4620      	mov	r0, r4
 8002e4e:	f7ff f995 	bl	800217c <_ZN5FrameD1Ev>
 8002e52:	2134      	movs	r1, #52	; 0x34
 8002e54:	4620      	mov	r0, r4
 8002e56:	f00a f8cf 	bl	800cff8 <_ZdlPvj>
 8002e5a:	e03e      	b.n	8002eda <_ZN8FanetMac8handleTxEv+0x2ce>
		else
		{
			/* fifo tx */

			/* transmission successful */
			if (!frm->ack_requested || frm->src != myAddr)
 8002e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d00a      	beq.n	8002e7a <_ZN8FanetMac8handleTxEv+0x26e>
 8002e64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	4610      	mov	r0, r2
 8002e70:	f7ff f96b 	bl	800214a <_ZNK7MacAddrneERKS_>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <_ZN8FanetMac8handleTxEv+0x272>
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e000      	b.n	8002e80 <_ZN8FanetMac8handleTxEv+0x274>
 8002e7e:	2300      	movs	r3, #0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d006      	beq.n	8002e92 <_ZN8FanetMac8handleTxEv+0x286>
			{
				/* remove frame from FIFO */
				tx_fifo.remove_delete(frm);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	3314      	adds	r3, #20
 8002e88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7ff fb72 	bl	8002574 <_ZN7MacFifo13remove_deleteEP5Frame>
 8002e90:	e023      	b.n	8002eda <_ZN8FanetMac8handleTxEv+0x2ce>
			}
			else
			{
				/* update next transmission */
				if (--frm->num_tx > 0)
 8002e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e96:	1e5a      	subs	r2, r3, #1
 8002e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e9a:	629a      	str	r2, [r3, #40]	; 0x28
 8002e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	bfcc      	ite	gt
 8002ea4:	2301      	movgt	r3, #1
 8002ea6:	2300      	movle	r3, #0
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00e      	beq.n	8002ecc <_ZN8FanetMac8handleTxEv+0x2c0>
					frm->next_tx = HAL_GetTick() + (MAC_TX_RETRANSMISSION_TIME * (MAC_TX_RETRANSMISSION_RETRYS - frm->num_tx));
 8002eae:	f003 f94d 	bl	800614c <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb8:	f1c3 0303 	rsb	r3, r3, #3
 8002ebc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002ec0:	fb01 f303 	mul.w	r3, r1, r3
 8002ec4:	441a      	add	r2, r3
 8002ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ec8:	62da      	str	r2, [r3, #44]	; 0x2c
 8002eca:	e006      	b.n	8002eda <_ZN8FanetMac8handleTxEv+0x2ce>
				else
					frm->next_tx = HAL_GetTick() + MAC_TX_ACKTIMEOUT;
 8002ecc:	f003 f93e 	bl	800614c <HAL_GetTick>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 8002ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed8:	62da      	str	r2, [r3, #44]	; 0x2c
			}
		}

		/* ready for a new transmission in */
		csma_backoff_exp = MAC_TX_BACKOFF_EXP_MIN;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2207      	movs	r2, #7
 8002ede:	679a      	str	r2, [r3, #120]	; 0x78
		csma_next_tx = HAL_GetTick() + MAC_TX_MINPREAMBLEHEADERTIME_MS + (blength * MAC_TX_TIMEPERBYTE_MS);
 8002ee0:	f003 f934 	bl	800614c <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee8:	005b      	lsls	r3, r3, #1
 8002eea:	4413      	add	r3, r2
 8002eec:	f103 020f 	add.w	r2, r3, #15
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	675a      	str	r2, [r3, #116]	; 0x74
 8002ef4:	e04a      	b.n	8002f8c <_ZN8FanetMac8handleTxEv+0x380>
	}
	else if (tx_ret == TX_RX_ONGOING || tx_ret == TX_TX_ONGOING)
 8002ef6:	6a3b      	ldr	r3, [r7, #32]
 8002ef8:	f113 0f02 	cmn.w	r3, #2
 8002efc:	d003      	beq.n	8002f06 <_ZN8FanetMac8handleTxEv+0x2fa>
 8002efe:	6a3b      	ldr	r3, [r7, #32]
 8002f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f04:	d12a      	bne.n	8002f5c <_ZN8FanetMac8handleTxEv+0x350>
			printf("rx, abort.\n");
		else
			printf("tx not done yet, abort.\n");
#endif

		if (app_tx)
 8002f06:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d009      	beq.n	8002f22 <_ZN8FanetMac8handleTxEv+0x316>
			delete frm;
 8002f0e:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8002f10:	2c00      	cmp	r4, #0
 8002f12:	d006      	beq.n	8002f22 <_ZN8FanetMac8handleTxEv+0x316>
 8002f14:	4620      	mov	r0, r4
 8002f16:	f7ff f931 	bl	800217c <_ZN5FrameD1Ev>
 8002f1a:	2134      	movs	r1, #52	; 0x34
 8002f1c:	4620      	mov	r0, r4
 8002f1e:	f00a f86b 	bl	800cff8 <_ZdlPvj>

		/* channel busy, increment backoff exp */
		if (csma_backoff_exp < MAC_TX_BACKOFF_EXP_MAX)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f26:	2b0b      	cmp	r3, #11
 8002f28:	dc04      	bgt.n	8002f34 <_ZN8FanetMac8handleTxEv+0x328>
			csma_backoff_exp++;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f2e:	1c5a      	adds	r2, r3, #1
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	679a      	str	r2, [r3, #120]	; 0x78

		/* next tx try */
		csma_next_tx = HAL_GetTick() + random(1 << (MAC_TX_BACKOFF_EXP_MIN - 1), 1 << csma_backoff_exp);
 8002f34:	f003 f90a 	bl	800614c <HAL_GetTick>
 8002f38:	4604      	mov	r4, r0
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f3e:	2201      	movs	r2, #1
 8002f40:	fa02 f303 	lsl.w	r3, r2, r3
 8002f44:	4619      	mov	r1, r3
 8002f46:	2040      	movs	r0, #64	; 0x40
 8002f48:	f001 f9b7 	bl	80042ba <_Z6randomii>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	18e2      	adds	r2, r4, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	675a      	str	r2, [r3, #116]	; 0x74
 8002f54:	e01a      	b.n	8002f8c <_ZN8FanetMac8handleTxEv+0x380>
 8002f56:	bf00      	nop
 8002f58:	3f666666 	.word	0x3f666666
		/* ignoring TX_TX_ONGOING */
#if MAC_debug_mode > 2
		printf("## WAT: %d\n", tx_ret);
#endif

		if (app_tx)
 8002f5c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d013      	beq.n	8002f8c <_ZN8FanetMac8handleTxEv+0x380>
			delete frm;
 8002f64:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8002f66:	2c00      	cmp	r4, #0
 8002f68:	d010      	beq.n	8002f8c <_ZN8FanetMac8handleTxEv+0x380>
 8002f6a:	4620      	mov	r0, r4
 8002f6c:	f7ff f906 	bl	800217c <_ZN5FrameD1Ev>
 8002f70:	2134      	movs	r1, #52	; 0x34
 8002f72:	4620      	mov	r0, r4
 8002f74:	f00a f840 	bl	800cff8 <_ZdlPvj>
 8002f78:	e008      	b.n	8002f8c <_ZN8FanetMac8handleTxEv+0x380>
		return;
 8002f7a:	bf00      	nop
 8002f7c:	e006      	b.n	8002f8c <_ZN8FanetMac8handleTxEv+0x380>
			return;
 8002f7e:	bf00      	nop
 8002f80:	e004      	b.n	8002f8c <_ZN8FanetMac8handleTxEv+0x380>
		return;
 8002f82:	bf00      	nop
 8002f84:	e002      	b.n	8002f8c <_ZN8FanetMac8handleTxEv+0x380>
			return;
 8002f86:	bf00      	nop
 8002f88:	e000      	b.n	8002f8c <_ZN8FanetMac8handleTxEv+0x380>
		return;
 8002f8a:	bf00      	nop
	}
}
 8002f8c:	3730      	adds	r7, #48	; 0x30
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bdb0      	pop	{r4, r5, r7, pc}
 8002f92:	bf00      	nop

08002f94 <_ZN8FanetMac8readAddrEv>:

	return num;
}

MacAddr FanetMac::readAddr(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
	uint64_t addr_container = *(__IO uint64_t*)MAC_ADDR_BASE;
 8002f9e:	4919      	ldr	r1, [pc, #100]	; (8003004 <_ZN8FanetMac8readAddrEv+0x70>)
 8002fa0:	6809      	ldr	r1, [r1, #0]
 8002fa2:	b289      	uxth	r1, r1
 8002fa4:	0fc8      	lsrs	r0, r1, #31
 8002fa6:	4401      	add	r1, r0
 8002fa8:	1049      	asrs	r1, r1, #1
 8002faa:	3901      	subs	r1, #1
 8002fac:	02c9      	lsls	r1, r1, #11
 8002fae:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 8002fb2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002fb6:	e9c7 0102 	strd	r0, r1, [r7, #8]

	/* identify container */
	if((addr_container & MAC_ADDR_MAGIC_MASK) != MAC_ADDR_MAGIC)
 8002fba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	0c0b      	lsrs	r3, r1, #16
 8002fc2:	041b      	lsls	r3, r3, #16
 8002fc4:	4910      	ldr	r1, [pc, #64]	; (8003008 <_ZN8FanetMac8readAddrEv+0x74>)
 8002fc6:	4419      	add	r1, r3
 8002fc8:	ea52 0301 	orrs.w	r3, r2, r1
 8002fcc:	d003      	beq.n	8002fd6 <_ZN8FanetMac8readAddrEv+0x42>
	{
#if MAC_debug_mode > 0
		printf("## No Addr set!\n");
#endif
		return MacAddr();
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f7fe fbc4 	bl	800175c <_ZN7MacAddrC1Ev>
 8002fd4:	e011      	b.n	8002ffa <_ZN8FanetMac8readAddrEv+0x66>
	}

	return MacAddr((addr_container>>16) & 0xFF, addr_container & 0xFFFF);
 8002fd6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002fda:	f04f 0200 	mov.w	r2, #0
 8002fde:	f04f 0300 	mov.w	r3, #0
 8002fe2:	0c02      	lsrs	r2, r0, #16
 8002fe4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002fe8:	0c0b      	lsrs	r3, r1, #16
 8002fea:	4613      	mov	r3, r2
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	68ba      	ldr	r2, [r7, #8]
 8002ff0:	b292      	uxth	r2, r2
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f7ff f87d 	bl	80020f4 <_ZN7MacAddrC1Eii>
}
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	1fff75e0 	.word	0x1fff75e0
 8003008:	ecc90000 	.word	0xecc90000

0800300c <_ZN8FanetMac7setAddrE7MacAddr>:

bool FanetMac::setAddr(MacAddr addr)
{
 800300c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003010:	b08c      	sub	sp, #48	; 0x30
 8003012:	af00      	add	r7, sp, #0
 8003014:	61f8      	str	r0, [r7, #28]
 8003016:	61b9      	str	r1, [r7, #24]
	/* test for clean storage */
	if(*(__IO uint64_t*)MAC_ADDR_BASE != UINT64_MAX)
 8003018:	4b33      	ldr	r3, [pc, #204]	; (80030e8 <_ZN8FanetMac7setAddrE7MacAddr+0xdc>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	b29b      	uxth	r3, r3
 800301e:	0fda      	lsrs	r2, r3, #31
 8003020:	4413      	add	r3, r2
 8003022:	105b      	asrs	r3, r3, #1
 8003024:	3b01      	subs	r3, #1
 8003026:	02db      	lsls	r3, r3, #11
 8003028:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800302c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003030:	4013      	ands	r3, r2
 8003032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003036:	bf14      	ite	ne
 8003038:	2301      	movne	r3, #1
 800303a:	2300      	moveq	r3, #0
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <_ZN8FanetMac7setAddrE7MacAddr+0x3a>
		return false;
 8003042:	2300      	movs	r3, #0
 8003044:	e04a      	b.n	80030dc <_ZN8FanetMac7setAddrE7MacAddr+0xd0>

	/* build config */
	uint64_t addr_container = MAC_ADDR_MAGIC | (addr.manufacturer&0xFF)<<16 | (addr.id&0xFFFF);
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	041b      	lsls	r3, r3, #16
 800304c:	17da      	asrs	r2, r3, #31
 800304e:	613b      	str	r3, [r7, #16]
 8003050:	617a      	str	r2, [r7, #20]
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	f403 0a7f 	and.w	sl, r3, #16711680	; 0xff0000
 8003058:	f04f 0b00 	mov.w	fp, #0
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	17da      	asrs	r2, r3, #31
 8003062:	60bb      	str	r3, [r7, #8]
 8003064:	60fa      	str	r2, [r7, #12]
 8003066:	f8b7 8008 	ldrh.w	r8, [r7, #8]
 800306a:	f04f 0900 	mov.w	r9, #0
 800306e:	ea4a 0308 	orr.w	r3, sl, r8
 8003072:	603b      	str	r3, [r7, #0]
 8003074:	ea4b 0309 	orr.w	r3, fp, r9
 8003078:	607b      	str	r3, [r7, #4]
 800307a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800307e:	4614      	mov	r4, r2
 8003080:	f043 5599 	orr.w	r5, r3, #320864256	; 0x13200000
 8003084:	f445 15b8 	orr.w	r5, r5, #1507328	; 0x170000
 8003088:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28

	HAL_FLASH_Unlock();
 800308c:	f003 f9ac 	bl	80063e8 <HAL_FLASH_Unlock>
	HAL_StatusTypeDef flash_ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, MAC_ADDR_BASE, addr_container);
 8003090:	4b15      	ldr	r3, [pc, #84]	; (80030e8 <_ZN8FanetMac7setAddrE7MacAddr+0xdc>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	b29b      	uxth	r3, r3
 8003096:	0fda      	lsrs	r2, r3, #31
 8003098:	4413      	add	r3, r2
 800309a:	105b      	asrs	r3, r3, #1
 800309c:	3b01      	subs	r3, #1
 800309e:	02db      	lsls	r3, r3, #11
 80030a0:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 80030a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80030a8:	2001      	movs	r0, #1
 80030aa:	f003 f959 	bl	8006360 <HAL_FLASH_Program>
 80030ae:	4603      	mov	r3, r0
 80030b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	HAL_FLASH_Lock();
 80030b4:	f003 f9ba 	bl	800642c <HAL_FLASH_Lock>

	if(flash_ret == HAL_OK)
 80030b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d106      	bne.n	80030ce <_ZN8FanetMac7setAddrE7MacAddr+0xc2>
		_myAddr = addr;
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	336c      	adds	r3, #108	; 0x6c
 80030c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80030ca:	e883 0003 	stmia.w	r3, {r0, r1}

	return (flash_ret == HAL_OK);
 80030ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	bf0c      	ite	eq
 80030d6:	2301      	moveq	r3, #1
 80030d8:	2300      	movne	r3, #0
 80030da:	b2db      	uxtb	r3, r3
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3730      	adds	r7, #48	; 0x30
 80030e0:	46bd      	mov	sp, r7
 80030e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030e6:	bf00      	nop
 80030e8:	1fff75e0 	.word	0x1fff75e0

080030ec <_ZN8FanetMac9eraseAddrEv>:

bool FanetMac::eraseAddr(void)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret = HAL_FLASHEx_Erase(&eraseInit, &sectorError);
	HAL_FLASH_Lock();

	return (ret == HAL_OK && sectorError == UINT32_MAX);
	*/
	return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bc80      	pop	{r7}
 80030fe:	4770      	bx	lr

08003100 <_ZN10LinkedListIP5FrameE4sizeEv>:

	return (ListNode<T>*) false;
}

template<typename T>
int LinkedList<T>::size(){
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
	return _size;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
}
 800310c:	4618      	mov	r0, r3
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	bc80      	pop	{r7}
 8003114:	4770      	bx	lr
	...

08003118 <_ZN10LinkedListIP5FrameEC1Ev>:
LinkedList<T>::LinkedList()
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	4a0d      	ldr	r2, [pc, #52]	; (8003158 <_ZN10LinkedListIP5FrameEC1Ev+0x40>)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	601a      	str	r2, [r3, #0]
	root=NULL;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	609a      	str	r2, [r3, #8]
	last=NULL;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	60da      	str	r2, [r3, #12]
	_size=0;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	605a      	str	r2, [r3, #4]
	lastNodeGot = root;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689a      	ldr	r2, [r3, #8]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	611a      	str	r2, [r3, #16]
	lastIndexGot = 0;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	615a      	str	r2, [r3, #20]
	isCached = false;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	761a      	strb	r2, [r3, #24]
}
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4618      	mov	r0, r3
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	bc80      	pop	{r7}
 8003156:	4770      	bx	lr
 8003158:	08010828 	.word	0x08010828

0800315c <_ZN10LinkedListIP5FrameED1Ev>:
LinkedList<T>::~LinkedList()
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
}
 8003164:	4a12      	ldr	r2, [pc, #72]	; (80031b0 <_ZN10LinkedListIP5FrameED1Ev+0x54>)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	601a      	str	r2, [r3, #0]
	while(root!=NULL)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00f      	beq.n	8003192 <_ZN10LinkedListIP5FrameED1Ev+0x36>
		tmp=root;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	60fb      	str	r3, [r7, #12]
		root=root->next;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	685a      	ldr	r2, [r3, #4]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	609a      	str	r2, [r3, #8]
		delete tmp;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d0f0      	beq.n	800316a <_ZN10LinkedListIP5FrameED1Ev+0xe>
 8003188:	2108      	movs	r1, #8
 800318a:	4618      	mov	r0, r3
 800318c:	f009 ff34 	bl	800cff8 <_ZdlPvj>
	while(root!=NULL)
 8003190:	e7eb      	b.n	800316a <_ZN10LinkedListIP5FrameED1Ev+0xe>
	last = NULL;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	60da      	str	r2, [r3, #12]
	_size=0;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	605a      	str	r2, [r3, #4]
	isCached = false;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	761a      	strb	r2, [r3, #24]
}
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4618      	mov	r0, r3
 80031a8:	3710      	adds	r7, #16
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	08010828 	.word	0x08010828

080031b4 <_ZN10LinkedListIP12NeighborNodeEC1Ev>:
LinkedList<T>::LinkedList()
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	4a0d      	ldr	r2, [pc, #52]	; (80031f4 <_ZN10LinkedListIP12NeighborNodeEC1Ev+0x40>)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	601a      	str	r2, [r3, #0]
	root=NULL;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	609a      	str	r2, [r3, #8]
	last=NULL;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	60da      	str	r2, [r3, #12]
	_size=0;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	605a      	str	r2, [r3, #4]
	lastNodeGot = root;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	689a      	ldr	r2, [r3, #8]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	611a      	str	r2, [r3, #16]
	lastIndexGot = 0;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	615a      	str	r2, [r3, #20]
	isCached = false;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	761a      	strb	r2, [r3, #24]
}
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4618      	mov	r0, r3
 80031ec:	370c      	adds	r7, #12
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bc80      	pop	{r7}
 80031f2:	4770      	bx	lr
 80031f4:	080107f4 	.word	0x080107f4

080031f8 <_ZN10LinkedListIP12NeighborNodeED1Ev>:
LinkedList<T>::~LinkedList()
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
}
 8003200:	4a12      	ldr	r2, [pc, #72]	; (800324c <_ZN10LinkedListIP12NeighborNodeED1Ev+0x54>)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	601a      	str	r2, [r3, #0]
	while(root!=NULL)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00f      	beq.n	800322e <_ZN10LinkedListIP12NeighborNodeED1Ev+0x36>
		tmp=root;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	60fb      	str	r3, [r7, #12]
		root=root->next;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	685a      	ldr	r2, [r3, #4]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	609a      	str	r2, [r3, #8]
		delete tmp;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d0f0      	beq.n	8003206 <_ZN10LinkedListIP12NeighborNodeED1Ev+0xe>
 8003224:	2108      	movs	r1, #8
 8003226:	4618      	mov	r0, r3
 8003228:	f009 fee6 	bl	800cff8 <_ZdlPvj>
	while(root!=NULL)
 800322c:	e7eb      	b.n	8003206 <_ZN10LinkedListIP12NeighborNodeED1Ev+0xe>
	last = NULL;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	60da      	str	r2, [r3, #12]
	_size=0;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	605a      	str	r2, [r3, #4]
	isCached = false;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	761a      	strb	r2, [r3, #24]
}
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4618      	mov	r0, r3
 8003244:	3710      	adds	r7, #16
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	080107f4 	.word	0x080107f4

08003250 <_ZN10LinkedListIP12NeighborNodeE4sizeEv>:
int LinkedList<T>::size(){
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
	return _size;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
}
 800325c:	4618      	mov	r0, r3
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	bc80      	pop	{r7}
 8003264:	4770      	bx	lr

08003266 <_ZN10LinkedListIP5FrameE3getEi>:
	return ret;
}


template<typename T>
T LinkedList<T>::get(int index){
 8003266:	b580      	push	{r7, lr}
 8003268:	b084      	sub	sp, #16
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
 800326e:	6039      	str	r1, [r7, #0]
	ListNode<T> *tmp = getNode(index);
 8003270:	6839      	ldr	r1, [r7, #0]
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 f9c3 	bl	80035fe <_ZN10LinkedListIP5FrameE7getNodeEi>
 8003278:	60f8      	str	r0, [r7, #12]

	return (tmp ? tmp->data : T());
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d002      	beq.n	8003286 <_ZN10LinkedListIP5FrameE3getEi+0x20>
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	e000      	b.n	8003288 <_ZN10LinkedListIP5FrameE3getEi+0x22>
 8003286:	2300      	movs	r3, #0
}
 8003288:	4618      	mov	r0, r3
 800328a:	3710      	adds	r7, #16
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <_ZN10LinkedListIP5FrameE5shiftEv>:
T LinkedList<T>::shift(){
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
	if(_size <= 0)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	2b00      	cmp	r3, #0
 800329e:	dc01      	bgt.n	80032a4 <_ZN10LinkedListIP5FrameE5shiftEv+0x14>
		return T();
 80032a0:	2300      	movs	r3, #0
 80032a2:	e028      	b.n	80032f6 <_ZN10LinkedListIP5FrameE5shiftEv+0x66>
	if(_size > 1){
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	dd1c      	ble.n	80032e6 <_ZN10LinkedListIP5FrameE5shiftEv+0x56>
		ListNode<T> *_next = root->next;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	60fb      	str	r3, [r7, #12]
		T ret = root->data;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	60bb      	str	r3, [r7, #8]
		delete(root);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d003      	beq.n	80032cc <_ZN10LinkedListIP5FrameE5shiftEv+0x3c>
 80032c4:	2108      	movs	r1, #8
 80032c6:	4618      	mov	r0, r3
 80032c8:	f009 fe96 	bl	800cff8 <_ZdlPvj>
		root = _next;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	68fa      	ldr	r2, [r7, #12]
 80032d0:	609a      	str	r2, [r3, #8]
		_size --;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	1e5a      	subs	r2, r3, #1
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	605a      	str	r2, [r3, #4]
		isCached = false;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	761a      	strb	r2, [r3, #24]
		return ret;
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	e007      	b.n	80032f6 <_ZN10LinkedListIP5FrameE5shiftEv+0x66>
		return pop();
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	3318      	adds	r3, #24
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	4798      	blx	r3
 80032f2:	4603      	mov	r3, r0
 80032f4:	bf00      	nop
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <_ZN10LinkedListIP5FrameE7unshiftES1_>:
bool LinkedList<T>::unshift(T _t){
 80032fe:	b580      	push	{r7, lr}
 8003300:	b084      	sub	sp, #16
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
 8003306:	6039      	str	r1, [r7, #0]
	if(_size == 0)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d108      	bne.n	8003322 <_ZN10LinkedListIP5FrameE7unshiftES1_+0x24>
		return add(_t);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	3308      	adds	r3, #8
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	6839      	ldr	r1, [r7, #0]
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	4798      	blx	r3
 800331e:	4603      	mov	r3, r0
 8003320:	e01b      	b.n	800335a <_ZN10LinkedListIP5FrameE7unshiftES1_+0x5c>
	ListNode<T> *tmp = new ListNode<T>();
 8003322:	2008      	movs	r0, #8
 8003324:	f009 fe6c 	bl	800d000 <_Znwj>
 8003328:	4603      	mov	r3, r0
 800332a:	2200      	movs	r2, #0
 800332c:	601a      	str	r2, [r3, #0]
 800332e:	2200      	movs	r2, #0
 8003330:	605a      	str	r2, [r3, #4]
 8003332:	60fb      	str	r3, [r7, #12]
	tmp->next = root;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689a      	ldr	r2, [r3, #8]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	605a      	str	r2, [r3, #4]
	tmp->data = _t;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	683a      	ldr	r2, [r7, #0]
 8003340:	601a      	str	r2, [r3, #0]
	root = tmp;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	68fa      	ldr	r2, [r7, #12]
 8003346:	609a      	str	r2, [r3, #8]
	_size++;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	1c5a      	adds	r2, r3, #1
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	605a      	str	r2, [r3, #4]
	isCached = false;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	761a      	strb	r2, [r3, #24]
	return true;
 8003358:	2301      	movs	r3, #1
}
 800335a:	4618      	mov	r0, r3
 800335c:	3710      	adds	r7, #16
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}

08003362 <_ZN10LinkedListIP5FrameE3addES1_>:
bool LinkedList<T>::add(T _t){
 8003362:	b580      	push	{r7, lr}
 8003364:	b084      	sub	sp, #16
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
 800336a:	6039      	str	r1, [r7, #0]
	ListNode<T> *tmp = new ListNode<T>();
 800336c:	2008      	movs	r0, #8
 800336e:	f009 fe47 	bl	800d000 <_Znwj>
 8003372:	4603      	mov	r3, r0
 8003374:	2200      	movs	r2, #0
 8003376:	601a      	str	r2, [r3, #0]
 8003378:	2200      	movs	r2, #0
 800337a:	605a      	str	r2, [r3, #4]
 800337c:	60fb      	str	r3, [r7, #12]
	tmp->data = _t;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	683a      	ldr	r2, [r7, #0]
 8003382:	601a      	str	r2, [r3, #0]
	tmp->next = NULL;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	605a      	str	r2, [r3, #4]
	if(root){
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d007      	beq.n	80033a2 <_ZN10LinkedListIP5FrameE3addES1_+0x40>
		last->next = tmp;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	605a      	str	r2, [r3, #4]
		last = tmp;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	68fa      	ldr	r2, [r7, #12]
 800339e:	60da      	str	r2, [r3, #12]
 80033a0:	e005      	b.n	80033ae <_ZN10LinkedListIP5FrameE3addES1_+0x4c>
		root = tmp;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	609a      	str	r2, [r3, #8]
		last = tmp;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	60da      	str	r2, [r3, #12]
	_size++;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	1c5a      	adds	r2, r3, #1
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	605a      	str	r2, [r3, #4]
	isCached = false;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	761a      	strb	r2, [r3, #24]
	return true;
 80033be:	2301      	movs	r3, #1
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3710      	adds	r7, #16
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <_ZN10LinkedListIP5FrameE6removeEi>:
T LinkedList<T>::remove(int index){
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b086      	sub	sp, #24
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
	if (index < 0 || index >= _size)
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	db04      	blt.n	80033e2 <_ZN10LinkedListIP5FrameE6removeEi+0x1a>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	683a      	ldr	r2, [r7, #0]
 80033de:	429a      	cmp	r2, r3
 80033e0:	db01      	blt.n	80033e6 <_ZN10LinkedListIP5FrameE6removeEi+0x1e>
		return T();
 80033e2:	2300      	movs	r3, #0
 80033e4:	e03a      	b.n	800345c <_ZN10LinkedListIP5FrameE6removeEi+0x94>
	if(index == 0)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d107      	bne.n	80033fc <_ZN10LinkedListIP5FrameE6removeEi+0x34>
		return shift();
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	331c      	adds	r3, #28
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	4798      	blx	r3
 80033f8:	4603      	mov	r3, r0
 80033fa:	e02f      	b.n	800345c <_ZN10LinkedListIP5FrameE6removeEi+0x94>
	if (index == _size-1)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	3b01      	subs	r3, #1
 8003402:	683a      	ldr	r2, [r7, #0]
 8003404:	429a      	cmp	r2, r3
 8003406:	d107      	bne.n	8003418 <_ZN10LinkedListIP5FrameE6removeEi+0x50>
		return pop();
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	3318      	adds	r3, #24
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	4798      	blx	r3
 8003414:	4603      	mov	r3, r0
 8003416:	e021      	b.n	800345c <_ZN10LinkedListIP5FrameE6removeEi+0x94>
	ListNode<T> *tmp = getNode(index - 1);
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	3b01      	subs	r3, #1
 800341c:	4619      	mov	r1, r3
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 f8ed 	bl	80035fe <_ZN10LinkedListIP5FrameE7getNodeEi>
 8003424:	6178      	str	r0, [r7, #20]
	ListNode<T> *toDelete = tmp->next;
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	613b      	str	r3, [r7, #16]
	T ret = toDelete->data;
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	60fb      	str	r3, [r7, #12]
	tmp->next = tmp->next->next;
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	685a      	ldr	r2, [r3, #4]
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	605a      	str	r2, [r3, #4]
	delete(toDelete);
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d003      	beq.n	800344a <_ZN10LinkedListIP5FrameE6removeEi+0x82>
 8003442:	2108      	movs	r1, #8
 8003444:	4618      	mov	r0, r3
 8003446:	f009 fdd7 	bl	800cff8 <_ZdlPvj>
	_size--;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	1e5a      	subs	r2, r3, #1
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	605a      	str	r2, [r3, #4]
	isCached = false;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	761a      	strb	r2, [r3, #24]
	return ret;
 800345a:	68fb      	ldr	r3, [r7, #12]
}
 800345c:	4618      	mov	r0, r3
 800345e:	3718      	adds	r7, #24
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <_ZN10LinkedListIP12NeighborNodeE3getEi>:
T LinkedList<T>::get(int index){
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
	ListNode<T> *tmp = getNode(index);
 800346e:	6839      	ldr	r1, [r7, #0]
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f000 f94c 	bl	800370e <_ZN10LinkedListIP12NeighborNodeE7getNodeEi>
 8003476:	60f8      	str	r0, [r7, #12]
	return (tmp ? tmp->data : T());
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d002      	beq.n	8003484 <_ZN10LinkedListIP12NeighborNodeE3getEi+0x20>
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	e000      	b.n	8003486 <_ZN10LinkedListIP12NeighborNodeE3getEi+0x22>
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3710      	adds	r7, #16
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <_ZN10LinkedListIP12NeighborNodeE6removeEi>:
T LinkedList<T>::remove(int index){
 800348e:	b580      	push	{r7, lr}
 8003490:	b086      	sub	sp, #24
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
 8003496:	6039      	str	r1, [r7, #0]
	if (index < 0 || index >= _size)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	2b00      	cmp	r3, #0
 800349c:	db04      	blt.n	80034a8 <_ZN10LinkedListIP12NeighborNodeE6removeEi+0x1a>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	683a      	ldr	r2, [r7, #0]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	db01      	blt.n	80034ac <_ZN10LinkedListIP12NeighborNodeE6removeEi+0x1e>
		return T();
 80034a8:	2300      	movs	r3, #0
 80034aa:	e03a      	b.n	8003522 <_ZN10LinkedListIP12NeighborNodeE6removeEi+0x94>
	if(index == 0)
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d107      	bne.n	80034c2 <_ZN10LinkedListIP12NeighborNodeE6removeEi+0x34>
		return shift();
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	331c      	adds	r3, #28
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	4798      	blx	r3
 80034be:	4603      	mov	r3, r0
 80034c0:	e02f      	b.n	8003522 <_ZN10LinkedListIP12NeighborNodeE6removeEi+0x94>
	if (index == _size-1)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	3b01      	subs	r3, #1
 80034c8:	683a      	ldr	r2, [r7, #0]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d107      	bne.n	80034de <_ZN10LinkedListIP12NeighborNodeE6removeEi+0x50>
		return pop();
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	3318      	adds	r3, #24
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	4798      	blx	r3
 80034da:	4603      	mov	r3, r0
 80034dc:	e021      	b.n	8003522 <_ZN10LinkedListIP12NeighborNodeE6removeEi+0x94>
	ListNode<T> *tmp = getNode(index - 1);
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	3b01      	subs	r3, #1
 80034e2:	4619      	mov	r1, r3
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 f912 	bl	800370e <_ZN10LinkedListIP12NeighborNodeE7getNodeEi>
 80034ea:	6178      	str	r0, [r7, #20]
	ListNode<T> *toDelete = tmp->next;
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	613b      	str	r3, [r7, #16]
	T ret = toDelete->data;
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	60fb      	str	r3, [r7, #12]
	tmp->next = tmp->next->next;
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	685a      	ldr	r2, [r3, #4]
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	605a      	str	r2, [r3, #4]
	delete(toDelete);
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d003      	beq.n	8003510 <_ZN10LinkedListIP12NeighborNodeE6removeEi+0x82>
 8003508:	2108      	movs	r1, #8
 800350a:	4618      	mov	r0, r3
 800350c:	f009 fd74 	bl	800cff8 <_ZdlPvj>
	_size--;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	1e5a      	subs	r2, r3, #1
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	605a      	str	r2, [r3, #4]
	isCached = false;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	761a      	strb	r2, [r3, #24]
	return ret;
 8003520:	68fb      	ldr	r3, [r7, #12]
}
 8003522:	4618      	mov	r0, r3
 8003524:	3718      	adds	r7, #24
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <_ZN10LinkedListIP12NeighborNodeE5shiftEv>:
T LinkedList<T>::shift(){
 800352a:	b580      	push	{r7, lr}
 800352c:	b084      	sub	sp, #16
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
	if(_size <= 0)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	dc01      	bgt.n	800353e <_ZN10LinkedListIP12NeighborNodeE5shiftEv+0x14>
		return T();
 800353a:	2300      	movs	r3, #0
 800353c:	e028      	b.n	8003590 <_ZN10LinkedListIP12NeighborNodeE5shiftEv+0x66>
	if(_size > 1){
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	2b01      	cmp	r3, #1
 8003544:	dd1c      	ble.n	8003580 <_ZN10LinkedListIP12NeighborNodeE5shiftEv+0x56>
		ListNode<T> *_next = root->next;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	60fb      	str	r3, [r7, #12]
		T ret = root->data;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	60bb      	str	r3, [r7, #8]
		delete(root);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d003      	beq.n	8003566 <_ZN10LinkedListIP12NeighborNodeE5shiftEv+0x3c>
 800355e:	2108      	movs	r1, #8
 8003560:	4618      	mov	r0, r3
 8003562:	f009 fd49 	bl	800cff8 <_ZdlPvj>
		root = _next;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	609a      	str	r2, [r3, #8]
		_size --;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	1e5a      	subs	r2, r3, #1
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	605a      	str	r2, [r3, #4]
		isCached = false;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	761a      	strb	r2, [r3, #24]
		return ret;
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	e007      	b.n	8003590 <_ZN10LinkedListIP12NeighborNodeE5shiftEv+0x66>
		return pop();
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	3318      	adds	r3, #24
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	4798      	blx	r3
 800358c:	4603      	mov	r3, r0
 800358e:	bf00      	nop
}
 8003590:	4618      	mov	r0, r3
 8003592:	3710      	adds	r7, #16
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <_ZN10LinkedListIP12NeighborNodeE3addES1_>:
bool LinkedList<T>::add(T _t){
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
	ListNode<T> *tmp = new ListNode<T>();
 80035a2:	2008      	movs	r0, #8
 80035a4:	f009 fd2c 	bl	800d000 <_Znwj>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2200      	movs	r2, #0
 80035ac:	601a      	str	r2, [r3, #0]
 80035ae:	2200      	movs	r2, #0
 80035b0:	605a      	str	r2, [r3, #4]
 80035b2:	60fb      	str	r3, [r7, #12]
	tmp->data = _t;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	683a      	ldr	r2, [r7, #0]
 80035b8:	601a      	str	r2, [r3, #0]
	tmp->next = NULL;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	605a      	str	r2, [r3, #4]
	if(root){
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d007      	beq.n	80035d8 <_ZN10LinkedListIP12NeighborNodeE3addES1_+0x40>
		last->next = tmp;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	605a      	str	r2, [r3, #4]
		last = tmp;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	60da      	str	r2, [r3, #12]
 80035d6:	e005      	b.n	80035e4 <_ZN10LinkedListIP12NeighborNodeE3addES1_+0x4c>
		root = tmp;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	609a      	str	r2, [r3, #8]
		last = tmp;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	68fa      	ldr	r2, [r7, #12]
 80035e2:	60da      	str	r2, [r3, #12]
	_size++;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	1c5a      	adds	r2, r3, #1
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	605a      	str	r2, [r3, #4]
	isCached = false;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	761a      	strb	r2, [r3, #24]
	return true;
 80035f4:	2301      	movs	r3, #1
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3710      	adds	r7, #16
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <_ZN10LinkedListIP5FrameE7getNodeEi>:
ListNode<T>* LinkedList<T>::getNode(int index){
 80035fe:	b480      	push	{r7}
 8003600:	b085      	sub	sp, #20
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
 8003606:	6039      	str	r1, [r7, #0]
	int _pos = 0;
 8003608:	2300      	movs	r3, #0
 800360a:	60fb      	str	r3, [r7, #12]
	ListNode<T>* current = root;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	60bb      	str	r3, [r7, #8]
	if(isCached && lastIndexGot <= index){
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	7e1b      	ldrb	r3, [r3, #24]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00a      	beq.n	8003630 <_ZN10LinkedListIP5FrameE7getNodeEi+0x32>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	683a      	ldr	r2, [r7, #0]
 8003620:	429a      	cmp	r2, r3
 8003622:	db05      	blt.n	8003630 <_ZN10LinkedListIP5FrameE7getNodeEi+0x32>
		_pos = lastIndexGot;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	695b      	ldr	r3, [r3, #20]
 8003628:	60fb      	str	r3, [r7, #12]
		current = lastNodeGot;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	60bb      	str	r3, [r7, #8]
	while(_pos < index && current){
 8003630:	68fa      	ldr	r2, [r7, #12]
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	429a      	cmp	r2, r3
 8003636:	da09      	bge.n	800364c <_ZN10LinkedListIP5FrameE7getNodeEi+0x4e>
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d006      	beq.n	800364c <_ZN10LinkedListIP5FrameE7getNodeEi+0x4e>
		current = current->next;
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	60bb      	str	r3, [r7, #8]
		_pos++;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	3301      	adds	r3, #1
 8003648:	60fb      	str	r3, [r7, #12]
	while(_pos < index && current){
 800364a:	e7f1      	b.n	8003630 <_ZN10LinkedListIP5FrameE7getNodeEi+0x32>
	if(_pos == index){
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	429a      	cmp	r2, r3
 8003652:	d10a      	bne.n	800366a <_ZN10LinkedListIP5FrameE7getNodeEi+0x6c>
		isCached = true;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	761a      	strb	r2, [r3, #24]
		lastIndexGot = index;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	615a      	str	r2, [r3, #20]
		lastNodeGot = current;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	68ba      	ldr	r2, [r7, #8]
 8003664:	611a      	str	r2, [r3, #16]
		return current;
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	e000      	b.n	800366c <_ZN10LinkedListIP5FrameE7getNodeEi+0x6e>
	return (ListNode<T>*) false;
 800366a:	2300      	movs	r3, #0
}
 800366c:	4618      	mov	r0, r3
 800366e:	3714      	adds	r7, #20
 8003670:	46bd      	mov	sp, r7
 8003672:	bc80      	pop	{r7}
 8003674:	4770      	bx	lr

08003676 <_ZN10LinkedListIP5FrameE3popEv>:
T LinkedList<T>::pop(){
 8003676:	b580      	push	{r7, lr}
 8003678:	b086      	sub	sp, #24
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
	if(_size <= 0)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	2b00      	cmp	r3, #0
 8003684:	dc01      	bgt.n	800368a <_ZN10LinkedListIP5FrameE3popEv+0x14>
		return T();
 8003686:	2300      	movs	r3, #0
 8003688:	e03d      	b.n	8003706 <_ZN10LinkedListIP5FrameE3popEv+0x90>
	isCached = false;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	761a      	strb	r2, [r3, #24]
	if(_size >= 2){
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	2b01      	cmp	r3, #1
 8003696:	dd20      	ble.n	80036da <_ZN10LinkedListIP5FrameE3popEv+0x64>
		ListNode<T> *tmp = getNode(_size - 2);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	3b02      	subs	r3, #2
 800369e:	4619      	mov	r1, r3
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f7ff ffac 	bl	80035fe <_ZN10LinkedListIP5FrameE7getNodeEi>
 80036a6:	6138      	str	r0, [r7, #16]
		T ret = tmp->next->data;
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	60fb      	str	r3, [r7, #12]
		delete(tmp->next);
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d003      	beq.n	80036c0 <_ZN10LinkedListIP5FrameE3popEv+0x4a>
 80036b8:	2108      	movs	r1, #8
 80036ba:	4618      	mov	r0, r3
 80036bc:	f009 fc9c 	bl	800cff8 <_ZdlPvj>
		tmp->next = NULL;
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	2200      	movs	r2, #0
 80036c4:	605a      	str	r2, [r3, #4]
		last = tmp;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	693a      	ldr	r2, [r7, #16]
 80036ca:	60da      	str	r2, [r3, #12]
		_size--;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	1e5a      	subs	r2, r3, #1
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	605a      	str	r2, [r3, #4]
		return ret;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	e015      	b.n	8003706 <_ZN10LinkedListIP5FrameE3popEv+0x90>
		T ret = root->data;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	617b      	str	r3, [r7, #20]
		delete(root);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d003      	beq.n	80036f2 <_ZN10LinkedListIP5FrameE3popEv+0x7c>
 80036ea:	2108      	movs	r1, #8
 80036ec:	4618      	mov	r0, r3
 80036ee:	f009 fc83 	bl	800cff8 <_ZdlPvj>
		root = NULL;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	609a      	str	r2, [r3, #8]
		last = NULL;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	60da      	str	r2, [r3, #12]
		_size = 0;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	605a      	str	r2, [r3, #4]
		return ret;
 8003704:	697b      	ldr	r3, [r7, #20]
}
 8003706:	4618      	mov	r0, r3
 8003708:	3718      	adds	r7, #24
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <_ZN10LinkedListIP12NeighborNodeE7getNodeEi>:
ListNode<T>* LinkedList<T>::getNode(int index){
 800370e:	b480      	push	{r7}
 8003710:	b085      	sub	sp, #20
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
 8003716:	6039      	str	r1, [r7, #0]
	int _pos = 0;
 8003718:	2300      	movs	r3, #0
 800371a:	60fb      	str	r3, [r7, #12]
	ListNode<T>* current = root;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	60bb      	str	r3, [r7, #8]
	if(isCached && lastIndexGot <= index){
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	7e1b      	ldrb	r3, [r3, #24]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00a      	beq.n	8003740 <_ZN10LinkedListIP12NeighborNodeE7getNodeEi+0x32>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	683a      	ldr	r2, [r7, #0]
 8003730:	429a      	cmp	r2, r3
 8003732:	db05      	blt.n	8003740 <_ZN10LinkedListIP12NeighborNodeE7getNodeEi+0x32>
		_pos = lastIndexGot;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	695b      	ldr	r3, [r3, #20]
 8003738:	60fb      	str	r3, [r7, #12]
		current = lastNodeGot;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	60bb      	str	r3, [r7, #8]
	while(_pos < index && current){
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	429a      	cmp	r2, r3
 8003746:	da09      	bge.n	800375c <_ZN10LinkedListIP12NeighborNodeE7getNodeEi+0x4e>
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d006      	beq.n	800375c <_ZN10LinkedListIP12NeighborNodeE7getNodeEi+0x4e>
		current = current->next;
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	60bb      	str	r3, [r7, #8]
		_pos++;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	3301      	adds	r3, #1
 8003758:	60fb      	str	r3, [r7, #12]
	while(_pos < index && current){
 800375a:	e7f1      	b.n	8003740 <_ZN10LinkedListIP12NeighborNodeE7getNodeEi+0x32>
	if(_pos == index){
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	429a      	cmp	r2, r3
 8003762:	d10a      	bne.n	800377a <_ZN10LinkedListIP12NeighborNodeE7getNodeEi+0x6c>
		isCached = true;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	761a      	strb	r2, [r3, #24]
		lastIndexGot = index;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	683a      	ldr	r2, [r7, #0]
 800376e:	615a      	str	r2, [r3, #20]
		lastNodeGot = current;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	68ba      	ldr	r2, [r7, #8]
 8003774:	611a      	str	r2, [r3, #16]
		return current;
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	e000      	b.n	800377c <_ZN10LinkedListIP12NeighborNodeE7getNodeEi+0x6e>
	return (ListNode<T>*) false;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3714      	adds	r7, #20
 8003780:	46bd      	mov	sp, r7
 8003782:	bc80      	pop	{r7}
 8003784:	4770      	bx	lr

08003786 <_ZN10LinkedListIP12NeighborNodeE3popEv>:
T LinkedList<T>::pop(){
 8003786:	b580      	push	{r7, lr}
 8003788:	b086      	sub	sp, #24
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
	if(_size <= 0)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	2b00      	cmp	r3, #0
 8003794:	dc01      	bgt.n	800379a <_ZN10LinkedListIP12NeighborNodeE3popEv+0x14>
		return T();
 8003796:	2300      	movs	r3, #0
 8003798:	e03d      	b.n	8003816 <_ZN10LinkedListIP12NeighborNodeE3popEv+0x90>
	isCached = false;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	761a      	strb	r2, [r3, #24]
	if(_size >= 2){
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	dd20      	ble.n	80037ea <_ZN10LinkedListIP12NeighborNodeE3popEv+0x64>
		ListNode<T> *tmp = getNode(_size - 2);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	3b02      	subs	r3, #2
 80037ae:	4619      	mov	r1, r3
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f7ff ffac 	bl	800370e <_ZN10LinkedListIP12NeighborNodeE7getNodeEi>
 80037b6:	6138      	str	r0, [r7, #16]
		T ret = tmp->next->data;
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	60fb      	str	r3, [r7, #12]
		delete(tmp->next);
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d003      	beq.n	80037d0 <_ZN10LinkedListIP12NeighborNodeE3popEv+0x4a>
 80037c8:	2108      	movs	r1, #8
 80037ca:	4618      	mov	r0, r3
 80037cc:	f009 fc14 	bl	800cff8 <_ZdlPvj>
		tmp->next = NULL;
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	2200      	movs	r2, #0
 80037d4:	605a      	str	r2, [r3, #4]
		last = tmp;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	60da      	str	r2, [r3, #12]
		_size--;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	1e5a      	subs	r2, r3, #1
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	605a      	str	r2, [r3, #4]
		return ret;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	e015      	b.n	8003816 <_ZN10LinkedListIP12NeighborNodeE3popEv+0x90>
		T ret = root->data;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	617b      	str	r3, [r7, #20]
		delete(root);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d003      	beq.n	8003802 <_ZN10LinkedListIP12NeighborNodeE3popEv+0x7c>
 80037fa:	2108      	movs	r1, #8
 80037fc:	4618      	mov	r0, r3
 80037fe:	f009 fbfb 	bl	800cff8 <_ZdlPvj>
		root = NULL;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	609a      	str	r2, [r3, #8]
		last = NULL;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	60da      	str	r2, [r3, #12]
		_size = 0;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	605a      	str	r2, [r3, #4]
		return ret;
 8003814:	697b      	ldr	r3, [r7, #20]
}
 8003816:	4618      	mov	r0, r3
 8003818:	3718      	adds	r7, #24
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
	...

08003820 <_Z41__static_initialization_and_destruction_0ii>:

FanetMac fmac = FanetMac();
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d107      	bne.n	8003840 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003836:	4293      	cmp	r3, r2
 8003838:	d102      	bne.n	8003840 <_Z41__static_initialization_and_destruction_0ii+0x20>
 800383a:	4809      	ldr	r0, [pc, #36]	; (8003860 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800383c:	f7fe fd14 	bl	8002268 <_ZN8FanetMacC1Ev>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d107      	bne.n	8003856 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800384c:	4293      	cmp	r3, r2
 800384e:	d102      	bne.n	8003856 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8003850:	4803      	ldr	r0, [pc, #12]	; (8003860 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8003852:	f7fe fd47 	bl	80022e4 <_ZN8FanetMacD1Ev>
 8003856:	bf00      	nop
 8003858:	3708      	adds	r7, #8
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	20000240 	.word	0x20000240

08003864 <_ZN10LinkedListIP12NeighborNodeE3addEiS1_>:
bool LinkedList<T>::add(int index, T _t){
 8003864:	b580      	push	{r7, lr}
 8003866:	b086      	sub	sp, #24
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	607a      	str	r2, [r7, #4]
	if(index >= _size)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	68ba      	ldr	r2, [r7, #8]
 8003876:	429a      	cmp	r2, r3
 8003878:	db08      	blt.n	800388c <_ZN10LinkedListIP12NeighborNodeE3addEiS1_+0x28>
		return add(_t);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	3308      	adds	r3, #8
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	6879      	ldr	r1, [r7, #4]
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	4798      	blx	r3
 8003888:	4603      	mov	r3, r0
 800388a:	e02e      	b.n	80038ea <_ZN10LinkedListIP12NeighborNodeE3addEiS1_+0x86>
	if(index == 0)
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d108      	bne.n	80038a4 <_ZN10LinkedListIP12NeighborNodeE3addEiS1_+0x40>
		return unshift(_t);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	330c      	adds	r3, #12
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	6879      	ldr	r1, [r7, #4]
 800389c:	68f8      	ldr	r0, [r7, #12]
 800389e:	4798      	blx	r3
 80038a0:	4603      	mov	r3, r0
 80038a2:	e022      	b.n	80038ea <_ZN10LinkedListIP12NeighborNodeE3addEiS1_+0x86>
	ListNode<T> *tmp = new ListNode<T>(),
 80038a4:	2008      	movs	r0, #8
 80038a6:	f009 fbab 	bl	800d000 <_Znwj>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2200      	movs	r2, #0
 80038ae:	601a      	str	r2, [r3, #0]
 80038b0:	2200      	movs	r2, #0
 80038b2:	605a      	str	r2, [r3, #4]
 80038b4:	617b      	str	r3, [r7, #20]
				 *_prev = getNode(index-1);
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	3b01      	subs	r3, #1
 80038ba:	4619      	mov	r1, r3
 80038bc:	68f8      	ldr	r0, [r7, #12]
 80038be:	f7ff ff26 	bl	800370e <_ZN10LinkedListIP12NeighborNodeE7getNodeEi>
 80038c2:	6138      	str	r0, [r7, #16]
	tmp->data = _t;
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	601a      	str	r2, [r3, #0]
	tmp->next = _prev->next;
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	685a      	ldr	r2, [r3, #4]
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	605a      	str	r2, [r3, #4]
	_prev->next = tmp;
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	697a      	ldr	r2, [r7, #20]
 80038d6:	605a      	str	r2, [r3, #4]
	_size++;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	1c5a      	adds	r2, r3, #1
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	605a      	str	r2, [r3, #4]
	isCached = false;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2200      	movs	r2, #0
 80038e6:	761a      	strb	r2, [r3, #24]
	return true;
 80038e8:	2301      	movs	r3, #1
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3718      	adds	r7, #24
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <_ZN10LinkedListIP12NeighborNodeE7unshiftES1_>:
bool LinkedList<T>::unshift(T _t){
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b084      	sub	sp, #16
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
 80038fa:	6039      	str	r1, [r7, #0]
	if(_size == 0)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d108      	bne.n	8003916 <_ZN10LinkedListIP12NeighborNodeE7unshiftES1_+0x24>
		return add(_t);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	3308      	adds	r3, #8
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	6839      	ldr	r1, [r7, #0]
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	4798      	blx	r3
 8003912:	4603      	mov	r3, r0
 8003914:	e01b      	b.n	800394e <_ZN10LinkedListIP12NeighborNodeE7unshiftES1_+0x5c>
	ListNode<T> *tmp = new ListNode<T>();
 8003916:	2008      	movs	r0, #8
 8003918:	f009 fb72 	bl	800d000 <_Znwj>
 800391c:	4603      	mov	r3, r0
 800391e:	2200      	movs	r2, #0
 8003920:	601a      	str	r2, [r3, #0]
 8003922:	2200      	movs	r2, #0
 8003924:	605a      	str	r2, [r3, #4]
 8003926:	60fb      	str	r3, [r7, #12]
	tmp->next = root;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689a      	ldr	r2, [r3, #8]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	605a      	str	r2, [r3, #4]
	tmp->data = _t;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	683a      	ldr	r2, [r7, #0]
 8003934:	601a      	str	r2, [r3, #0]
	root = tmp;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	68fa      	ldr	r2, [r7, #12]
 800393a:	609a      	str	r2, [r3, #8]
	_size++;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	1c5a      	adds	r2, r3, #1
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	605a      	str	r2, [r3, #4]
	isCached = false;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	761a      	strb	r2, [r3, #24]
	return true;
 800394c:	2301      	movs	r3, #1
}
 800394e:	4618      	mov	r0, r3
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <_ZN10LinkedListIP12NeighborNodeE3setEiS1_>:
bool LinkedList<T>::set(int index, T _t){
 8003956:	b580      	push	{r7, lr}
 8003958:	b084      	sub	sp, #16
 800395a:	af00      	add	r7, sp, #0
 800395c:	60f8      	str	r0, [r7, #12]
 800395e:	60b9      	str	r1, [r7, #8]
 8003960:	607a      	str	r2, [r7, #4]
	if(index < 0 || index >= _size)
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	2b00      	cmp	r3, #0
 8003966:	db04      	blt.n	8003972 <_ZN10LinkedListIP12NeighborNodeE3setEiS1_+0x1c>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	68ba      	ldr	r2, [r7, #8]
 800396e:	429a      	cmp	r2, r3
 8003970:	db01      	blt.n	8003976 <_ZN10LinkedListIP12NeighborNodeE3setEiS1_+0x20>
		return false;
 8003972:	2300      	movs	r3, #0
 8003974:	e007      	b.n	8003986 <_ZN10LinkedListIP12NeighborNodeE3setEiS1_+0x30>
	getNode(index)->data = _t;
 8003976:	68b9      	ldr	r1, [r7, #8]
 8003978:	68f8      	ldr	r0, [r7, #12]
 800397a:	f7ff fec8 	bl	800370e <_ZN10LinkedListIP12NeighborNodeE7getNodeEi>
 800397e:	4602      	mov	r2, r0
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6013      	str	r3, [r2, #0]
	return true;
 8003984:	2301      	movs	r3, #1
}
 8003986:	4618      	mov	r0, r3
 8003988:	3710      	adds	r7, #16
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}

0800398e <_ZN10LinkedListIP12NeighborNodeE5clearEv>:

template<typename T>
void LinkedList<T>::clear(){
 800398e:	b580      	push	{r7, lr}
 8003990:	b082      	sub	sp, #8
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
	while(size() > 0)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	4798      	blx	r3
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	bfcc      	ite	gt
 80039a6:	2301      	movgt	r3, #1
 80039a8:	2300      	movle	r3, #0
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d006      	beq.n	80039be <_ZN10LinkedListIP12NeighborNodeE5clearEv+0x30>
		shift();
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	331c      	adds	r3, #28
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	4798      	blx	r3
	while(size() > 0)
 80039bc:	e7eb      	b.n	8003996 <_ZN10LinkedListIP12NeighborNodeE5clearEv+0x8>
}
 80039be:	bf00      	nop
 80039c0:	3708      	adds	r7, #8
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}

080039c6 <_ZN10LinkedListIP12NeighborNodeE4sortEPFiRS1_S3_E>:

template<typename T>
void LinkedList<T>::sort(int (*cmp)(T &, T &)){
 80039c6:	b580      	push	{r7, lr}
 80039c8:	b088      	sub	sp, #32
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
 80039ce:	6039      	str	r1, [r7, #0]
	if(_size < 2) return; // trivial case;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	f340 8082 	ble.w	8003ade <_ZN10LinkedListIP12NeighborNodeE4sortEPFiRS1_S3_E+0x118>

	for(;;) {

		ListNode<T> **joinPoint = &root;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	3308      	adds	r3, #8
 80039de:	61fb      	str	r3, [r7, #28]

		while(*joinPoint) {
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d0f8      	beq.n	80039da <_ZN10LinkedListIP12NeighborNodeE4sortEPFiRS1_S3_E+0x14>
			ListNode<T> *a = *joinPoint;
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	61bb      	str	r3, [r7, #24]
			ListNode<T> *a_end = findEndOfSortedString(a, cmp);
 80039ee:	683a      	ldr	r2, [r7, #0]
 80039f0:	69b9      	ldr	r1, [r7, #24]
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 f986 	bl	8003d04 <_ZN10LinkedListIP12NeighborNodeE21findEndOfSortedStringEP8ListNodeIS1_EPFiRS1_S6_E>
 80039f8:	6138      	str	r0, [r7, #16]

			if(!a_end->next	) {
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d10b      	bne.n	8003a1a <_ZN10LinkedListIP12NeighborNodeE4sortEPFiRS1_S3_E+0x54>
				if(joinPoint == &root) {
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	3308      	adds	r3, #8
 8003a06:	69fa      	ldr	r2, [r7, #28]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d166      	bne.n	8003ada <_ZN10LinkedListIP12NeighborNodeE4sortEPFiRS1_S3_E+0x114>
					last = a_end;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	60da      	str	r2, [r3, #12]
					isCached = false;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	761a      	strb	r2, [r3, #24]
					return;
 8003a18:	e062      	b.n	8003ae0 <_ZN10LinkedListIP12NeighborNodeE4sortEPFiRS1_S3_E+0x11a>
				else {
					break;
				}
			}

			ListNode<T> *b = a_end->next;
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	617b      	str	r3, [r7, #20]
			ListNode<T> *b_end = findEndOfSortedString(b, cmp);
 8003a20:	683a      	ldr	r2, [r7, #0]
 8003a22:	6979      	ldr	r1, [r7, #20]
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f000 f96d 	bl	8003d04 <_ZN10LinkedListIP12NeighborNodeE21findEndOfSortedStringEP8ListNodeIS1_EPFiRS1_S6_E>
 8003a2a:	60f8      	str	r0, [r7, #12]

			ListNode<T> *tail = b_end->next;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	60bb      	str	r3, [r7, #8]

			a_end->next = NULL;
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	2200      	movs	r2, #0
 8003a36:	605a      	str	r2, [r3, #4]
			b_end->next = NULL;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	605a      	str	r2, [r3, #4]

			while(a && b) {
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d023      	beq.n	8003a8c <_ZN10LinkedListIP12NeighborNodeE4sortEPFiRS1_S3_E+0xc6>
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d020      	beq.n	8003a8c <_ZN10LinkedListIP12NeighborNodeE4sortEPFiRS1_S3_E+0xc6>
				if(cmp(a->data, b->data) <= 0) {
 8003a4a:	69ba      	ldr	r2, [r7, #24]
 8003a4c:	6979      	ldr	r1, [r7, #20]
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	4610      	mov	r0, r2
 8003a52:	4798      	blx	r3
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	bfd4      	ite	le
 8003a5a:	2301      	movle	r3, #1
 8003a5c:	2300      	movgt	r3, #0
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d009      	beq.n	8003a78 <_ZN10LinkedListIP12NeighborNodeE4sortEPFiRS1_S3_E+0xb2>
					*joinPoint = a;
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	69ba      	ldr	r2, [r7, #24]
 8003a68:	601a      	str	r2, [r3, #0]
					joinPoint = &a->next;
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	3304      	adds	r3, #4
 8003a6e:	61fb      	str	r3, [r7, #28]
					a = a->next;
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	61bb      	str	r3, [r7, #24]
 8003a76:	e7e2      	b.n	8003a3e <_ZN10LinkedListIP12NeighborNodeE4sortEPFiRS1_S3_E+0x78>
				}
				else {
					*joinPoint = b;
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	697a      	ldr	r2, [r7, #20]
 8003a7c:	601a      	str	r2, [r3, #0]
					joinPoint = &b->next;
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	3304      	adds	r3, #4
 8003a82:	61fb      	str	r3, [r7, #28]
					b = b->next;
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	617b      	str	r3, [r7, #20]
			while(a && b) {
 8003a8a:	e7d8      	b.n	8003a3e <_ZN10LinkedListIP12NeighborNodeE4sortEPFiRS1_S3_E+0x78>
				}
			}

			if(a) {
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d011      	beq.n	8003ab6 <_ZN10LinkedListIP12NeighborNodeE4sortEPFiRS1_S3_E+0xf0>
				*joinPoint = a;
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	69ba      	ldr	r2, [r7, #24]
 8003a96:	601a      	str	r2, [r3, #0]
				while(a->next) a = a->next;
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d003      	beq.n	8003aa8 <_ZN10LinkedListIP12NeighborNodeE4sortEPFiRS1_S3_E+0xe2>
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	61bb      	str	r3, [r7, #24]
 8003aa6:	e7f7      	b.n	8003a98 <_ZN10LinkedListIP12NeighborNodeE4sortEPFiRS1_S3_E+0xd2>
				a->next = tail;
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	68ba      	ldr	r2, [r7, #8]
 8003aac:	605a      	str	r2, [r3, #4]
				joinPoint = &a->next;
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	3304      	adds	r3, #4
 8003ab2:	61fb      	str	r3, [r7, #28]
 8003ab4:	e794      	b.n	80039e0 <_ZN10LinkedListIP12NeighborNodeE4sortEPFiRS1_S3_E+0x1a>
			}
			else {
				*joinPoint = b;
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	697a      	ldr	r2, [r7, #20]
 8003aba:	601a      	str	r2, [r3, #0]
				while(b->next) b = b->next;
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d003      	beq.n	8003acc <_ZN10LinkedListIP12NeighborNodeE4sortEPFiRS1_S3_E+0x106>
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	617b      	str	r3, [r7, #20]
 8003aca:	e7f7      	b.n	8003abc <_ZN10LinkedListIP12NeighborNodeE4sortEPFiRS1_S3_E+0xf6>
				b->next = tail;
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	68ba      	ldr	r2, [r7, #8]
 8003ad0:	605a      	str	r2, [r3, #4]
				joinPoint = &b->next;
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	3304      	adds	r3, #4
 8003ad6:	61fb      	str	r3, [r7, #28]
		while(*joinPoint) {
 8003ad8:	e782      	b.n	80039e0 <_ZN10LinkedListIP12NeighborNodeE4sortEPFiRS1_S3_E+0x1a>
					break;
 8003ada:	bf00      	nop
	for(;;) {
 8003adc:	e77d      	b.n	80039da <_ZN10LinkedListIP12NeighborNodeE4sortEPFiRS1_S3_E+0x14>
	if(_size < 2) return; // trivial case;
 8003ade:	bf00      	nop
			}
		}
	}
}
 8003ae0:	3720      	adds	r7, #32
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <_ZN10LinkedListIP5FrameE3addEiS1_>:
bool LinkedList<T>::add(int index, T _t){
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b086      	sub	sp, #24
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	60f8      	str	r0, [r7, #12]
 8003aee:	60b9      	str	r1, [r7, #8]
 8003af0:	607a      	str	r2, [r7, #4]
	if(index >= _size)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	68ba      	ldr	r2, [r7, #8]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	db08      	blt.n	8003b0e <_ZN10LinkedListIP5FrameE3addEiS1_+0x28>
		return add(_t);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	3308      	adds	r3, #8
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	6879      	ldr	r1, [r7, #4]
 8003b06:	68f8      	ldr	r0, [r7, #12]
 8003b08:	4798      	blx	r3
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	e02e      	b.n	8003b6c <_ZN10LinkedListIP5FrameE3addEiS1_+0x86>
	if(index == 0)
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d108      	bne.n	8003b26 <_ZN10LinkedListIP5FrameE3addEiS1_+0x40>
		return unshift(_t);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	330c      	adds	r3, #12
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	6879      	ldr	r1, [r7, #4]
 8003b1e:	68f8      	ldr	r0, [r7, #12]
 8003b20:	4798      	blx	r3
 8003b22:	4603      	mov	r3, r0
 8003b24:	e022      	b.n	8003b6c <_ZN10LinkedListIP5FrameE3addEiS1_+0x86>
	ListNode<T> *tmp = new ListNode<T>(),
 8003b26:	2008      	movs	r0, #8
 8003b28:	f009 fa6a 	bl	800d000 <_Znwj>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2200      	movs	r2, #0
 8003b30:	601a      	str	r2, [r3, #0]
 8003b32:	2200      	movs	r2, #0
 8003b34:	605a      	str	r2, [r3, #4]
 8003b36:	617b      	str	r3, [r7, #20]
				 *_prev = getNode(index-1);
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	68f8      	ldr	r0, [r7, #12]
 8003b40:	f7ff fd5d 	bl	80035fe <_ZN10LinkedListIP5FrameE7getNodeEi>
 8003b44:	6138      	str	r0, [r7, #16]
	tmp->data = _t;
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	601a      	str	r2, [r3, #0]
	tmp->next = _prev->next;
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	685a      	ldr	r2, [r3, #4]
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	605a      	str	r2, [r3, #4]
	_prev->next = tmp;
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	697a      	ldr	r2, [r7, #20]
 8003b58:	605a      	str	r2, [r3, #4]
	_size++;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	1c5a      	adds	r2, r3, #1
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	605a      	str	r2, [r3, #4]
	isCached = false;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2200      	movs	r2, #0
 8003b68:	761a      	strb	r2, [r3, #24]
	return true;
 8003b6a:	2301      	movs	r3, #1
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3718      	adds	r7, #24
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <_ZN10LinkedListIP5FrameE3setEiS1_>:
bool LinkedList<T>::set(int index, T _t){
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]
	if(index < 0 || index >= _size)
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	db04      	blt.n	8003b90 <_ZN10LinkedListIP5FrameE3setEiS1_+0x1c>
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	68ba      	ldr	r2, [r7, #8]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	db01      	blt.n	8003b94 <_ZN10LinkedListIP5FrameE3setEiS1_+0x20>
		return false;
 8003b90:	2300      	movs	r3, #0
 8003b92:	e007      	b.n	8003ba4 <_ZN10LinkedListIP5FrameE3setEiS1_+0x30>
	getNode(index)->data = _t;
 8003b94:	68b9      	ldr	r1, [r7, #8]
 8003b96:	68f8      	ldr	r0, [r7, #12]
 8003b98:	f7ff fd31 	bl	80035fe <_ZN10LinkedListIP5FrameE7getNodeEi>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6013      	str	r3, [r2, #0]
	return true;
 8003ba2:	2301      	movs	r3, #1
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3710      	adds	r7, #16
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <_ZN10LinkedListIP5FrameE5clearEv>:
void LinkedList<T>::clear(){
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
	while(size() > 0)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	4798      	blx	r3
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	bfcc      	ite	gt
 8003bc4:	2301      	movgt	r3, #1
 8003bc6:	2300      	movle	r3, #0
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d006      	beq.n	8003bdc <_ZN10LinkedListIP5FrameE5clearEv+0x30>
		shift();
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	331c      	adds	r3, #28
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	4798      	blx	r3
	while(size() > 0)
 8003bda:	e7eb      	b.n	8003bb4 <_ZN10LinkedListIP5FrameE5clearEv+0x8>
}
 8003bdc:	bf00      	nop
 8003bde:	3708      	adds	r7, #8
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <_ZN10LinkedListIP5FrameE4sortEPFiRS1_S3_E>:
void LinkedList<T>::sort(int (*cmp)(T &, T &)){
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b088      	sub	sp, #32
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
	if(_size < 2) return; // trivial case;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	f340 8082 	ble.w	8003cfc <_ZN10LinkedListIP5FrameE4sortEPFiRS1_S3_E+0x118>
		ListNode<T> **joinPoint = &root;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	3308      	adds	r3, #8
 8003bfc:	61fb      	str	r3, [r7, #28]
		while(*joinPoint) {
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d0f8      	beq.n	8003bf8 <_ZN10LinkedListIP5FrameE4sortEPFiRS1_S3_E+0x14>
			ListNode<T> *a = *joinPoint;
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	61bb      	str	r3, [r7, #24]
			ListNode<T> *a_end = findEndOfSortedString(a, cmp);
 8003c0c:	683a      	ldr	r2, [r7, #0]
 8003c0e:	69b9      	ldr	r1, [r7, #24]
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f000 f899 	bl	8003d48 <_ZN10LinkedListIP5FrameE21findEndOfSortedStringEP8ListNodeIS1_EPFiRS1_S6_E>
 8003c16:	6138      	str	r0, [r7, #16]
			if(!a_end->next	) {
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d10b      	bne.n	8003c38 <_ZN10LinkedListIP5FrameE4sortEPFiRS1_S3_E+0x54>
				if(joinPoint == &root) {
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	3308      	adds	r3, #8
 8003c24:	69fa      	ldr	r2, [r7, #28]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d166      	bne.n	8003cf8 <_ZN10LinkedListIP5FrameE4sortEPFiRS1_S3_E+0x114>
					last = a_end;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	60da      	str	r2, [r3, #12]
					isCached = false;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	761a      	strb	r2, [r3, #24]
					return;
 8003c36:	e062      	b.n	8003cfe <_ZN10LinkedListIP5FrameE4sortEPFiRS1_S3_E+0x11a>
			ListNode<T> *b = a_end->next;
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	617b      	str	r3, [r7, #20]
			ListNode<T> *b_end = findEndOfSortedString(b, cmp);
 8003c3e:	683a      	ldr	r2, [r7, #0]
 8003c40:	6979      	ldr	r1, [r7, #20]
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 f880 	bl	8003d48 <_ZN10LinkedListIP5FrameE21findEndOfSortedStringEP8ListNodeIS1_EPFiRS1_S6_E>
 8003c48:	60f8      	str	r0, [r7, #12]
			ListNode<T> *tail = b_end->next;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	60bb      	str	r3, [r7, #8]
			a_end->next = NULL;
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	2200      	movs	r2, #0
 8003c54:	605a      	str	r2, [r3, #4]
			b_end->next = NULL;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	605a      	str	r2, [r3, #4]
			while(a && b) {
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d023      	beq.n	8003caa <_ZN10LinkedListIP5FrameE4sortEPFiRS1_S3_E+0xc6>
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d020      	beq.n	8003caa <_ZN10LinkedListIP5FrameE4sortEPFiRS1_S3_E+0xc6>
				if(cmp(a->data, b->data) <= 0) {
 8003c68:	69ba      	ldr	r2, [r7, #24]
 8003c6a:	6979      	ldr	r1, [r7, #20]
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	4610      	mov	r0, r2
 8003c70:	4798      	blx	r3
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	bfd4      	ite	le
 8003c78:	2301      	movle	r3, #1
 8003c7a:	2300      	movgt	r3, #0
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d009      	beq.n	8003c96 <_ZN10LinkedListIP5FrameE4sortEPFiRS1_S3_E+0xb2>
					*joinPoint = a;
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	601a      	str	r2, [r3, #0]
					joinPoint = &a->next;
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	3304      	adds	r3, #4
 8003c8c:	61fb      	str	r3, [r7, #28]
					a = a->next;
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	61bb      	str	r3, [r7, #24]
 8003c94:	e7e2      	b.n	8003c5c <_ZN10LinkedListIP5FrameE4sortEPFiRS1_S3_E+0x78>
					*joinPoint = b;
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	697a      	ldr	r2, [r7, #20]
 8003c9a:	601a      	str	r2, [r3, #0]
					joinPoint = &b->next;
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	3304      	adds	r3, #4
 8003ca0:	61fb      	str	r3, [r7, #28]
					b = b->next;
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	617b      	str	r3, [r7, #20]
			while(a && b) {
 8003ca8:	e7d8      	b.n	8003c5c <_ZN10LinkedListIP5FrameE4sortEPFiRS1_S3_E+0x78>
			if(a) {
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d011      	beq.n	8003cd4 <_ZN10LinkedListIP5FrameE4sortEPFiRS1_S3_E+0xf0>
				*joinPoint = a;
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	69ba      	ldr	r2, [r7, #24]
 8003cb4:	601a      	str	r2, [r3, #0]
				while(a->next) a = a->next;
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d003      	beq.n	8003cc6 <_ZN10LinkedListIP5FrameE4sortEPFiRS1_S3_E+0xe2>
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	61bb      	str	r3, [r7, #24]
 8003cc4:	e7f7      	b.n	8003cb6 <_ZN10LinkedListIP5FrameE4sortEPFiRS1_S3_E+0xd2>
				a->next = tail;
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	68ba      	ldr	r2, [r7, #8]
 8003cca:	605a      	str	r2, [r3, #4]
				joinPoint = &a->next;
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	3304      	adds	r3, #4
 8003cd0:	61fb      	str	r3, [r7, #28]
 8003cd2:	e794      	b.n	8003bfe <_ZN10LinkedListIP5FrameE4sortEPFiRS1_S3_E+0x1a>
				*joinPoint = b;
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	697a      	ldr	r2, [r7, #20]
 8003cd8:	601a      	str	r2, [r3, #0]
				while(b->next) b = b->next;
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d003      	beq.n	8003cea <_ZN10LinkedListIP5FrameE4sortEPFiRS1_S3_E+0x106>
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	617b      	str	r3, [r7, #20]
 8003ce8:	e7f7      	b.n	8003cda <_ZN10LinkedListIP5FrameE4sortEPFiRS1_S3_E+0xf6>
				b->next = tail;
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	68ba      	ldr	r2, [r7, #8]
 8003cee:	605a      	str	r2, [r3, #4]
				joinPoint = &b->next;
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	3304      	adds	r3, #4
 8003cf4:	61fb      	str	r3, [r7, #28]
		while(*joinPoint) {
 8003cf6:	e782      	b.n	8003bfe <_ZN10LinkedListIP5FrameE4sortEPFiRS1_S3_E+0x1a>
					break;
 8003cf8:	bf00      	nop
	for(;;) {
 8003cfa:	e77d      	b.n	8003bf8 <_ZN10LinkedListIP5FrameE4sortEPFiRS1_S3_E+0x14>
	if(_size < 2) return; // trivial case;
 8003cfc:	bf00      	nop
}
 8003cfe:	3720      	adds	r7, #32
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <_ZN10LinkedListIP12NeighborNodeE21findEndOfSortedStringEP8ListNodeIS1_EPFiRS1_S6_E>:

template<typename T>
ListNode<T>* LinkedList<T>::findEndOfSortedString(ListNode<T> *p, int (*cmp)(T &, T &)) {
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	607a      	str	r2, [r7, #4]
	while(p->next && cmp(p->data, p->next->data) <= 0) {
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00b      	beq.n	8003d30 <_ZN10LinkedListIP12NeighborNodeE21findEndOfSortedStringEP8ListNodeIS1_EPFiRS1_S6_E+0x2c>
 8003d18:	68ba      	ldr	r2, [r7, #8]
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	4619      	mov	r1, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4610      	mov	r0, r2
 8003d24:	4798      	blx	r3
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	dc01      	bgt.n	8003d30 <_ZN10LinkedListIP12NeighborNodeE21findEndOfSortedStringEP8ListNodeIS1_EPFiRS1_S6_E+0x2c>
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e000      	b.n	8003d32 <_ZN10LinkedListIP12NeighborNodeE21findEndOfSortedStringEP8ListNodeIS1_EPFiRS1_S6_E+0x2e>
 8003d30:	2300      	movs	r3, #0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d003      	beq.n	8003d3e <_ZN10LinkedListIP12NeighborNodeE21findEndOfSortedStringEP8ListNodeIS1_EPFiRS1_S6_E+0x3a>
		p = p->next;
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	60bb      	str	r3, [r7, #8]
	while(p->next && cmp(p->data, p->next->data) <= 0) {
 8003d3c:	e7e8      	b.n	8003d10 <_ZN10LinkedListIP12NeighborNodeE21findEndOfSortedStringEP8ListNodeIS1_EPFiRS1_S6_E+0xc>
	}

	return p;
 8003d3e:	68bb      	ldr	r3, [r7, #8]
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3710      	adds	r7, #16
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <_ZN10LinkedListIP5FrameE21findEndOfSortedStringEP8ListNodeIS1_EPFiRS1_S6_E>:
ListNode<T>* LinkedList<T>::findEndOfSortedString(ListNode<T> *p, int (*cmp)(T &, T &)) {
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	607a      	str	r2, [r7, #4]
	while(p->next && cmp(p->data, p->next->data) <= 0) {
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d00b      	beq.n	8003d74 <_ZN10LinkedListIP5FrameE21findEndOfSortedStringEP8ListNodeIS1_EPFiRS1_S6_E+0x2c>
 8003d5c:	68ba      	ldr	r2, [r7, #8]
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	4619      	mov	r1, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4610      	mov	r0, r2
 8003d68:	4798      	blx	r3
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	dc01      	bgt.n	8003d74 <_ZN10LinkedListIP5FrameE21findEndOfSortedStringEP8ListNodeIS1_EPFiRS1_S6_E+0x2c>
 8003d70:	2301      	movs	r3, #1
 8003d72:	e000      	b.n	8003d76 <_ZN10LinkedListIP5FrameE21findEndOfSortedStringEP8ListNodeIS1_EPFiRS1_S6_E+0x2e>
 8003d74:	2300      	movs	r3, #0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d003      	beq.n	8003d82 <_ZN10LinkedListIP5FrameE21findEndOfSortedStringEP8ListNodeIS1_EPFiRS1_S6_E+0x3a>
		p = p->next;
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	60bb      	str	r3, [r7, #8]
	while(p->next && cmp(p->data, p->next->data) <= 0) {
 8003d80:	e7e8      	b.n	8003d54 <_ZN10LinkedListIP5FrameE21findEndOfSortedStringEP8ListNodeIS1_EPFiRS1_S6_E+0xc>
	return p;
 8003d82:	68bb      	ldr	r3, [r7, #8]
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3710      	adds	r7, #16
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <_GLOBAL__sub_I__ZN7MacFifo10get_nexttxEv>:
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003d94:	2001      	movs	r0, #1
 8003d96:	f7ff fd43 	bl	8003820 <_Z41__static_initialization_and_destruction_0ii>
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <_GLOBAL__sub_D__ZN7MacFifo10get_nexttxEv>:
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003da4:	2000      	movs	r0, #0
 8003da6:	f7ff fd3b 	bl	8003820 <_Z41__static_initialization_and_destruction_0ii>
 8003daa:	bd80      	pop	{r7, pc}

08003dac <_ZN5Frame21coord2payload_absolutEffPh>:

	return ((dec_int&0x7FFF) | (!!deg_odd<<15));
}*/

void Frame::coord2payload_absolut(float lat, float lon, uint8_t *buf)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b086      	sub	sp, #24
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	607a      	str	r2, [r7, #4]
	if(buf == nullptr)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d037      	beq.n	8003e2e <_ZN5Frame21coord2payload_absolutEffPh+0x82>
		return;

	int32_t lat_i = std::round(lat * 93206.0f);
 8003dbe:	491e      	ldr	r1, [pc, #120]	; (8003e38 <_ZN5Frame21coord2payload_absolutEffPh+0x8c>)
 8003dc0:	68f8      	ldr	r0, [r7, #12]
 8003dc2:	f7fd f809 	bl	8000dd8 <__aeabi_fmul>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f7fd fcbb 	bl	8001744 <_ZSt5roundf>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7fd f9dd 	bl	8001190 <__aeabi_f2iz>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	617b      	str	r3, [r7, #20]
	int32_t lon_i = std::round(lon * 46603.0f);
 8003dda:	4918      	ldr	r1, [pc, #96]	; (8003e3c <_ZN5Frame21coord2payload_absolutEffPh+0x90>)
 8003ddc:	68b8      	ldr	r0, [r7, #8]
 8003dde:	f7fc fffb 	bl	8000dd8 <__aeabi_fmul>
 8003de2:	4603      	mov	r3, r0
 8003de4:	4618      	mov	r0, r3
 8003de6:	f7fd fcad 	bl	8001744 <_ZSt5roundf>
 8003dea:	4603      	mov	r3, r0
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7fd f9cf 	bl	8001190 <__aeabi_f2iz>
 8003df2:	4603      	mov	r3, r0
 8003df4:	613b      	str	r3, [r7, #16]

	buf[0] = ((uint8_t*)&lat_i)[0];
 8003df6:	f107 0314 	add.w	r3, r7, #20
 8003dfa:	781a      	ldrb	r2, [r3, #0]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	701a      	strb	r2, [r3, #0]
	buf[1] = ((uint8_t*)&lat_i)[1];
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	3301      	adds	r3, #1
 8003e04:	7d7a      	ldrb	r2, [r7, #21]
 8003e06:	701a      	strb	r2, [r3, #0]
	buf[2] = ((uint8_t*)&lat_i)[2];
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	3302      	adds	r3, #2
 8003e0c:	7dba      	ldrb	r2, [r7, #22]
 8003e0e:	701a      	strb	r2, [r3, #0]

	buf[3] = ((uint8_t*)&lon_i)[0];
 8003e10:	f107 0210 	add.w	r2, r7, #16
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	3303      	adds	r3, #3
 8003e18:	7812      	ldrb	r2, [r2, #0]
 8003e1a:	701a      	strb	r2, [r3, #0]
	buf[4] = ((uint8_t*)&lon_i)[1];
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	3304      	adds	r3, #4
 8003e20:	7c7a      	ldrb	r2, [r7, #17]
 8003e22:	701a      	strb	r2, [r3, #0]
	buf[5] = ((uint8_t*)&lon_i)[2];
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	3305      	adds	r3, #5
 8003e28:	7cba      	ldrb	r2, [r7, #18]
 8003e2a:	701a      	strb	r2, [r3, #0]
 8003e2c:	e000      	b.n	8003e30 <_ZN5Frame21coord2payload_absolutEffPh+0x84>
		return;
 8003e2e:	bf00      	nop
}
 8003e30:	3718      	adds	r7, #24
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	47b60b00 	.word	0x47b60b00
 8003e3c:	47360b00 	.word	0x47360b00

08003e40 <_ZN5Frame9serializeERPh>:

int Frame::serialize(uint8_t*& buffer)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
	if(src.id <= 0 || src.id >= 0xFFFF || src.manufacturer <= 0 || src.manufacturer>=0xFE)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	dd0d      	ble.n	8003e6e <_ZN5Frame9serializeERPh+0x2e>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	dc07      	bgt.n	8003e6e <_ZN5Frame9serializeERPh+0x2e>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	dd03      	ble.n	8003e6e <_ZN5Frame9serializeERPh+0x2e>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2bfd      	cmp	r3, #253	; 0xfd
 8003e6c:	dd02      	ble.n	8003e74 <_ZN5Frame9serializeERPh+0x34>
		return -2;
 8003e6e:	f06f 0301 	mvn.w	r3, #1
 8003e72:	e12e      	b.n	80040d2 <_ZN5Frame9serializeERPh+0x292>

	int blength = MAC_FRM_MIN_HEADER_LENGTH + payload_length;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a1b      	ldr	r3, [r3, #32]
 8003e78:	3304      	adds	r3, #4
 8003e7a:	617b      	str	r3, [r7, #20]

	/* extended header? */
	if(ack_requested || dest.id != 0 || dest.manufacturer != 0 || signature != 0)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d10b      	bne.n	8003e9c <_ZN5Frame9serializeERPh+0x5c>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d107      	bne.n	8003e9c <_ZN5Frame9serializeERPh+0x5c>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d103      	bne.n	8003e9c <_ZN5Frame9serializeERPh+0x5c>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	699b      	ldr	r3, [r3, #24]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d002      	beq.n	8003ea2 <_ZN5Frame9serializeERPh+0x62>
		blength++;
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	617b      	str	r3, [r7, #20]

	/* none broadcast frame */
	if(dest.id != 0 || dest.manufacturer != 0)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d103      	bne.n	8003eb2 <_ZN5Frame9serializeERPh+0x72>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d002      	beq.n	8003eb8 <_ZN5Frame9serializeERPh+0x78>
		blength += MAC_FRM_ADDR_LENGTH;
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	3303      	adds	r3, #3
 8003eb6:	617b      	str	r3, [r7, #20]

	/* signature */
	if(signature != 0)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d002      	beq.n	8003ec6 <_ZN5Frame9serializeERPh+0x86>
		blength += MAC_FRM_SIGNATURE_LENGTH;
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	3304      	adds	r3, #4
 8003ec4:	617b      	str	r3, [r7, #20]

	/* frame to long */
	if(blength > 255)
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	2bff      	cmp	r3, #255	; 0xff
 8003eca:	dd02      	ble.n	8003ed2 <_ZN5Frame9serializeERPh+0x92>
		return -1;
 8003ecc:	f04f 33ff 	mov.w	r3, #4294967295
 8003ed0:	e0ff      	b.n	80040d2 <_ZN5Frame9serializeERPh+0x292>

	/* get memory */
	buffer = new uint8_t[blength];
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f009 f8a4 	bl	800d022 <_Znaj>
 8003eda:	4603      	mov	r3, r0
 8003edc:	461a      	mov	r2, r3
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	601a      	str	r2, [r3, #0]
	int idx = 0;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	613b      	str	r3, [r7, #16]

	/* header */
	buffer[idx++] = !!(ack_requested || dest.id != 0 || dest.manufacturer != 0 || signature != 0)<<MAC_FRM_HEADER_EXTHEADER_BIT |
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d10b      	bne.n	8003f06 <_ZN5Frame9serializeERPh+0xc6>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d107      	bne.n	8003f06 <_ZN5Frame9serializeERPh+0xc6>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d103      	bne.n	8003f06 <_ZN5Frame9serializeERPh+0xc6>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d001      	beq.n	8003f0a <_ZN5Frame9serializeERPh+0xca>
 8003f06:	2301      	movs	r3, #1
 8003f08:	e000      	b.n	8003f0c <_ZN5Frame9serializeERPh+0xcc>
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	01db      	lsls	r3, r3, #7
 8003f0e:	b25a      	sxtb	r2, r3
			!!forward<<MAC_FRM_HEADER_FORWARD_BIT | (type & MAC_FRM_HEADER_TYPE_MASK);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	7d1b      	ldrb	r3, [r3, #20]
 8003f14:	019b      	lsls	r3, r3, #6
	buffer[idx++] = !!(ack_requested || dest.id != 0 || dest.manufacturer != 0 || signature != 0)<<MAC_FRM_HEADER_EXTHEADER_BIT |
 8003f16:	b25b      	sxtb	r3, r3
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	b25a      	sxtb	r2, r3
			!!forward<<MAC_FRM_HEADER_FORWARD_BIT | (type & MAC_FRM_HEADER_TYPE_MASK);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	69db      	ldr	r3, [r3, #28]
 8003f20:	b25b      	sxtb	r3, r3
 8003f22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f26:	b25b      	sxtb	r3, r3
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	b258      	sxtb	r0, r3
	buffer[idx++] = !!(ack_requested || dest.id != 0 || dest.manufacturer != 0 || signature != 0)<<MAC_FRM_HEADER_EXTHEADER_BIT |
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	1c59      	adds	r1, r3, #1
 8003f34:	6139      	str	r1, [r7, #16]
 8003f36:	4413      	add	r3, r2
			!!forward<<MAC_FRM_HEADER_FORWARD_BIT | (type & MAC_FRM_HEADER_TYPE_MASK);
 8003f38:	b2c2      	uxtb	r2, r0
	buffer[idx++] = !!(ack_requested || dest.id != 0 || dest.manufacturer != 0 || signature != 0)<<MAC_FRM_HEADER_EXTHEADER_BIT |
 8003f3a:	701a      	strb	r2, [r3, #0]
	buffer[idx++] = src.manufacturer & 0x000000FF;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6818      	ldr	r0, [r3, #0]
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	1c59      	adds	r1, r3, #1
 8003f48:	6139      	str	r1, [r7, #16]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	b2c2      	uxtb	r2, r0
 8003f4e:	701a      	strb	r2, [r3, #0]
	buffer[idx++] = src.id & 0x000000FF;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6858      	ldr	r0, [r3, #4]
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	1c59      	adds	r1, r3, #1
 8003f5c:	6139      	str	r1, [r7, #16]
 8003f5e:	4413      	add	r3, r2
 8003f60:	b2c2      	uxtb	r2, r0
 8003f62:	701a      	strb	r2, [r3, #0]
	buffer[idx++] = (src.id>>8) & 0x000000FF;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	1218      	asrs	r0, r3, #8
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	1c59      	adds	r1, r3, #1
 8003f72:	6139      	str	r1, [r7, #16]
 8003f74:	4413      	add	r3, r2
 8003f76:	b2c2      	uxtb	r2, r0
 8003f78:	701a      	strb	r2, [r3, #0]

	/* extended header */
	if(buffer[0] & 1<<7)
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	b25b      	sxtb	r3, r3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	da23      	bge.n	8003fce <_ZN5Frame9serializeERPh+0x18e>
		buffer[idx++] = (ack_requested & 3)<<MAC_FRM_EXTHEADER_ACK_BIT0 |
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	019b      	lsls	r3, r3, #6
 8003f8c:	b25a      	sxtb	r2, r3
				!!(dest.id != 0 || dest.manufacturer != 0)<<MAC_FRM_EXTHEADER_UNICAST_BIT |
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d103      	bne.n	8003f9e <_ZN5Frame9serializeERPh+0x15e>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <_ZN5Frame9serializeERPh+0x162>
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e000      	b.n	8003fa4 <_ZN5Frame9serializeERPh+0x164>
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	015b      	lsls	r3, r3, #5
		buffer[idx++] = (ack_requested & 3)<<MAC_FRM_EXTHEADER_ACK_BIT0 |
 8003fa6:	b25b      	sxtb	r3, r3
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	b25b      	sxtb	r3, r3
				!!signature<<MAC_FRM_EXTHEADER_SIGNATURE_BIT;
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	6992      	ldr	r2, [r2, #24]
				!!(dest.id != 0 || dest.manufacturer != 0)<<MAC_FRM_EXTHEADER_UNICAST_BIT |
 8003fb0:	2a00      	cmp	r2, #0
 8003fb2:	d001      	beq.n	8003fb8 <_ZN5Frame9serializeERPh+0x178>
 8003fb4:	2210      	movs	r2, #16
 8003fb6:	e000      	b.n	8003fba <_ZN5Frame9serializeERPh+0x17a>
 8003fb8:	2200      	movs	r2, #0
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	b258      	sxtb	r0, r3
		buffer[idx++] = (ack_requested & 3)<<MAC_FRM_EXTHEADER_ACK_BIT0 |
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	1c59      	adds	r1, r3, #1
 8003fc6:	6139      	str	r1, [r7, #16]
 8003fc8:	4413      	add	r3, r2
				!!(dest.id != 0 || dest.manufacturer != 0)<<MAC_FRM_EXTHEADER_UNICAST_BIT |
 8003fca:	b2c2      	uxtb	r2, r0
		buffer[idx++] = (ack_requested & 3)<<MAC_FRM_EXTHEADER_ACK_BIT0 |
 8003fcc:	701a      	strb	r2, [r3, #0]

	/* extheader and unicast -> add destination addr */
	if((buffer[0] & 1<<7) && (buffer[4] & 1<<5))
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	b25b      	sxtb	r3, r3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	da26      	bge.n	8004028 <_ZN5Frame9serializeERPh+0x1e8>
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	3304      	adds	r3, #4
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	f003 0320 	and.w	r3, r3, #32
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d01e      	beq.n	8004028 <_ZN5Frame9serializeERPh+0x1e8>
	{
		buffer[idx++] = dest.manufacturer & 0x000000FF;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6898      	ldr	r0, [r3, #8]
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	1c59      	adds	r1, r3, #1
 8003ff6:	6139      	str	r1, [r7, #16]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	b2c2      	uxtb	r2, r0
 8003ffc:	701a      	strb	r2, [r3, #0]
		buffer[idx++] = dest.id & 0x000000FF;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	68d8      	ldr	r0, [r3, #12]
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	1c59      	adds	r1, r3, #1
 800400a:	6139      	str	r1, [r7, #16]
 800400c:	4413      	add	r3, r2
 800400e:	b2c2      	uxtb	r2, r0
 8004010:	701a      	strb	r2, [r3, #0]
		buffer[idx++] = (dest.id>>8) & 0x000000FF;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	1218      	asrs	r0, r3, #8
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	1c59      	adds	r1, r3, #1
 8004020:	6139      	str	r1, [r7, #16]
 8004022:	4413      	add	r3, r2
 8004024:	b2c2      	uxtb	r2, r0
 8004026:	701a      	strb	r2, [r3, #0]
	}

	/* extheader and signature -> add signature */
	if((buffer[0] & 1<<7) && (buffer[4] & 1<<4))
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	b25b      	sxtb	r3, r3
 8004030:	2b00      	cmp	r3, #0
 8004032:	da32      	bge.n	800409a <_ZN5Frame9serializeERPh+0x25a>
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	3304      	adds	r3, #4
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	f003 0310 	and.w	r3, r3, #16
 8004040:	2b00      	cmp	r3, #0
 8004042:	d02a      	beq.n	800409a <_ZN5Frame9serializeERPh+0x25a>
	{
		buffer[idx++] = signature & 0x000000FF;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6998      	ldr	r0, [r3, #24]
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	1c59      	adds	r1, r3, #1
 8004050:	6139      	str	r1, [r7, #16]
 8004052:	4413      	add	r3, r2
 8004054:	b2c2      	uxtb	r2, r0
 8004056:	701a      	strb	r2, [r3, #0]
		buffer[idx++] = (signature>>8) & 0x000000FF;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	0a18      	lsrs	r0, r3, #8
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	1c59      	adds	r1, r3, #1
 8004066:	6139      	str	r1, [r7, #16]
 8004068:	4413      	add	r3, r2
 800406a:	b2c2      	uxtb	r2, r0
 800406c:	701a      	strb	r2, [r3, #0]
		buffer[idx++] = (signature>>16) & 0x000000FF;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	0c18      	lsrs	r0, r3, #16
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	1c59      	adds	r1, r3, #1
 800407c:	6139      	str	r1, [r7, #16]
 800407e:	4413      	add	r3, r2
 8004080:	b2c2      	uxtb	r2, r0
 8004082:	701a      	strb	r2, [r3, #0]
		buffer[idx++] = (signature>>24) & 0x000000FF;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	699b      	ldr	r3, [r3, #24]
 8004088:	0e18      	lsrs	r0, r3, #24
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	1c59      	adds	r1, r3, #1
 8004092:	6139      	str	r1, [r7, #16]
 8004094:	4413      	add	r3, r2
 8004096:	b2c2      	uxtb	r2, r0
 8004098:	701a      	strb	r2, [r3, #0]
	}

	/* fill payload */
	for(int i=0; i<payload_length && idx<blength; i++)
 800409a:	2300      	movs	r3, #0
 800409c:	60fb      	str	r3, [r7, #12]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a1b      	ldr	r3, [r3, #32]
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	da13      	bge.n	80040d0 <_ZN5Frame9serializeERPh+0x290>
 80040a8:	693a      	ldr	r2, [r7, #16]
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	da0f      	bge.n	80040d0 <_ZN5Frame9serializeERPh+0x290>
		buffer[idx++] = payload[i];
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	441a      	add	r2, r3
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	6819      	ldr	r1, [r3, #0]
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	1c58      	adds	r0, r3, #1
 80040c0:	6138      	str	r0, [r7, #16]
 80040c2:	440b      	add	r3, r1
 80040c4:	7812      	ldrb	r2, [r2, #0]
 80040c6:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<payload_length && idx<blength; i++)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	3301      	adds	r3, #1
 80040cc:	60fb      	str	r3, [r7, #12]
 80040ce:	e7e6      	b.n	800409e <_ZN5Frame9serializeERPh+0x25e>

	return blength;
 80040d0:	697b      	ldr	r3, [r7, #20]
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3718      	adds	r7, #24
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}

080040da <_ZNK5FrameeqERKS_>:
{
	src = fmac.myAddr;
}

bool Frame::operator== (const Frame& frm) const
{
 80040da:	b580      	push	{r7, lr}
 80040dc:	b084      	sub	sp, #16
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
 80040e2:	6039      	str	r1, [r7, #0]
	if(src != frm.src)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	683a      	ldr	r2, [r7, #0]
 80040e8:	4611      	mov	r1, r2
 80040ea:	4618      	mov	r0, r3
 80040ec:	f7fe f82d 	bl	800214a <_ZNK7MacAddrneERKS_>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d001      	beq.n	80040fa <_ZNK5FrameeqERKS_+0x20>
		return false;
 80040f6:	2300      	movs	r3, #0
 80040f8:	e037      	b.n	800416a <_ZNK5FrameeqERKS_+0x90>

	if(dest != frm.dest)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f103 0208 	add.w	r2, r3, #8
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	3308      	adds	r3, #8
 8004104:	4619      	mov	r1, r3
 8004106:	4610      	mov	r0, r2
 8004108:	f7fe f81f 	bl	800214a <_ZNK7MacAddrneERKS_>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d001      	beq.n	8004116 <_ZNK5FrameeqERKS_+0x3c>
		return false;
 8004112:	2300      	movs	r3, #0
 8004114:	e029      	b.n	800416a <_ZNK5FrameeqERKS_+0x90>

	if(type != frm.type)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	69da      	ldr	r2, [r3, #28]
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	69db      	ldr	r3, [r3, #28]
 800411e:	429a      	cmp	r2, r3
 8004120:	d001      	beq.n	8004126 <_ZNK5FrameeqERKS_+0x4c>
		return false;
 8004122:	2300      	movs	r3, #0
 8004124:	e021      	b.n	800416a <_ZNK5FrameeqERKS_+0x90>

	if(payload_length != frm.payload_length)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a1a      	ldr	r2, [r3, #32]
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	6a1b      	ldr	r3, [r3, #32]
 800412e:	429a      	cmp	r2, r3
 8004130:	d001      	beq.n	8004136 <_ZNK5FrameeqERKS_+0x5c>
		return false;
 8004132:	2300      	movs	r3, #0
 8004134:	e019      	b.n	800416a <_ZNK5FrameeqERKS_+0x90>

	for(int i=0; i<payload_length; i++)
 8004136:	2300      	movs	r3, #0
 8004138:	60fb      	str	r3, [r7, #12]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a1b      	ldr	r3, [r3, #32]
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	429a      	cmp	r2, r3
 8004142:	da11      	bge.n	8004168 <_ZNK5FrameeqERKS_+0x8e>
		if(payload[i] != frm.payload[i])
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	4413      	add	r3, r2
 800414c:	781a      	ldrb	r2, [r3, #0]
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	440b      	add	r3, r1
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	429a      	cmp	r2, r3
 800415a:	d001      	beq.n	8004160 <_ZNK5FrameeqERKS_+0x86>
			return false;
 800415c:	2300      	movs	r3, #0
 800415e:	e004      	b.n	800416a <_ZNK5FrameeqERKS_+0x90>
	for(int i=0; i<payload_length; i++)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	3301      	adds	r3, #1
 8004164:	60fb      	str	r3, [r7, #12]
 8004166:	e7e8      	b.n	800413a <_ZNK5FrameeqERKS_+0x60>

	return true;
 8004168:	2301      	movs	r3, #1
}
 800416a:	4618      	mov	r0, r3
 800416c:	3710      	adds	r7, #16
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
	...

08004174 <LL_SYSCFG_SetRemapMemory>:
  *         @arg @ref LL_SYSCFG_REMAP_SYSTEMFLASH
  *         @arg @ref LL_SYSCFG_REMAP_SRAM
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetRemapMemory(uint32_t Memory)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(SYSCFG->MEMRMP, SYSCFG_MEMRMP_MEM_MODE, Memory);
 800417c:	4b06      	ldr	r3, [pc, #24]	; (8004198 <LL_SYSCFG_SetRemapMemory+0x24>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f023 0207 	bic.w	r2, r3, #7
 8004184:	4904      	ldr	r1, [pc, #16]	; (8004198 <LL_SYSCFG_SetRemapMemory+0x24>)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4313      	orrs	r3, r2
 800418a:	600b      	str	r3, [r1, #0]
}
 800418c:	bf00      	nop
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	bc80      	pop	{r7}
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	40010000 	.word	0x40010000

0800419c <jump_app>:

/*
 See comments below, it follows the same principles.
 */
void jump_app(void* startAddr)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b086      	sub	sp, #24
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
	uint32_t* address = (uint32_t*) startAddr;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	617b      	str	r3, [r7, #20]
	void (*entryAddress)(void) = ((void (*)(void)) *(address + 1));
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	3304      	adds	r3, #4
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	613b      	str	r3, [r7, #16]

	HAL_RCC_DeInit();
 80041b0:	f002 fe3a 	bl	8006e28 <HAL_RCC_DeInit>
	HAL_DeInit();
 80041b4:	f001 ff38 	bl	8006028 <HAL_DeInit>
	SysTick->CTRL = 0;
 80041b8:	4b0c      	ldr	r3, [pc, #48]	; (80041ec <jump_app+0x50>)
 80041ba:	2200      	movs	r2, #0
 80041bc:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0;
 80041be:	4b0b      	ldr	r3, [pc, #44]	; (80041ec <jump_app+0x50>)
 80041c0:	2200      	movs	r2, #0
 80041c2:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 80041c4:	4b09      	ldr	r3, [pc, #36]	; (80041ec <jump_app+0x50>)
 80041c6:	2200      	movs	r2, #0
 80041c8:	609a      	str	r2, [r3, #8]

	__HAL_SYSCFG_REMAPMEMORY_SYSTEMFLASH();
 80041ca:	2001      	movs	r0, #1
 80041cc:	f7ff ffd2 	bl	8004174 <LL_SYSCFG_SetRemapMemory>
	__set_MSP(*address);
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f383 8808 	msr	MSP, r3
}
 80041dc:	bf00      	nop

	entryAddress();
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	4798      	blx	r3
}
 80041e2:	bf00      	nop
 80041e4:	3718      	adds	r7, #24
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	e000e010 	.word	0xe000e010

080041f0 <jump_mcu_bootloader>:
 file, __initial_sp is at the beginning).
 Then, the 4 next bytes are a pointer to the Reset Handler.
 !The device should be barely set up when calling this function!
 */
void jump_mcu_bootloader(void)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
	uint32_t* bootloaderAddress = (uint32_t*) 0x1fff0000;
 80041f6:	4b1a      	ldr	r3, [pc, #104]	; (8004260 <jump_mcu_bootloader+0x70>)
 80041f8:	60fb      	str	r3, [r7, #12]
	void (*SysMemBootJump)(void) = (void (*)(void)) *(bootloaderAddress + 1);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	3304      	adds	r3, #4
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	60bb      	str	r3, [r7, #8]

	__HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004202:	4b18      	ldr	r3, [pc, #96]	; (8004264 <jump_mcu_bootloader+0x74>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a17      	ldr	r2, [pc, #92]	; (8004264 <jump_mcu_bootloader+0x74>)
 8004208:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800420c:	6013      	str	r3, [r2, #0]
	__HAL_FLASH_DATA_CACHE_DISABLE();
 800420e:	4b15      	ldr	r3, [pc, #84]	; (8004264 <jump_mcu_bootloader+0x74>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a14      	ldr	r2, [pc, #80]	; (8004264 <jump_mcu_bootloader+0x74>)
 8004214:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004218:	6013      	str	r3, [r2, #0]
	__HAL_FLASH_PREFETCH_BUFFER_DISABLE();
 800421a:	4b12      	ldr	r3, [pc, #72]	; (8004264 <jump_mcu_bootloader+0x74>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a11      	ldr	r2, [pc, #68]	; (8004264 <jump_mcu_bootloader+0x74>)
 8004220:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004224:	6013      	str	r3, [r2, #0]

	HAL_RCC_DeInit();
 8004226:	f002 fdff 	bl	8006e28 <HAL_RCC_DeInit>
	SysTick->CTRL = 0;
 800422a:	4b0f      	ldr	r3, [pc, #60]	; (8004268 <jump_mcu_bootloader+0x78>)
 800422c:	2200      	movs	r2, #0
 800422e:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0;
 8004230:	4b0d      	ldr	r3, [pc, #52]	; (8004268 <jump_mcu_bootloader+0x78>)
 8004232:	2200      	movs	r2, #0
 8004234:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8004236:	4b0c      	ldr	r3, [pc, #48]	; (8004268 <jump_mcu_bootloader+0x78>)
 8004238:	2200      	movs	r2, #0
 800423a:	609a      	str	r2, [r3, #8]

	SYSCFG->MEMRMP = SYSCFG_MEMRMP_MEM_MODE_0;
 800423c:	4b0b      	ldr	r3, [pc, #44]	; (800426c <jump_mcu_bootloader+0x7c>)
 800423e:	2201      	movs	r2, #1
 8004240:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004242:	b672      	cpsid	i
}
 8004244:	bf00      	nop

	__disable_irq();
	__set_MSP(*bootloaderAddress);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f383 8808 	msr	MSP, r3
}
 8004252:	bf00      	nop

	SysMemBootJump();
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	4798      	blx	r3
}
 8004258:	bf00      	nop
 800425a:	3710      	adds	r7, #16
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}
 8004260:	1fff0000 	.word	0x1fff0000
 8004264:	58004000 	.word	0x58004000
 8004268:	e000e010 	.word	0xe000e010
 800426c:	40010000 	.word	0x40010000

08004270 <_Z10randomSeedm>:
#include <stdint.h>

#include "random.h"

void randomSeed(uint32_t dwSeed)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
	if (dwSeed != 0)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d002      	beq.n	8004284 <_Z10randomSeedm+0x14>
	{
		srand(dwSeed);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f009 f852 	bl	800d328 <srand>
	}
}
 8004284:	bf00      	nop
 8004286:	3708      	adds	r7, #8
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <_Z8random_ui>:

int random_u(int howbig)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
	if (howbig == 0)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d101      	bne.n	800429e <_Z8random_ui+0x12>
	{
		return 0;
 800429a:	2300      	movs	r3, #0
 800429c:	e009      	b.n	80042b2 <_Z8random_ui+0x26>
	}

	return rand() % howbig;
 800429e:	f009 f871 	bl	800d384 <rand>
 80042a2:	4603      	mov	r3, r0
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	fb93 f2f2 	sdiv	r2, r3, r2
 80042aa:	6879      	ldr	r1, [r7, #4]
 80042ac:	fb01 f202 	mul.w	r2, r1, r2
 80042b0:	1a9b      	subs	r3, r3, r2
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3708      	adds	r7, #8
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <_Z6randomii>:

int random(int howsmall, int howbig)
{
 80042ba:	b580      	push	{r7, lr}
 80042bc:	b084      	sub	sp, #16
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
 80042c2:	6039      	str	r1, [r7, #0]
	if (howsmall >= howbig)
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	db01      	blt.n	80042d0 <_Z6randomii+0x16>
		return howsmall;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	e009      	b.n	80042e4 <_Z6randomii+0x2a>

	int diff = howbig - howsmall;
 80042d0:	683a      	ldr	r2, [r7, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	60fb      	str	r3, [r7, #12]

	return random_u(diff) + howsmall;
 80042d8:	68f8      	ldr	r0, [r7, #12]
 80042da:	f7ff ffd7 	bl	800428c <_Z8random_ui>
 80042de:	4602      	mov	r2, r0
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4413      	add	r3, r2
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3710      	adds	r7, #16
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <serial_poll>:
	return &serial;
}


bool serial_poll(serial_t *serial, char *line, int num)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b086      	sub	sp, #24
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	607a      	str	r2, [r7, #4]
	if(serial == NULL || line == NULL || num == 0)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d005      	beq.n	800430a <serial_poll+0x1e>
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d002      	beq.n	800430a <serial_poll+0x1e>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d101      	bne.n	800430e <serial_poll+0x22>
		return false;
 800430a:	2300      	movs	r3, #0
 800430c:	e036      	b.n	800437c <serial_poll+0x90>

	if(serial->pushed_cmds == serial->pulled_cmds)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	891a      	ldrh	r2, [r3, #8]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	895b      	ldrh	r3, [r3, #10]
 8004316:	429a      	cmp	r2, r3
 8004318:	d101      	bne.n	800431e <serial_poll+0x32>
		return false;
 800431a:	2300      	movs	r3, #0
 800431c:	e02e      	b.n	800437c <serial_poll+0x90>

	int pos;
	for(pos=0; pos < num && circ_buf_pop(serial->rx_crc_buf, (uint8_t *) &line[pos])==0; pos++)
 800431e:	2300      	movs	r3, #0
 8004320:	617b      	str	r3, [r7, #20]
 8004322:	e00f      	b.n	8004344 <serial_poll+0x58>
	{
		if(line[pos] == '\n')
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	68ba      	ldr	r2, [r7, #8]
 8004328:	4413      	add	r3, r2
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	2b0a      	cmp	r3, #10
 800432e:	d106      	bne.n	800433e <serial_poll+0x52>
		{
			serial->pulled_cmds++;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	895b      	ldrh	r3, [r3, #10]
 8004334:	3301      	adds	r3, #1
 8004336:	b29a      	uxth	r2, r3
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	815a      	strh	r2, [r3, #10]
			break;
 800433c:	e011      	b.n	8004362 <serial_poll+0x76>
	for(pos=0; pos < num && circ_buf_pop(serial->rx_crc_buf, (uint8_t *) &line[pos])==0; pos++)
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	3301      	adds	r3, #1
 8004342:	617b      	str	r3, [r7, #20]
 8004344:	697a      	ldr	r2, [r7, #20]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	429a      	cmp	r2, r3
 800434a:	da0a      	bge.n	8004362 <serial_poll+0x76>
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6858      	ldr	r0, [r3, #4]
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	68ba      	ldr	r2, [r7, #8]
 8004354:	4413      	add	r3, r2
 8004356:	4619      	mov	r1, r3
 8004358:	f7fd fe50 	bl	8001ffc <circ_buf_pop>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d0e0      	beq.n	8004324 <serial_poll+0x38>
		}
	}

	if(pos >= 0 && pos < num)
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	2b00      	cmp	r3, #0
 8004366:	db08      	blt.n	800437a <serial_poll+0x8e>
 8004368:	697a      	ldr	r2, [r7, #20]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	429a      	cmp	r2, r3
 800436e:	da04      	bge.n	800437a <serial_poll+0x8e>
		line[pos] = '\0';
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	68ba      	ldr	r2, [r7, #8]
 8004374:	4413      	add	r3, r2
 8004376:	2200      	movs	r2, #0
 8004378:	701a      	strb	r2, [r3, #0]

	return true;
 800437a:	2301      	movs	r3, #1
}
 800437c:	4618      	mov	r0, r3
 800437e:	3718      	adds	r7, #24
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}

08004384 <_ZN8FanetMac19txQueueHasFreeSlotsEv>:

	bool txQueueDepleted(void) { return (tx_fifo.size() == 0); }
	bool txQueueHasFreeSlots(void){ return (tx_fifo.size() < MAC_FIFO_SIZE); }
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	3314      	adds	r3, #20
 8004390:	4618      	mov	r0, r3
 8004392:	f7fd ff41 	bl	8002218 <_ZN7MacFifo4sizeEv>
 8004396:	4603      	mov	r3, r0
 8004398:	2b07      	cmp	r3, #7
 800439a:	bfd4      	ite	le
 800439c:	2301      	movle	r3, #1
 800439e:	2300      	movgt	r3, #0
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	4618      	mov	r0, r3
 80043a4:	3708      	adds	r7, #8
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}

080043aa <_ZN8FanetMac8transmitEP5Frame>:
	int transmit(Frame *frm) { return tx_fifo.add(frm); }
 80043aa:	b580      	push	{r7, lr}
 80043ac:	b082      	sub	sp, #8
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
 80043b2:	6039      	str	r1, [r7, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	3314      	adds	r3, #20
 80043b8:	6839      	ldr	r1, [r7, #0]
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7fe f856 	bl	800246c <_ZN7MacFifo3addEP5Frame>
 80043c0:	4603      	mov	r3, r0
 80043c2:	4618      	mov	r0, r3
 80043c4:	3708      	adds	r7, #8
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}

080043ca <_ZN16Serial_InterfaceC1Ev>:
	void flarm_cmd_expires(char *ch_str);
	void flarm_cmd_power(char *ch_str);
#endif

public:
	Serial_Interface() {};
 80043ca:	b480      	push	{r7}
 80043cc:	b083      	sub	sp, #12
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	601a      	str	r2, [r3, #0]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	605a      	str	r2, [r3, #4]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4618      	mov	r0, r3
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bc80      	pop	{r7}
 80043e8:	4770      	bx	lr
	...

080043ec <_ZN16Serial_Interface15fanet_cmd_stateEPc>:
 * 					note2: FLARM uses the ellipsoid altitudes ->
 * 							sep = Height of geoid (mean sea level) above WGS84 ellipsoid
 * 					note3: QNEoffset is optional: QNEoffset = QNE - GPS altitude
 */
void Serial_Interface::fanet_cmd_state(char *ch_str)
{
 80043ec:	b590      	push	{r4, r7, lr}
 80043ee:	b09d      	sub	sp, #116	; 0x74
 80043f0:	af06      	add	r7, sp, #24
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
#if defined(SerialDEBUG) && (SERIAL_debug_mode > 0)
	SerialDEBUG.print(F("### State "));
	SerialDEBUG.print(ch_str);
#endif
	/* state */
	char *p = (char *)ch_str;
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	657b      	str	r3, [r7, #84]	; 0x54
	float lat = atof(p);
 80043fa:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80043fc:	f008 fe5f 	bl	800d0be <atof>
 8004400:	4602      	mov	r2, r0
 8004402:	460b      	mov	r3, r1
 8004404:	4610      	mov	r0, r2
 8004406:	4619      	mov	r1, r3
 8004408:	f7fc fb88 	bl	8000b1c <__aeabi_d2f>
 800440c:	4603      	mov	r3, r0
 800440e:	647b      	str	r3, [r7, #68]	; 0x44
	p = strchr(p, SEPARATOR);
 8004410:	212c      	movs	r1, #44	; 0x2c
 8004412:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004414:	f009 f87c 	bl	800d510 <strchr>
 8004418:	6578      	str	r0, [r7, #84]	; 0x54
	if(p == NULL)
 800441a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800441c:	2b00      	cmp	r3, #0
 800441e:	d106      	bne.n	800442e <_ZN16Serial_Interface15fanet_cmd_stateEPc+0x42>
	{
		print_line(FN_REPLYE_CMD_TOO_SHORT);
 8004420:	4ba4      	ldr	r3, [pc, #656]	; (80046b4 <_ZN16Serial_Interface15fanet_cmd_stateEPc+0x2c8>)
 8004422:	221e      	movs	r2, #30
 8004424:	49a4      	ldr	r1, [pc, #656]	; (80046b8 <_ZN16Serial_Interface15fanet_cmd_stateEPc+0x2cc>)
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f001 f884 	bl	8005534 <_ZN16Serial_Interface10print_lineEPKciS1_>
		return;
 800442c:	e187      	b.n	800473e <_ZN16Serial_Interface15fanet_cmd_stateEPc+0x352>
	}
	float lon = atof(++p);
 800442e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004430:	3301      	adds	r3, #1
 8004432:	657b      	str	r3, [r7, #84]	; 0x54
 8004434:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004436:	f008 fe42 	bl	800d0be <atof>
 800443a:	4602      	mov	r2, r0
 800443c:	460b      	mov	r3, r1
 800443e:	4610      	mov	r0, r2
 8004440:	4619      	mov	r1, r3
 8004442:	f7fc fb6b 	bl	8000b1c <__aeabi_d2f>
 8004446:	4603      	mov	r3, r0
 8004448:	643b      	str	r3, [r7, #64]	; 0x40
	p = strchr(p, SEPARATOR);
 800444a:	212c      	movs	r1, #44	; 0x2c
 800444c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800444e:	f009 f85f 	bl	800d510 <strchr>
 8004452:	6578      	str	r0, [r7, #84]	; 0x54
	if(p == NULL)
 8004454:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004456:	2b00      	cmp	r3, #0
 8004458:	d106      	bne.n	8004468 <_ZN16Serial_Interface15fanet_cmd_stateEPc+0x7c>
	{
		print_line(FN_REPLYE_CMD_TOO_SHORT);
 800445a:	4b96      	ldr	r3, [pc, #600]	; (80046b4 <_ZN16Serial_Interface15fanet_cmd_stateEPc+0x2c8>)
 800445c:	221e      	movs	r2, #30
 800445e:	4996      	ldr	r1, [pc, #600]	; (80046b8 <_ZN16Serial_Interface15fanet_cmd_stateEPc+0x2cc>)
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f001 f867 	bl	8005534 <_ZN16Serial_Interface10print_lineEPKciS1_>
		return;
 8004466:	e16a      	b.n	800473e <_ZN16Serial_Interface15fanet_cmd_stateEPc+0x352>
	}
	float alt = atof(++p);
 8004468:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800446a:	3301      	adds	r3, #1
 800446c:	657b      	str	r3, [r7, #84]	; 0x54
 800446e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004470:	f008 fe25 	bl	800d0be <atof>
 8004474:	4602      	mov	r2, r0
 8004476:	460b      	mov	r3, r1
 8004478:	4610      	mov	r0, r2
 800447a:	4619      	mov	r1, r3
 800447c:	f7fc fb4e 	bl	8000b1c <__aeabi_d2f>
 8004480:	4603      	mov	r3, r0
 8004482:	63fb      	str	r3, [r7, #60]	; 0x3c
	p = strchr(p, SEPARATOR);
 8004484:	212c      	movs	r1, #44	; 0x2c
 8004486:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004488:	f009 f842 	bl	800d510 <strchr>
 800448c:	6578      	str	r0, [r7, #84]	; 0x54
	if(p == NULL)
 800448e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004490:	2b00      	cmp	r3, #0
 8004492:	d106      	bne.n	80044a2 <_ZN16Serial_Interface15fanet_cmd_stateEPc+0xb6>
	{
		print_line(FN_REPLYE_CMD_TOO_SHORT);
 8004494:	4b87      	ldr	r3, [pc, #540]	; (80046b4 <_ZN16Serial_Interface15fanet_cmd_stateEPc+0x2c8>)
 8004496:	221e      	movs	r2, #30
 8004498:	4987      	ldr	r1, [pc, #540]	; (80046b8 <_ZN16Serial_Interface15fanet_cmd_stateEPc+0x2cc>)
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f001 f84a 	bl	8005534 <_ZN16Serial_Interface10print_lineEPKciS1_>
		return;
 80044a0:	e14d      	b.n	800473e <_ZN16Serial_Interface15fanet_cmd_stateEPc+0x352>
	}
	float speed = atof(++p);
 80044a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044a4:	3301      	adds	r3, #1
 80044a6:	657b      	str	r3, [r7, #84]	; 0x54
 80044a8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80044aa:	f008 fe08 	bl	800d0be <atof>
 80044ae:	4602      	mov	r2, r0
 80044b0:	460b      	mov	r3, r1
 80044b2:	4610      	mov	r0, r2
 80044b4:	4619      	mov	r1, r3
 80044b6:	f7fc fb31 	bl	8000b1c <__aeabi_d2f>
 80044ba:	4603      	mov	r3, r0
 80044bc:	63bb      	str	r3, [r7, #56]	; 0x38
	p = strchr(p, SEPARATOR);
 80044be:	212c      	movs	r1, #44	; 0x2c
 80044c0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80044c2:	f009 f825 	bl	800d510 <strchr>
 80044c6:	6578      	str	r0, [r7, #84]	; 0x54
	if(p == NULL)
 80044c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d106      	bne.n	80044dc <_ZN16Serial_Interface15fanet_cmd_stateEPc+0xf0>
	{
		print_line(FN_REPLYE_CMD_TOO_SHORT);
 80044ce:	4b79      	ldr	r3, [pc, #484]	; (80046b4 <_ZN16Serial_Interface15fanet_cmd_stateEPc+0x2c8>)
 80044d0:	221e      	movs	r2, #30
 80044d2:	4979      	ldr	r1, [pc, #484]	; (80046b8 <_ZN16Serial_Interface15fanet_cmd_stateEPc+0x2cc>)
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f001 f82d 	bl	8005534 <_ZN16Serial_Interface10print_lineEPKciS1_>
		return;
 80044da:	e130      	b.n	800473e <_ZN16Serial_Interface15fanet_cmd_stateEPc+0x352>
	}
	float climb = atof(++p);
 80044dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044de:	3301      	adds	r3, #1
 80044e0:	657b      	str	r3, [r7, #84]	; 0x54
 80044e2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80044e4:	f008 fdeb 	bl	800d0be <atof>
 80044e8:	4602      	mov	r2, r0
 80044ea:	460b      	mov	r3, r1
 80044ec:	4610      	mov	r0, r2
 80044ee:	4619      	mov	r1, r3
 80044f0:	f7fc fb14 	bl	8000b1c <__aeabi_d2f>
 80044f4:	4603      	mov	r3, r0
 80044f6:	637b      	str	r3, [r7, #52]	; 0x34
	p = strchr(p, SEPARATOR);
 80044f8:	212c      	movs	r1, #44	; 0x2c
 80044fa:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80044fc:	f009 f808 	bl	800d510 <strchr>
 8004500:	6578      	str	r0, [r7, #84]	; 0x54
	if(p == NULL)
 8004502:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004504:	2b00      	cmp	r3, #0
 8004506:	d106      	bne.n	8004516 <_ZN16Serial_Interface15fanet_cmd_stateEPc+0x12a>
	{
		print_line(FN_REPLYE_CMD_TOO_SHORT);
 8004508:	4b6a      	ldr	r3, [pc, #424]	; (80046b4 <_ZN16Serial_Interface15fanet_cmd_stateEPc+0x2c8>)
 800450a:	221e      	movs	r2, #30
 800450c:	496a      	ldr	r1, [pc, #424]	; (80046b8 <_ZN16Serial_Interface15fanet_cmd_stateEPc+0x2cc>)
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f001 f810 	bl	8005534 <_ZN16Serial_Interface10print_lineEPKciS1_>
		return;
 8004514:	e113      	b.n	800473e <_ZN16Serial_Interface15fanet_cmd_stateEPc+0x352>
	}
	float heading = atof(++p);
 8004516:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004518:	3301      	adds	r3, #1
 800451a:	657b      	str	r3, [r7, #84]	; 0x54
 800451c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800451e:	f008 fdce 	bl	800d0be <atof>
 8004522:	4602      	mov	r2, r0
 8004524:	460b      	mov	r3, r1
 8004526:	4610      	mov	r0, r2
 8004528:	4619      	mov	r1, r3
 800452a:	f7fc faf7 	bl	8000b1c <__aeabi_d2f>
 800452e:	4603      	mov	r3, r0
 8004530:	653b      	str	r3, [r7, #80]	; 0x50

	/* time stamp */
	struct tm t = {0};
 8004532:	f107 0308 	add.w	r3, r7, #8
 8004536:	2224      	movs	r2, #36	; 0x24
 8004538:	2100      	movs	r1, #0
 800453a:	4618      	mov	r0, r3
 800453c:	f008 fe0e 	bl	800d15c <memset>
	p = strchr(p, SEPARATOR);	//year
 8004540:	212c      	movs	r1, #44	; 0x2c
 8004542:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004544:	f008 ffe4 	bl	800d510 <strchr>
 8004548:	6578      	str	r0, [r7, #84]	; 0x54
	if(p)
 800454a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800454c:	2b00      	cmp	r3, #0
 800454e:	d007      	beq.n	8004560 <_ZN16Serial_Interface15fanet_cmd_stateEPc+0x174>
		t.tm_year = atoi(++p);
 8004550:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004552:	3301      	adds	r3, #1
 8004554:	657b      	str	r3, [r7, #84]	; 0x54
 8004556:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004558:	f008 fdb4 	bl	800d0c4 <atoi>
 800455c:	4603      	mov	r3, r0
 800455e:	61fb      	str	r3, [r7, #28]
	p = strchr(p, SEPARATOR);	//month
 8004560:	212c      	movs	r1, #44	; 0x2c
 8004562:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004564:	f008 ffd4 	bl	800d510 <strchr>
 8004568:	6578      	str	r0, [r7, #84]	; 0x54
	if(p)
 800456a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800456c:	2b00      	cmp	r3, #0
 800456e:	d007      	beq.n	8004580 <_ZN16Serial_Interface15fanet_cmd_stateEPc+0x194>
		t.tm_mon = atoi(++p);
 8004570:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004572:	3301      	adds	r3, #1
 8004574:	657b      	str	r3, [r7, #84]	; 0x54
 8004576:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004578:	f008 fda4 	bl	800d0c4 <atoi>
 800457c:	4603      	mov	r3, r0
 800457e:	61bb      	str	r3, [r7, #24]
	p = strchr(p, SEPARATOR);	//day
 8004580:	212c      	movs	r1, #44	; 0x2c
 8004582:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004584:	f008 ffc4 	bl	800d510 <strchr>
 8004588:	6578      	str	r0, [r7, #84]	; 0x54
	if(p)
 800458a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800458c:	2b00      	cmp	r3, #0
 800458e:	d007      	beq.n	80045a0 <_ZN16Serial_Interface15fanet_cmd_stateEPc+0x1b4>
		t.tm_mday = atoi(++p);
 8004590:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004592:	3301      	adds	r3, #1
 8004594:	657b      	str	r3, [r7, #84]	; 0x54
 8004596:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004598:	f008 fd94 	bl	800d0c4 <atoi>
 800459c:	4603      	mov	r3, r0
 800459e:	617b      	str	r3, [r7, #20]
	p = strchr(p, SEPARATOR);	//hour
 80045a0:	212c      	movs	r1, #44	; 0x2c
 80045a2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80045a4:	f008 ffb4 	bl	800d510 <strchr>
 80045a8:	6578      	str	r0, [r7, #84]	; 0x54
	if(p)
 80045aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d007      	beq.n	80045c0 <_ZN16Serial_Interface15fanet_cmd_stateEPc+0x1d4>
		t.tm_hour = atoi(++p);
 80045b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045b2:	3301      	adds	r3, #1
 80045b4:	657b      	str	r3, [r7, #84]	; 0x54
 80045b6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80045b8:	f008 fd84 	bl	800d0c4 <atoi>
 80045bc:	4603      	mov	r3, r0
 80045be:	613b      	str	r3, [r7, #16]
	p = strchr(p, SEPARATOR);	//min
 80045c0:	212c      	movs	r1, #44	; 0x2c
 80045c2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80045c4:	f008 ffa4 	bl	800d510 <strchr>
 80045c8:	6578      	str	r0, [r7, #84]	; 0x54
	if(p)
 80045ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d007      	beq.n	80045e0 <_ZN16Serial_Interface15fanet_cmd_stateEPc+0x1f4>
		t.tm_min = atoi(++p);
 80045d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045d2:	3301      	adds	r3, #1
 80045d4:	657b      	str	r3, [r7, #84]	; 0x54
 80045d6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80045d8:	f008 fd74 	bl	800d0c4 <atoi>
 80045dc:	4603      	mov	r3, r0
 80045de:	60fb      	str	r3, [r7, #12]
	p = strchr(p, SEPARATOR);	//sec
 80045e0:	212c      	movs	r1, #44	; 0x2c
 80045e2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80045e4:	f008 ff94 	bl	800d510 <strchr>
 80045e8:	6578      	str	r0, [r7, #84]	; 0x54
	if(p)
 80045ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d007      	beq.n	8004600 <_ZN16Serial_Interface15fanet_cmd_stateEPc+0x214>
		t.tm_sec = atoi(++p);
 80045f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045f2:	3301      	adds	r3, #1
 80045f4:	657b      	str	r3, [r7, #84]	; 0x54
 80045f6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80045f8:	f008 fd64 	bl	800d0c4 <atoi>
 80045fc:	4603      	mov	r3, r0
 80045fe:	60bb      	str	r3, [r7, #8]

	/* Geoid separation */
	//float sep = NAN;
	p = strchr(p, SEPARATOR);
 8004600:	212c      	movs	r1, #44	; 0x2c
 8004602:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004604:	f008 ff84 	bl	800d510 <strchr>
 8004608:	6578      	str	r0, [r7, #84]	; 0x54
	//if(p)
		//sep = atof(++p);

	/* turn rate */
	float turnrate = NAN;
 800460a:	4b2c      	ldr	r3, [pc, #176]	; (80046bc <_ZN16Serial_Interface15fanet_cmd_stateEPc+0x2d0>)
 800460c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if(p)				//we got sep -> continue
 800460e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004610:	2b00      	cmp	r3, #0
 8004612:	d004      	beq.n	800461e <_ZN16Serial_Interface15fanet_cmd_stateEPc+0x232>
		p = strchr(p, SEPARATOR);
 8004614:	212c      	movs	r1, #44	; 0x2c
 8004616:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004618:	f008 ff7a 	bl	800d510 <strchr>
 800461c:	6578      	str	r0, [r7, #84]	; 0x54
	if(p)
 800461e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00d      	beq.n	8004640 <_ZN16Serial_Interface15fanet_cmd_stateEPc+0x254>
		turnrate = atof(++p);
 8004624:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004626:	3301      	adds	r3, #1
 8004628:	657b      	str	r3, [r7, #84]	; 0x54
 800462a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800462c:	f008 fd47 	bl	800d0be <atof>
 8004630:	4602      	mov	r2, r0
 8004632:	460b      	mov	r3, r1
 8004634:	4610      	mov	r0, r2
 8004636:	4619      	mov	r1, r3
 8004638:	f7fc fa70 	bl	8000b1c <__aeabi_d2f>
 800463c:	4603      	mov	r3, r0
 800463e:	64fb      	str	r3, [r7, #76]	; 0x4c

	/* QNE offset */
	float qneOffset = NAN;
 8004640:	4b1e      	ldr	r3, [pc, #120]	; (80046bc <_ZN16Serial_Interface15fanet_cmd_stateEPc+0x2d0>)
 8004642:	64bb      	str	r3, [r7, #72]	; 0x48
	if(p)				//we got sep -> continue
 8004644:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004646:	2b00      	cmp	r3, #0
 8004648:	d004      	beq.n	8004654 <_ZN16Serial_Interface15fanet_cmd_stateEPc+0x268>
		p = strchr(p, SEPARATOR);
 800464a:	212c      	movs	r1, #44	; 0x2c
 800464c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800464e:	f008 ff5f 	bl	800d510 <strchr>
 8004652:	6578      	str	r0, [r7, #84]	; 0x54
	if(p)
 8004654:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00d      	beq.n	8004676 <_ZN16Serial_Interface15fanet_cmd_stateEPc+0x28a>
		qneOffset = atof(++p);
 800465a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800465c:	3301      	adds	r3, #1
 800465e:	657b      	str	r3, [r7, #84]	; 0x54
 8004660:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004662:	f008 fd2c 	bl	800d0be <atof>
 8004666:	4602      	mov	r2, r0
 8004668:	460b      	mov	r3, r1
 800466a:	4610      	mov	r0, r2
 800466c:	4619      	mov	r1, r3
 800466e:	f7fc fa55 	bl	8000b1c <__aeabi_d2f>
 8004672:	4603      	mov	r3, r0
 8004674:	64bb      	str	r3, [r7, #72]	; 0x48

	/* ensure heading in [0..360] */
	while(heading > 360.0f)
 8004676:	4912      	ldr	r1, [pc, #72]	; (80046c0 <_ZN16Serial_Interface15fanet_cmd_stateEPc+0x2d4>)
 8004678:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800467a:	f7fc fd69 	bl	8001150 <__aeabi_fcmpgt>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d100      	bne.n	8004686 <_ZN16Serial_Interface15fanet_cmd_stateEPc+0x29a>
 8004684:	e006      	b.n	8004694 <_ZN16Serial_Interface15fanet_cmd_stateEPc+0x2a8>
		heading -= 360.0f;
 8004686:	490e      	ldr	r1, [pc, #56]	; (80046c0 <_ZN16Serial_Interface15fanet_cmd_stateEPc+0x2d4>)
 8004688:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800468a:	f7fc fa9b 	bl	8000bc4 <__aeabi_fsub>
 800468e:	4603      	mov	r3, r0
 8004690:	653b      	str	r3, [r7, #80]	; 0x50
	while(heading > 360.0f)
 8004692:	e7f0      	b.n	8004676 <_ZN16Serial_Interface15fanet_cmd_stateEPc+0x28a>
	while(heading < 0.0f)
 8004694:	f04f 0100 	mov.w	r1, #0
 8004698:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800469a:	f7fc fd3b 	bl	8001114 <__aeabi_fcmplt>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00f      	beq.n	80046c4 <_ZN16Serial_Interface15fanet_cmd_stateEPc+0x2d8>
		heading += 360.0f;
 80046a4:	4906      	ldr	r1, [pc, #24]	; (80046c0 <_ZN16Serial_Interface15fanet_cmd_stateEPc+0x2d4>)
 80046a6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80046a8:	f7fc fa8e 	bl	8000bc8 <__addsf3>
 80046ac:	4603      	mov	r3, r0
 80046ae:	653b      	str	r3, [r7, #80]	; 0x50
	while(heading < 0.0f)
 80046b0:	e7f0      	b.n	8004694 <_ZN16Serial_Interface15fanet_cmd_stateEPc+0x2a8>
 80046b2:	bf00      	nop
 80046b4:	08010570 	.word	0x08010570
 80046b8:	0801057c 	.word	0x0801057c
 80046bc:	7fc00000 	.word	0x7fc00000
 80046c0:	43b40000 	.word	0x43b40000

	app.set(lat, lon, alt, speed, climb, heading, turnrate, qneOffset);
 80046c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046c6:	9304      	str	r3, [sp, #16]
 80046c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046ca:	9303      	str	r3, [sp, #12]
 80046cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046ce:	9302      	str	r3, [sp, #8]
 80046d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046d2:	9301      	str	r3, [sp, #4]
 80046d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046d6:	9300      	str	r3, [sp, #0]
 80046d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80046dc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80046de:	4819      	ldr	r0, [pc, #100]	; (8004744 <_ZN16Serial_Interface15fanet_cmd_stateEPc+0x358>)
 80046e0:	f7fd fae6 	bl	8001cb0 <_ZN3App3setEffffffff>
	}
#endif


	/* The state is only of interest if a src addr is set */
	if(fmac.myAddr == MacAddr())
 80046e4:	4b18      	ldr	r3, [pc, #96]	; (8004748 <_ZN16Serial_Interface15fanet_cmd_stateEPc+0x35c>)
 80046e6:	f8d3 4184 	ldr.w	r4, [r3, #388]	; 0x184
 80046ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80046ee:	4618      	mov	r0, r3
 80046f0:	f7fd f834 	bl	800175c <_ZN7MacAddrC1Ev>
 80046f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80046f8:	4619      	mov	r1, r3
 80046fa:	4620      	mov	r0, r4
 80046fc:	f7fd fd0c 	bl	8002118 <_ZNK7MacAddreqERKS_>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d006      	beq.n	8004714 <_ZN16Serial_Interface15fanet_cmd_stateEPc+0x328>
		print_line(FN_REPLYE_NO_SRC_ADDR);
 8004706:	4b11      	ldr	r3, [pc, #68]	; (800474c <_ZN16Serial_Interface15fanet_cmd_stateEPc+0x360>)
 8004708:	220a      	movs	r2, #10
 800470a:	4911      	ldr	r1, [pc, #68]	; (8004750 <_ZN16Serial_Interface15fanet_cmd_stateEPc+0x364>)
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f000 ff11 	bl	8005534 <_ZN16Serial_Interface10print_lineEPKciS1_>
 8004712:	e014      	b.n	800473e <_ZN16Serial_Interface15fanet_cmd_stateEPc+0x352>
	else if(!sx1272_isArmed())
 8004714:	f001 f820 	bl	8005758 <sx1272_isArmed>
 8004718:	4603      	mov	r3, r0
 800471a:	f083 0301 	eor.w	r3, r3, #1
 800471e:	b2db      	uxtb	r3, r3
 8004720:	2b00      	cmp	r3, #0
 8004722:	d006      	beq.n	8004732 <_ZN16Serial_Interface15fanet_cmd_stateEPc+0x346>
		print_line(FN_REPLYM_PWRDOWN);
 8004724:	4b0b      	ldr	r3, [pc, #44]	; (8004754 <_ZN16Serial_Interface15fanet_cmd_stateEPc+0x368>)
 8004726:	220d      	movs	r2, #13
 8004728:	490b      	ldr	r1, [pc, #44]	; (8004758 <_ZN16Serial_Interface15fanet_cmd_stateEPc+0x36c>)
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 ff02 	bl	8005534 <_ZN16Serial_Interface10print_lineEPKciS1_>
 8004730:	e005      	b.n	800473e <_ZN16Serial_Interface15fanet_cmd_stateEPc+0x352>
	else
		print_line(FN_REPLY_OK);
 8004732:	4b0a      	ldr	r3, [pc, #40]	; (800475c <_ZN16Serial_Interface15fanet_cmd_stateEPc+0x370>)
 8004734:	2200      	movs	r2, #0
 8004736:	490a      	ldr	r1, [pc, #40]	; (8004760 <_ZN16Serial_Interface15fanet_cmd_stateEPc+0x374>)
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f000 fefb 	bl	8005534 <_ZN16Serial_Interface10print_lineEPKciS1_>
}
 800473e:	375c      	adds	r7, #92	; 0x5c
 8004740:	46bd      	mov	sp, r7
 8004742:	bd90      	pop	{r4, r7, pc}
 8004744:	20000200 	.word	0x20000200
 8004748:	20000240 	.word	0x20000240
 800474c:	08010588 	.word	0x08010588
 8004750:	0801057c 	.word	0x0801057c
 8004754:	0801059c 	.word	0x0801059c
 8004758:	080105a8 	.word	0x080105a8
 800475c:	080105b4 	.word	0x080105b4
 8004760:	080105b8 	.word	0x080105b8

08004764 <_ZN16Serial_Interface14fanet_cmd_addrEPc>:

/* Address: #FNA manufacturer(hex),id(hex) */
void Serial_Interface::fanet_cmd_addr(char *ch_str)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b09c      	sub	sp, #112	; 0x70
 8004768:	af04      	add	r7, sp, #16
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
#if defined(SerialDEBUG) && (SERIAL_debug_mode > 0)
	SerialDEBUG.print(F("### Addr "));
	SerialDEBUG.print(ch_str);
#endif
	/* remove \r\n and any spaces*/
	char *ptr = strchr(ch_str, '\r');
 800476e:	210d      	movs	r1, #13
 8004770:	6838      	ldr	r0, [r7, #0]
 8004772:	f008 fecd 	bl	800d510 <strchr>
 8004776:	65f8      	str	r0, [r7, #92]	; 0x5c
	if(ptr == NULL)
 8004778:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800477a:	2b00      	cmp	r3, #0
 800477c:	d104      	bne.n	8004788 <_ZN16Serial_Interface14fanet_cmd_addrEPc+0x24>
		ptr = strchr(ch_str, '\n');
 800477e:	210a      	movs	r1, #10
 8004780:	6838      	ldr	r0, [r7, #0]
 8004782:	f008 fec5 	bl	800d510 <strchr>
 8004786:	65f8      	str	r0, [r7, #92]	; 0x5c
	if(ptr != NULL)
 8004788:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800478a:	2b00      	cmp	r3, #0
 800478c:	d002      	beq.n	8004794 <_ZN16Serial_Interface14fanet_cmd_addrEPc+0x30>
		*ptr = '\0';
 800478e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004790:	2200      	movs	r2, #0
 8004792:	701a      	strb	r2, [r3, #0]
	while(*ch_str == ' ')
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	2b20      	cmp	r3, #32
 800479a:	d103      	bne.n	80047a4 <_ZN16Serial_Interface14fanet_cmd_addrEPc+0x40>
		ch_str++;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	3301      	adds	r3, #1
 80047a0:	603b      	str	r3, [r7, #0]
	while(*ch_str == ' ')
 80047a2:	e7f7      	b.n	8004794 <_ZN16Serial_Interface14fanet_cmd_addrEPc+0x30>

	if(strlen(ch_str) == 0)
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d119      	bne.n	80047e0 <_ZN16Serial_Interface14fanet_cmd_addrEPc+0x7c>
	{
		/* report addr */
		char buf[64];
		snprintf(buf, sizeof(buf), "%s%c %02X,%04X\n", FANET_CMD_START, CMD_ADDR, fmac.myAddr.manufacturer, fmac.myAddr.id);
 80047ac:	4b3f      	ldr	r3, [pc, #252]	; (80048ac <_ZN16Serial_Interface14fanet_cmd_addrEPc+0x148>)
 80047ae:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a3d      	ldr	r2, [pc, #244]	; (80048ac <_ZN16Serial_Interface14fanet_cmd_addrEPc+0x148>)
 80047b6:	f8d2 2184 	ldr.w	r2, [r2, #388]	; 0x184
 80047ba:	6852      	ldr	r2, [r2, #4]
 80047bc:	f107 0008 	add.w	r0, r7, #8
 80047c0:	9202      	str	r2, [sp, #8]
 80047c2:	9301      	str	r3, [sp, #4]
 80047c4:	2341      	movs	r3, #65	; 0x41
 80047c6:	9300      	str	r3, [sp, #0]
 80047c8:	4b39      	ldr	r3, [pc, #228]	; (80048b0 <_ZN16Serial_Interface14fanet_cmd_addrEPc+0x14c>)
 80047ca:	4a3a      	ldr	r2, [pc, #232]	; (80048b4 <_ZN16Serial_Interface14fanet_cmd_addrEPc+0x150>)
 80047cc:	2140      	movs	r1, #64	; 0x40
 80047ce:	f008 fe6b 	bl	800d4a8 <sniprintf>
		print(buf);
 80047d2:	f107 0308 	add.w	r3, r7, #8
 80047d6:	4619      	mov	r1, r3
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f000 ff63 	bl	80056a4 <_ZN16Serial_Interface5printEPc>
 80047de:	e061      	b.n	80048a4 <_ZN16Serial_Interface14fanet_cmd_addrEPc+0x140>
		return;
	}

	if(strstr(ch_str, "ERASE!") != NULL)
 80047e0:	4935      	ldr	r1, [pc, #212]	; (80048b8 <_ZN16Serial_Interface14fanet_cmd_addrEPc+0x154>)
 80047e2:	6838      	ldr	r0, [r7, #0]
 80047e4:	f008 feb5 	bl	800d552 <strstr>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d013      	beq.n	8004816 <_ZN16Serial_Interface14fanet_cmd_addrEPc+0xb2>
	{
		/* erase config */
		//must never be used by the end user
		if(fmac.eraseAddr())
 80047ee:	482f      	ldr	r0, [pc, #188]	; (80048ac <_ZN16Serial_Interface14fanet_cmd_addrEPc+0x148>)
 80047f0:	f7fe fc7c 	bl	80030ec <_ZN8FanetMac9eraseAddrEv>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d006      	beq.n	8004808 <_ZN16Serial_Interface14fanet_cmd_addrEPc+0xa4>
			print_line(FN_REPLY_OK);
 80047fa:	4b30      	ldr	r3, [pc, #192]	; (80048bc <_ZN16Serial_Interface14fanet_cmd_addrEPc+0x158>)
 80047fc:	2200      	movs	r2, #0
 80047fe:	4930      	ldr	r1, [pc, #192]	; (80048c0 <_ZN16Serial_Interface14fanet_cmd_addrEPc+0x15c>)
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f000 fe97 	bl	8005534 <_ZN16Serial_Interface10print_lineEPKciS1_>
		else
			print_line(FN_REPLYE_FN_UNKNOWN_CMD);
		return;
 8004806:	e04d      	b.n	80048a4 <_ZN16Serial_Interface14fanet_cmd_addrEPc+0x140>
			print_line(FN_REPLYE_FN_UNKNOWN_CMD);
 8004808:	4b2e      	ldr	r3, [pc, #184]	; (80048c4 <_ZN16Serial_Interface14fanet_cmd_addrEPc+0x160>)
 800480a:	2206      	movs	r2, #6
 800480c:	492e      	ldr	r1, [pc, #184]	; (80048c8 <_ZN16Serial_Interface14fanet_cmd_addrEPc+0x164>)
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 fe90 	bl	8005534 <_ZN16Serial_Interface10print_lineEPKciS1_>
		return;
 8004814:	e046      	b.n	80048a4 <_ZN16Serial_Interface14fanet_cmd_addrEPc+0x140>
	}

	/* address */
	char *p = (char *)ch_str;
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	65bb      	str	r3, [r7, #88]	; 0x58
	int manufacturer = strtol(p, NULL, 16);
 800481a:	2210      	movs	r2, #16
 800481c:	2100      	movs	r1, #0
 800481e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004820:	f009 fd3e 	bl	800e2a0 <strtol>
 8004824:	6578      	str	r0, [r7, #84]	; 0x54
	p = strchr(p, SEPARATOR)+1;
 8004826:	212c      	movs	r1, #44	; 0x2c
 8004828:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800482a:	f008 fe71 	bl	800d510 <strchr>
 800482e:	4603      	mov	r3, r0
 8004830:	3301      	adds	r3, #1
 8004832:	65bb      	str	r3, [r7, #88]	; 0x58
	int id = strtol(p, NULL, 16);
 8004834:	2210      	movs	r2, #16
 8004836:	2100      	movs	r1, #0
 8004838:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800483a:	f009 fd31 	bl	800e2a0 <strtol>
 800483e:	6538      	str	r0, [r7, #80]	; 0x50

	if(manufacturer<=0 || manufacturer >= 0xFE || id <= 0 || id >= 0xFFFF)
 8004840:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004842:	2b00      	cmp	r3, #0
 8004844:	dd0a      	ble.n	800485c <_ZN16Serial_Interface14fanet_cmd_addrEPc+0xf8>
 8004846:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004848:	2bfd      	cmp	r3, #253	; 0xfd
 800484a:	dc07      	bgt.n	800485c <_ZN16Serial_Interface14fanet_cmd_addrEPc+0xf8>
 800484c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800484e:	2b00      	cmp	r3, #0
 8004850:	dd04      	ble.n	800485c <_ZN16Serial_Interface14fanet_cmd_addrEPc+0xf8>
 8004852:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004854:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004858:	4293      	cmp	r3, r2
 800485a:	dd06      	ble.n	800486a <_ZN16Serial_Interface14fanet_cmd_addrEPc+0x106>
	{
		print_line(FN_REPLYE_INVALID_ADDR);
 800485c:	4b1b      	ldr	r3, [pc, #108]	; (80048cc <_ZN16Serial_Interface14fanet_cmd_addrEPc+0x168>)
 800485e:	220b      	movs	r2, #11
 8004860:	4919      	ldr	r1, [pc, #100]	; (80048c8 <_ZN16Serial_Interface14fanet_cmd_addrEPc+0x164>)
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 fe66 	bl	8005534 <_ZN16Serial_Interface10print_lineEPKciS1_>
 8004868:	e01c      	b.n	80048a4 <_ZN16Serial_Interface14fanet_cmd_addrEPc+0x140>
	}
	else if(fmac.setAddr(MacAddr(manufacturer, id)))
 800486a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800486e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004870:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004872:	4618      	mov	r0, r3
 8004874:	f7fd fc3e 	bl	80020f4 <_ZN7MacAddrC1Eii>
 8004878:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800487c:	4619      	mov	r1, r3
 800487e:	480b      	ldr	r0, [pc, #44]	; (80048ac <_ZN16Serial_Interface14fanet_cmd_addrEPc+0x148>)
 8004880:	f7fe fbc4 	bl	800300c <_ZN8FanetMac7setAddrE7MacAddr>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d006      	beq.n	8004898 <_ZN16Serial_Interface14fanet_cmd_addrEPc+0x134>
	{
#ifdef FLARM
		//note: for now we ignore the manufacturer
		casw.set_address(id);
#endif
		print_line(FN_REPLY_OK);
 800488a:	4b0c      	ldr	r3, [pc, #48]	; (80048bc <_ZN16Serial_Interface14fanet_cmd_addrEPc+0x158>)
 800488c:	2200      	movs	r2, #0
 800488e:	490c      	ldr	r1, [pc, #48]	; (80048c0 <_ZN16Serial_Interface14fanet_cmd_addrEPc+0x15c>)
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f000 fe4f 	bl	8005534 <_ZN16Serial_Interface10print_lineEPKciS1_>
 8004896:	e005      	b.n	80048a4 <_ZN16Serial_Interface14fanet_cmd_addrEPc+0x140>
	}
	else
	{
		print_line(FN_REPLYE_ADDR_GIVEN);
 8004898:	4b0d      	ldr	r3, [pc, #52]	; (80048d0 <_ZN16Serial_Interface14fanet_cmd_addrEPc+0x16c>)
 800489a:	220f      	movs	r2, #15
 800489c:	490a      	ldr	r1, [pc, #40]	; (80048c8 <_ZN16Serial_Interface14fanet_cmd_addrEPc+0x164>)
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 fe48 	bl	8005534 <_ZN16Serial_Interface10print_lineEPKciS1_>
	}
}
 80048a4:	3760      	adds	r7, #96	; 0x60
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	20000240 	.word	0x20000240
 80048b0:	080105c0 	.word	0x080105c0
 80048b4:	080105c4 	.word	0x080105c4
 80048b8:	080105d4 	.word	0x080105d4
 80048bc:	080105b4 	.word	0x080105b4
 80048c0:	080105b8 	.word	0x080105b8
 80048c4:	080105dc 	.word	0x080105dc
 80048c8:	0801057c 	.word	0x0801057c
 80048cc:	080105f0 	.word	0x080105f0
 80048d0:	08010600 	.word	0x08010600

080048d4 <_ZN16Serial_Interface16fanet_cmd_configEPc>:

/* Config: #FNC airType(0..7),onlinelogging(0..1)[,groundType(0..F in hex)] */
void Serial_Interface::fanet_cmd_config(char *ch_str)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b09a      	sub	sp, #104	; 0x68
 80048d8:	af04      	add	r7, sp, #16
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
#if SERIAL_debug_mode > 0
	printf("### Config %s", ch_str);
#endif
	/* remove \r\n and any spaces*/
	char *ptr = strchr(ch_str, '\r');
 80048de:	210d      	movs	r1, #13
 80048e0:	6838      	ldr	r0, [r7, #0]
 80048e2:	f008 fe15 	bl	800d510 <strchr>
 80048e6:	6578      	str	r0, [r7, #84]	; 0x54
	if(ptr == NULL)
 80048e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d104      	bne.n	80048f8 <_ZN16Serial_Interface16fanet_cmd_configEPc+0x24>
		ptr = strchr(ch_str, '\n');
 80048ee:	210a      	movs	r1, #10
 80048f0:	6838      	ldr	r0, [r7, #0]
 80048f2:	f008 fe0d 	bl	800d510 <strchr>
 80048f6:	6578      	str	r0, [r7, #84]	; 0x54
	if(ptr != NULL)
 80048f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d002      	beq.n	8004904 <_ZN16Serial_Interface16fanet_cmd_configEPc+0x30>
		*ptr = '\0';
 80048fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004900:	2200      	movs	r2, #0
 8004902:	701a      	strb	r2, [r3, #0]
	while(*ch_str == ' ')
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	2b20      	cmp	r3, #32
 800490a:	d103      	bne.n	8004914 <_ZN16Serial_Interface16fanet_cmd_configEPc+0x40>
		ch_str++;
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	3301      	adds	r3, #1
 8004910:	603b      	str	r3, [r7, #0]
	while(*ch_str == ' ')
 8004912:	e7f7      	b.n	8004904 <_ZN16Serial_Interface16fanet_cmd_configEPc+0x30>

	if(strlen(ch_str) == 0)
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d11c      	bne.n	8004956 <_ZN16Serial_Interface16fanet_cmd_configEPc+0x82>
	{
		/* report addr */
		char buf[64];
		snprintf(buf, sizeof(buf), "%s%c %X,%X,%X\n", FANET_CMD_START, CMD_CONFIG, app.aircraft, app.doOnlineTracking, app.state);
 800491c:	4b37      	ldr	r3, [pc, #220]	; (80049fc <_ZN16Serial_Interface16fanet_cmd_configEPc+0x128>)
 800491e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004922:	461a      	mov	r2, r3
 8004924:	4b35      	ldr	r3, [pc, #212]	; (80049fc <_ZN16Serial_Interface16fanet_cmd_configEPc+0x128>)
 8004926:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800492a:	4619      	mov	r1, r3
 800492c:	4b33      	ldr	r3, [pc, #204]	; (80049fc <_ZN16Serial_Interface16fanet_cmd_configEPc+0x128>)
 800492e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8004930:	f107 0008 	add.w	r0, r7, #8
 8004934:	9303      	str	r3, [sp, #12]
 8004936:	9102      	str	r1, [sp, #8]
 8004938:	9201      	str	r2, [sp, #4]
 800493a:	2343      	movs	r3, #67	; 0x43
 800493c:	9300      	str	r3, [sp, #0]
 800493e:	4b30      	ldr	r3, [pc, #192]	; (8004a00 <_ZN16Serial_Interface16fanet_cmd_configEPc+0x12c>)
 8004940:	4a30      	ldr	r2, [pc, #192]	; (8004a04 <_ZN16Serial_Interface16fanet_cmd_configEPc+0x130>)
 8004942:	2140      	movs	r1, #64	; 0x40
 8004944:	f008 fdb0 	bl	800d4a8 <sniprintf>
		print(buf);
 8004948:	f107 0308 	add.w	r3, r7, #8
 800494c:	4619      	mov	r1, r3
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 fea8 	bl	80056a4 <_ZN16Serial_Interface5printEPc>
 8004954:	e04e      	b.n	80049f4 <_ZN16Serial_Interface16fanet_cmd_configEPc+0x120>
		return;
	}

	/* config */
	char *p = (char *)ch_str;
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	653b      	str	r3, [r7, #80]	; 0x50
	App::aircraft_t type = static_cast<App::aircraft_t>(strtol(p, NULL, 16));
 800495a:	2210      	movs	r2, #16
 800495c:	2100      	movs	r1, #0
 800495e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8004960:	f009 fc9e 	bl	800e2a0 <strtol>
 8004964:	4603      	mov	r3, r0
 8004966:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	p = strchr(p, SEPARATOR)+1;
 800496a:	212c      	movs	r1, #44	; 0x2c
 800496c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800496e:	f008 fdcf 	bl	800d510 <strchr>
 8004972:	4603      	mov	r3, r0
 8004974:	3301      	adds	r3, #1
 8004976:	653b      	str	r3, [r7, #80]	; 0x50
	int logging = strtol(p, NULL, 16);
 8004978:	2210      	movs	r2, #16
 800497a:	2100      	movs	r1, #0
 800497c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800497e:	f009 fc8f 	bl	800e2a0 <strtol>
 8004982:	64b8      	str	r0, [r7, #72]	; 0x48

	/* optional ground state */
	if((p = strchr(p, SEPARATOR)) != nullptr)
 8004984:	212c      	movs	r1, #44	; 0x2c
 8004986:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8004988:	f008 fdc2 	bl	800d510 <strchr>
 800498c:	6538      	str	r0, [r7, #80]	; 0x50
 800498e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004990:	2b00      	cmp	r3, #0
 8004992:	bf14      	ite	ne
 8004994:	2301      	movne	r3, #1
 8004996:	2300      	moveq	r3, #0
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00b      	beq.n	80049b6 <_ZN16Serial_Interface16fanet_cmd_configEPc+0xe2>
		app.state = static_cast<App::status_t>(strtol(++p, NULL, 16));
 800499e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049a0:	3301      	adds	r3, #1
 80049a2:	653b      	str	r3, [r7, #80]	; 0x50
 80049a4:	2210      	movs	r2, #16
 80049a6:	2100      	movs	r1, #0
 80049a8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80049aa:	f009 fc79 	bl	800e2a0 <strtol>
 80049ae:	4603      	mov	r3, r0
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	4b12      	ldr	r3, [pc, #72]	; (80049fc <_ZN16Serial_Interface16fanet_cmd_configEPc+0x128>)
 80049b4:	871a      	strh	r2, [r3, #56]	; 0x38

	if(type < 0 || type > 7)
 80049b6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80049ba:	2b07      	cmp	r3, #7
 80049bc:	d906      	bls.n	80049cc <_ZN16Serial_Interface16fanet_cmd_configEPc+0xf8>
	{
		print_line(FN_REPLYE_INCOMPATIBLE_TYPE);
 80049be:	4b12      	ldr	r3, [pc, #72]	; (8004a08 <_ZN16Serial_Interface16fanet_cmd_configEPc+0x134>)
 80049c0:	220c      	movs	r2, #12
 80049c2:	4912      	ldr	r1, [pc, #72]	; (8004a0c <_ZN16Serial_Interface16fanet_cmd_configEPc+0x138>)
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f000 fdb5 	bl	8005534 <_ZN16Serial_Interface10print_lineEPKciS1_>
 80049ca:	e013      	b.n	80049f4 <_ZN16Serial_Interface16fanet_cmd_configEPc+0x120>
		else if(type == App::hangglider)
			casw.set_aircraft_type(AT_FIXED_HG);
#endif

		/* set FANET type */
		app.aircraft = type;
 80049cc:	4a0b      	ldr	r2, [pc, #44]	; (80049fc <_ZN16Serial_Interface16fanet_cmd_configEPc+0x128>)
 80049ce:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80049d2:	f882 3036 	strb.w	r3, [r2, #54]	; 0x36
		app.doOnlineTracking = !!logging;
 80049d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049d8:	2b00      	cmp	r3, #0
 80049da:	bf14      	ite	ne
 80049dc:	2301      	movne	r3, #1
 80049de:	2300      	moveq	r3, #0
 80049e0:	b2da      	uxtb	r2, r3
 80049e2:	4b06      	ldr	r3, [pc, #24]	; (80049fc <_ZN16Serial_Interface16fanet_cmd_configEPc+0x128>)
 80049e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		print_line(FN_REPLY_OK);
 80049e8:	4b09      	ldr	r3, [pc, #36]	; (8004a10 <_ZN16Serial_Interface16fanet_cmd_configEPc+0x13c>)
 80049ea:	2200      	movs	r2, #0
 80049ec:	4909      	ldr	r1, [pc, #36]	; (8004a14 <_ZN16Serial_Interface16fanet_cmd_configEPc+0x140>)
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 fda0 	bl	8005534 <_ZN16Serial_Interface10print_lineEPKciS1_>
	}
}
 80049f4:	3758      	adds	r7, #88	; 0x58
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	20000200 	.word	0x20000200
 8004a00:	080105c0 	.word	0x080105c0
 8004a04:	08010614 	.word	0x08010614
 8004a08:	08010624 	.word	0x08010624
 8004a0c:	0801057c 	.word	0x0801057c
 8004a10:	080105b4 	.word	0x080105b4
 8004a14:	080105b8 	.word	0x080105b8

08004a18 <_ZN16Serial_Interface14fanet_cmd_modeEPc>:

/* Config: #FNM 0..1 */
void Serial_Interface::fanet_cmd_mode(char *ch_str)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b096      	sub	sp, #88	; 0x58
 8004a1c:	af02      	add	r7, sp, #8
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
#if SERIAL_debug_mode > 0
	printf("### Mode %s", ch_str);
#endif
	/* remove \r\n and any spaces*/
	char *ptr = strchr(ch_str, '\r');
 8004a22:	210d      	movs	r1, #13
 8004a24:	6838      	ldr	r0, [r7, #0]
 8004a26:	f008 fd73 	bl	800d510 <strchr>
 8004a2a:	64f8      	str	r0, [r7, #76]	; 0x4c
	if(ptr == NULL)
 8004a2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d104      	bne.n	8004a3c <_ZN16Serial_Interface14fanet_cmd_modeEPc+0x24>
		ptr = strchr(ch_str, '\n');
 8004a32:	210a      	movs	r1, #10
 8004a34:	6838      	ldr	r0, [r7, #0]
 8004a36:	f008 fd6b 	bl	800d510 <strchr>
 8004a3a:	64f8      	str	r0, [r7, #76]	; 0x4c
	if(ptr != NULL)
 8004a3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d002      	beq.n	8004a48 <_ZN16Serial_Interface14fanet_cmd_modeEPc+0x30>
		*ptr = '\0';
 8004a42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a44:	2200      	movs	r2, #0
 8004a46:	701a      	strb	r2, [r3, #0]
	while(*ch_str == ' ')
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	2b20      	cmp	r3, #32
 8004a4e:	d103      	bne.n	8004a58 <_ZN16Serial_Interface14fanet_cmd_modeEPc+0x40>
		ch_str++;
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	3301      	adds	r3, #1
 8004a54:	603b      	str	r3, [r7, #0]
	while(*ch_str == ' ')
 8004a56:	e7f7      	b.n	8004a48 <_ZN16Serial_Interface14fanet_cmd_modeEPc+0x30>

	if(strlen(ch_str) == 0)
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d113      	bne.n	8004a88 <_ZN16Serial_Interface14fanet_cmd_modeEPc+0x70>
	{
		/* report addr */
		char buf[64];
		snprintf(buf, sizeof(buf), "%s%c %X\n", FANET_CMD_START, CMD_MODE, app.onGround);
 8004a60:	4b1b      	ldr	r3, [pc, #108]	; (8004ad0 <_ZN16Serial_Interface14fanet_cmd_modeEPc+0xb8>)
 8004a62:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a66:	f107 000c 	add.w	r0, r7, #12
 8004a6a:	9301      	str	r3, [sp, #4]
 8004a6c:	234d      	movs	r3, #77	; 0x4d
 8004a6e:	9300      	str	r3, [sp, #0]
 8004a70:	4b18      	ldr	r3, [pc, #96]	; (8004ad4 <_ZN16Serial_Interface14fanet_cmd_modeEPc+0xbc>)
 8004a72:	4a19      	ldr	r2, [pc, #100]	; (8004ad8 <_ZN16Serial_Interface14fanet_cmd_modeEPc+0xc0>)
 8004a74:	2140      	movs	r1, #64	; 0x40
 8004a76:	f008 fd17 	bl	800d4a8 <sniprintf>
		print(buf);
 8004a7a:	f107 030c 	add.w	r3, r7, #12
 8004a7e:	4619      	mov	r1, r3
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f000 fe0f 	bl	80056a4 <_ZN16Serial_Interface5printEPc>
 8004a86:	e020      	b.n	8004aca <_ZN16Serial_Interface14fanet_cmd_modeEPc+0xb2>
		return;
	}

	if(*ch_str == '0' || *ch_str == '1')
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	2b30      	cmp	r3, #48	; 0x30
 8004a8e:	d003      	beq.n	8004a98 <_ZN16Serial_Interface14fanet_cmd_modeEPc+0x80>
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	2b31      	cmp	r3, #49	; 0x31
 8004a96:	d112      	bne.n	8004abe <_ZN16Serial_Interface14fanet_cmd_modeEPc+0xa6>
	{
		app.onGround = !!atoi(ch_str);
 8004a98:	6838      	ldr	r0, [r7, #0]
 8004a9a:	f008 fb13 	bl	800d0c4 <atoi>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	bf14      	ite	ne
 8004aa4:	2301      	movne	r3, #1
 8004aa6:	2300      	moveq	r3, #0
 8004aa8:	b2da      	uxtb	r2, r3
 8004aaa:	4b09      	ldr	r3, [pc, #36]	; (8004ad0 <_ZN16Serial_Interface14fanet_cmd_modeEPc+0xb8>)
 8004aac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		print_line(FN_REPLY_OK);
 8004ab0:	4b0a      	ldr	r3, [pc, #40]	; (8004adc <_ZN16Serial_Interface14fanet_cmd_modeEPc+0xc4>)
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	490a      	ldr	r1, [pc, #40]	; (8004ae0 <_ZN16Serial_Interface14fanet_cmd_modeEPc+0xc8>)
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 fd3c 	bl	8005534 <_ZN16Serial_Interface10print_lineEPKciS1_>
 8004abc:	e005      	b.n	8004aca <_ZN16Serial_Interface14fanet_cmd_modeEPc+0xb2>
	}
	else
	{
		print_line(FN_REPLYE_INCOMPATIBLE_TYPE);
 8004abe:	4b09      	ldr	r3, [pc, #36]	; (8004ae4 <_ZN16Serial_Interface14fanet_cmd_modeEPc+0xcc>)
 8004ac0:	220c      	movs	r2, #12
 8004ac2:	4909      	ldr	r1, [pc, #36]	; (8004ae8 <_ZN16Serial_Interface14fanet_cmd_modeEPc+0xd0>)
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f000 fd35 	bl	8005534 <_ZN16Serial_Interface10print_lineEPKciS1_>
	}
}
 8004aca:	3750      	adds	r7, #80	; 0x50
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	20000200 	.word	0x20000200
 8004ad4:	080105c0 	.word	0x080105c0
 8004ad8:	08010638 	.word	0x08010638
 8004adc:	080105b4 	.word	0x080105b4
 8004ae0:	080105b8 	.word	0x080105b8
 8004ae4:	08010624 	.word	0x08010624
 8004ae8:	0801057c 	.word	0x0801057c

08004aec <_ZN16Serial_Interface18fanet_cmd_transmitEPc>:

/* Transmit: #FNT type,dest_manufacturer,dest_id,forward,ack_required,length,length*2hex[,signature] */
//note: all in HEX
void Serial_Interface::fanet_cmd_transmit(char *ch_str)
{
 8004aec:	b5b0      	push	{r4, r5, r7, lr}
 8004aee:	b08c      	sub	sp, #48	; 0x30
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
#if SERIAL_debug_mode > 0
	printf("### Packet %s\n", ch_str);
#endif

	/* remove \r\n and any spaces */
	char *ptr = strchr(ch_str, '\r');
 8004af6:	210d      	movs	r1, #13
 8004af8:	6838      	ldr	r0, [r7, #0]
 8004afa:	f008 fd09 	bl	800d510 <strchr>
 8004afe:	62f8      	str	r0, [r7, #44]	; 0x2c
	if(ptr == nullptr)
 8004b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d104      	bne.n	8004b10 <_ZN16Serial_Interface18fanet_cmd_transmitEPc+0x24>
		ptr = strchr(ch_str, '\n');
 8004b06:	210a      	movs	r1, #10
 8004b08:	6838      	ldr	r0, [r7, #0]
 8004b0a:	f008 fd01 	bl	800d510 <strchr>
 8004b0e:	62f8      	str	r0, [r7, #44]	; 0x2c
	if(ptr != nullptr)
 8004b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d002      	beq.n	8004b1c <_ZN16Serial_Interface18fanet_cmd_transmitEPc+0x30>
		*ptr = '\0';
 8004b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b18:	2200      	movs	r2, #0
 8004b1a:	701a      	strb	r2, [r3, #0]
	while(*ch_str == ' ')
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	2b20      	cmp	r3, #32
 8004b22:	d103      	bne.n	8004b2c <_ZN16Serial_Interface18fanet_cmd_transmitEPc+0x40>
		ch_str++;
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	3301      	adds	r3, #1
 8004b28:	603b      	str	r3, [r7, #0]
	while(*ch_str == ' ')
 8004b2a:	e7f7      	b.n	8004b1c <_ZN16Serial_Interface18fanet_cmd_transmitEPc+0x30>

	/* integrity check */
	for(char *ptr = ch_str; *ptr != '\0'; ptr++)
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d02d      	beq.n	8004b94 <_ZN16Serial_Interface18fanet_cmd_transmitEPc+0xa8>
	{
		if(*ptr >= '0' && *ptr <= '9')
 8004b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	2b2f      	cmp	r3, #47	; 0x2f
 8004b3e:	d903      	bls.n	8004b48 <_ZN16Serial_Interface18fanet_cmd_transmitEPc+0x5c>
 8004b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	2b39      	cmp	r3, #57	; 0x39
 8004b46:	d91a      	bls.n	8004b7e <_ZN16Serial_Interface18fanet_cmd_transmitEPc+0x92>
			continue;
		if(*ptr >= 'A' && *ptr <= 'F')
 8004b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	2b40      	cmp	r3, #64	; 0x40
 8004b4e:	d903      	bls.n	8004b58 <_ZN16Serial_Interface18fanet_cmd_transmitEPc+0x6c>
 8004b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	2b46      	cmp	r3, #70	; 0x46
 8004b56:	d914      	bls.n	8004b82 <_ZN16Serial_Interface18fanet_cmd_transmitEPc+0x96>
			continue;
		if(*ptr >= 'a' && *ptr <= 'f')
 8004b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	2b60      	cmp	r3, #96	; 0x60
 8004b5e:	d903      	bls.n	8004b68 <_ZN16Serial_Interface18fanet_cmd_transmitEPc+0x7c>
 8004b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	2b66      	cmp	r3, #102	; 0x66
 8004b66:	d90e      	bls.n	8004b86 <_ZN16Serial_Interface18fanet_cmd_transmitEPc+0x9a>
			continue;
		if(*ptr == ',')
 8004b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	2b2c      	cmp	r3, #44	; 0x2c
 8004b6e:	d00c      	beq.n	8004b8a <_ZN16Serial_Interface18fanet_cmd_transmitEPc+0x9e>
			continue;

		/* not allowed char */
		print_line(FN_REPLYE_CMD_BROKEN);
 8004b70:	4bb0      	ldr	r3, [pc, #704]	; (8004e34 <_ZN16Serial_Interface18fanet_cmd_transmitEPc+0x348>)
 8004b72:	2222      	movs	r2, #34	; 0x22
 8004b74:	49b0      	ldr	r1, [pc, #704]	; (8004e38 <_ZN16Serial_Interface18fanet_cmd_transmitEPc+0x34c>)
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 fcdc 	bl	8005534 <_ZN16Serial_Interface10print_lineEPKciS1_>
		return;
 8004b7c:	e185      	b.n	8004e8a <_ZN16Serial_Interface18fanet_cmd_transmitEPc+0x39e>
			continue;
 8004b7e:	bf00      	nop
 8004b80:	e004      	b.n	8004b8c <_ZN16Serial_Interface18fanet_cmd_transmitEPc+0xa0>
			continue;
 8004b82:	bf00      	nop
 8004b84:	e002      	b.n	8004b8c <_ZN16Serial_Interface18fanet_cmd_transmitEPc+0xa0>
			continue;
 8004b86:	bf00      	nop
 8004b88:	e000      	b.n	8004b8c <_ZN16Serial_Interface18fanet_cmd_transmitEPc+0xa0>
			continue;
 8004b8a:	bf00      	nop
	for(char *ptr = ch_str; *ptr != '\0'; ptr++)
 8004b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b8e:	3301      	adds	r3, #1
 8004b90:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b92:	e7cd      	b.n	8004b30 <_ZN16Serial_Interface18fanet_cmd_transmitEPc+0x44>
	}

	/* w/o an address we can not tx */
	if(fmac.myAddr == MacAddr())
 8004b94:	4ba9      	ldr	r3, [pc, #676]	; (8004e3c <_ZN16Serial_Interface18fanet_cmd_transmitEPc+0x350>)
 8004b96:	f8d3 4184 	ldr.w	r4, [r3, #388]	; 0x184
 8004b9a:	f107 030c 	add.w	r3, r7, #12
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f7fc fddc 	bl	800175c <_ZN7MacAddrC1Ev>
 8004ba4:	f107 030c 	add.w	r3, r7, #12
 8004ba8:	4619      	mov	r1, r3
 8004baa:	4620      	mov	r0, r4
 8004bac:	f7fd fab4 	bl	8002118 <_ZNK7MacAddreqERKS_>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d006      	beq.n	8004bc4 <_ZN16Serial_Interface18fanet_cmd_transmitEPc+0xd8>
	{
		print_line(FN_REPLYE_NO_SRC_ADDR);
 8004bb6:	4ba2      	ldr	r3, [pc, #648]	; (8004e40 <_ZN16Serial_Interface18fanet_cmd_transmitEPc+0x354>)
 8004bb8:	220a      	movs	r2, #10
 8004bba:	499f      	ldr	r1, [pc, #636]	; (8004e38 <_ZN16Serial_Interface18fanet_cmd_transmitEPc+0x34c>)
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f000 fcb9 	bl	8005534 <_ZN16Serial_Interface10print_lineEPKciS1_>
		return;
 8004bc2:	e162      	b.n	8004e8a <_ZN16Serial_Interface18fanet_cmd_transmitEPc+0x39e>
	}

	/* no need to generate a package. tx queue is full */
	if(!fmac.txQueueHasFreeSlots())
 8004bc4:	489d      	ldr	r0, [pc, #628]	; (8004e3c <_ZN16Serial_Interface18fanet_cmd_transmitEPc+0x350>)
 8004bc6:	f7ff fbdd 	bl	8004384 <_ZN8FanetMac19txQueueHasFreeSlotsEv>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	f083 0301 	eor.w	r3, r3, #1
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d006      	beq.n	8004be4 <_ZN16Serial_Interface18fanet_cmd_transmitEPc+0xf8>
	{
		print_line(FN_REPLYE_TX_BUFF_FULL);
 8004bd6:	4b9b      	ldr	r3, [pc, #620]	; (8004e44 <_ZN16Serial_Interface18fanet_cmd_transmitEPc+0x358>)
 8004bd8:	220e      	movs	r2, #14
 8004bda:	4997      	ldr	r1, [pc, #604]	; (8004e38 <_ZN16Serial_Interface18fanet_cmd_transmitEPc+0x34c>)
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f000 fca9 	bl	8005534 <_ZN16Serial_Interface10print_lineEPKciS1_>
		return;
 8004be2:	e152      	b.n	8004e8a <_ZN16Serial_Interface18fanet_cmd_transmitEPc+0x39e>
	}

	Frame *frm = new Frame(fmac.myAddr);
 8004be4:	4b95      	ldr	r3, [pc, #596]	; (8004e3c <_ZN16Serial_Interface18fanet_cmd_transmitEPc+0x350>)
 8004be6:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8004bea:	f107 0314 	add.w	r3, r7, #20
 8004bee:	4611      	mov	r1, r2
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f7fc fdc3 	bl	800177c <_ZN7MacAddrC1ERKS_>
 8004bf6:	f107 0514 	add.w	r5, r7, #20
 8004bfa:	2034      	movs	r0, #52	; 0x34
 8004bfc:	f008 fa00 	bl	800d000 <_Znwj>
 8004c00:	4603      	mov	r3, r0
 8004c02:	461c      	mov	r4, r3
 8004c04:	4629      	mov	r1, r5
 8004c06:	4620      	mov	r0, r4
 8004c08:	f7fc fdcb 	bl	80017a2 <_ZN5FrameC1E7MacAddr>
 8004c0c:	623c      	str	r4, [r7, #32]

	/* header */
	char *p = (char *)ch_str;
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	61fb      	str	r3, [r7, #28]
	frm->type = strtol(p, NULL, 16);
 8004c12:	2210      	movs	r2, #16
 8004c14:	2100      	movs	r1, #0
 8004c16:	69f8      	ldr	r0, [r7, #28]
 8004c18:	f009 fb42 	bl	800e2a0 <strtol>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	6a3b      	ldr	r3, [r7, #32]
 8004c20:	61da      	str	r2, [r3, #28]
	p = strchr(p, SEPARATOR)+1;
 8004c22:	212c      	movs	r1, #44	; 0x2c
 8004c24:	69f8      	ldr	r0, [r7, #28]
 8004c26:	f008 fc73 	bl	800d510 <strchr>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	61fb      	str	r3, [r7, #28]
	frm->dest.manufacturer = strtol(p, NULL, 16);
 8004c30:	2210      	movs	r2, #16
 8004c32:	2100      	movs	r1, #0
 8004c34:	69f8      	ldr	r0, [r7, #28]
 8004c36:	f009 fb33 	bl	800e2a0 <strtol>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	6a3b      	ldr	r3, [r7, #32]
 8004c3e:	609a      	str	r2, [r3, #8]
	p = strchr(p, SEPARATOR)+1;
 8004c40:	212c      	movs	r1, #44	; 0x2c
 8004c42:	69f8      	ldr	r0, [r7, #28]
 8004c44:	f008 fc64 	bl	800d510 <strchr>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	61fb      	str	r3, [r7, #28]
	frm->dest.id = strtol(p, NULL, 16);
 8004c4e:	2210      	movs	r2, #16
 8004c50:	2100      	movs	r1, #0
 8004c52:	69f8      	ldr	r0, [r7, #28]
 8004c54:	f009 fb24 	bl	800e2a0 <strtol>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	6a3b      	ldr	r3, [r7, #32]
 8004c5c:	60da      	str	r2, [r3, #12]
	p = strchr(p, SEPARATOR)+1;
 8004c5e:	212c      	movs	r1, #44	; 0x2c
 8004c60:	69f8      	ldr	r0, [r7, #28]
 8004c62:	f008 fc55 	bl	800d510 <strchr>
 8004c66:	4603      	mov	r3, r0
 8004c68:	3301      	adds	r3, #1
 8004c6a:	61fb      	str	r3, [r7, #28]
	frm->forward = !!strtol(p, NULL, 16);
 8004c6c:	2210      	movs	r2, #16
 8004c6e:	2100      	movs	r1, #0
 8004c70:	69f8      	ldr	r0, [r7, #28]
 8004c72:	f009 fb15 	bl	800e2a0 <strtol>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	bf14      	ite	ne
 8004c7c:	2301      	movne	r3, #1
 8004c7e:	2300      	moveq	r3, #0
 8004c80:	b2da      	uxtb	r2, r3
 8004c82:	6a3b      	ldr	r3, [r7, #32]
 8004c84:	751a      	strb	r2, [r3, #20]
	p = strchr(p, SEPARATOR)+1;
 8004c86:	212c      	movs	r1, #44	; 0x2c
 8004c88:	69f8      	ldr	r0, [r7, #28]
 8004c8a:	f008 fc41 	bl	800d510 <strchr>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	3301      	adds	r3, #1
 8004c92:	61fb      	str	r3, [r7, #28]
	/* ACK required */
	if(strtol(p, NULL, 16))
 8004c94:	2210      	movs	r2, #16
 8004c96:	2100      	movs	r1, #0
 8004c98:	69f8      	ldr	r0, [r7, #28]
 8004c9a:	f009 fb01 	bl	800e2a0 <strtol>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	bf14      	ite	ne
 8004ca4:	2301      	movne	r3, #1
 8004ca6:	2300      	moveq	r3, #0
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00c      	beq.n	8004cc8 <_ZN16Serial_Interface18fanet_cmd_transmitEPc+0x1dc>
	{
		frm->ack_requested = frm->forward?FRM_ACK_TWOHOP:FRM_ACK_SINGLEHOP;
 8004cae:	6a3b      	ldr	r3, [r7, #32]
 8004cb0:	7d1b      	ldrb	r3, [r3, #20]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d001      	beq.n	8004cba <_ZN16Serial_Interface18fanet_cmd_transmitEPc+0x1ce>
 8004cb6:	2202      	movs	r2, #2
 8004cb8:	e000      	b.n	8004cbc <_ZN16Serial_Interface18fanet_cmd_transmitEPc+0x1d0>
 8004cba:	2201      	movs	r2, #1
 8004cbc:	6a3b      	ldr	r3, [r7, #32]
 8004cbe:	611a      	str	r2, [r3, #16]
		frm->num_tx = MAC_TX_RETRANSMISSION_RETRYS;
 8004cc0:	6a3b      	ldr	r3, [r7, #32]
 8004cc2:	2203      	movs	r2, #3
 8004cc4:	629a      	str	r2, [r3, #40]	; 0x28
 8004cc6:	e005      	b.n	8004cd4 <_ZN16Serial_Interface18fanet_cmd_transmitEPc+0x1e8>
	}
	else
	{
		frm->ack_requested = FRM_NOACK;
 8004cc8:	6a3b      	ldr	r3, [r7, #32]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	611a      	str	r2, [r3, #16]
		frm->num_tx = 0;
 8004cce:	6a3b      	ldr	r3, [r7, #32]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* payload */
	p = strchr(p, SEPARATOR)+1;
 8004cd4:	212c      	movs	r1, #44	; 0x2c
 8004cd6:	69f8      	ldr	r0, [r7, #28]
 8004cd8:	f008 fc1a 	bl	800d510 <strchr>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	3301      	adds	r3, #1
 8004ce0:	61fb      	str	r3, [r7, #28]
	frm->payload_length = strtol(p, NULL, 16);
 8004ce2:	2210      	movs	r2, #16
 8004ce4:	2100      	movs	r1, #0
 8004ce6:	69f8      	ldr	r0, [r7, #28]
 8004ce8:	f009 fada 	bl	800e2a0 <strtol>
 8004cec:	4602      	mov	r2, r0
 8004cee:	6a3b      	ldr	r3, [r7, #32]
 8004cf0:	621a      	str	r2, [r3, #32]
	if(frm->payload_length >= 128)
 8004cf2:	6a3b      	ldr	r3, [r7, #32]
 8004cf4:	6a1b      	ldr	r3, [r3, #32]
 8004cf6:	2b7f      	cmp	r3, #127	; 0x7f
 8004cf8:	dd10      	ble.n	8004d1c <_ZN16Serial_Interface18fanet_cmd_transmitEPc+0x230>
	{
		delete frm;
 8004cfa:	6a3c      	ldr	r4, [r7, #32]
 8004cfc:	2c00      	cmp	r4, #0
 8004cfe:	d006      	beq.n	8004d0e <_ZN16Serial_Interface18fanet_cmd_transmitEPc+0x222>
 8004d00:	4620      	mov	r0, r4
 8004d02:	f7fd fa3b 	bl	800217c <_ZN5FrameD1Ev>
 8004d06:	2134      	movs	r1, #52	; 0x34
 8004d08:	4620      	mov	r0, r4
 8004d0a:	f008 f975 	bl	800cff8 <_ZdlPvj>
		print_line(FN_REPLYE_FRM_TOO_LONG);
 8004d0e:	4b4e      	ldr	r3, [pc, #312]	; (8004e48 <_ZN16Serial_Interface18fanet_cmd_transmitEPc+0x35c>)
 8004d10:	2221      	movs	r2, #33	; 0x21
 8004d12:	4949      	ldr	r1, [pc, #292]	; (8004e38 <_ZN16Serial_Interface18fanet_cmd_transmitEPc+0x34c>)
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f000 fc0d 	bl	8005534 <_ZN16Serial_Interface10print_lineEPKciS1_>
		return;
 8004d1a:	e0b6      	b.n	8004e8a <_ZN16Serial_Interface18fanet_cmd_transmitEPc+0x39e>
	}
	frm->payload = new uint8_t[frm->payload_length];
 8004d1c:	6a3b      	ldr	r3, [r7, #32]
 8004d1e:	6a1b      	ldr	r3, [r3, #32]
 8004d20:	4618      	mov	r0, r3
 8004d22:	f008 f97e 	bl	800d022 <_Znaj>
 8004d26:	4603      	mov	r3, r0
 8004d28:	461a      	mov	r2, r3
 8004d2a:	6a3b      	ldr	r3, [r7, #32]
 8004d2c:	625a      	str	r2, [r3, #36]	; 0x24

	p = strchr(p, SEPARATOR)+1;
 8004d2e:	212c      	movs	r1, #44	; 0x2c
 8004d30:	69f8      	ldr	r0, [r7, #28]
 8004d32:	f008 fbed 	bl	800d510 <strchr>
 8004d36:	4603      	mov	r3, r0
 8004d38:	3301      	adds	r3, #1
 8004d3a:	61fb      	str	r3, [r7, #28]
	for(int i=0; i<frm->payload_length; i++)
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8004d40:	6a3b      	ldr	r3, [r7, #32]
 8004d42:	6a1b      	ldr	r3, [r3, #32]
 8004d44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d46:	429a      	cmp	r2, r3
 8004d48:	da3f      	bge.n	8004dca <_ZN16Serial_Interface18fanet_cmd_transmitEPc+0x2de>
	{
		char sstr[3] = {p[i*2], p[i*2+1], '\0'};
 8004d4a:	f107 0308 	add.w	r3, r7, #8
 8004d4e:	2100      	movs	r1, #0
 8004d50:	460a      	mov	r2, r1
 8004d52:	801a      	strh	r2, [r3, #0]
 8004d54:	460a      	mov	r2, r1
 8004d56:	709a      	strb	r2, [r3, #2]
 8004d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5a:	005b      	lsls	r3, r3, #1
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	4413      	add	r3, r2
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	723b      	strb	r3, [r7, #8]
 8004d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d68:	005b      	lsls	r3, r3, #1
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	69fa      	ldr	r2, [r7, #28]
 8004d6e:	4413      	add	r3, r2
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	727b      	strb	r3, [r7, #9]
		if(strlen(sstr) != 2)
 8004d74:	f107 0308 	add.w	r3, r7, #8
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f7fb fa01 	bl	8000180 <strlen>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d010      	beq.n	8004da6 <_ZN16Serial_Interface18fanet_cmd_transmitEPc+0x2ba>
		{
			print_line(FN_REPLYE_CMD_TOO_SHORT);
 8004d84:	4b31      	ldr	r3, [pc, #196]	; (8004e4c <_ZN16Serial_Interface18fanet_cmd_transmitEPc+0x360>)
 8004d86:	221e      	movs	r2, #30
 8004d88:	492b      	ldr	r1, [pc, #172]	; (8004e38 <_ZN16Serial_Interface18fanet_cmd_transmitEPc+0x34c>)
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 fbd2 	bl	8005534 <_ZN16Serial_Interface10print_lineEPKciS1_>
			delete frm;
 8004d90:	6a3c      	ldr	r4, [r7, #32]
 8004d92:	2c00      	cmp	r4, #0
 8004d94:	d078      	beq.n	8004e88 <_ZN16Serial_Interface18fanet_cmd_transmitEPc+0x39c>
 8004d96:	4620      	mov	r0, r4
 8004d98:	f7fd f9f0 	bl	800217c <_ZN5FrameD1Ev>
 8004d9c:	2134      	movs	r1, #52	; 0x34
 8004d9e:	4620      	mov	r0, r4
 8004da0:	f008 f92a 	bl	800cff8 <_ZdlPvj>
 8004da4:	e071      	b.n	8004e8a <_ZN16Serial_Interface18fanet_cmd_transmitEPc+0x39e>
			return;
		}
		frm->payload[i] = strtol(sstr,  NULL,  16);
 8004da6:	f107 0308 	add.w	r3, r7, #8
 8004daa:	2210      	movs	r2, #16
 8004dac:	2100      	movs	r1, #0
 8004dae:	4618      	mov	r0, r3
 8004db0:	f009 fa76 	bl	800e2a0 <strtol>
 8004db4:	4601      	mov	r1, r0
 8004db6:	6a3b      	ldr	r3, [r7, #32]
 8004db8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbc:	4413      	add	r3, r2
 8004dbe:	b2ca      	uxtb	r2, r1
 8004dc0:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<frm->payload_length; i++)
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc4:	3301      	adds	r3, #1
 8004dc6:	627b      	str	r3, [r7, #36]	; 0x24
 8004dc8:	e7ba      	b.n	8004d40 <_ZN16Serial_Interface18fanet_cmd_transmitEPc+0x254>
	}

	/* signature */
	if((p = strchr(p, SEPARATOR)) != NULL)
 8004dca:	212c      	movs	r1, #44	; 0x2c
 8004dcc:	69f8      	ldr	r0, [r7, #28]
 8004dce:	f008 fb9f 	bl	800d510 <strchr>
 8004dd2:	61f8      	str	r0, [r7, #28]
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	bf14      	ite	ne
 8004dda:	2301      	movne	r3, #1
 8004ddc:	2300      	moveq	r3, #0
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d00b      	beq.n	8004dfc <_ZN16Serial_Interface18fanet_cmd_transmitEPc+0x310>
		frm->signature = ((uint32_t)strtoll(++p, NULL, 16));
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	3301      	adds	r3, #1
 8004de8:	61fb      	str	r3, [r7, #28]
 8004dea:	2210      	movs	r2, #16
 8004dec:	2100      	movs	r1, #0
 8004dee:	69f8      	ldr	r0, [r7, #28]
 8004df0:	f009 faf6 	bl	800e3e0 <strtoll>
 8004df4:	4602      	mov	r2, r0
 8004df6:	460b      	mov	r3, r1
 8004df8:	6a3b      	ldr	r3, [r7, #32]
 8004dfa:	619a      	str	r2, [r3, #24]

	/* pass to mac */
	if(fmac.transmit(frm) == 0)
 8004dfc:	6a39      	ldr	r1, [r7, #32]
 8004dfe:	480f      	ldr	r0, [pc, #60]	; (8004e3c <_ZN16Serial_Interface18fanet_cmd_transmitEPc+0x350>)
 8004e00:	f7ff fad3 	bl	80043aa <_ZN8FanetMac8transmitEP5Frame>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	bf0c      	ite	eq
 8004e0a:	2301      	moveq	r3, #1
 8004e0c:	2300      	movne	r3, #0
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d028      	beq.n	8004e66 <_ZN16Serial_Interface18fanet_cmd_transmitEPc+0x37a>
	{
		if(!sx1272_isArmed())
 8004e14:	f000 fca0 	bl	8005758 <sx1272_isArmed>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	f083 0301 	eor.w	r3, r3, #1
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d019      	beq.n	8004e58 <_ZN16Serial_Interface18fanet_cmd_transmitEPc+0x36c>
			print_line(FN_REPLYM_PWRDOWN);
 8004e24:	4b0a      	ldr	r3, [pc, #40]	; (8004e50 <_ZN16Serial_Interface18fanet_cmd_transmitEPc+0x364>)
 8004e26:	220d      	movs	r2, #13
 8004e28:	490a      	ldr	r1, [pc, #40]	; (8004e54 <_ZN16Serial_Interface18fanet_cmd_transmitEPc+0x368>)
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 fb82 	bl	8005534 <_ZN16Serial_Interface10print_lineEPKciS1_>
 8004e30:	e02b      	b.n	8004e8a <_ZN16Serial_Interface18fanet_cmd_transmitEPc+0x39e>
 8004e32:	bf00      	nop
 8004e34:	08010644 	.word	0x08010644
 8004e38:	0801057c 	.word	0x0801057c
 8004e3c:	20000240 	.word	0x20000240
 8004e40:	08010588 	.word	0x08010588
 8004e44:	08010650 	.word	0x08010650
 8004e48:	08010660 	.word	0x08010660
 8004e4c:	08010570 	.word	0x08010570
 8004e50:	0801059c 	.word	0x0801059c
 8004e54:	080105a8 	.word	0x080105a8
		else
			print_line(FN_REPLY_OK);
 8004e58:	4b0d      	ldr	r3, [pc, #52]	; (8004e90 <_ZN16Serial_Interface18fanet_cmd_transmitEPc+0x3a4>)
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	490d      	ldr	r1, [pc, #52]	; (8004e94 <_ZN16Serial_Interface18fanet_cmd_transmitEPc+0x3a8>)
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 fb68 	bl	8005534 <_ZN16Serial_Interface10print_lineEPKciS1_>
 8004e64:	e011      	b.n	8004e8a <_ZN16Serial_Interface18fanet_cmd_transmitEPc+0x39e>
			app.allow_brdcast_name(false);
#endif
	}
	else
	{
		delete frm;
 8004e66:	6a3c      	ldr	r4, [r7, #32]
 8004e68:	2c00      	cmp	r4, #0
 8004e6a:	d006      	beq.n	8004e7a <_ZN16Serial_Interface18fanet_cmd_transmitEPc+0x38e>
 8004e6c:	4620      	mov	r0, r4
 8004e6e:	f7fd f985 	bl	800217c <_ZN5FrameD1Ev>
 8004e72:	2134      	movs	r1, #52	; 0x34
 8004e74:	4620      	mov	r0, r4
 8004e76:	f008 f8bf 	bl	800cff8 <_ZdlPvj>
		print_line(FN_REPLYE_TX_BUFF_FULL);
 8004e7a:	4b07      	ldr	r3, [pc, #28]	; (8004e98 <_ZN16Serial_Interface18fanet_cmd_transmitEPc+0x3ac>)
 8004e7c:	220e      	movs	r2, #14
 8004e7e:	4907      	ldr	r1, [pc, #28]	; (8004e9c <_ZN16Serial_Interface18fanet_cmd_transmitEPc+0x3b0>)
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f000 fb57 	bl	8005534 <_ZN16Serial_Interface10print_lineEPKciS1_>
 8004e86:	e000      	b.n	8004e8a <_ZN16Serial_Interface18fanet_cmd_transmitEPc+0x39e>
			return;
 8004e88:	bf00      	nop
	}
}
 8004e8a:	3730      	adds	r7, #48	; 0x30
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bdb0      	pop	{r4, r5, r7, pc}
 8004e90:	080105b4 	.word	0x080105b4
 8004e94:	080105b8 	.word	0x080105b8
 8004e98:	08010650 	.word	0x08010650
 8004e9c:	0801057c 	.word	0x0801057c

08004ea0 <_ZN16Serial_Interface10fanet_evalEPc>:

/* mux string */
void Serial_Interface::fanet_eval(char *str)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
	switch(str[strlen(FANET_CMD_START)])
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	3303      	adds	r3, #3
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	3b41      	subs	r3, #65	; 0x41
 8004eb2:	2b13      	cmp	r3, #19
 8004eb4:	d84d      	bhi.n	8004f52 <_ZN16Serial_Interface10fanet_evalEPc+0xb2>
 8004eb6:	a201      	add	r2, pc, #4	; (adr r2, 8004ebc <_ZN16Serial_Interface10fanet_evalEPc+0x1c>)
 8004eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ebc:	08004f29 	.word	0x08004f29
 8004ec0:	08004f53 	.word	0x08004f53
 8004ec4:	08004f37 	.word	0x08004f37
 8004ec8:	08004f53 	.word	0x08004f53
 8004ecc:	08004f53 	.word	0x08004f53
 8004ed0:	08004f53 	.word	0x08004f53
 8004ed4:	08004f53 	.word	0x08004f53
 8004ed8:	08004f53 	.word	0x08004f53
 8004edc:	08004f53 	.word	0x08004f53
 8004ee0:	08004f53 	.word	0x08004f53
 8004ee4:	08004f53 	.word	0x08004f53
 8004ee8:	08004f53 	.word	0x08004f53
 8004eec:	08004f45 	.word	0x08004f45
 8004ef0:	08004f53 	.word	0x08004f53
 8004ef4:	08004f53 	.word	0x08004f53
 8004ef8:	08004f53 	.word	0x08004f53
 8004efc:	08004f53 	.word	0x08004f53
 8004f00:	08004f53 	.word	0x08004f53
 8004f04:	08004f0d 	.word	0x08004f0d
 8004f08:	08004f1b 	.word	0x08004f1b
	{
	case CMD_STATE:
		fanet_cmd_state(&str[strlen(DONGLE_CMD_START) + 1]);
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	3304      	adds	r3, #4
 8004f10:	4619      	mov	r1, r3
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f7ff fa6a 	bl	80043ec <_ZN16Serial_Interface15fanet_cmd_stateEPc>
		break;
 8004f18:	e022      	b.n	8004f60 <_ZN16Serial_Interface10fanet_evalEPc+0xc0>
	case CMD_TRANSMIT:
		fanet_cmd_transmit(&str[strlen(DONGLE_CMD_START) + 1]);
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	3304      	adds	r3, #4
 8004f1e:	4619      	mov	r1, r3
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f7ff fde3 	bl	8004aec <_ZN16Serial_Interface18fanet_cmd_transmitEPc>
		break;
 8004f26:	e01b      	b.n	8004f60 <_ZN16Serial_Interface10fanet_evalEPc+0xc0>
	case CMD_ADDR:
		fanet_cmd_addr(&str[strlen(DONGLE_CMD_START) + 1]);
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	3304      	adds	r3, #4
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f7ff fc18 	bl	8004764 <_ZN16Serial_Interface14fanet_cmd_addrEPc>
		break;
 8004f34:	e014      	b.n	8004f60 <_ZN16Serial_Interface10fanet_evalEPc+0xc0>
	case CMD_CONFIG:
		fanet_cmd_config(&str[strlen(DONGLE_CMD_START) + 1]);
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	3304      	adds	r3, #4
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f7ff fcc9 	bl	80048d4 <_ZN16Serial_Interface16fanet_cmd_configEPc>
		break;
 8004f42:	e00d      	b.n	8004f60 <_ZN16Serial_Interface10fanet_evalEPc+0xc0>
	case CMD_MODE:
		fanet_cmd_mode(&str[strlen(DONGLE_CMD_START) + 1]);
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	3304      	adds	r3, #4
 8004f48:	4619      	mov	r1, r3
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f7ff fd64 	bl	8004a18 <_ZN16Serial_Interface14fanet_cmd_modeEPc>
		break;
 8004f50:	e006      	b.n	8004f60 <_ZN16Serial_Interface10fanet_evalEPc+0xc0>
	default:
		print_line(FN_REPLYE_FN_UNKNOWN_CMD);
 8004f52:	4b05      	ldr	r3, [pc, #20]	; (8004f68 <_ZN16Serial_Interface10fanet_evalEPc+0xc8>)
 8004f54:	2206      	movs	r2, #6
 8004f56:	4905      	ldr	r1, [pc, #20]	; (8004f6c <_ZN16Serial_Interface10fanet_evalEPc+0xcc>)
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 faeb 	bl	8005534 <_ZN16Serial_Interface10print_lineEPKciS1_>
	}
}
 8004f5e:	bf00      	nop
 8004f60:	bf00      	nop
 8004f62:	3708      	adds	r7, #8
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	080105dc 	.word	0x080105dc
 8004f6c:	0801057c 	.word	0x0801057c

08004f70 <_ZN16Serial_Interface18dongle_cmd_versionEPc>:
/*
 * Dongle Stuff
 */

void Serial_Interface::dongle_cmd_version(char *ch_str)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b093      	sub	sp, #76	; 0x4c
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
	if(myserial == NULL)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2b00      	cmp	r3, #0
		return;

	char buf[64];
	//snprintf(buf, sizeof(buf), "%s%c %s\n", DONGLE_CMD_START, CMD_VERSION, BUILD);
	//print(buf);
}
 8004f80:	374c      	adds	r7, #76	; 0x4c
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bc80      	pop	{r7}
 8004f86:	4770      	bx	lr

08004f88 <_ZN16Serial_Interface15dongle_cmd_jumpEPc>:

void Serial_Interface::dongle_cmd_jump(char *ch_str)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
	if(!strncmp(ch_str, " BLxld", 6))
 8004f92:	2206      	movs	r2, #6
 8004f94:	490f      	ldr	r1, [pc, #60]	; (8004fd4 <_ZN16Serial_Interface15dongle_cmd_jumpEPc+0x4c>)
 8004f96:	6838      	ldr	r0, [r7, #0]
 8004f98:	f008 fac7 	bl	800d52a <strncmp>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d104      	bne.n	8004fac <_ZN16Serial_Interface15dongle_cmd_jumpEPc+0x24>
		jump_app((void *)FLASH_BASE);
 8004fa2:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8004fa6:	f7ff f8f9 	bl	800419c <jump_app>
 8004faa:	e009      	b.n	8004fc0 <_ZN16Serial_Interface15dongle_cmd_jumpEPc+0x38>
	else if(!strncmp(ch_str, " BLstm", 6))
 8004fac:	2206      	movs	r2, #6
 8004fae:	490a      	ldr	r1, [pc, #40]	; (8004fd8 <_ZN16Serial_Interface15dongle_cmd_jumpEPc+0x50>)
 8004fb0:	6838      	ldr	r0, [r7, #0]
 8004fb2:	f008 faba 	bl	800d52a <strncmp>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d101      	bne.n	8004fc0 <_ZN16Serial_Interface15dongle_cmd_jumpEPc+0x38>
		jump_mcu_bootloader();
 8004fbc:	f7ff f918 	bl	80041f0 <jump_mcu_bootloader>

	print_line(DN_REPLYE_JUMP);
 8004fc0:	4b06      	ldr	r3, [pc, #24]	; (8004fdc <_ZN16Serial_Interface15dongle_cmd_jumpEPc+0x54>)
 8004fc2:	223d      	movs	r2, #61	; 0x3d
 8004fc4:	4906      	ldr	r1, [pc, #24]	; (8004fe0 <_ZN16Serial_Interface15dongle_cmd_jumpEPc+0x58>)
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 fab4 	bl	8005534 <_ZN16Serial_Interface10print_lineEPKciS1_>
}
 8004fcc:	bf00      	nop
 8004fce:	3708      	adds	r7, #8
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	08010670 	.word	0x08010670
 8004fd8:	08010678 	.word	0x08010678
 8004fdc:	08010680 	.word	0x08010680
 8004fe0:	08010694 	.word	0x08010694

08004fe4 <_ZN16Serial_Interface16dongle_cmd_powerEPc>:

void Serial_Interface::dongle_cmd_power(char *ch_str)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b096      	sub	sp, #88	; 0x58
 8004fe8:	af02      	add	r7, sp, #8
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
	/* remove \r\n and any spaces*/
	char *ptr = strchr(ch_str, '\r');
 8004fee:	210d      	movs	r1, #13
 8004ff0:	6838      	ldr	r0, [r7, #0]
 8004ff2:	f008 fa8d 	bl	800d510 <strchr>
 8004ff6:	64f8      	str	r0, [r7, #76]	; 0x4c
	if(ptr == NULL)
 8004ff8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d104      	bne.n	8005008 <_ZN16Serial_Interface16dongle_cmd_powerEPc+0x24>
		ptr = strchr(ch_str, '\n');
 8004ffe:	210a      	movs	r1, #10
 8005000:	6838      	ldr	r0, [r7, #0]
 8005002:	f008 fa85 	bl	800d510 <strchr>
 8005006:	64f8      	str	r0, [r7, #76]	; 0x4c
	if(ptr != NULL)
 8005008:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800500a:	2b00      	cmp	r3, #0
 800500c:	d002      	beq.n	8005014 <_ZN16Serial_Interface16dongle_cmd_powerEPc+0x30>
		*ptr = '\0';
 800500e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005010:	2200      	movs	r2, #0
 8005012:	701a      	strb	r2, [r3, #0]
	while(*ch_str == ' ')
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	2b20      	cmp	r3, #32
 800501a:	d103      	bne.n	8005024 <_ZN16Serial_Interface16dongle_cmd_powerEPc+0x40>
		ch_str++;
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	3301      	adds	r3, #1
 8005020:	603b      	str	r3, [r7, #0]
	while(*ch_str == ' ')
 8005022:	e7f7      	b.n	8005014 <_ZN16Serial_Interface16dongle_cmd_powerEPc+0x30>

	if(strlen(ch_str) == 0)
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d113      	bne.n	8005054 <_ZN16Serial_Interface16dongle_cmd_powerEPc+0x70>
	{
		/* report armed state */
		char buf[64];
		snprintf(buf, sizeof(buf), "%s%c %X\n", DONGLE_CMD_START, CMD_POWER, sx1272_isArmed());
 800502c:	f000 fb94 	bl	8005758 <sx1272_isArmed>
 8005030:	4603      	mov	r3, r0
 8005032:	f107 000c 	add.w	r0, r7, #12
 8005036:	9301      	str	r3, [sp, #4]
 8005038:	2350      	movs	r3, #80	; 0x50
 800503a:	9300      	str	r3, [sp, #0]
 800503c:	4b15      	ldr	r3, [pc, #84]	; (8005094 <_ZN16Serial_Interface16dongle_cmd_powerEPc+0xb0>)
 800503e:	4a16      	ldr	r2, [pc, #88]	; (8005098 <_ZN16Serial_Interface16dongle_cmd_powerEPc+0xb4>)
 8005040:	2140      	movs	r1, #64	; 0x40
 8005042:	f008 fa31 	bl	800d4a8 <sniprintf>
		print(buf);
 8005046:	f107 030c 	add.w	r3, r7, #12
 800504a:	4619      	mov	r1, r3
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f000 fb29 	bl	80056a4 <_ZN16Serial_Interface5printEPc>
 8005052:	e01b      	b.n	800508c <_ZN16Serial_Interface16dongle_cmd_powerEPc+0xa8>
	if(!atoi(ch_str))
		casw.do_flarm = false;
#endif

	/* set status */
	if(sx1272_setArmed(!!atoi(ch_str)))
 8005054:	6838      	ldr	r0, [r7, #0]
 8005056:	f008 f835 	bl	800d0c4 <atoi>
 800505a:	4603      	mov	r3, r0
 800505c:	2b00      	cmp	r3, #0
 800505e:	bf14      	ite	ne
 8005060:	2301      	movne	r3, #1
 8005062:	2300      	moveq	r3, #0
 8005064:	b2db      	uxtb	r3, r3
 8005066:	4618      	mov	r0, r3
 8005068:	f000 fb8a 	bl	8005780 <sx1272_setArmed>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d006      	beq.n	8005080 <_ZN16Serial_Interface16dongle_cmd_powerEPc+0x9c>
		print_line(DN_REPLY_OK);
 8005072:	4b0a      	ldr	r3, [pc, #40]	; (800509c <_ZN16Serial_Interface16dongle_cmd_powerEPc+0xb8>)
 8005074:	2200      	movs	r2, #0
 8005076:	490a      	ldr	r1, [pc, #40]	; (80050a0 <_ZN16Serial_Interface16dongle_cmd_powerEPc+0xbc>)
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f000 fa5b 	bl	8005534 <_ZN16Serial_Interface10print_lineEPKciS1_>
 800507e:	e005      	b.n	800508c <_ZN16Serial_Interface16dongle_cmd_powerEPc+0xa8>
	else
		print_line(DN_REPLYE_POWER);
 8005080:	4b08      	ldr	r3, [pc, #32]	; (80050a4 <_ZN16Serial_Interface16dongle_cmd_powerEPc+0xc0>)
 8005082:	2246      	movs	r2, #70	; 0x46
 8005084:	4908      	ldr	r1, [pc, #32]	; (80050a8 <_ZN16Serial_Interface16dongle_cmd_powerEPc+0xc4>)
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f000 fa54 	bl	8005534 <_ZN16Serial_Interface10print_lineEPKciS1_>
}
 800508c:	3750      	adds	r7, #80	; 0x50
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	080106a0 	.word	0x080106a0
 8005098:	08010638 	.word	0x08010638
 800509c:	080105b4 	.word	0x080105b4
 80050a0:	080106a4 	.word	0x080106a4
 80050a4:	080106ac 	.word	0x080106ac
 80050a8:	08010694 	.word	0x08010694

080050ac <_ZN16Serial_Interface17dongle_cmd_regionEPc>:

void Serial_Interface::dongle_cmd_region(char *ch_str)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b086      	sub	sp, #24
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
	SerialDEBUG.print(F("### Region "));
	SerialDEBUG.print(ch_str);
#endif

	/* eval parameter */
	char *p = (char *)ch_str;
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	617b      	str	r3, [r7, #20]
	if(p == NULL)
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d106      	bne.n	80050ce <_ZN16Serial_Interface17dongle_cmd_regionEPc+0x22>
	{
		print_line(DN_REPLYE_TOOLESSPARAMETER);
 80050c0:	4b52      	ldr	r3, [pc, #328]	; (800520c <_ZN16Serial_Interface17dongle_cmd_regionEPc+0x160>)
 80050c2:	2250      	movs	r2, #80	; 0x50
 80050c4:	4952      	ldr	r1, [pc, #328]	; (8005210 <_ZN16Serial_Interface17dongle_cmd_regionEPc+0x164>)
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 fa34 	bl	8005534 <_ZN16Serial_Interface10print_lineEPKciS1_>
		return;
 80050cc:	e09a      	b.n	8005204 <_ZN16Serial_Interface17dongle_cmd_regionEPc+0x158>
	}
	int freq = strtol(p, NULL, 10);
 80050ce:	220a      	movs	r2, #10
 80050d0:	2100      	movs	r1, #0
 80050d2:	6978      	ldr	r0, [r7, #20]
 80050d4:	f009 f8e4 	bl	800e2a0 <strtol>
 80050d8:	6138      	str	r0, [r7, #16]
	p = strchr(p, SEPARATOR)+1;
 80050da:	212c      	movs	r1, #44	; 0x2c
 80050dc:	6978      	ldr	r0, [r7, #20]
 80050de:	f008 fa17 	bl	800d510 <strchr>
 80050e2:	4603      	mov	r3, r0
 80050e4:	3301      	adds	r3, #1
 80050e6:	617b      	str	r3, [r7, #20]
	if(p == NULL)
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d106      	bne.n	80050fc <_ZN16Serial_Interface17dongle_cmd_regionEPc+0x50>
	{
		print_line(DN_REPLYE_TOOLESSPARAMETER);
 80050ee:	4b47      	ldr	r3, [pc, #284]	; (800520c <_ZN16Serial_Interface17dongle_cmd_regionEPc+0x160>)
 80050f0:	2250      	movs	r2, #80	; 0x50
 80050f2:	4947      	ldr	r1, [pc, #284]	; (8005210 <_ZN16Serial_Interface17dongle_cmd_regionEPc+0x164>)
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f000 fa1d 	bl	8005534 <_ZN16Serial_Interface10print_lineEPKciS1_>
		return;
 80050fa:	e083      	b.n	8005204 <_ZN16Serial_Interface17dongle_cmd_regionEPc+0x158>
	}
	sx_region_t region;
	region.channel = 0;
 80050fc:	2300      	movs	r3, #0
 80050fe:	60bb      	str	r3, [r7, #8]
	region.dBm = strtol(p, NULL, 10);
 8005100:	220a      	movs	r2, #10
 8005102:	2100      	movs	r1, #0
 8005104:	6978      	ldr	r0, [r7, #20]
 8005106:	f009 f8cb 	bl	800e2a0 <strtol>
 800510a:	4603      	mov	r3, r0
 800510c:	60fb      	str	r3, [r7, #12]

	switch(freq)
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	f5b3 7f59 	cmp.w	r3, #868	; 0x364
 8005114:	d03d      	beq.n	8005192 <_ZN16Serial_Interface17dongle_cmd_regionEPc+0xe6>
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	f5b3 7f59 	cmp.w	r3, #868	; 0x364
 800511c:	dc54      	bgt.n	80051c8 <_ZN16Serial_Interface17dongle_cmd_regionEPc+0x11c>
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8005124:	d04d      	beq.n	80051c2 <_ZN16Serial_Interface17dongle_cmd_regionEPc+0x116>
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800512c:	dc4c      	bgt.n	80051c8 <_ZN16Serial_Interface17dongle_cmd_regionEPc+0x11c>
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	f240 1277 	movw	r2, #375	; 0x177
 8005134:	4293      	cmp	r3, r2
 8005136:	d041      	beq.n	80051bc <_ZN16Serial_Interface17dongle_cmd_regionEPc+0x110>
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	f5b3 7fbc 	cmp.w	r3, #376	; 0x178
 800513e:	da43      	bge.n	80051c8 <_ZN16Serial_Interface17dongle_cmd_regionEPc+0x11c>
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8005146:	d036      	beq.n	80051b6 <_ZN16Serial_Interface17dongle_cmd_regionEPc+0x10a>
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 800514e:	dc3b      	bgt.n	80051c8 <_ZN16Serial_Interface17dongle_cmd_regionEPc+0x11c>
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	f240 1245 	movw	r2, #325	; 0x145
 8005156:	4293      	cmp	r3, r2
 8005158:	d02a      	beq.n	80051b0 <_ZN16Serial_Interface17dongle_cmd_regionEPc+0x104>
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	f5b3 7fa3 	cmp.w	r3, #326	; 0x146
 8005160:	da32      	bge.n	80051c8 <_ZN16Serial_Interface17dongle_cmd_regionEPc+0x11c>
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8005168:	d01f      	beq.n	80051aa <_ZN16Serial_Interface17dongle_cmd_regionEPc+0xfe>
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8005170:	dc2a      	bgt.n	80051c8 <_ZN16Serial_Interface17dongle_cmd_regionEPc+0x11c>
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	f240 1213 	movw	r2, #275	; 0x113
 8005178:	4293      	cmp	r3, r2
 800517a:	d013      	beq.n	80051a4 <_ZN16Serial_Interface17dongle_cmd_regionEPc+0xf8>
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	f5b3 7f8a 	cmp.w	r3, #276	; 0x114
 8005182:	da21      	bge.n	80051c8 <_ZN16Serial_Interface17dongle_cmd_regionEPc+0x11c>
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	2be1      	cmp	r3, #225	; 0xe1
 8005188:	d006      	beq.n	8005198 <_ZN16Serial_Interface17dongle_cmd_regionEPc+0xec>
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	2bfa      	cmp	r3, #250	; 0xfa
 800518e:	d006      	beq.n	800519e <_ZN16Serial_Interface17dongle_cmd_regionEPc+0xf2>
 8005190:	e01a      	b.n	80051c8 <_ZN16Serial_Interface17dongle_cmd_regionEPc+0x11c>
	{
	case 868:
		region.channel = CH_868_200;
 8005192:	4b20      	ldr	r3, [pc, #128]	; (8005214 <_ZN16Serial_Interface17dongle_cmd_regionEPc+0x168>)
 8005194:	60bb      	str	r3, [r7, #8]
		break;
 8005196:	e017      	b.n	80051c8 <_ZN16Serial_Interface17dongle_cmd_regionEPc+0x11c>
	/* ETSI test extension */
	case 225:
		region.channel = CH_868_225;
 8005198:	4b1f      	ldr	r3, [pc, #124]	; (8005218 <_ZN16Serial_Interface17dongle_cmd_regionEPc+0x16c>)
 800519a:	60bb      	str	r3, [r7, #8]
		break;
 800519c:	e014      	b.n	80051c8 <_ZN16Serial_Interface17dongle_cmd_regionEPc+0x11c>
	case 250:
		region.channel = CH_868_250;
 800519e:	4b1f      	ldr	r3, [pc, #124]	; (800521c <_ZN16Serial_Interface17dongle_cmd_regionEPc+0x170>)
 80051a0:	60bb      	str	r3, [r7, #8]
		break;
 80051a2:	e011      	b.n	80051c8 <_ZN16Serial_Interface17dongle_cmd_regionEPc+0x11c>
	case 275:
		region.channel = CH_868_275;
 80051a4:	4b1e      	ldr	r3, [pc, #120]	; (8005220 <_ZN16Serial_Interface17dongle_cmd_regionEPc+0x174>)
 80051a6:	60bb      	str	r3, [r7, #8]
		break;
 80051a8:	e00e      	b.n	80051c8 <_ZN16Serial_Interface17dongle_cmd_regionEPc+0x11c>
	case 300:
		region.channel = CH_868_300;
 80051aa:	4b1e      	ldr	r3, [pc, #120]	; (8005224 <_ZN16Serial_Interface17dongle_cmd_regionEPc+0x178>)
 80051ac:	60bb      	str	r3, [r7, #8]
		break;
 80051ae:	e00b      	b.n	80051c8 <_ZN16Serial_Interface17dongle_cmd_regionEPc+0x11c>
	case 325:
		region.channel = CH_868_325;
 80051b0:	4b1d      	ldr	r3, [pc, #116]	; (8005228 <_ZN16Serial_Interface17dongle_cmd_regionEPc+0x17c>)
 80051b2:	60bb      	str	r3, [r7, #8]
		break;
 80051b4:	e008      	b.n	80051c8 <_ZN16Serial_Interface17dongle_cmd_regionEPc+0x11c>
	case 350:
		region.channel = CH_868_350;
 80051b6:	4b1d      	ldr	r3, [pc, #116]	; (800522c <_ZN16Serial_Interface17dongle_cmd_regionEPc+0x180>)
 80051b8:	60bb      	str	r3, [r7, #8]
		break;
 80051ba:	e005      	b.n	80051c8 <_ZN16Serial_Interface17dongle_cmd_regionEPc+0x11c>
	case 375:
		region.channel = CH_868_375;
 80051bc:	4b1c      	ldr	r3, [pc, #112]	; (8005230 <_ZN16Serial_Interface17dongle_cmd_regionEPc+0x184>)
 80051be:	60bb      	str	r3, [r7, #8]
		break;
 80051c0:	e002      	b.n	80051c8 <_ZN16Serial_Interface17dongle_cmd_regionEPc+0x11c>
	case 400:
		region.channel = CH_868_400;
 80051c2:	4b1c      	ldr	r3, [pc, #112]	; (8005234 <_ZN16Serial_Interface17dongle_cmd_regionEPc+0x188>)
 80051c4:	60bb      	str	r3, [r7, #8]
		break;
 80051c6:	bf00      	nop

	}

	/* configure hardware */
	if(region.channel && sx1272_setRegion(region))
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d00a      	beq.n	80051e4 <_ZN16Serial_Interface17dongle_cmd_regionEPc+0x138>
 80051ce:	f107 0308 	add.w	r3, r7, #8
 80051d2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80051d6:	f000 fade 	bl	8005796 <sx1272_setRegion>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d001      	beq.n	80051e4 <_ZN16Serial_Interface17dongle_cmd_regionEPc+0x138>
 80051e0:	2301      	movs	r3, #1
 80051e2:	e000      	b.n	80051e6 <_ZN16Serial_Interface17dongle_cmd_regionEPc+0x13a>
 80051e4:	2300      	movs	r3, #0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d006      	beq.n	80051f8 <_ZN16Serial_Interface17dongle_cmd_regionEPc+0x14c>
		print_line(DN_REPLY_OK);
 80051ea:	4b13      	ldr	r3, [pc, #76]	; (8005238 <_ZN16Serial_Interface17dongle_cmd_regionEPc+0x18c>)
 80051ec:	2200      	movs	r2, #0
 80051ee:	4913      	ldr	r1, [pc, #76]	; (800523c <_ZN16Serial_Interface17dongle_cmd_regionEPc+0x190>)
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f000 f99f 	bl	8005534 <_ZN16Serial_Interface10print_lineEPKciS1_>
 80051f6:	e005      	b.n	8005204 <_ZN16Serial_Interface17dongle_cmd_regionEPc+0x158>
	else
		print_line(DN_REPLYE_UNKNOWNPARAMETER);
 80051f8:	4b11      	ldr	r3, [pc, #68]	; (8005240 <_ZN16Serial_Interface17dongle_cmd_regionEPc+0x194>)
 80051fa:	2251      	movs	r2, #81	; 0x51
 80051fc:	4904      	ldr	r1, [pc, #16]	; (8005210 <_ZN16Serial_Interface17dongle_cmd_regionEPc+0x164>)
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 f998 	bl	8005534 <_ZN16Serial_Interface10print_lineEPKciS1_>
}
 8005204:	3718      	adds	r7, #24
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	080106c0 	.word	0x080106c0
 8005210:	08010694 	.word	0x08010694
 8005214:	00d90ccd 	.word	0x00d90ccd
 8005218:	00d90e67 	.word	0x00d90e67
 800521c:	00d91000 	.word	0x00d91000
 8005220:	00d9119a 	.word	0x00d9119a
 8005224:	00d91333 	.word	0x00d91333
 8005228:	00d914cd 	.word	0x00d914cd
 800522c:	00d91666 	.word	0x00d91666
 8005230:	00d91800 	.word	0x00d91800
 8005234:	00d9199a 	.word	0x00d9199a
 8005238:	080105b4 	.word	0x080105b4
 800523c:	080106a4 	.word	0x080106a4
 8005240:	080106d4 	.word	0x080106d4

08005244 <_ZN16Serial_Interface10dongle_ppsEv>:

void Serial_Interface::dongle_pps(void)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b082      	sub	sp, #8
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
	/* emulate pps signal */
	fanet_pps_int();
 800524c:	f7fc ff22 	bl	8002094 <fanet_pps_int>
	print_line(DN_REPLY_OK);
 8005250:	4b04      	ldr	r3, [pc, #16]	; (8005264 <_ZN16Serial_Interface10dongle_ppsEv+0x20>)
 8005252:	2200      	movs	r2, #0
 8005254:	4904      	ldr	r1, [pc, #16]	; (8005268 <_ZN16Serial_Interface10dongle_ppsEv+0x24>)
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 f96c 	bl	8005534 <_ZN16Serial_Interface10print_lineEPKciS1_>
}
 800525c:	bf00      	nop
 800525e:	3708      	adds	r7, #8
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}
 8005264:	080105b4 	.word	0x080105b4
 8005268:	080106a4 	.word	0x080106a4

0800526c <_ZN16Serial_Interface11dongle_evalEPc>:

/* mux string */
void Serial_Interface::dongle_eval(char *str)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b082      	sub	sp, #8
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
	switch(str[strlen(DONGLE_CMD_START)])
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	3303      	adds	r3, #3
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	3b4a      	subs	r3, #74	; 0x4a
 800527e:	2b0c      	cmp	r3, #12
 8005280:	d83c      	bhi.n	80052fc <_ZN16Serial_Interface11dongle_evalEPc+0x90>
 8005282:	a201      	add	r2, pc, #4	; (adr r2, 8005288 <_ZN16Serial_Interface11dongle_evalEPc+0x1c>)
 8005284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005288:	080052e7 	.word	0x080052e7
 800528c:	080052fd 	.word	0x080052fd
 8005290:	080052d9 	.word	0x080052d9
 8005294:	080052fd 	.word	0x080052fd
 8005298:	080052fd 	.word	0x080052fd
 800529c:	080052fd 	.word	0x080052fd
 80052a0:	080052cb 	.word	0x080052cb
 80052a4:	080052fd 	.word	0x080052fd
 80052a8:	080052fd 	.word	0x080052fd
 80052ac:	080052f5 	.word	0x080052f5
 80052b0:	080052fd 	.word	0x080052fd
 80052b4:	080052fd 	.word	0x080052fd
 80052b8:	080052bd 	.word	0x080052bd
	{
	case CMD_VERSION:
		dongle_cmd_version(&str[strlen(DONGLE_CMD_START) + 1]);
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	3304      	adds	r3, #4
 80052c0:	4619      	mov	r1, r3
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f7ff fe54 	bl	8004f70 <_ZN16Serial_Interface18dongle_cmd_versionEPc>
		break;
 80052c8:	e01f      	b.n	800530a <_ZN16Serial_Interface11dongle_evalEPc+0x9e>
	case CMD_POWER:
		dongle_cmd_power(&str[strlen(DONGLE_CMD_START) + 1]);
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	3304      	adds	r3, #4
 80052ce:	4619      	mov	r1, r3
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f7ff fe87 	bl	8004fe4 <_ZN16Serial_Interface16dongle_cmd_powerEPc>
		break;
 80052d6:	e018      	b.n	800530a <_ZN16Serial_Interface11dongle_evalEPc+0x9e>
	case CMD_REGION:
		dongle_cmd_region(&str[strlen(DONGLE_CMD_START) + 1]);
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	3304      	adds	r3, #4
 80052dc:	4619      	mov	r1, r3
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f7ff fee4 	bl	80050ac <_ZN16Serial_Interface17dongle_cmd_regionEPc>
		break;
 80052e4:	e011      	b.n	800530a <_ZN16Serial_Interface11dongle_evalEPc+0x9e>
	case CMD_BOOTLOADER:
		dongle_cmd_jump(&str[strlen(DONGLE_CMD_START) + 1]);
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	3304      	adds	r3, #4
 80052ea:	4619      	mov	r1, r3
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f7ff fe4b 	bl	8004f88 <_ZN16Serial_Interface15dongle_cmd_jumpEPc>
		break;
 80052f2:	e00a      	b.n	800530a <_ZN16Serial_Interface11dongle_evalEPc+0x9e>
	case CMD_PPS:
		dongle_pps();
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f7ff ffa5 	bl	8005244 <_ZN16Serial_Interface10dongle_ppsEv>
		break;
 80052fa:	e006      	b.n	800530a <_ZN16Serial_Interface11dongle_evalEPc+0x9e>
	default:
		print_line(DN_REPLYE_DONGLE_UNKNOWN_CMD);
 80052fc:	4b05      	ldr	r3, [pc, #20]	; (8005314 <_ZN16Serial_Interface11dongle_evalEPc+0xa8>)
 80052fe:	223c      	movs	r2, #60	; 0x3c
 8005300:	4905      	ldr	r1, [pc, #20]	; (8005318 <_ZN16Serial_Interface11dongle_evalEPc+0xac>)
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 f916 	bl	8005534 <_ZN16Serial_Interface10print_lineEPKciS1_>
	}
}
 8005308:	bf00      	nop
 800530a:	bf00      	nop
 800530c:	3708      	adds	r7, #8
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	080106e8 	.word	0x080106e8
 8005318:	08010694 	.word	0x08010694

0800531c <_ZN16Serial_Interface9handle_rxEv>:
}
#endif

/* collect string */
void Serial_Interface::handle_rx(void)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b0c4      	sub	sp, #272	; 0x110
 8005320:	af00      	add	r7, sp, #0
 8005322:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005326:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800532a:	6018      	str	r0, [r3, #0]
	if(myserial == NULL)
 800532c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005330:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d051      	beq.n	80053e0 <_ZN16Serial_Interface9handle_rxEv+0xc4>
		return;

	char line[256];
	bool cmd_rxd = serial_poll(myserial, line, sizeof(line));
 800533c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005340:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f107 010c 	add.w	r1, r7, #12
 800534c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005350:	4618      	mov	r0, r3
 8005352:	f7fe ffcb 	bl	80042ec <serial_poll>
 8005356:	4603      	mov	r3, r0
 8005358:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

	/* Process message */
	if (cmd_rxd)
 800535c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8005360:	2b00      	cmp	r3, #0
 8005362:	d03e      	beq.n	80053e2 <_ZN16Serial_Interface9handle_rxEv+0xc6>
#if defined(SerialDEBUG) && (SERIAL_debug_mode > 1)
		print((char *)"### rx:'");
		print(line);
		print((char *)"'\n");
#endif
		if(!strncmp(line, FANET_CMD_START, 3))
 8005364:	f107 030c 	add.w	r3, r7, #12
 8005368:	2203      	movs	r2, #3
 800536a:	4920      	ldr	r1, [pc, #128]	; (80053ec <_ZN16Serial_Interface9handle_rxEv+0xd0>)
 800536c:	4618      	mov	r0, r3
 800536e:	f008 f8dc 	bl	800d52a <strncmp>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d10a      	bne.n	800538e <_ZN16Serial_Interface9handle_rxEv+0x72>
			fanet_eval(line);
 8005378:	f107 020c 	add.w	r2, r7, #12
 800537c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005380:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005384:	4611      	mov	r1, r2
 8005386:	6818      	ldr	r0, [r3, #0]
 8005388:	f7ff fd8a 	bl	8004ea0 <_ZN16Serial_Interface10fanet_evalEPc>
 800538c:	e01e      	b.n	80053cc <_ZN16Serial_Interface9handle_rxEv+0xb0>
#ifdef FANET_BLUETOOTH
		else if(!strncmp(line, BT_CMD_START,3))
			bt_eval(line);
#endif
		else if(!strncmp(line, DONGLE_CMD_START, 3))
 800538e:	f107 030c 	add.w	r3, r7, #12
 8005392:	2203      	movs	r2, #3
 8005394:	4916      	ldr	r1, [pc, #88]	; (80053f0 <_ZN16Serial_Interface9handle_rxEv+0xd4>)
 8005396:	4618      	mov	r0, r3
 8005398:	f008 f8c7 	bl	800d52a <strncmp>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d10a      	bne.n	80053b8 <_ZN16Serial_Interface9handle_rxEv+0x9c>
			dongle_eval(line);
 80053a2:	f107 020c 	add.w	r2, r7, #12
 80053a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80053aa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80053ae:	4611      	mov	r1, r2
 80053b0:	6818      	ldr	r0, [r3, #0]
 80053b2:	f7ff ff5b 	bl	800526c <_ZN16Serial_Interface11dongle_evalEPc>
 80053b6:	e009      	b.n	80053cc <_ZN16Serial_Interface9handle_rxEv+0xb0>
#ifdef FLARM
		else if(!strncmp(line, FLARM_CMD_START, 3))
			flarm_eval(line);
#endif
		else
			print_line(FN_REPLYE_UNKNOWN_CMD);
 80053b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80053bc:	f5a3 7086 	sub.w	r0, r3, #268	; 0x10c
 80053c0:	4b0c      	ldr	r3, [pc, #48]	; (80053f4 <_ZN16Serial_Interface9handle_rxEv+0xd8>)
 80053c2:	2205      	movs	r2, #5
 80053c4:	490c      	ldr	r1, [pc, #48]	; (80053f8 <_ZN16Serial_Interface9handle_rxEv+0xdc>)
 80053c6:	6800      	ldr	r0, [r0, #0]
 80053c8:	f000 f8b4 	bl	8005534 <_ZN16Serial_Interface10print_lineEPKciS1_>

		last_activity = HAL_GetTick();
 80053cc:	f000 febe 	bl	800614c <HAL_GetTick>
 80053d0:	4602      	mov	r2, r0
 80053d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80053d6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	605a      	str	r2, [r3, #4]
 80053de:	e000      	b.n	80053e2 <_ZN16Serial_Interface9handle_rxEv+0xc6>
		return;
 80053e0:	bf00      	nop
	}
}
 80053e2:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	080105c0 	.word	0x080105c0
 80053f0:	080106a0 	.word	0x080106a0
 80053f4:	080106fc 	.word	0x080106fc
 80053f8:	0801057c 	.word	0x0801057c

080053fc <_ZN16Serial_Interface12handle_ackedEbR7MacAddr>:
/*
 * Handle redirected App Stuff
 */

void Serial_Interface::handle_acked(bool ack, MacAddr &addr)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b096      	sub	sp, #88	; 0x58
 8005400:	af02      	add	r7, sp, #8
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	460b      	mov	r3, r1
 8005406:	607a      	str	r2, [r7, #4]
 8005408:	72fb      	strb	r3, [r7, #11]
	if(myserial == NULL)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d019      	beq.n	8005446 <_ZN16Serial_Interface12handle_ackedEbR7MacAddr+0x4a>
		return;

	char buf[64];
	snprintf(buf, sizeof(buf), "%s,%X,%X\n", ack?FANET_CMD_ACK:FANET_CMD_NACK, addr.manufacturer, addr.id);
 8005412:	7afb      	ldrb	r3, [r7, #11]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d001      	beq.n	800541c <_ZN16Serial_Interface12handle_ackedEbR7MacAddr+0x20>
 8005418:	490d      	ldr	r1, [pc, #52]	; (8005450 <_ZN16Serial_Interface12handle_ackedEbR7MacAddr+0x54>)
 800541a:	e000      	b.n	800541e <_ZN16Serial_Interface12handle_ackedEbR7MacAddr+0x22>
 800541c:	490d      	ldr	r1, [pc, #52]	; (8005454 <_ZN16Serial_Interface12handle_ackedEbR7MacAddr+0x58>)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	6852      	ldr	r2, [r2, #4]
 8005426:	f107 0010 	add.w	r0, r7, #16
 800542a:	9201      	str	r2, [sp, #4]
 800542c:	9300      	str	r3, [sp, #0]
 800542e:	460b      	mov	r3, r1
 8005430:	4a09      	ldr	r2, [pc, #36]	; (8005458 <_ZN16Serial_Interface12handle_ackedEbR7MacAddr+0x5c>)
 8005432:	2140      	movs	r1, #64	; 0x40
 8005434:	f008 f838 	bl	800d4a8 <sniprintf>
	print(buf);
 8005438:	f107 0310 	add.w	r3, r7, #16
 800543c:	4619      	mov	r1, r3
 800543e:	68f8      	ldr	r0, [r7, #12]
 8005440:	f000 f930 	bl	80056a4 <_ZN16Serial_Interface5printEPc>
 8005444:	e000      	b.n	8005448 <_ZN16Serial_Interface12handle_ackedEbR7MacAddr+0x4c>
		return;
 8005446:	bf00      	nop
}
 8005448:	3750      	adds	r7, #80	; 0x50
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	0801070c 	.word	0x0801070c
 8005454:	08010718 	.word	0x08010718
 8005458:	08010724 	.word	0x08010724

0800545c <_ZN16Serial_Interface12handle_frameEP5Frame>:

void Serial_Interface::handle_frame(Frame *frm)
{
 800545c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800545e:	b0ad      	sub	sp, #180	; 0xb4
 8005460:	af06      	add	r7, sp, #24
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
	if(myserial == NULL || frm == NULL)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d055      	beq.n	800551a <_ZN16Serial_Interface12handle_frameEP5Frame+0xbe>
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d052      	beq.n	800551a <_ZN16Serial_Interface12handle_frameEP5Frame+0xbe>

	/* simply print frame */
	/* src_manufacturer,src_id,broadcast,signature,type,payloadlength,payload */

	char buf[128];
	snprintf(buf, sizeof(buf), "%s %X,%X,%X,%X,%X,%X,",
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	681c      	ldr	r4, [r3, #0]
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	685d      	ldr	r5, [r3, #4]
			FANET_CMD_START CMD_RX_FRAME, frm->src.manufacturer, frm->src.id, frm->dest==MacAddr(), (unsigned int)frm->signature,
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	f103 0608 	add.w	r6, r3, #8
 8005482:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8005486:	4618      	mov	r0, r3
 8005488:	f7fc f968 	bl	800175c <_ZN7MacAddrC1Ev>
 800548c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8005490:	4619      	mov	r1, r3
 8005492:	4630      	mov	r0, r6
 8005494:	f7fc fe40 	bl	8002118 <_ZNK7MacAddreqERKS_>
 8005498:	4603      	mov	r3, r0
	snprintf(buf, sizeof(buf), "%s %X,%X,%X,%X,%X,%X,",
 800549a:	461e      	mov	r6, r3
			FANET_CMD_START CMD_RX_FRAME, frm->src.manufacturer, frm->src.id, frm->dest==MacAddr(), (unsigned int)frm->signature,
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	699b      	ldr	r3, [r3, #24]
	snprintf(buf, sizeof(buf), "%s %X,%X,%X,%X,%X,%X,",
 80054a0:	683a      	ldr	r2, [r7, #0]
 80054a2:	69d2      	ldr	r2, [r2, #28]
 80054a4:	6839      	ldr	r1, [r7, #0]
 80054a6:	6a09      	ldr	r1, [r1, #32]
 80054a8:	f107 000c 	add.w	r0, r7, #12
 80054ac:	9105      	str	r1, [sp, #20]
 80054ae:	9204      	str	r2, [sp, #16]
 80054b0:	9303      	str	r3, [sp, #12]
 80054b2:	9602      	str	r6, [sp, #8]
 80054b4:	9501      	str	r5, [sp, #4]
 80054b6:	9400      	str	r4, [sp, #0]
 80054b8:	4b1a      	ldr	r3, [pc, #104]	; (8005524 <_ZN16Serial_Interface12handle_frameEP5Frame+0xc8>)
 80054ba:	4a1b      	ldr	r2, [pc, #108]	; (8005528 <_ZN16Serial_Interface12handle_frameEP5Frame+0xcc>)
 80054bc:	2180      	movs	r1, #128	; 0x80
 80054be:	f007 fff3 	bl	800d4a8 <sniprintf>
			frm->type, frm->payload_length);
	print(buf);
 80054c2:	f107 030c 	add.w	r3, r7, #12
 80054c6:	4619      	mov	r1, r3
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f000 f8eb 	bl	80056a4 <_ZN16Serial_Interface5printEPc>

	for(int i=0; i<frm->payload_length; i++)
 80054ce:	2300      	movs	r3, #0
 80054d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	6a1b      	ldr	r3, [r3, #32]
 80054d8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80054dc:	429a      	cmp	r2, r3
 80054de:	da17      	bge.n	8005510 <_ZN16Serial_Interface12handle_frameEP5Frame+0xb4>
	{
		snprintf(buf, sizeof(buf), "%02X", frm->payload[i]);
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80054e8:	4413      	add	r3, r2
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	f107 000c 	add.w	r0, r7, #12
 80054f0:	4a0e      	ldr	r2, [pc, #56]	; (800552c <_ZN16Serial_Interface12handle_frameEP5Frame+0xd0>)
 80054f2:	2180      	movs	r1, #128	; 0x80
 80054f4:	f007 ffd8 	bl	800d4a8 <sniprintf>
		print(buf);
 80054f8:	f107 030c 	add.w	r3, r7, #12
 80054fc:	4619      	mov	r1, r3
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f000 f8d0 	bl	80056a4 <_ZN16Serial_Interface5printEPc>
	for(int i=0; i<frm->payload_length; i++)
 8005504:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005508:	3301      	adds	r3, #1
 800550a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800550e:	e7e1      	b.n	80054d4 <_ZN16Serial_Interface12handle_frameEP5Frame+0x78>
	}
	print((char*) "\n");
 8005510:	4907      	ldr	r1, [pc, #28]	; (8005530 <_ZN16Serial_Interface12handle_frameEP5Frame+0xd4>)
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 f8c6 	bl	80056a4 <_ZN16Serial_Interface5printEPc>
 8005518:	e000      	b.n	800551c <_ZN16Serial_Interface12handle_frameEP5Frame+0xc0>
		return;
 800551a:	bf00      	nop
}
 800551c:	379c      	adds	r7, #156	; 0x9c
 800551e:	46bd      	mov	sp, r7
 8005520:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005522:	bf00      	nop
 8005524:	08010730 	.word	0x08010730
 8005528:	08010738 	.word	0x08010738
 800552c:	08010750 	.word	0x08010750
 8005530:	08010758 	.word	0x08010758

08005534 <_ZN16Serial_Interface10print_lineEPKciS1_>:

void Serial_Interface::print_line(const char *type, int key, const char *msg)
{
 8005534:	b590      	push	{r4, r7, lr}
 8005536:	b097      	sub	sp, #92	; 0x5c
 8005538:	af00      	add	r7, sp, #0
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	60b9      	str	r1, [r7, #8]
 800553e:	607a      	str	r2, [r7, #4]
 8005540:	603b      	str	r3, [r7, #0]
	if(myserial == NULL || type == NULL)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2b00      	cmp	r3, #0
 8005548:	f000 80a1 	beq.w	800568e <_ZN16Serial_Interface10print_lineEPKciS1_+0x15a>
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	2b00      	cmp	r3, #0
 8005550:	f000 809d 	beq.w	800568e <_ZN16Serial_Interface10print_lineEPKciS1_+0x15a>
		return;

	/* general answer */
	while(HAL_UART_Transmit_IT(myserial->uart, (uint8_t *)type, strlen(type)) == HAL_BUSY);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681c      	ldr	r4, [r3, #0]
 800555a:	68b8      	ldr	r0, [r7, #8]
 800555c:	f7fa fe10 	bl	8000180 <strlen>
 8005560:	4603      	mov	r3, r0
 8005562:	b29b      	uxth	r3, r3
 8005564:	461a      	mov	r2, r3
 8005566:	68b9      	ldr	r1, [r7, #8]
 8005568:	4620      	mov	r0, r4
 800556a:	f003 f9f3 	bl	8008954 <HAL_UART_Transmit_IT>
 800556e:	4603      	mov	r3, r0
 8005570:	2b02      	cmp	r3, #2
 8005572:	bf0c      	ite	eq
 8005574:	2301      	moveq	r3, #1
 8005576:	2300      	movne	r3, #0
 8005578:	b2db      	uxtb	r3, r3
 800557a:	2b00      	cmp	r3, #0
 800557c:	d000      	beq.n	8005580 <_ZN16Serial_Interface10print_lineEPKciS1_+0x4c>
 800557e:	e7e9      	b.n	8005554 <_ZN16Serial_Interface10print_lineEPKciS1_+0x20>
	while(myserial->uart->gState != (__IO HAL_UART_StateTypeDef) HAL_UART_STATE_READY);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800558a:	2b20      	cmp	r3, #32
 800558c:	bf14      	ite	ne
 800558e:	2301      	movne	r3, #1
 8005590:	2300      	moveq	r3, #0
 8005592:	b2db      	uxtb	r3, r3
 8005594:	2b00      	cmp	r3, #0
 8005596:	d000      	beq.n	800559a <_ZN16Serial_Interface10print_lineEPKciS1_+0x66>
 8005598:	e7f2      	b.n	8005580 <_ZN16Serial_Interface10print_lineEPKciS1_+0x4c>

	/* key */
	char buf[64];
	if(key > 0)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2b00      	cmp	r3, #0
 800559e:	dd58      	ble.n	8005652 <_ZN16Serial_Interface10print_lineEPKciS1_+0x11e>
	{
		size_t len = snprintf(buf, sizeof(buf), ",%d", key);
 80055a0:	f107 0014 	add.w	r0, r7, #20
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	4a3c      	ldr	r2, [pc, #240]	; (8005698 <_ZN16Serial_Interface10print_lineEPKciS1_+0x164>)
 80055a8:	2140      	movs	r1, #64	; 0x40
 80055aa:	f007 ff7d 	bl	800d4a8 <sniprintf>
 80055ae:	4603      	mov	r3, r0
 80055b0:	657b      	str	r3, [r7, #84]	; 0x54
		while(HAL_UART_Transmit_IT(myserial->uart, (uint8_t *)buf, len) == HAL_BUSY);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80055ba:	b292      	uxth	r2, r2
 80055bc:	f107 0114 	add.w	r1, r7, #20
 80055c0:	4618      	mov	r0, r3
 80055c2:	f003 f9c7 	bl	8008954 <HAL_UART_Transmit_IT>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	bf0c      	ite	eq
 80055cc:	2301      	moveq	r3, #1
 80055ce:	2300      	movne	r3, #0
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d000      	beq.n	80055d8 <_ZN16Serial_Interface10print_lineEPKciS1_+0xa4>
 80055d6:	e7ec      	b.n	80055b2 <_ZN16Serial_Interface10print_lineEPKciS1_+0x7e>
		while(myserial->uart->gState != (__IO HAL_UART_StateTypeDef) HAL_UART_STATE_READY);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055e2:	2b20      	cmp	r3, #32
 80055e4:	bf14      	ite	ne
 80055e6:	2301      	movne	r3, #1
 80055e8:	2300      	moveq	r3, #0
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d000      	beq.n	80055f2 <_ZN16Serial_Interface10print_lineEPKciS1_+0xbe>
 80055f0:	e7f2      	b.n	80055d8 <_ZN16Serial_Interface10print_lineEPKciS1_+0xa4>

		/* human readable message */
		if(msg != NULL && strlen(msg) > 0)
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d02c      	beq.n	8005652 <_ZN16Serial_Interface10print_lineEPKciS1_+0x11e>
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d028      	beq.n	8005652 <_ZN16Serial_Interface10print_lineEPKciS1_+0x11e>
		{
			len =  snprintf(buf, sizeof(buf), ",%s", msg);
 8005600:	f107 0014 	add.w	r0, r7, #20
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	4a25      	ldr	r2, [pc, #148]	; (800569c <_ZN16Serial_Interface10print_lineEPKciS1_+0x168>)
 8005608:	2140      	movs	r1, #64	; 0x40
 800560a:	f007 ff4d 	bl	800d4a8 <sniprintf>
 800560e:	4603      	mov	r3, r0
 8005610:	657b      	str	r3, [r7, #84]	; 0x54
			while(HAL_UART_Transmit_IT(myserial->uart, (uint8_t *)buf,len) == HAL_BUSY);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800561a:	b292      	uxth	r2, r2
 800561c:	f107 0114 	add.w	r1, r7, #20
 8005620:	4618      	mov	r0, r3
 8005622:	f003 f997 	bl	8008954 <HAL_UART_Transmit_IT>
 8005626:	4603      	mov	r3, r0
 8005628:	2b02      	cmp	r3, #2
 800562a:	bf0c      	ite	eq
 800562c:	2301      	moveq	r3, #1
 800562e:	2300      	movne	r3, #0
 8005630:	b2db      	uxtb	r3, r3
 8005632:	2b00      	cmp	r3, #0
 8005634:	d000      	beq.n	8005638 <_ZN16Serial_Interface10print_lineEPKciS1_+0x104>
 8005636:	e7ec      	b.n	8005612 <_ZN16Serial_Interface10print_lineEPKciS1_+0xde>
			while(myserial->uart->gState != (__IO HAL_UART_StateTypeDef) HAL_UART_STATE_READY);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005642:	2b20      	cmp	r3, #32
 8005644:	bf14      	ite	ne
 8005646:	2301      	movne	r3, #1
 8005648:	2300      	moveq	r3, #0
 800564a:	b2db      	uxtb	r3, r3
 800564c:	2b00      	cmp	r3, #0
 800564e:	d000      	beq.n	8005652 <_ZN16Serial_Interface10print_lineEPKciS1_+0x11e>
 8005650:	e7f2      	b.n	8005638 <_ZN16Serial_Interface10print_lineEPKciS1_+0x104>
		}
	}

	while(HAL_UART_Transmit_IT(myserial->uart, (uint8_t *)"\n", 1) == HAL_BUSY);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2201      	movs	r2, #1
 800565a:	4911      	ldr	r1, [pc, #68]	; (80056a0 <_ZN16Serial_Interface10print_lineEPKciS1_+0x16c>)
 800565c:	4618      	mov	r0, r3
 800565e:	f003 f979 	bl	8008954 <HAL_UART_Transmit_IT>
 8005662:	4603      	mov	r3, r0
 8005664:	2b02      	cmp	r3, #2
 8005666:	bf0c      	ite	eq
 8005668:	2301      	moveq	r3, #1
 800566a:	2300      	movne	r3, #0
 800566c:	b2db      	uxtb	r3, r3
 800566e:	2b00      	cmp	r3, #0
 8005670:	d000      	beq.n	8005674 <_ZN16Serial_Interface10print_lineEPKciS1_+0x140>
 8005672:	e7ee      	b.n	8005652 <_ZN16Serial_Interface10print_lineEPKciS1_+0x11e>
	while(myserial->uart->gState != (__IO HAL_UART_StateTypeDef) HAL_UART_STATE_READY);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800567e:	2b20      	cmp	r3, #32
 8005680:	bf14      	ite	ne
 8005682:	2301      	movne	r3, #1
 8005684:	2300      	moveq	r3, #0
 8005686:	b2db      	uxtb	r3, r3
 8005688:	2b00      	cmp	r3, #0
 800568a:	d001      	beq.n	8005690 <_ZN16Serial_Interface10print_lineEPKciS1_+0x15c>
 800568c:	e7f2      	b.n	8005674 <_ZN16Serial_Interface10print_lineEPKciS1_+0x140>
		return;
 800568e:	bf00      	nop
}
 8005690:	375c      	adds	r7, #92	; 0x5c
 8005692:	46bd      	mov	sp, r7
 8005694:	bd90      	pop	{r4, r7, pc}
 8005696:	bf00      	nop
 8005698:	0801075c 	.word	0x0801075c
 800569c:	08010760 	.word	0x08010760
 80056a0:	08010758 	.word	0x08010758

080056a4 <_ZN16Serial_Interface5printEPc>:

void Serial_Interface::print(char *str)
{
 80056a4:	b590      	push	{r4, r7, lr}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
	if(myserial == NULL || str == NULL)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d025      	beq.n	8005702 <_ZN16Serial_Interface5printEPc+0x5e>
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d022      	beq.n	8005702 <_ZN16Serial_Interface5printEPc+0x5e>
		return;

	while(HAL_UART_Transmit_IT(myserial->uart, (uint8_t *)str, strlen(str)) == HAL_BUSY);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681c      	ldr	r4, [r3, #0]
 80056c2:	6838      	ldr	r0, [r7, #0]
 80056c4:	f7fa fd5c 	bl	8000180 <strlen>
 80056c8:	4603      	mov	r3, r0
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	461a      	mov	r2, r3
 80056ce:	6839      	ldr	r1, [r7, #0]
 80056d0:	4620      	mov	r0, r4
 80056d2:	f003 f93f 	bl	8008954 <HAL_UART_Transmit_IT>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b02      	cmp	r3, #2
 80056da:	bf0c      	ite	eq
 80056dc:	2301      	moveq	r3, #1
 80056de:	2300      	movne	r3, #0
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d000      	beq.n	80056e8 <_ZN16Serial_Interface5printEPc+0x44>
 80056e6:	e7e9      	b.n	80056bc <_ZN16Serial_Interface5printEPc+0x18>
	while(myserial->uart->gState != (__IO HAL_UART_StateTypeDef) HAL_UART_STATE_READY);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056f2:	2b20      	cmp	r3, #32
 80056f4:	bf14      	ite	ne
 80056f6:	2301      	movne	r3, #1
 80056f8:	2300      	moveq	r3, #0
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d001      	beq.n	8005704 <_ZN16Serial_Interface5printEPc+0x60>
 8005700:	e7f2      	b.n	80056e8 <_ZN16Serial_Interface5printEPc+0x44>
		return;
 8005702:	bf00      	nop
}
 8005704:	370c      	adds	r7, #12
 8005706:	46bd      	mov	sp, r7
 8005708:	bd90      	pop	{r4, r7, pc}
	...

0800570c <_Z41__static_initialization_and_destruction_0ii>:

Serial_Interface serial_int = Serial_Interface();
 800570c:	b580      	push	{r7, lr}
 800570e:	b082      	sub	sp, #8
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2b01      	cmp	r3, #1
 800571a:	d107      	bne.n	800572c <_Z41__static_initialization_and_destruction_0ii+0x20>
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005722:	4293      	cmp	r3, r2
 8005724:	d102      	bne.n	800572c <_Z41__static_initialization_and_destruction_0ii+0x20>
 8005726:	4803      	ldr	r0, [pc, #12]	; (8005734 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8005728:	f7fe fe4f 	bl	80043ca <_ZN16Serial_InterfaceC1Ev>
 800572c:	bf00      	nop
 800572e:	3708      	adds	r7, #8
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}
 8005734:	200003c8 	.word	0x200003c8

08005738 <_GLOBAL__sub_I__ZN16Serial_Interface15fanet_cmd_stateEPc>:
 8005738:	b580      	push	{r7, lr}
 800573a:	af00      	add	r7, sp, #0
 800573c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005740:	2001      	movs	r0, #1
 8005742:	f7ff ffe3 	bl	800570c <_Z41__static_initialization_and_destruction_0ii>
 8005746:	bd80      	pop	{r7, pc}

08005748 <sx1272_get_airlimit>:
#define SX_REG_BACKUP_LORA	1
uint8_t sx_reg_backup[2][111];
#endif

float sx1272_get_airlimit(void) //dummy placeholder
{
 8005748:	b480      	push	{r7}
 800574a:	af00      	add	r7, sp, #0
	return 1;
 800574c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
}
 8005750:	4618      	mov	r0, r3
 8005752:	46bd      	mov	sp, r7
 8005754:	bc80      	pop	{r7}
 8005756:	4770      	bx	lr

08005758 <sx1272_isArmed>:


bool sx1272_isArmed(void) //dummy placeholder
{
 8005758:	b480      	push	{r7}
 800575a:	af00      	add	r7, sp, #0
	return true;
 800575c:	2301      	movs	r3, #1
}
 800575e:	4618      	mov	r0, r3
 8005760:	46bd      	mov	sp, r7
 8005762:	bc80      	pop	{r7}
 8005764:	4770      	bx	lr

08005766 <sx1272_sendFrame>:

int sx1272_sendFrame(uint8_t *data, int length, uint8_t cr) //dummy placeholder
{
 8005766:	b480      	push	{r7}
 8005768:	b085      	sub	sp, #20
 800576a:	af00      	add	r7, sp, #0
 800576c:	60f8      	str	r0, [r7, #12]
 800576e:	60b9      	str	r1, [r7, #8]
 8005770:	4613      	mov	r3, r2
 8005772:	71fb      	strb	r3, [r7, #7]
return 0;
 8005774:	2300      	movs	r3, #0
}
 8005776:	4618      	mov	r0, r3
 8005778:	3714      	adds	r7, #20
 800577a:	46bd      	mov	sp, r7
 800577c:	bc80      	pop	{r7}
 800577e:	4770      	bx	lr

08005780 <sx1272_setArmed>:

bool sx1272_setArmed(bool rxmode)
{
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 8005786:	4603      	mov	r3, r0
 8005788:	71fb      	strb	r3, [r7, #7]
return true;
 800578a:	2301      	movs	r3, #1
}
 800578c:	4618      	mov	r0, r3
 800578e:	370c      	adds	r7, #12
 8005790:	46bd      	mov	sp, r7
 8005792:	bc80      	pop	{r7}
 8005794:	4770      	bx	lr

08005796 <sx1272_setRegion>:

bool sx1272_setRegion(sx_region_t region)
{
 8005796:	b480      	push	{r7}
 8005798:	b083      	sub	sp, #12
 800579a:	af00      	add	r7, sp, #0
 800579c:	463b      	mov	r3, r7
 800579e:	e883 0003 	stmia.w	r3, {r0, r1}

}
 80057a2:	bf00      	nop
 80057a4:	4618      	mov	r0, r3
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bc80      	pop	{r7}
 80057ac:	4770      	bx	lr

080057ae <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80057ae:	b480      	push	{r7}
 80057b0:	b085      	sub	sp, #20
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80057b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80057bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80057c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4013      	ands	r3, r2
 80057d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80057d2:	68fb      	ldr	r3, [r7, #12]
}
 80057d4:	bf00      	nop
 80057d6:	3714      	adds	r7, #20
 80057d8:	46bd      	mov	sp, r7
 80057da:	bc80      	pop	{r7}
 80057dc:	4770      	bx	lr

080057de <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80057de:	b580      	push	{r7, lr}
 80057e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80057e2:	f000 fc01 	bl	8005fe8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80057e6:	f000 f80d 	bl	8005804 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_SUBGHZ_Init();
 80057ea:	f000 f85d 	bl	80058a8 <MX_SUBGHZ_Init>
  MX_GPIO_Init();
 80057ee:	f000 f8b9 	bl	8005964 <MX_GPIO_Init>
  MX_SubGHz_Phy_Init();
 80057f2:	f007 f920 	bl	800ca36 <MX_SubGHz_Phy_Init>
  MX_USART1_UART_Init();
 80057f6:	f000 f869 	bl	80058cc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  fanet_init_fake();
 80057fa:	f7fc fc35 	bl	8002068 <fanet_init_fake>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	fanet_loop();
 80057fe:	f7fc fc4f 	bl	80020a0 <fanet_loop>
 8005802:	e7fc      	b.n	80057fe <main+0x20>

08005804 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b09a      	sub	sp, #104	; 0x68
 8005808:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800580a:	f107 0320 	add.w	r3, r7, #32
 800580e:	2248      	movs	r2, #72	; 0x48
 8005810:	2100      	movs	r1, #0
 8005812:	4618      	mov	r0, r3
 8005814:	f007 fca2 	bl	800d15c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005818:	f107 0308 	add.w	r3, r7, #8
 800581c:	2200      	movs	r2, #0
 800581e:	601a      	str	r2, [r3, #0]
 8005820:	605a      	str	r2, [r3, #4]
 8005822:	609a      	str	r2, [r3, #8]
 8005824:	60da      	str	r2, [r3, #12]
 8005826:	611a      	str	r2, [r3, #16]
 8005828:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800582a:	4b1e      	ldr	r3, [pc, #120]	; (80058a4 <SystemClock_Config+0xa0>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005832:	4a1c      	ldr	r2, [pc, #112]	; (80058a4 <SystemClock_Config+0xa0>)
 8005834:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005838:	6013      	str	r3, [r2, #0]
 800583a:	4b1a      	ldr	r3, [pc, #104]	; (80058a4 <SystemClock_Config+0xa0>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005842:	607b      	str	r3, [r7, #4]
 8005844:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8005846:	2320      	movs	r3, #32
 8005848:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800584a:	2301      	movs	r3, #1
 800584c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800584e:	2300      	movs	r3, #0
 8005850:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8005852:	2360      	movs	r3, #96	; 0x60
 8005854:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8005856:	2300      	movs	r3, #0
 8005858:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800585a:	f107 0320 	add.w	r3, r7, #32
 800585e:	4618      	mov	r0, r3
 8005860:	f001 fb78 	bl	8006f54 <HAL_RCC_OscConfig>
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d001      	beq.n	800586e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800586a:	f000 f882 	bl	8005972 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 800586e:	234f      	movs	r3, #79	; 0x4f
 8005870:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8005872:	2300      	movs	r3, #0
 8005874:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005876:	2300      	movs	r3, #0
 8005878:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800587a:	2300      	movs	r3, #0
 800587c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800587e:	2300      	movs	r3, #0
 8005880:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8005882:	2300      	movs	r3, #0
 8005884:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8005886:	f107 0308 	add.w	r3, r7, #8
 800588a:	2100      	movs	r1, #0
 800588c:	4618      	mov	r0, r3
 800588e:	f001 fefd 	bl	800768c <HAL_RCC_ClockConfig>
 8005892:	4603      	mov	r3, r0
 8005894:	2b00      	cmp	r3, #0
 8005896:	d001      	beq.n	800589c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8005898:	f000 f86b 	bl	8005972 <Error_Handler>
  }
}
 800589c:	bf00      	nop
 800589e:	3768      	adds	r7, #104	; 0x68
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}
 80058a4:	58000400 	.word	0x58000400

080058a8 <MX_SUBGHZ_Init>:
  * @brief SUBGHZ Initialization Function
  * @param None
  * @retval None
  */
void MX_SUBGHZ_Init(void)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_8;
 80058ac:	4b06      	ldr	r3, [pc, #24]	; (80058c8 <MX_SUBGHZ_Init+0x20>)
 80058ae:	2210      	movs	r2, #16
 80058b0:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80058b2:	4805      	ldr	r0, [pc, #20]	; (80058c8 <MX_SUBGHZ_Init+0x20>)
 80058b4:	f002 fc40 	bl	8008138 <HAL_SUBGHZ_Init>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d001      	beq.n	80058c2 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 80058be:	f000 f858 	bl	8005972 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80058c2:	bf00      	nop
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	200003d0 	.word	0x200003d0

080058cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80058d0:	4b22      	ldr	r3, [pc, #136]	; (800595c <MX_USART1_UART_Init+0x90>)
 80058d2:	4a23      	ldr	r2, [pc, #140]	; (8005960 <MX_USART1_UART_Init+0x94>)
 80058d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80058d6:	4b21      	ldr	r3, [pc, #132]	; (800595c <MX_USART1_UART_Init+0x90>)
 80058d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80058dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80058de:	4b1f      	ldr	r3, [pc, #124]	; (800595c <MX_USART1_UART_Init+0x90>)
 80058e0:	2200      	movs	r2, #0
 80058e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80058e4:	4b1d      	ldr	r3, [pc, #116]	; (800595c <MX_USART1_UART_Init+0x90>)
 80058e6:	2200      	movs	r2, #0
 80058e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80058ea:	4b1c      	ldr	r3, [pc, #112]	; (800595c <MX_USART1_UART_Init+0x90>)
 80058ec:	2200      	movs	r2, #0
 80058ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80058f0:	4b1a      	ldr	r3, [pc, #104]	; (800595c <MX_USART1_UART_Init+0x90>)
 80058f2:	220c      	movs	r2, #12
 80058f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80058f6:	4b19      	ldr	r3, [pc, #100]	; (800595c <MX_USART1_UART_Init+0x90>)
 80058f8:	2200      	movs	r2, #0
 80058fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80058fc:	4b17      	ldr	r3, [pc, #92]	; (800595c <MX_USART1_UART_Init+0x90>)
 80058fe:	2200      	movs	r2, #0
 8005900:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005902:	4b16      	ldr	r3, [pc, #88]	; (800595c <MX_USART1_UART_Init+0x90>)
 8005904:	2200      	movs	r2, #0
 8005906:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005908:	4b14      	ldr	r3, [pc, #80]	; (800595c <MX_USART1_UART_Init+0x90>)
 800590a:	2200      	movs	r2, #0
 800590c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800590e:	4b13      	ldr	r3, [pc, #76]	; (800595c <MX_USART1_UART_Init+0x90>)
 8005910:	2200      	movs	r2, #0
 8005912:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005914:	4811      	ldr	r0, [pc, #68]	; (800595c <MX_USART1_UART_Init+0x90>)
 8005916:	f002 ffcc 	bl	80088b2 <HAL_UART_Init>
 800591a:	4603      	mov	r3, r0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d001      	beq.n	8005924 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8005920:	f000 f827 	bl	8005972 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005924:	2100      	movs	r1, #0
 8005926:	480d      	ldr	r0, [pc, #52]	; (800595c <MX_USART1_UART_Init+0x90>)
 8005928:	f003 feba 	bl	80096a0 <HAL_UARTEx_SetTxFifoThreshold>
 800592c:	4603      	mov	r3, r0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d001      	beq.n	8005936 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8005932:	f000 f81e 	bl	8005972 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005936:	2100      	movs	r1, #0
 8005938:	4808      	ldr	r0, [pc, #32]	; (800595c <MX_USART1_UART_Init+0x90>)
 800593a:	f003 feef 	bl	800971c <HAL_UARTEx_SetRxFifoThreshold>
 800593e:	4603      	mov	r3, r0
 8005940:	2b00      	cmp	r3, #0
 8005942:	d001      	beq.n	8005948 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8005944:	f000 f815 	bl	8005972 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8005948:	4804      	ldr	r0, [pc, #16]	; (800595c <MX_USART1_UART_Init+0x90>)
 800594a:	f003 fe71 	bl	8009630 <HAL_UARTEx_DisableFifoMode>
 800594e:	4603      	mov	r3, r0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d001      	beq.n	8005958 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8005954:	f000 f80d 	bl	8005972 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005958:	bf00      	nop
 800595a:	bd80      	pop	{r7, pc}
 800595c:	200003dc 	.word	0x200003dc
 8005960:	40013800 	.word	0x40013800

08005964 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005968:	2002      	movs	r0, #2
 800596a:	f7ff ff20 	bl	80057ae <LL_AHB2_GRP1_EnableClock>

}
 800596e:	bf00      	nop
 8005970:	bd80      	pop	{r7, pc}

08005972 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005972:	b480      	push	{r7}
 8005974:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005976:	b672      	cpsid	i
}
 8005978:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800597a:	e7fe      	b.n	800597a <Error_Handler+0x8>

0800597c <LL_AHB2_GRP1_EnableClock>:
{
 800597c:	b480      	push	{r7}
 800597e:	b085      	sub	sp, #20
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005984:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005988:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800598a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4313      	orrs	r3, r2
 8005992:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005994:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005998:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4013      	ands	r3, r2
 800599e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80059a0:	68fb      	ldr	r3, [r7, #12]
}
 80059a2:	bf00      	nop
 80059a4:	3714      	adds	r7, #20
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bc80      	pop	{r7}
 80059aa:	4770      	bx	lr

080059ac <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b085      	sub	sp, #20
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80059b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059b8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80059ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80059c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059c8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4013      	ands	r3, r2
 80059ce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80059d0:	68fb      	ldr	r3, [r7, #12]
}
 80059d2:	bf00      	nop
 80059d4:	3714      	adds	r7, #20
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bc80      	pop	{r7}
 80059da:	4770      	bx	lr

080059dc <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 80059dc:	b480      	push	{r7}
 80059de:	b085      	sub	sp, #20
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 80059e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059e8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80059ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80059f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059f8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4013      	ands	r3, r2
 80059fe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005a00:	68fb      	ldr	r3, [r7, #12]
}
 8005a02:	bf00      	nop
 8005a04:	3714      	adds	r7, #20
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bc80      	pop	{r7}
 8005a0a:	4770      	bx	lr

08005a0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005a10:	bf00      	nop
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bc80      	pop	{r7}
 8005a16:	4770      	bx	lr

08005a18 <HAL_SUBGHZ_MspInit>:
* This function configures the hardware resources used in this example
* @param hsubghz: SUBGHZ handle pointer
* @retval None
*/
void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* hsubghz)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b082      	sub	sp, #8
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8005a20:	2001      	movs	r0, #1
 8005a22:	f7ff ffdb 	bl	80059dc <LL_APB3_GRP1_EnableClock>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */

}
 8005a26:	bf00      	nop
 8005a28:	3708      	adds	r7, #8
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
	...

08005a30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b096      	sub	sp, #88	; 0x58
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a38:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	601a      	str	r2, [r3, #0]
 8005a40:	605a      	str	r2, [r3, #4]
 8005a42:	609a      	str	r2, [r3, #8]
 8005a44:	60da      	str	r2, [r3, #12]
 8005a46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005a48:	f107 030c 	add.w	r3, r7, #12
 8005a4c:	2238      	movs	r2, #56	; 0x38
 8005a4e:	2100      	movs	r1, #0
 8005a50:	4618      	mov	r0, r3
 8005a52:	f007 fb83 	bl	800d15c <memset>
  if(huart->Instance==USART1)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a16      	ldr	r2, [pc, #88]	; (8005ab4 <HAL_UART_MspInit+0x84>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d125      	bne.n	8005aac <HAL_UART_MspInit+0x7c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005a60:	2301      	movs	r3, #1
 8005a62:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005a64:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8005a68:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005a6a:	f107 030c 	add.w	r3, r7, #12
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f002 f9ae 	bl	8007dd0 <HAL_RCCEx_PeriphCLKConfig>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d001      	beq.n	8005a7e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8005a7a:	f7ff ff7a 	bl	8005972 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005a7e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005a82:	f7ff ff93 	bl	80059ac <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a86:	2002      	movs	r0, #2
 8005a88:	f7ff ff78 	bl	800597c <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8005a8c:	23c0      	movs	r3, #192	; 0xc0
 8005a8e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a90:	2302      	movs	r3, #2
 8005a92:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a94:	2300      	movs	r3, #0
 8005a96:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005a9c:	2307      	movs	r3, #7
 8005a9e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005aa0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	4804      	ldr	r0, [pc, #16]	; (8005ab8 <HAL_UART_MspInit+0x88>)
 8005aa8:	f000 fda0 	bl	80065ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005aac:	bf00      	nop
 8005aae:	3758      	adds	r7, #88	; 0x58
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}
 8005ab4:	40013800 	.word	0x40013800
 8005ab8:	48000400 	.word	0x48000400

08005abc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005abc:	b480      	push	{r7}
 8005abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005ac0:	e7fe      	b.n	8005ac0 <NMI_Handler+0x4>

08005ac2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005ac2:	b480      	push	{r7}
 8005ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005ac6:	e7fe      	b.n	8005ac6 <HardFault_Handler+0x4>

08005ac8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005acc:	e7fe      	b.n	8005acc <MemManage_Handler+0x4>

08005ace <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005ace:	b480      	push	{r7}
 8005ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005ad2:	e7fe      	b.n	8005ad2 <BusFault_Handler+0x4>

08005ad4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005ad8:	e7fe      	b.n	8005ad8 <UsageFault_Handler+0x4>

08005ada <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005ada:	b480      	push	{r7}
 8005adc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005ade:	bf00      	nop
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bc80      	pop	{r7}
 8005ae4:	4770      	bx	lr

08005ae6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005ae6:	b480      	push	{r7}
 8005ae8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005aea:	bf00      	nop
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bc80      	pop	{r7}
 8005af0:	4770      	bx	lr

08005af2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005af2:	b480      	push	{r7}
 8005af4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005af6:	bf00      	nop
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bc80      	pop	{r7}
 8005afc:	4770      	bx	lr

08005afe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005afe:	b580      	push	{r7, lr}
 8005b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005b02:	f000 fb11 	bl	8006128 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005b06:	bf00      	nop
 8005b08:	bd80      	pop	{r7, pc}

08005b0a <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8005b0a:	b480      	push	{r7}
 8005b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

}
 8005b0e:	bf00      	nop
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bc80      	pop	{r7}
 8005b14:	4770      	bx	lr

08005b16 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8005b16:	b580      	push	{r7, lr}
 8005b18:	b082      	sub	sp, #8
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4618      	mov	r0, r3
 8005b22:	f000 f93a 	bl	8005d9a <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8005b26:	bf00      	nop
 8005b28:	3708      	adds	r7, #8
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}

08005b2e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005b2e:	b480      	push	{r7}
 8005b30:	af00      	add	r7, sp, #0
	return 1;
 8005b32:	2301      	movs	r3, #1
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bc80      	pop	{r7}
 8005b3a:	4770      	bx	lr

08005b3c <_kill>:

int _kill(int pid, int sig)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b082      	sub	sp, #8
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005b46:	f007 fac1 	bl	800d0cc <__errno>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2216      	movs	r2, #22
 8005b4e:	601a      	str	r2, [r3, #0]
	return -1;
 8005b50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3708      	adds	r7, #8
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <_exit>:

void _exit (int status)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b082      	sub	sp, #8
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005b64:	f04f 31ff 	mov.w	r1, #4294967295
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f7ff ffe7 	bl	8005b3c <_kill>
	while (1) {}		/* Make sure we hang here */
 8005b6e:	e7fe      	b.n	8005b6e <_exit+0x12>

08005b70 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b086      	sub	sp, #24
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	60b9      	str	r1, [r7, #8]
 8005b7a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	617b      	str	r3, [r7, #20]
 8005b80:	e00a      	b.n	8005b98 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005b82:	f3af 8000 	nop.w
 8005b86:	4601      	mov	r1, r0
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	1c5a      	adds	r2, r3, #1
 8005b8c:	60ba      	str	r2, [r7, #8]
 8005b8e:	b2ca      	uxtb	r2, r1
 8005b90:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	3301      	adds	r3, #1
 8005b96:	617b      	str	r3, [r7, #20]
 8005b98:	697a      	ldr	r2, [r7, #20]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	dbf0      	blt.n	8005b82 <_read+0x12>
	}

return len;
 8005ba0:	687b      	ldr	r3, [r7, #4]
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3718      	adds	r7, #24
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}

08005baa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005baa:	b580      	push	{r7, lr}
 8005bac:	b086      	sub	sp, #24
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	60f8      	str	r0, [r7, #12]
 8005bb2:	60b9      	str	r1, [r7, #8]
 8005bb4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	617b      	str	r3, [r7, #20]
 8005bba:	e009      	b.n	8005bd0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	1c5a      	adds	r2, r3, #1
 8005bc0:	60ba      	str	r2, [r7, #8]
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	3301      	adds	r3, #1
 8005bce:	617b      	str	r3, [r7, #20]
 8005bd0:	697a      	ldr	r2, [r7, #20]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	dbf1      	blt.n	8005bbc <_write+0x12>
	}
	return len;
 8005bd8:	687b      	ldr	r3, [r7, #4]
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3718      	adds	r7, #24
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}

08005be2 <_close>:

int _close(int file)
{
 8005be2:	b480      	push	{r7}
 8005be4:	b083      	sub	sp, #12
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
	return -1;
 8005bea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	370c      	adds	r7, #12
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bc80      	pop	{r7}
 8005bf6:	4770      	bx	lr

08005bf8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005c08:	605a      	str	r2, [r3, #4]
	return 0;
 8005c0a:	2300      	movs	r3, #0
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	370c      	adds	r7, #12
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bc80      	pop	{r7}
 8005c14:	4770      	bx	lr

08005c16 <_isatty>:

int _isatty(int file)
{
 8005c16:	b480      	push	{r7}
 8005c18:	b083      	sub	sp, #12
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
	return 1;
 8005c1e:	2301      	movs	r3, #1
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bc80      	pop	{r7}
 8005c28:	4770      	bx	lr

08005c2a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005c2a:	b480      	push	{r7}
 8005c2c:	b085      	sub	sp, #20
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	60f8      	str	r0, [r7, #12]
 8005c32:	60b9      	str	r1, [r7, #8]
 8005c34:	607a      	str	r2, [r7, #4]
	return 0;
 8005c36:	2300      	movs	r3, #0
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3714      	adds	r7, #20
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bc80      	pop	{r7}
 8005c40:	4770      	bx	lr
	...

08005c44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b086      	sub	sp, #24
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005c4c:	4a14      	ldr	r2, [pc, #80]	; (8005ca0 <_sbrk+0x5c>)
 8005c4e:	4b15      	ldr	r3, [pc, #84]	; (8005ca4 <_sbrk+0x60>)
 8005c50:	1ad3      	subs	r3, r2, r3
 8005c52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005c58:	4b13      	ldr	r3, [pc, #76]	; (8005ca8 <_sbrk+0x64>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d102      	bne.n	8005c66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005c60:	4b11      	ldr	r3, [pc, #68]	; (8005ca8 <_sbrk+0x64>)
 8005c62:	4a12      	ldr	r2, [pc, #72]	; (8005cac <_sbrk+0x68>)
 8005c64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005c66:	4b10      	ldr	r3, [pc, #64]	; (8005ca8 <_sbrk+0x64>)
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	693a      	ldr	r2, [r7, #16]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d207      	bcs.n	8005c84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005c74:	f007 fa2a 	bl	800d0cc <__errno>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	220c      	movs	r2, #12
 8005c7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c82:	e009      	b.n	8005c98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005c84:	4b08      	ldr	r3, [pc, #32]	; (8005ca8 <_sbrk+0x64>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005c8a:	4b07      	ldr	r3, [pc, #28]	; (8005ca8 <_sbrk+0x64>)
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4413      	add	r3, r2
 8005c92:	4a05      	ldr	r2, [pc, #20]	; (8005ca8 <_sbrk+0x64>)
 8005c94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005c96:	68fb      	ldr	r3, [r7, #12]
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3718      	adds	r7, #24
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}
 8005ca0:	20010000 	.word	0x20010000
 8005ca4:	00000400 	.word	0x00000400
 8005ca8:	2000046c 	.word	0x2000046c
 8005cac:	20000668 	.word	0x20000668

08005cb0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8005cb4:	bf00      	nop
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bc80      	pop	{r7}
 8005cba:	4770      	bx	lr

08005cbc <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  return ret;
 8005cc6:	79fb      	ldrb	r3, [r7, #7]
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	370c      	adds	r7, #12
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bc80      	pop	{r7}
 8005cd0:	4770      	bx	lr

08005cd2 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8005cd2:	b480      	push	{r7}
 8005cd4:	b085      	sub	sp, #20
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  return ret;
 8005cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3714      	adds	r7, #20
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bc80      	pop	{r7}
 8005ce8:	4770      	bx	lr

08005cea <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8005cea:	b480      	push	{r7}
 8005cec:	b083      	sub	sp, #12
 8005cee:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  return ret;
 8005cf4:	79fb      	ldrb	r3, [r7, #7]
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	370c      	adds	r7, #12
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bc80      	pop	{r7}
 8005cfe:	4770      	bx	lr

08005d00 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8005d00:	b480      	push	{r7}
 8005d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_SetTimerContext */

  /* USER CODE END TIMER_IF_SetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 8005d04:	4b02      	ldr	r3, [pc, #8]	; (8005d10 <TIMER_IF_SetTimerContext+0x10>)
 8005d06:	681b      	ldr	r3, [r3, #0]
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bc80      	pop	{r7}
 8005d0e:	4770      	bx	lr
 8005d10:	20000470 	.word	0x20000470

08005d14 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8005d14:	b480      	push	{r7}
 8005d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_GetTimerContext */

  /* USER CODE END TIMER_IF_GetTimerContext */

  /*return time context*/
  return RtcTimerContext;
 8005d18:	4b02      	ldr	r3, [pc, #8]	; (8005d24 <TIMER_IF_GetTimerContext+0x10>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bc80      	pop	{r7}
 8005d22:	4770      	bx	lr
 8005d24:	20000470 	.word	0x20000470

08005d28 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  return ret;
 8005d32:	687b      	ldr	r3, [r7, #4]
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	370c      	adds	r7, #12
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bc80      	pop	{r7}
 8005d3c:	4770      	bx	lr

08005d3e <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8005d3e:	b480      	push	{r7}
 8005d40:	b083      	sub	sp, #12
 8005d42:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8005d44:	2300      	movs	r3, #0
 8005d46:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  return ret;
 8005d48:	687b      	ldr	r3, [r7, #4]
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	370c      	adds	r7, #12
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bc80      	pop	{r7}
 8005d52:	4770      	bx	lr

08005d54 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  return ret;
 8005d5e:	687b      	ldr	r3, [r7, #4]
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	370c      	adds	r7, #12
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bc80      	pop	{r7}
 8005d68:	4770      	bx	lr

08005d6a <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8005d6a:	b480      	push	{r7}
 8005d6c:	b085      	sub	sp, #20
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8005d72:	2300      	movs	r3, #0
 8005d74:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  return ret;
 8005d76:	68fb      	ldr	r3, [r7, #12]
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3714      	adds	r7, #20
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bc80      	pop	{r7}
 8005d80:	4770      	bx	lr

08005d82 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8005d82:	b480      	push	{r7}
 8005d84:	b085      	sub	sp, #20
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  return ret;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3714      	adds	r7, #20
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bc80      	pop	{r7}
 8005d98:	4770      	bx	lr

08005d9a <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8005d9a:	b480      	push	{r7}
 8005d9c:	b083      	sub	sp, #12
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
}
 8005da2:	bf00      	nop
 8005da4:	370c      	adds	r7, #12
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bc80      	pop	{r7}
 8005daa:	4770      	bx	lr

08005dac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005dac:	480d      	ldr	r0, [pc, #52]	; (8005de4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005dae:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005db0:	f7ff ff7e 	bl	8005cb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005db4:	480c      	ldr	r0, [pc, #48]	; (8005de8 <LoopForever+0x6>)
  ldr r1, =_edata
 8005db6:	490d      	ldr	r1, [pc, #52]	; (8005dec <LoopForever+0xa>)
  ldr r2, =_sidata
 8005db8:	4a0d      	ldr	r2, [pc, #52]	; (8005df0 <LoopForever+0xe>)
  movs r3, #0
 8005dba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005dbc:	e002      	b.n	8005dc4 <LoopCopyDataInit>

08005dbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005dbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005dc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005dc2:	3304      	adds	r3, #4

08005dc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005dc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005dc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005dc8:	d3f9      	bcc.n	8005dbe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005dca:	4a0a      	ldr	r2, [pc, #40]	; (8005df4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005dcc:	4c0a      	ldr	r4, [pc, #40]	; (8005df8 <LoopForever+0x16>)
  movs r3, #0
 8005dce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005dd0:	e001      	b.n	8005dd6 <LoopFillZerobss>

08005dd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005dd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005dd4:	3204      	adds	r2, #4

08005dd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005dd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005dd8:	d3fb      	bcc.n	8005dd2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8005dda:	f007 f97d 	bl	800d0d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005dde:	f7ff fcfe 	bl	80057de <main>

08005de2 <LoopForever>:

LoopForever:
    b LoopForever
 8005de2:	e7fe      	b.n	8005de2 <LoopForever>
  ldr   r0, =_estack
 8005de4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8005de8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005dec:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8005df0:	08010f34 	.word	0x08010f34
  ldr r2, =_sbss
 8005df4:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8005df8:	20000664 	.word	0x20000664

08005dfc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005dfc:	e7fe      	b.n	8005dfc <ADC_IRQHandler>

08005dfe <LL_AHB1_GRP1_ForceReset>:
{
 8005dfe:	b480      	push	{r7}
 8005e00:	b083      	sub	sp, #12
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1RSTR, Periphs);
 8005e06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	628b      	str	r3, [r1, #40]	; 0x28
}
 8005e16:	bf00      	nop
 8005e18:	370c      	adds	r7, #12
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bc80      	pop	{r7}
 8005e1e:	4770      	bx	lr

08005e20 <LL_AHB1_GRP1_ReleaseReset>:
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->AHB1RSTR, Periphs);
 8005e28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	43db      	mvns	r3, r3
 8005e32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e36:	4013      	ands	r3, r2
 8005e38:	628b      	str	r3, [r1, #40]	; 0x28
}
 8005e3a:	bf00      	nop
 8005e3c:	370c      	adds	r7, #12
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bc80      	pop	{r7}
 8005e42:	4770      	bx	lr

08005e44 <LL_AHB2_GRP1_ForceReset>:
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2RSTR, Periphs);
 8005e4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8005e5c:	bf00      	nop
 8005e5e:	370c      	adds	r7, #12
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bc80      	pop	{r7}
 8005e64:	4770      	bx	lr

08005e66 <LL_AHB2_GRP1_ReleaseReset>:
{
 8005e66:	b480      	push	{r7}
 8005e68:	b083      	sub	sp, #12
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->AHB2RSTR, Periphs);
 8005e6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	43db      	mvns	r3, r3
 8005e78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e7c:	4013      	ands	r3, r2
 8005e7e:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8005e80:	bf00      	nop
 8005e82:	370c      	adds	r7, #12
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bc80      	pop	{r7}
 8005e88:	4770      	bx	lr

08005e8a <LL_AHB3_GRP1_ForceReset>:
{
 8005e8a:	b480      	push	{r7}
 8005e8c:	b083      	sub	sp, #12
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3RSTR, Periphs);
 8005e92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	630b      	str	r3, [r1, #48]	; 0x30
}
 8005ea2:	bf00      	nop
 8005ea4:	370c      	adds	r7, #12
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bc80      	pop	{r7}
 8005eaa:	4770      	bx	lr

08005eac <LL_AHB3_GRP1_ReleaseReset>:
{
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->AHB3RSTR, Periphs);
 8005eb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005eb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	43db      	mvns	r3, r3
 8005ebe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	630b      	str	r3, [r1, #48]	; 0x30
}
 8005ec6:	bf00      	nop
 8005ec8:	370c      	adds	r7, #12
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bc80      	pop	{r7}
 8005ece:	4770      	bx	lr

08005ed0 <LL_APB1_GRP1_ForceReset>:
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8005ed8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005edc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ede:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	638b      	str	r3, [r1, #56]	; 0x38
}
 8005ee8:	bf00      	nop
 8005eea:	370c      	adds	r7, #12
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bc80      	pop	{r7}
 8005ef0:	4770      	bx	lr

08005ef2 <LL_APB1_GRP2_ForceReset>:
{
 8005ef2:	b480      	push	{r7}
 8005ef4:	b083      	sub	sp, #12
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR2, Periphs);
 8005efa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005efe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f00:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 8005f0a:	bf00      	nop
 8005f0c:	370c      	adds	r7, #12
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bc80      	pop	{r7}
 8005f12:	4770      	bx	lr

08005f14 <LL_APB1_GRP1_ReleaseReset>:
{
 8005f14:	b480      	push	{r7}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8005f1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	43db      	mvns	r3, r3
 8005f26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f2a:	4013      	ands	r3, r2
 8005f2c:	638b      	str	r3, [r1, #56]	; 0x38
}
 8005f2e:	bf00      	nop
 8005f30:	370c      	adds	r7, #12
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bc80      	pop	{r7}
 8005f36:	4770      	bx	lr

08005f38 <LL_APB1_GRP2_ReleaseReset>:
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR2, Periphs);
 8005f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	43db      	mvns	r3, r3
 8005f4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f4e:	4013      	ands	r3, r2
 8005f50:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 8005f52:	bf00      	nop
 8005f54:	370c      	adds	r7, #12
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bc80      	pop	{r7}
 8005f5a:	4770      	bx	lr

08005f5c <LL_APB2_GRP1_ForceReset>:
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 8005f64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	640b      	str	r3, [r1, #64]	; 0x40
}
 8005f74:	bf00      	nop
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bc80      	pop	{r7}
 8005f7c:	4770      	bx	lr

08005f7e <LL_APB2_GRP1_ReleaseReset>:
{
 8005f7e:	b480      	push	{r7}
 8005f80:	b083      	sub	sp, #12
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 8005f86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	43db      	mvns	r3, r3
 8005f90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f94:	4013      	ands	r3, r2
 8005f96:	640b      	str	r3, [r1, #64]	; 0x40
}
 8005f98:	bf00      	nop
 8005f9a:	370c      	adds	r7, #12
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bc80      	pop	{r7}
 8005fa0:	4770      	bx	lr

08005fa2 <LL_APB3_GRP1_ForceReset>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_ForceReset(uint32_t Periphs)
{
 8005fa2:	b480      	push	{r7}
 8005fa4:	b083      	sub	sp, #12
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB3RSTR, Periphs);
 8005faa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fb0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	644b      	str	r3, [r1, #68]	; 0x44
}
 8005fba:	bf00      	nop
 8005fbc:	370c      	adds	r7, #12
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bc80      	pop	{r7}
 8005fc2:	4770      	bx	lr

08005fc4 <LL_APB3_GRP1_ReleaseReset>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_ReleaseReset(uint32_t Periphs)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB3RSTR, Periphs);
 8005fcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	43db      	mvns	r3, r3
 8005fd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fda:	4013      	ands	r3, r2
 8005fdc:	644b      	str	r3, [r1, #68]	; 0x44
}
 8005fde:	bf00      	nop
 8005fe0:	370c      	adds	r7, #12
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bc80      	pop	{r7}
 8005fe6:	4770      	bx	lr

08005fe8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b082      	sub	sp, #8
 8005fec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005ff2:	2003      	movs	r0, #3
 8005ff4:	f000 f982 	bl	80062fc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005ff8:	f001 fd0c 	bl	8007a14 <HAL_RCC_GetHCLKFreq>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	4a09      	ldr	r2, [pc, #36]	; (8006024 <HAL_Init+0x3c>)
 8006000:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006002:	200f      	movs	r0, #15
 8006004:	f000 f856 	bl	80060b4 <HAL_InitTick>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d002      	beq.n	8006014 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	71fb      	strb	r3, [r7, #7]
 8006012:	e001      	b.n	8006018 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006014:	f7ff fcfa 	bl	8005a0c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006018:	79fb      	ldrb	r3, [r7, #7]
}
 800601a:	4618      	mov	r0, r3
 800601c:	3708      	adds	r7, #8
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
 8006022:	bf00      	nop
 8006024:	20000000 	.word	0x20000000

08006028 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the source of time base.
  * @note   This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 800602c:	f04f 30ff 	mov.w	r0, #4294967295
 8006030:	f7ff ff4e 	bl	8005ed0 <LL_APB1_GRP1_ForceReset>
 8006034:	f04f 30ff 	mov.w	r0, #4294967295
 8006038:	f7ff ff5b 	bl	8005ef2 <LL_APB1_GRP2_ForceReset>
  __HAL_RCC_APB1_RELEASE_RESET();
 800603c:	f04f 30ff 	mov.w	r0, #4294967295
 8006040:	f7ff ff68 	bl	8005f14 <LL_APB1_GRP1_ReleaseReset>
 8006044:	f04f 30ff 	mov.w	r0, #4294967295
 8006048:	f7ff ff76 	bl	8005f38 <LL_APB1_GRP2_ReleaseReset>

  __HAL_RCC_APB2_FORCE_RESET();
 800604c:	f04f 30ff 	mov.w	r0, #4294967295
 8006050:	f7ff ff84 	bl	8005f5c <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_APB2_RELEASE_RESET();
 8006054:	f04f 30ff 	mov.w	r0, #4294967295
 8006058:	f7ff ff91 	bl	8005f7e <LL_APB2_GRP1_ReleaseReset>

  __HAL_RCC_APB3_FORCE_RESET();
 800605c:	f04f 30ff 	mov.w	r0, #4294967295
 8006060:	f7ff ff9f 	bl	8005fa2 <LL_APB3_GRP1_ForceReset>
  __HAL_RCC_APB3_RELEASE_RESET();
 8006064:	f04f 30ff 	mov.w	r0, #4294967295
 8006068:	f7ff ffac 	bl	8005fc4 <LL_APB3_GRP1_ReleaseReset>

  __HAL_RCC_AHB1_FORCE_RESET();
 800606c:	f04f 30ff 	mov.w	r0, #4294967295
 8006070:	f7ff fec5 	bl	8005dfe <LL_AHB1_GRP1_ForceReset>
  __HAL_RCC_AHB1_RELEASE_RESET();
 8006074:	f04f 30ff 	mov.w	r0, #4294967295
 8006078:	f7ff fed2 	bl	8005e20 <LL_AHB1_GRP1_ReleaseReset>

  __HAL_RCC_AHB2_FORCE_RESET();
 800607c:	f04f 30ff 	mov.w	r0, #4294967295
 8006080:	f7ff fee0 	bl	8005e44 <LL_AHB2_GRP1_ForceReset>
  __HAL_RCC_AHB2_RELEASE_RESET();
 8006084:	f04f 30ff 	mov.w	r0, #4294967295
 8006088:	f7ff feed 	bl	8005e66 <LL_AHB2_GRP1_ReleaseReset>

  __HAL_RCC_AHB3_FORCE_RESET();
 800608c:	f04f 30ff 	mov.w	r0, #4294967295
 8006090:	f7ff fefb 	bl	8005e8a <LL_AHB3_GRP1_ForceReset>
  __HAL_RCC_AHB3_RELEASE_RESET();
 8006094:	f04f 30ff 	mov.w	r0, #4294967295
 8006098:	f7ff ff08 	bl	8005eac <LL_AHB3_GRP1_ReleaseReset>

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 800609c:	f000 f803 	bl	80060a6 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	bd80      	pop	{r7, pc}

080060a6 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 80060a6:	b480      	push	{r7}
 80060a8:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 80060aa:	bf00      	nop
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bc80      	pop	{r7}
 80060b0:	4770      	bx	lr
	...

080060b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b084      	sub	sp, #16
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80060bc:	2300      	movs	r3, #0
 80060be:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80060c0:	4b17      	ldr	r3, [pc, #92]	; (8006120 <HAL_InitTick+0x6c>)
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d024      	beq.n	8006112 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80060c8:	f001 fca4 	bl	8007a14 <HAL_RCC_GetHCLKFreq>
 80060cc:	4602      	mov	r2, r0
 80060ce:	4b14      	ldr	r3, [pc, #80]	; (8006120 <HAL_InitTick+0x6c>)
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	4619      	mov	r1, r3
 80060d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80060d8:	fbb3 f3f1 	udiv	r3, r3, r1
 80060dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80060e0:	4618      	mov	r0, r3
 80060e2:	f000 f930 	bl	8006346 <HAL_SYSTICK_Config>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d10f      	bne.n	800610c <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2b0f      	cmp	r3, #15
 80060f0:	d809      	bhi.n	8006106 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80060f2:	2200      	movs	r2, #0
 80060f4:	6879      	ldr	r1, [r7, #4]
 80060f6:	f04f 30ff 	mov.w	r0, #4294967295
 80060fa:	f000 f90a 	bl	8006312 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80060fe:	4a09      	ldr	r2, [pc, #36]	; (8006124 <HAL_InitTick+0x70>)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6013      	str	r3, [r2, #0]
 8006104:	e007      	b.n	8006116 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	73fb      	strb	r3, [r7, #15]
 800610a:	e004      	b.n	8006116 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	73fb      	strb	r3, [r7, #15]
 8006110:	e001      	b.n	8006116 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8006116:	7bfb      	ldrb	r3, [r7, #15]
}
 8006118:	4618      	mov	r0, r3
 800611a:	3710      	adds	r7, #16
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}
 8006120:	20000008 	.word	0x20000008
 8006124:	20000004 	.word	0x20000004

08006128 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006128:	b480      	push	{r7}
 800612a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800612c:	4b05      	ldr	r3, [pc, #20]	; (8006144 <HAL_IncTick+0x1c>)
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	461a      	mov	r2, r3
 8006132:	4b05      	ldr	r3, [pc, #20]	; (8006148 <HAL_IncTick+0x20>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4413      	add	r3, r2
 8006138:	4a03      	ldr	r2, [pc, #12]	; (8006148 <HAL_IncTick+0x20>)
 800613a:	6013      	str	r3, [r2, #0]
}
 800613c:	bf00      	nop
 800613e:	46bd      	mov	sp, r7
 8006140:	bc80      	pop	{r7}
 8006142:	4770      	bx	lr
 8006144:	20000008 	.word	0x20000008
 8006148:	20000474 	.word	0x20000474

0800614c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800614c:	b480      	push	{r7}
 800614e:	af00      	add	r7, sp, #0
  return uwTick;
 8006150:	4b02      	ldr	r3, [pc, #8]	; (800615c <HAL_GetTick+0x10>)
 8006152:	681b      	ldr	r3, [r3, #0]
}
 8006154:	4618      	mov	r0, r3
 8006156:	46bd      	mov	sp, r7
 8006158:	bc80      	pop	{r7}
 800615a:	4770      	bx	lr
 800615c:	20000474 	.word	0x20000474

08006160 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8006160:	b480      	push	{r7}
 8006162:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8006164:	4b02      	ldr	r3, [pc, #8]	; (8006170 <HAL_GetUIDw0+0x10>)
 8006166:	681b      	ldr	r3, [r3, #0]
}
 8006168:	4618      	mov	r0, r3
 800616a:	46bd      	mov	sp, r7
 800616c:	bc80      	pop	{r7}
 800616e:	4770      	bx	lr
 8006170:	1fff7590 	.word	0x1fff7590

08006174 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8006174:	b480      	push	{r7}
 8006176:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8006178:	4b02      	ldr	r3, [pc, #8]	; (8006184 <HAL_GetUIDw1+0x10>)
 800617a:	681b      	ldr	r3, [r3, #0]
}
 800617c:	4618      	mov	r0, r3
 800617e:	46bd      	mov	sp, r7
 8006180:	bc80      	pop	{r7}
 8006182:	4770      	bx	lr
 8006184:	1fff7594 	.word	0x1fff7594

08006188 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8006188:	b480      	push	{r7}
 800618a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 800618c:	4b02      	ldr	r3, [pc, #8]	; (8006198 <HAL_GetUIDw2+0x10>)
 800618e:	681b      	ldr	r3, [r3, #0]
}
 8006190:	4618      	mov	r0, r3
 8006192:	46bd      	mov	sp, r7
 8006194:	bc80      	pop	{r7}
 8006196:	4770      	bx	lr
 8006198:	1fff7598 	.word	0x1fff7598

0800619c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800619c:	b480      	push	{r7}
 800619e:	b085      	sub	sp, #20
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f003 0307 	and.w	r3, r3, #7
 80061aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80061ac:	4b0c      	ldr	r3, [pc, #48]	; (80061e0 <__NVIC_SetPriorityGrouping+0x44>)
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80061b2:	68ba      	ldr	r2, [r7, #8]
 80061b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80061b8:	4013      	ands	r3, r2
 80061ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80061c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80061c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80061ce:	4a04      	ldr	r2, [pc, #16]	; (80061e0 <__NVIC_SetPriorityGrouping+0x44>)
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	60d3      	str	r3, [r2, #12]
}
 80061d4:	bf00      	nop
 80061d6:	3714      	adds	r7, #20
 80061d8:	46bd      	mov	sp, r7
 80061da:	bc80      	pop	{r7}
 80061dc:	4770      	bx	lr
 80061de:	bf00      	nop
 80061e0:	e000ed00 	.word	0xe000ed00

080061e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80061e4:	b480      	push	{r7}
 80061e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80061e8:	4b04      	ldr	r3, [pc, #16]	; (80061fc <__NVIC_GetPriorityGrouping+0x18>)
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	0a1b      	lsrs	r3, r3, #8
 80061ee:	f003 0307 	and.w	r3, r3, #7
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bc80      	pop	{r7}
 80061f8:	4770      	bx	lr
 80061fa:	bf00      	nop
 80061fc:	e000ed00 	.word	0xe000ed00

08006200 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	4603      	mov	r3, r0
 8006208:	6039      	str	r1, [r7, #0]
 800620a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800620c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006210:	2b00      	cmp	r3, #0
 8006212:	db0a      	blt.n	800622a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	b2da      	uxtb	r2, r3
 8006218:	490c      	ldr	r1, [pc, #48]	; (800624c <__NVIC_SetPriority+0x4c>)
 800621a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800621e:	0112      	lsls	r2, r2, #4
 8006220:	b2d2      	uxtb	r2, r2
 8006222:	440b      	add	r3, r1
 8006224:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006228:	e00a      	b.n	8006240 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	b2da      	uxtb	r2, r3
 800622e:	4908      	ldr	r1, [pc, #32]	; (8006250 <__NVIC_SetPriority+0x50>)
 8006230:	79fb      	ldrb	r3, [r7, #7]
 8006232:	f003 030f 	and.w	r3, r3, #15
 8006236:	3b04      	subs	r3, #4
 8006238:	0112      	lsls	r2, r2, #4
 800623a:	b2d2      	uxtb	r2, r2
 800623c:	440b      	add	r3, r1
 800623e:	761a      	strb	r2, [r3, #24]
}
 8006240:	bf00      	nop
 8006242:	370c      	adds	r7, #12
 8006244:	46bd      	mov	sp, r7
 8006246:	bc80      	pop	{r7}
 8006248:	4770      	bx	lr
 800624a:	bf00      	nop
 800624c:	e000e100 	.word	0xe000e100
 8006250:	e000ed00 	.word	0xe000ed00

08006254 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006254:	b480      	push	{r7}
 8006256:	b089      	sub	sp, #36	; 0x24
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f003 0307 	and.w	r3, r3, #7
 8006266:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	f1c3 0307 	rsb	r3, r3, #7
 800626e:	2b04      	cmp	r3, #4
 8006270:	bf28      	it	cs
 8006272:	2304      	movcs	r3, #4
 8006274:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	3304      	adds	r3, #4
 800627a:	2b06      	cmp	r3, #6
 800627c:	d902      	bls.n	8006284 <NVIC_EncodePriority+0x30>
 800627e:	69fb      	ldr	r3, [r7, #28]
 8006280:	3b03      	subs	r3, #3
 8006282:	e000      	b.n	8006286 <NVIC_EncodePriority+0x32>
 8006284:	2300      	movs	r3, #0
 8006286:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006288:	f04f 32ff 	mov.w	r2, #4294967295
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	fa02 f303 	lsl.w	r3, r2, r3
 8006292:	43da      	mvns	r2, r3
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	401a      	ands	r2, r3
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800629c:	f04f 31ff 	mov.w	r1, #4294967295
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	fa01 f303 	lsl.w	r3, r1, r3
 80062a6:	43d9      	mvns	r1, r3
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062ac:	4313      	orrs	r3, r2
         );
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3724      	adds	r7, #36	; 0x24
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bc80      	pop	{r7}
 80062b6:	4770      	bx	lr

080062b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b082      	sub	sp, #8
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	3b01      	subs	r3, #1
 80062c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80062c8:	d301      	bcc.n	80062ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80062ca:	2301      	movs	r3, #1
 80062cc:	e00f      	b.n	80062ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80062ce:	4a0a      	ldr	r2, [pc, #40]	; (80062f8 <SysTick_Config+0x40>)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	3b01      	subs	r3, #1
 80062d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80062d6:	210f      	movs	r1, #15
 80062d8:	f04f 30ff 	mov.w	r0, #4294967295
 80062dc:	f7ff ff90 	bl	8006200 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80062e0:	4b05      	ldr	r3, [pc, #20]	; (80062f8 <SysTick_Config+0x40>)
 80062e2:	2200      	movs	r2, #0
 80062e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80062e6:	4b04      	ldr	r3, [pc, #16]	; (80062f8 <SysTick_Config+0x40>)
 80062e8:	2207      	movs	r2, #7
 80062ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3708      	adds	r7, #8
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop
 80062f8:	e000e010 	.word	0xe000e010

080062fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b082      	sub	sp, #8
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f7ff ff49 	bl	800619c <__NVIC_SetPriorityGrouping>
}
 800630a:	bf00      	nop
 800630c:	3708      	adds	r7, #8
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}

08006312 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006312:	b580      	push	{r7, lr}
 8006314:	b086      	sub	sp, #24
 8006316:	af00      	add	r7, sp, #0
 8006318:	4603      	mov	r3, r0
 800631a:	60b9      	str	r1, [r7, #8]
 800631c:	607a      	str	r2, [r7, #4]
 800631e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006320:	f7ff ff60 	bl	80061e4 <__NVIC_GetPriorityGrouping>
 8006324:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	68b9      	ldr	r1, [r7, #8]
 800632a:	6978      	ldr	r0, [r7, #20]
 800632c:	f7ff ff92 	bl	8006254 <NVIC_EncodePriority>
 8006330:	4602      	mov	r2, r0
 8006332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006336:	4611      	mov	r1, r2
 8006338:	4618      	mov	r0, r3
 800633a:	f7ff ff61 	bl	8006200 <__NVIC_SetPriority>
}
 800633e:	bf00      	nop
 8006340:	3718      	adds	r7, #24
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}

08006346 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006346:	b580      	push	{r7, lr}
 8006348:	b082      	sub	sp, #8
 800634a:	af00      	add	r7, sp, #0
 800634c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f7ff ffb2 	bl	80062b8 <SysTick_Config>
 8006354:	4603      	mov	r3, r0
}
 8006356:	4618      	mov	r0, r3
 8006358:	3708      	adds	r7, #8
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
	...

08006360 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b086      	sub	sp, #24
 8006364:	af00      	add	r7, sp, #0
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800636e:	4b1c      	ldr	r3, [pc, #112]	; (80063e0 <HAL_FLASH_Program+0x80>)
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	2b01      	cmp	r3, #1
 8006374:	d101      	bne.n	800637a <HAL_FLASH_Program+0x1a>
 8006376:	2302      	movs	r3, #2
 8006378:	e02d      	b.n	80063d6 <HAL_FLASH_Program+0x76>
 800637a:	4b19      	ldr	r3, [pc, #100]	; (80063e0 <HAL_FLASH_Program+0x80>)
 800637c:	2201      	movs	r2, #1
 800637e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006380:	4b17      	ldr	r3, [pc, #92]	; (80063e0 <HAL_FLASH_Program+0x80>)
 8006382:	2200      	movs	r2, #0
 8006384:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006386:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800638a:	f000 f869 	bl	8006460 <FLASH_WaitForLastOperation>
 800638e:	4603      	mov	r3, r0
 8006390:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8006392:	7dfb      	ldrb	r3, [r7, #23]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d11a      	bne.n	80063ce <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2b01      	cmp	r3, #1
 800639c:	d105      	bne.n	80063aa <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800639e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063a2:	68b8      	ldr	r0, [r7, #8]
 80063a4:	f000 f8be 	bl	8006524 <FLASH_Program_DoubleWord>
 80063a8:	e004      	b.n	80063b4 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	4619      	mov	r1, r3
 80063ae:	68b8      	ldr	r0, [r7, #8]
 80063b0:	f000 f8de 	bl	8006570 <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80063b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80063b8:	f000 f852 	bl	8006460 <FLASH_WaitForLastOperation>
 80063bc:	4603      	mov	r3, r0
 80063be:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 80063c0:	4b08      	ldr	r3, [pc, #32]	; (80063e4 <HAL_FLASH_Program+0x84>)
 80063c2:	695a      	ldr	r2, [r3, #20]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	43db      	mvns	r3, r3
 80063c8:	4906      	ldr	r1, [pc, #24]	; (80063e4 <HAL_FLASH_Program+0x84>)
 80063ca:	4013      	ands	r3, r2
 80063cc:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80063ce:	4b04      	ldr	r3, [pc, #16]	; (80063e0 <HAL_FLASH_Program+0x80>)
 80063d0:	2200      	movs	r2, #0
 80063d2:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80063d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3718      	adds	r7, #24
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	20000478 	.word	0x20000478
 80063e4:	58004000 	.word	0x58004000

080063e8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80063ee:	2300      	movs	r3, #0
 80063f0:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80063f2:	4b0b      	ldr	r3, [pc, #44]	; (8006420 <HAL_FLASH_Unlock+0x38>)
 80063f4:	695b      	ldr	r3, [r3, #20]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	da0b      	bge.n	8006412 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80063fa:	4b09      	ldr	r3, [pc, #36]	; (8006420 <HAL_FLASH_Unlock+0x38>)
 80063fc:	4a09      	ldr	r2, [pc, #36]	; (8006424 <HAL_FLASH_Unlock+0x3c>)
 80063fe:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006400:	4b07      	ldr	r3, [pc, #28]	; (8006420 <HAL_FLASH_Unlock+0x38>)
 8006402:	4a09      	ldr	r2, [pc, #36]	; (8006428 <HAL_FLASH_Unlock+0x40>)
 8006404:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8006406:	4b06      	ldr	r3, [pc, #24]	; (8006420 <HAL_FLASH_Unlock+0x38>)
 8006408:	695b      	ldr	r3, [r3, #20]
 800640a:	2b00      	cmp	r3, #0
 800640c:	da01      	bge.n	8006412 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8006412:	79fb      	ldrb	r3, [r7, #7]
}
 8006414:	4618      	mov	r0, r3
 8006416:	370c      	adds	r7, #12
 8006418:	46bd      	mov	sp, r7
 800641a:	bc80      	pop	{r7}
 800641c:	4770      	bx	lr
 800641e:	bf00      	nop
 8006420:	58004000 	.word	0x58004000
 8006424:	45670123 	.word	0x45670123
 8006428:	cdef89ab 	.word	0xcdef89ab

0800642c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800642c:	b480      	push	{r7}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006432:	2300      	movs	r3, #0
 8006434:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8006436:	4b09      	ldr	r3, [pc, #36]	; (800645c <HAL_FLASH_Lock+0x30>)
 8006438:	695b      	ldr	r3, [r3, #20]
 800643a:	4a08      	ldr	r2, [pc, #32]	; (800645c <HAL_FLASH_Lock+0x30>)
 800643c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006440:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8006442:	4b06      	ldr	r3, [pc, #24]	; (800645c <HAL_FLASH_Lock+0x30>)
 8006444:	695b      	ldr	r3, [r3, #20]
 8006446:	2b00      	cmp	r3, #0
 8006448:	db01      	blt.n	800644e <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800644e:	79fb      	ldrb	r3, [r7, #7]
}
 8006450:	4618      	mov	r0, r3
 8006452:	370c      	adds	r7, #12
 8006454:	46bd      	mov	sp, r7
 8006456:	bc80      	pop	{r7}
 8006458:	4770      	bx	lr
 800645a:	bf00      	nop
 800645c:	58004000 	.word	0x58004000

08006460 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8006468:	f7ff fe70 	bl	800614c <HAL_GetTick>
 800646c:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800646e:	e009      	b.n	8006484 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8006470:	f7ff fe6c 	bl	800614c <HAL_GetTick>
 8006474:	4602      	mov	r2, r0
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	1ad3      	subs	r3, r2, r3
 800647a:	687a      	ldr	r2, [r7, #4]
 800647c:	429a      	cmp	r2, r3
 800647e:	d801      	bhi.n	8006484 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8006480:	2303      	movs	r3, #3
 8006482:	e047      	b.n	8006514 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8006484:	4b25      	ldr	r3, [pc, #148]	; (800651c <FLASH_WaitForLastOperation+0xbc>)
 8006486:	691b      	ldr	r3, [r3, #16]
 8006488:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800648c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006490:	d0ee      	beq.n	8006470 <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 8006492:	4b22      	ldr	r3, [pc, #136]	; (800651c <FLASH_WaitForLastOperation+0xbc>)
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	f003 0301 	and.w	r3, r3, #1
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d002      	beq.n	80064a8 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80064a2:	4b1e      	ldr	r3, [pc, #120]	; (800651c <FLASH_WaitForLastOperation+0xbc>)
 80064a4:	2201      	movs	r2, #1
 80064a6:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 80064a8:	68ba      	ldr	r2, [r7, #8]
 80064aa:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 80064ae:	4013      	ands	r3, r2
 80064b0:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d007      	beq.n	80064cc <FLASH_WaitForLastOperation+0x6c>
 80064bc:	4b17      	ldr	r3, [pc, #92]	; (800651c <FLASH_WaitForLastOperation+0xbc>)
 80064be:	699a      	ldr	r2, [r3, #24]
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80064c6:	4915      	ldr	r1, [pc, #84]	; (800651c <FLASH_WaitForLastOperation+0xbc>)
 80064c8:	4313      	orrs	r3, r2
 80064ca:	618b      	str	r3, [r1, #24]
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d004      	beq.n	80064e0 <FLASH_WaitForLastOperation+0x80>
 80064d6:	4a11      	ldr	r2, [pc, #68]	; (800651c <FLASH_WaitForLastOperation+0xbc>)
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80064de:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d00e      	beq.n	8006504 <FLASH_WaitForLastOperation+0xa4>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 80064e6:	4a0e      	ldr	r2, [pc, #56]	; (8006520 <FLASH_WaitForLastOperation+0xc0>)
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	e011      	b.n	8006514 <FLASH_WaitForLastOperation+0xb4>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 80064f0:	f7ff fe2c 	bl	800614c <HAL_GetTick>
 80064f4:	4602      	mov	r2, r0
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	1ad3      	subs	r3, r2, r3
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d801      	bhi.n	8006504 <FLASH_WaitForLastOperation+0xa4>
    {
      return HAL_TIMEOUT;
 8006500:	2303      	movs	r3, #3
 8006502:	e007      	b.n	8006514 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8006504:	4b05      	ldr	r3, [pc, #20]	; (800651c <FLASH_WaitForLastOperation+0xbc>)
 8006506:	691b      	ldr	r3, [r3, #16]
 8006508:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800650c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006510:	d0ee      	beq.n	80064f0 <FLASH_WaitForLastOperation+0x90>
    }
  }

  return HAL_OK;
 8006512:	2300      	movs	r3, #0
}
 8006514:	4618      	mov	r0, r3
 8006516:	3710      	adds	r7, #16
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}
 800651c:	58004000 	.word	0x58004000
 8006520:	20000478 	.word	0x20000478

08006524 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8006524:	b480      	push	{r7}
 8006526:	b085      	sub	sp, #20
 8006528:	af00      	add	r7, sp, #0
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8006530:	4b0e      	ldr	r3, [pc, #56]	; (800656c <FLASH_Program_DoubleWord+0x48>)
 8006532:	695b      	ldr	r3, [r3, #20]
 8006534:	4a0d      	ldr	r2, [pc, #52]	; (800656c <FLASH_Program_DoubleWord+0x48>)
 8006536:	f043 0301 	orr.w	r3, r3, #1
 800653a:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	683a      	ldr	r2, [r7, #0]
 8006540:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8006542:	f3bf 8f6f 	isb	sy
}
 8006546:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8006548:	e9d7 0100 	ldrd	r0, r1, [r7]
 800654c:	f04f 0200 	mov.w	r2, #0
 8006550:	f04f 0300 	mov.w	r3, #0
 8006554:	000a      	movs	r2, r1
 8006556:	2300      	movs	r3, #0
 8006558:	68f9      	ldr	r1, [r7, #12]
 800655a:	3104      	adds	r1, #4
 800655c:	4613      	mov	r3, r2
 800655e:	600b      	str	r3, [r1, #0]
}
 8006560:	bf00      	nop
 8006562:	3714      	adds	r7, #20
 8006564:	46bd      	mov	sp, r7
 8006566:	bc80      	pop	{r7}
 8006568:	4770      	bx	lr
 800656a:	bf00      	nop
 800656c:	58004000 	.word	0x58004000

08006570 <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 8006570:	b480      	push	{r7}
 8006572:	b089      	sub	sp, #36	; 0x24
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800657a:	2340      	movs	r3, #64	; 0x40
 800657c:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8006586:	4b18      	ldr	r3, [pc, #96]	; (80065e8 <FLASH_Program_Fast+0x78>)
 8006588:	695b      	ldr	r3, [r3, #20]
 800658a:	4a17      	ldr	r2, [pc, #92]	; (80065e8 <FLASH_Program_Fast+0x78>)
 800658c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006590:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006592:	f3ef 8310 	mrs	r3, PRIMASK
 8006596:	60fb      	str	r3, [r7, #12]
  return(result);
 8006598:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 800659a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800659c:	b672      	cpsid	i
}
 800659e:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	69bb      	ldr	r3, [r7, #24]
 80065a6:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80065a8:	69bb      	ldr	r3, [r7, #24]
 80065aa:	3304      	adds	r3, #4
 80065ac:	61bb      	str	r3, [r7, #24]
    src_addr++;
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	3304      	adds	r3, #4
 80065b2:	617b      	str	r3, [r7, #20]
    row_index--;
 80065b4:	7ffb      	ldrb	r3, [r7, #31]
 80065b6:	3b01      	subs	r3, #1
 80065b8:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 80065ba:	7ffb      	ldrb	r3, [r7, #31]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d1ef      	bne.n	80065a0 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 80065c0:	bf00      	nop
 80065c2:	4b09      	ldr	r3, [pc, #36]	; (80065e8 <FLASH_Program_Fast+0x78>)
 80065c4:	691b      	ldr	r3, [r3, #16]
 80065c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065ce:	d0f8      	beq.n	80065c2 <FLASH_Program_Fast+0x52>
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	f383 8810 	msr	PRIMASK, r3
}
 80065da:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80065dc:	bf00      	nop
 80065de:	3724      	adds	r7, #36	; 0x24
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bc80      	pop	{r7}
 80065e4:	4770      	bx	lr
 80065e6:	bf00      	nop
 80065e8:	58004000 	.word	0x58004000

080065ec <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b087      	sub	sp, #28
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80065f6:	2300      	movs	r3, #0
 80065f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80065fa:	e140      	b.n	800687e <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	2101      	movs	r1, #1
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	fa01 f303 	lsl.w	r3, r1, r3
 8006608:	4013      	ands	r3, r2
 800660a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2b00      	cmp	r3, #0
 8006610:	f000 8132 	beq.w	8006878 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	f003 0303 	and.w	r3, r3, #3
 800661c:	2b01      	cmp	r3, #1
 800661e:	d005      	beq.n	800662c <HAL_GPIO_Init+0x40>
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	f003 0303 	and.w	r3, r3, #3
 8006628:	2b02      	cmp	r3, #2
 800662a:	d130      	bne.n	800668e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	005b      	lsls	r3, r3, #1
 8006636:	2203      	movs	r2, #3
 8006638:	fa02 f303 	lsl.w	r3, r2, r3
 800663c:	43db      	mvns	r3, r3
 800663e:	693a      	ldr	r2, [r7, #16]
 8006640:	4013      	ands	r3, r2
 8006642:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	68da      	ldr	r2, [r3, #12]
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	005b      	lsls	r3, r3, #1
 800664c:	fa02 f303 	lsl.w	r3, r2, r3
 8006650:	693a      	ldr	r2, [r7, #16]
 8006652:	4313      	orrs	r3, r2
 8006654:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	693a      	ldr	r2, [r7, #16]
 800665a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006662:	2201      	movs	r2, #1
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	fa02 f303 	lsl.w	r3, r2, r3
 800666a:	43db      	mvns	r3, r3
 800666c:	693a      	ldr	r2, [r7, #16]
 800666e:	4013      	ands	r3, r2
 8006670:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	091b      	lsrs	r3, r3, #4
 8006678:	f003 0201 	and.w	r2, r3, #1
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	fa02 f303 	lsl.w	r3, r2, r3
 8006682:	693a      	ldr	r2, [r7, #16]
 8006684:	4313      	orrs	r3, r2
 8006686:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	693a      	ldr	r2, [r7, #16]
 800668c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	f003 0303 	and.w	r3, r3, #3
 8006696:	2b03      	cmp	r3, #3
 8006698:	d017      	beq.n	80066ca <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	68db      	ldr	r3, [r3, #12]
 800669e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	005b      	lsls	r3, r3, #1
 80066a4:	2203      	movs	r2, #3
 80066a6:	fa02 f303 	lsl.w	r3, r2, r3
 80066aa:	43db      	mvns	r3, r3
 80066ac:	693a      	ldr	r2, [r7, #16]
 80066ae:	4013      	ands	r3, r2
 80066b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	689a      	ldr	r2, [r3, #8]
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	005b      	lsls	r3, r3, #1
 80066ba:	fa02 f303 	lsl.w	r3, r2, r3
 80066be:	693a      	ldr	r2, [r7, #16]
 80066c0:	4313      	orrs	r3, r2
 80066c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	693a      	ldr	r2, [r7, #16]
 80066c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	f003 0303 	and.w	r3, r3, #3
 80066d2:	2b02      	cmp	r3, #2
 80066d4:	d123      	bne.n	800671e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	08da      	lsrs	r2, r3, #3
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	3208      	adds	r2, #8
 80066de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	f003 0307 	and.w	r3, r3, #7
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	220f      	movs	r2, #15
 80066ee:	fa02 f303 	lsl.w	r3, r2, r3
 80066f2:	43db      	mvns	r3, r3
 80066f4:	693a      	ldr	r2, [r7, #16]
 80066f6:	4013      	ands	r3, r2
 80066f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	691a      	ldr	r2, [r3, #16]
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	f003 0307 	and.w	r3, r3, #7
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	fa02 f303 	lsl.w	r3, r2, r3
 800670a:	693a      	ldr	r2, [r7, #16]
 800670c:	4313      	orrs	r3, r2
 800670e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	08da      	lsrs	r2, r3, #3
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	3208      	adds	r2, #8
 8006718:	6939      	ldr	r1, [r7, #16]
 800671a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	005b      	lsls	r3, r3, #1
 8006728:	2203      	movs	r2, #3
 800672a:	fa02 f303 	lsl.w	r3, r2, r3
 800672e:	43db      	mvns	r3, r3
 8006730:	693a      	ldr	r2, [r7, #16]
 8006732:	4013      	ands	r3, r2
 8006734:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	f003 0203 	and.w	r2, r3, #3
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	005b      	lsls	r3, r3, #1
 8006742:	fa02 f303 	lsl.w	r3, r2, r3
 8006746:	693a      	ldr	r2, [r7, #16]
 8006748:	4313      	orrs	r3, r2
 800674a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	693a      	ldr	r2, [r7, #16]
 8006750:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800675a:	2b00      	cmp	r3, #0
 800675c:	f000 808c 	beq.w	8006878 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8006760:	4a4e      	ldr	r2, [pc, #312]	; (800689c <HAL_GPIO_Init+0x2b0>)
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	089b      	lsrs	r3, r3, #2
 8006766:	3302      	adds	r3, #2
 8006768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800676c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	f003 0303 	and.w	r3, r3, #3
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	2207      	movs	r2, #7
 8006778:	fa02 f303 	lsl.w	r3, r2, r3
 800677c:	43db      	mvns	r3, r3
 800677e:	693a      	ldr	r2, [r7, #16]
 8006780:	4013      	ands	r3, r2
 8006782:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800678a:	d00d      	beq.n	80067a8 <HAL_GPIO_Init+0x1bc>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	4a44      	ldr	r2, [pc, #272]	; (80068a0 <HAL_GPIO_Init+0x2b4>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d007      	beq.n	80067a4 <HAL_GPIO_Init+0x1b8>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	4a43      	ldr	r2, [pc, #268]	; (80068a4 <HAL_GPIO_Init+0x2b8>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d101      	bne.n	80067a0 <HAL_GPIO_Init+0x1b4>
 800679c:	2302      	movs	r3, #2
 800679e:	e004      	b.n	80067aa <HAL_GPIO_Init+0x1be>
 80067a0:	2307      	movs	r3, #7
 80067a2:	e002      	b.n	80067aa <HAL_GPIO_Init+0x1be>
 80067a4:	2301      	movs	r3, #1
 80067a6:	e000      	b.n	80067aa <HAL_GPIO_Init+0x1be>
 80067a8:	2300      	movs	r3, #0
 80067aa:	697a      	ldr	r2, [r7, #20]
 80067ac:	f002 0203 	and.w	r2, r2, #3
 80067b0:	0092      	lsls	r2, r2, #2
 80067b2:	4093      	lsls	r3, r2
 80067b4:	693a      	ldr	r2, [r7, #16]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80067ba:	4938      	ldr	r1, [pc, #224]	; (800689c <HAL_GPIO_Init+0x2b0>)
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	089b      	lsrs	r3, r3, #2
 80067c0:	3302      	adds	r3, #2
 80067c2:	693a      	ldr	r2, [r7, #16]
 80067c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80067c8:	4b37      	ldr	r3, [pc, #220]	; (80068a8 <HAL_GPIO_Init+0x2bc>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	43db      	mvns	r3, r3
 80067d2:	693a      	ldr	r2, [r7, #16]
 80067d4:	4013      	ands	r3, r2
 80067d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d003      	beq.n	80067ec <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80067e4:	693a      	ldr	r2, [r7, #16]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	4313      	orrs	r3, r2
 80067ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80067ec:	4a2e      	ldr	r2, [pc, #184]	; (80068a8 <HAL_GPIO_Init+0x2bc>)
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80067f2:	4b2d      	ldr	r3, [pc, #180]	; (80068a8 <HAL_GPIO_Init+0x2bc>)
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	43db      	mvns	r3, r3
 80067fc:	693a      	ldr	r2, [r7, #16]
 80067fe:	4013      	ands	r3, r2
 8006800:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800680a:	2b00      	cmp	r3, #0
 800680c:	d003      	beq.n	8006816 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 800680e:	693a      	ldr	r2, [r7, #16]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	4313      	orrs	r3, r2
 8006814:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006816:	4a24      	ldr	r2, [pc, #144]	; (80068a8 <HAL_GPIO_Init+0x2bc>)
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 800681c:	4b22      	ldr	r3, [pc, #136]	; (80068a8 <HAL_GPIO_Init+0x2bc>)
 800681e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006822:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	43db      	mvns	r3, r3
 8006828:	693a      	ldr	r2, [r7, #16]
 800682a:	4013      	ands	r3, r2
 800682c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006836:	2b00      	cmp	r3, #0
 8006838:	d003      	beq.n	8006842 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800683a:	693a      	ldr	r2, [r7, #16]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	4313      	orrs	r3, r2
 8006840:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8006842:	4a19      	ldr	r2, [pc, #100]	; (80068a8 <HAL_GPIO_Init+0x2bc>)
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800684a:	4b17      	ldr	r3, [pc, #92]	; (80068a8 <HAL_GPIO_Init+0x2bc>)
 800684c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006850:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	43db      	mvns	r3, r3
 8006856:	693a      	ldr	r2, [r7, #16]
 8006858:	4013      	ands	r3, r2
 800685a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006864:	2b00      	cmp	r3, #0
 8006866:	d003      	beq.n	8006870 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8006868:	693a      	ldr	r2, [r7, #16]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	4313      	orrs	r3, r2
 800686e:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8006870:	4a0d      	ldr	r2, [pc, #52]	; (80068a8 <HAL_GPIO_Init+0x2bc>)
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	3301      	adds	r3, #1
 800687c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	fa22 f303 	lsr.w	r3, r2, r3
 8006888:	2b00      	cmp	r3, #0
 800688a:	f47f aeb7 	bne.w	80065fc <HAL_GPIO_Init+0x10>
  }
}
 800688e:	bf00      	nop
 8006890:	bf00      	nop
 8006892:	371c      	adds	r7, #28
 8006894:	46bd      	mov	sp, r7
 8006896:	bc80      	pop	{r7}
 8006898:	4770      	bx	lr
 800689a:	bf00      	nop
 800689c:	40010000 	.word	0x40010000
 80068a0:	48000400 	.word	0x48000400
 80068a4:	48000800 	.word	0x48000800
 80068a8:	58000800 	.word	0x58000800

080068ac <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80068ac:	b480      	push	{r7}
 80068ae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80068b0:	4b04      	ldr	r3, [pc, #16]	; (80068c4 <HAL_PWR_EnableBkUpAccess+0x18>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a03      	ldr	r2, [pc, #12]	; (80068c4 <HAL_PWR_EnableBkUpAccess+0x18>)
 80068b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068ba:	6013      	str	r3, [r2, #0]
}
 80068bc:	bf00      	nop
 80068be:	46bd      	mov	sp, r7
 80068c0:	bc80      	pop	{r7}
 80068c2:	4770      	bx	lr
 80068c4:	58000400 	.word	0x58000400

080068c8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80068c8:	b480      	push	{r7}
 80068ca:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80068cc:	4b03      	ldr	r3, [pc, #12]	; (80068dc <HAL_PWREx_GetVoltageRange+0x14>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bc80      	pop	{r7}
 80068da:	4770      	bx	lr
 80068dc:	58000400 	.word	0x58000400

080068e0 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 80068e0:	b480      	push	{r7}
 80068e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80068e4:	4b06      	ldr	r3, [pc, #24]	; (8006900 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068f0:	d101      	bne.n	80068f6 <LL_PWR_IsEnabledBkUpAccess+0x16>
 80068f2:	2301      	movs	r3, #1
 80068f4:	e000      	b.n	80068f8 <LL_PWR_IsEnabledBkUpAccess+0x18>
 80068f6:	2300      	movs	r3, #0
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bc80      	pop	{r7}
 80068fe:	4770      	bx	lr
 8006900:	58000400 	.word	0x58000400

08006904 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8006904:	b480      	push	{r7}
 8006906:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8006908:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006912:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006916:	6013      	str	r3, [r2, #0]
}
 8006918:	bf00      	nop
 800691a:	46bd      	mov	sp, r7
 800691c:	bc80      	pop	{r7}
 800691e:	4770      	bx	lr

08006920 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 8006920:	b480      	push	{r7}
 8006922:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8006924:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800692e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006932:	6013      	str	r3, [r2, #0]
}
 8006934:	bf00      	nop
 8006936:	46bd      	mov	sp, r7
 8006938:	bc80      	pop	{r7}
 800693a:	4770      	bx	lr

0800693c <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 800693c:	b480      	push	{r7}
 800693e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8006940:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800694a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800694e:	d101      	bne.n	8006954 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8006950:	2301      	movs	r3, #1
 8006952:	e000      	b.n	8006956 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8006954:	2300      	movs	r3, #0
}
 8006956:	4618      	mov	r0, r3
 8006958:	46bd      	mov	sp, r7
 800695a:	bc80      	pop	{r7}
 800695c:	4770      	bx	lr

0800695e <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 800695e:	b480      	push	{r7}
 8006960:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8006962:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800696c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006970:	6013      	str	r3, [r2, #0]
}
 8006972:	bf00      	nop
 8006974:	46bd      	mov	sp, r7
 8006976:	bc80      	pop	{r7}
 8006978:	4770      	bx	lr

0800697a <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 800697a:	b480      	push	{r7}
 800697c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800697e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006988:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800698c:	6013      	str	r3, [r2, #0]
}
 800698e:	bf00      	nop
 8006990:	46bd      	mov	sp, r7
 8006992:	bc80      	pop	{r7}
 8006994:	4770      	bx	lr

08006996 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8006996:	b480      	push	{r7}
 8006998:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800699a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80069a8:	d101      	bne.n	80069ae <LL_RCC_HSE_IsReady+0x18>
 80069aa:	2301      	movs	r3, #1
 80069ac:	e000      	b.n	80069b0 <LL_RCC_HSE_IsReady+0x1a>
 80069ae:	2300      	movs	r3, #0
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bc80      	pop	{r7}
 80069b6:	4770      	bx	lr

080069b8 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80069b8:	b480      	push	{r7}
 80069ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80069bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80069c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069ca:	6013      	str	r3, [r2, #0]
}
 80069cc:	bf00      	nop
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bc80      	pop	{r7}
 80069d2:	4770      	bx	lr

080069d4 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 80069d4:	b480      	push	{r7}
 80069d6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80069d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80069e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069e6:	6013      	str	r3, [r2, #0]
}
 80069e8:	bf00      	nop
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bc80      	pop	{r7}
 80069ee:	4770      	bx	lr

080069f0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80069f0:	b480      	push	{r7}
 80069f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80069f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a02:	d101      	bne.n	8006a08 <LL_RCC_HSI_IsReady+0x18>
 8006a04:	2301      	movs	r3, #1
 8006a06:	e000      	b.n	8006a0a <LL_RCC_HSI_IsReady+0x1a>
 8006a08:	2300      	movs	r3, #0
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bc80      	pop	{r7}
 8006a10:	4770      	bx	lr

08006a12 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8006a12:	b480      	push	{r7}
 8006a14:	b083      	sub	sp, #12
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8006a1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	061b      	lsls	r3, r3, #24
 8006a28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	604b      	str	r3, [r1, #4]
}
 8006a30:	bf00      	nop
 8006a32:	370c      	adds	r7, #12
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bc80      	pop	{r7}
 8006a38:	4770      	bx	lr

08006a3a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8006a3a:	b480      	push	{r7}
 8006a3c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006a3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a46:	f003 0302 	and.w	r3, r3, #2
 8006a4a:	2b02      	cmp	r3, #2
 8006a4c:	d101      	bne.n	8006a52 <LL_RCC_LSE_IsReady+0x18>
 8006a4e:	2301      	movs	r3, #1
 8006a50:	e000      	b.n	8006a54 <LL_RCC_LSE_IsReady+0x1a>
 8006a52:	2300      	movs	r3, #0
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bc80      	pop	{r7}
 8006a5a:	4770      	bx	lr

08006a5c <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8006a60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a6c:	f043 0301 	orr.w	r3, r3, #1
 8006a70:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006a74:	bf00      	nop
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bc80      	pop	{r7}
 8006a7a:	4770      	bx	lr

08006a7c <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8006a80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a8c:	f023 0301 	bic.w	r3, r3, #1
 8006a90:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006a94:	bf00      	nop
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bc80      	pop	{r7}
 8006a9a:	4770      	bx	lr

08006a9c <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8006aa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006aa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006aa8:	f003 0302 	and.w	r3, r3, #2
 8006aac:	2b02      	cmp	r3, #2
 8006aae:	d101      	bne.n	8006ab4 <LL_RCC_LSI_IsReady+0x18>
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e000      	b.n	8006ab6 <LL_RCC_LSI_IsReady+0x1a>
 8006ab4:	2300      	movs	r3, #0
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bc80      	pop	{r7}
 8006abc:	4770      	bx	lr

08006abe <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8006abe:	b480      	push	{r7}
 8006ac0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8006ac2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006acc:	f043 0301 	orr.w	r3, r3, #1
 8006ad0:	6013      	str	r3, [r2, #0]
}
 8006ad2:	bf00      	nop
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bc80      	pop	{r7}
 8006ad8:	4770      	bx	lr

08006ada <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8006ada:	b480      	push	{r7}
 8006adc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8006ade:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ae8:	f023 0301 	bic.w	r3, r3, #1
 8006aec:	6013      	str	r3, [r2, #0]
}
 8006aee:	bf00      	nop
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bc80      	pop	{r7}
 8006af4:	4770      	bx	lr

08006af6 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8006af6:	b480      	push	{r7}
 8006af8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8006afa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f003 0302 	and.w	r3, r3, #2
 8006b04:	2b02      	cmp	r3, #2
 8006b06:	d101      	bne.n	8006b0c <LL_RCC_MSI_IsReady+0x16>
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e000      	b.n	8006b0e <LL_RCC_MSI_IsReady+0x18>
 8006b0c:	2300      	movs	r3, #0
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bc80      	pop	{r7}
 8006b14:	4770      	bx	lr

08006b16 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8006b16:	b480      	push	{r7}
 8006b18:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8006b1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f003 0308 	and.w	r3, r3, #8
 8006b24:	2b08      	cmp	r3, #8
 8006b26:	d101      	bne.n	8006b2c <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8006b28:	2301      	movs	r3, #1
 8006b2a:	e000      	b.n	8006b2e <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8006b2c:	2300      	movs	r3, #0
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bc80      	pop	{r7}
 8006b34:	4770      	bx	lr

08006b36 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8006b36:	b480      	push	{r7}
 8006b38:	b083      	sub	sp, #12
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8006b3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	600b      	str	r3, [r1, #0]
}
 8006b52:	bf00      	nop
 8006b54:	370c      	adds	r7, #12
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bc80      	pop	{r7}
 8006b5a:	4770      	bx	lr

08006b5c <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8006b60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bc80      	pop	{r7}
 8006b70:	4770      	bx	lr

08006b72 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8006b72:	b480      	push	{r7}
 8006b74:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8006b76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b7e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bc80      	pop	{r7}
 8006b88:	4770      	bx	lr

08006b8a <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8006b8a:	b480      	push	{r7}
 8006b8c:	b083      	sub	sp, #12
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8006b92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	021b      	lsls	r3, r3, #8
 8006ba0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	604b      	str	r3, [r1, #4]
}
 8006ba8:	bf00      	nop
 8006baa:	370c      	adds	r7, #12
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bc80      	pop	{r7}
 8006bb0:	4770      	bx	lr

08006bb2 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8006bb2:	b480      	push	{r7}
 8006bb4:	b083      	sub	sp, #12
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8006bba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	f023 0203 	bic.w	r2, r3, #3
 8006bc4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	608b      	str	r3, [r1, #8]
}
 8006bce:	bf00      	nop
 8006bd0:	370c      	adds	r7, #12
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bc80      	pop	{r7}
 8006bd6:	4770      	bx	lr

08006bd8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006bdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	f003 030c 	and.w	r3, r3, #12
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bc80      	pop	{r7}
 8006bec:	4770      	bx	lr

08006bee <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8006bee:	b480      	push	{r7}
 8006bf0:	b083      	sub	sp, #12
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8006bf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c00:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	4313      	orrs	r3, r2
 8006c08:	608b      	str	r3, [r1, #8]
}
 8006c0a:	bf00      	nop
 8006c0c:	370c      	adds	r7, #12
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bc80      	pop	{r7}
 8006c12:	4770      	bx	lr

08006c14 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8006c1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c20:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006c24:	f023 020f 	bic.w	r2, r3, #15
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	091b      	lsrs	r3, r3, #4
 8006c2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c30:	4313      	orrs	r3, r2
 8006c32:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8006c36:	bf00      	nop
 8006c38:	370c      	adds	r7, #12
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bc80      	pop	{r7}
 8006c3e:	4770      	bx	lr

08006c40 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b083      	sub	sp, #12
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8006c48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c4c:	689b      	ldr	r3, [r3, #8]
 8006c4e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006c52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	608b      	str	r3, [r1, #8]
}
 8006c5c:	bf00      	nop
 8006c5e:	370c      	adds	r7, #12
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bc80      	pop	{r7}
 8006c64:	4770      	bx	lr

08006c66 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8006c66:	b480      	push	{r7}
 8006c68:	b083      	sub	sp, #12
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8006c6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006c78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	608b      	str	r3, [r1, #8]
}
 8006c82:	bf00      	nop
 8006c84:	370c      	adds	r7, #12
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bc80      	pop	{r7}
 8006c8a:	4770      	bx	lr

08006c8c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006c90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bc80      	pop	{r7}
 8006ca0:	4770      	bx	lr

08006ca2 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8006ca2:	b480      	push	{r7}
 8006ca4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8006ca6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006caa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006cae:	011b      	lsls	r3, r3, #4
 8006cb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bc80      	pop	{r7}
 8006cba:	4770      	bx	lr

08006cbc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006cc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bc80      	pop	{r7}
 8006cd0:	4770      	bx	lr

08006cd2 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8006cd2:	b480      	push	{r7}
 8006cd4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006cd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bc80      	pop	{r7}
 8006ce6:	4770      	bx	lr

08006ce8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8006cec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006cf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006cfa:	6013      	str	r3, [r2, #0]
}
 8006cfc:	bf00      	nop
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bc80      	pop	{r7}
 8006d02:	4770      	bx	lr

08006d04 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8006d04:	b480      	push	{r7}
 8006d06:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8006d08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d16:	6013      	str	r3, [r2, #0]
}
 8006d18:	bf00      	nop
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bc80      	pop	{r7}
 8006d1e:	4770      	bx	lr

08006d20 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8006d20:	b480      	push	{r7}
 8006d22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006d24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d32:	d101      	bne.n	8006d38 <LL_RCC_PLL_IsReady+0x18>
 8006d34:	2301      	movs	r3, #1
 8006d36:	e000      	b.n	8006d3a <LL_RCC_PLL_IsReady+0x1a>
 8006d38:	2300      	movs	r3, #0
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bc80      	pop	{r7}
 8006d40:	4770      	bx	lr

08006d42 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8006d42:	b480      	push	{r7}
 8006d44:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006d46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	0a1b      	lsrs	r3, r3, #8
 8006d4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bc80      	pop	{r7}
 8006d58:	4770      	bx	lr

08006d5a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8006d5a:	b480      	push	{r7}
 8006d5c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8006d5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d62:	68db      	ldr	r3, [r3, #12]
 8006d64:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bc80      	pop	{r7}
 8006d6e:	4770      	bx	lr

08006d70 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8006d70:	b480      	push	{r7}
 8006d72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006d74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bc80      	pop	{r7}
 8006d84:	4770      	bx	lr

08006d86 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8006d86:	b480      	push	{r7}
 8006d88:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006d8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d8e:	68db      	ldr	r3, [r3, #12]
 8006d90:	f003 0303 	and.w	r3, r3, #3
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bc80      	pop	{r7}
 8006d9a:	4770      	bx	lr

08006d9c <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8006da0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006daa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dae:	d101      	bne.n	8006db4 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8006db0:	2301      	movs	r3, #1
 8006db2:	e000      	b.n	8006db6 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8006db4:	2300      	movs	r3, #0
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bc80      	pop	{r7}
 8006dbc:	4770      	bx	lr

08006dbe <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8006dbe:	b480      	push	{r7}
 8006dc0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8006dc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dc6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006dca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006dce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dd2:	d101      	bne.n	8006dd8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	e000      	b.n	8006dda <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8006dd8:	2300      	movs	r3, #0
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bc80      	pop	{r7}
 8006de0:	4770      	bx	lr

08006de2 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8006de2:	b480      	push	{r7}
 8006de4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8006de6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006df0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006df4:	d101      	bne.n	8006dfa <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8006df6:	2301      	movs	r3, #1
 8006df8:	e000      	b.n	8006dfc <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8006dfa:	2300      	movs	r3, #0
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bc80      	pop	{r7}
 8006e02:	4770      	bx	lr

08006e04 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8006e04:	b480      	push	{r7}
 8006e06:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8006e08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e12:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006e16:	d101      	bne.n	8006e1c <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8006e18:	2301      	movs	r3, #1
 8006e1a:	e000      	b.n	8006e1e <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8006e1c:	2300      	movs	r3, #0
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bc80      	pop	{r7}
 8006e24:	4770      	bx	lr
	...

08006e28 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b082      	sub	sp, #8
 8006e2c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006e2e:	f7ff f98d 	bl	800614c <HAL_GetTick>
 8006e32:	6078      	str	r0, [r7, #4]

  /* Set MSION bit */
  LL_RCC_MSI_Enable();
 8006e34:	f7ff fe43 	bl	8006abe <LL_RCC_MSI_Enable>

  /* Wait till MSI is ready */
  while (LL_RCC_MSI_IsReady() == 0U)
 8006e38:	e008      	b.n	8006e4c <HAL_RCC_DeInit+0x24>
  {
    if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006e3a:	f7ff f987 	bl	800614c <HAL_GetTick>
 8006e3e:	4602      	mov	r2, r0
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	1ad3      	subs	r3, r2, r3
 8006e44:	2b02      	cmp	r3, #2
 8006e46:	d901      	bls.n	8006e4c <HAL_RCC_DeInit+0x24>
    {
      return HAL_TIMEOUT;
 8006e48:	2303      	movs	r3, #3
 8006e4a:	e074      	b.n	8006f36 <HAL_RCC_DeInit+0x10e>
  while (LL_RCC_MSI_IsReady() == 0U)
 8006e4c:	f7ff fe53 	bl	8006af6 <LL_RCC_MSI_IsReady>
 8006e50:	4603      	mov	r3, r0
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d0f1      	beq.n	8006e3a <HAL_RCC_DeInit+0x12>
    }
  }

  /* Set MSIRANGE default value */
  LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_6);
 8006e56:	2060      	movs	r0, #96	; 0x60
 8006e58:	f7ff fe6d 	bl	8006b36 <LL_RCC_MSI_SetRange>

  /* Set MSITRIM bits to the reset value*/
  LL_RCC_MSI_SetCalibTrimming(RCC_MSICALIBRATION_DEFAULT);
 8006e5c:	2000      	movs	r0, #0
 8006e5e:	f7ff fe94 	bl	8006b8a <LL_RCC_MSI_SetCalibTrimming>

  /* Set HSITRIM bits to the reset value*/
  LL_RCC_HSI_SetCalibTrimming(RCC_HSICALIBRATION_DEFAULT);
 8006e62:	2040      	movs	r0, #64	; 0x40
 8006e64:	f7ff fdd5 	bl	8006a12 <LL_RCC_HSI_SetCalibTrimming>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006e68:	f7ff f970 	bl	800614c <HAL_GetTick>
 8006e6c:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register (MSI is selected as system clock source) */
  CLEAR_REG(RCC->CFGR);
 8006e6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e72:	2200      	movs	r2, #0
 8006e74:	609a      	str	r2, [r3, #8]

  /* Wait till MSI oscillator used as system clock */
  while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_MSI)
 8006e76:	e00a      	b.n	8006e8e <HAL_RCC_DeInit+0x66>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e78:	f7ff f968 	bl	800614c <HAL_GetTick>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	1ad3      	subs	r3, r2, r3
 8006e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d901      	bls.n	8006e8e <HAL_RCC_DeInit+0x66>
    {
      return HAL_TIMEOUT;
 8006e8a:	2303      	movs	r3, #3
 8006e8c:	e053      	b.n	8006f36 <HAL_RCC_DeInit+0x10e>
  while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_MSI)
 8006e8e:	f7ff fea3 	bl	8006bd8 <LL_RCC_GetSysClkSource>
 8006e92:	4603      	mov	r3, r0
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d1ef      	bne.n	8006e78 <HAL_RCC_DeInit+0x50>
    }
  }

  /* Reset HSION, HSIKERON, HSIASFS, HSEON, PLLON, HSEPRE bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSION | RCC_CR_HSIKERON | RCC_CR_HSIASFS | RCC_CR_HSEON | RCC_CR_HSEPRE | RCC_CR_PLLON);
 8006e98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006ea2:	4b27      	ldr	r3, [pc, #156]	; (8006f40 <HAL_RCC_DeInit+0x118>)
 8006ea4:	4013      	ands	r3, r2
 8006ea6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006ea8:	f7ff f950 	bl	800614c <HAL_GetTick>
 8006eac:	6078      	str	r0, [r7, #4]

  /* Wait till HSE is disabled */
  while (LL_RCC_HSE_IsReady() != 0U)
 8006eae:	e008      	b.n	8006ec2 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006eb0:	f7ff f94c 	bl	800614c <HAL_GetTick>
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	1ad3      	subs	r3, r2, r3
 8006eba:	2b64      	cmp	r3, #100	; 0x64
 8006ebc:	d901      	bls.n	8006ec2 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8006ebe:	2303      	movs	r3, #3
 8006ec0:	e039      	b.n	8006f36 <HAL_RCC_DeInit+0x10e>
  while (LL_RCC_HSE_IsReady() != 0U)
 8006ec2:	f7ff fd68 	bl	8006996 <LL_RCC_HSE_IsReady>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d1f1      	bne.n	8006eb0 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Reset HSEBYPPWR bit once HSE is OFF */
  LL_RCC_HSE_DisableTcxo();
 8006ecc:	f7ff fd28 	bl	8006920 <LL_RCC_HSE_DisableTcxo>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006ed0:	f7ff f93c 	bl	800614c <HAL_GetTick>
 8006ed4:	6078      	str	r0, [r7, #4]

  /* Wait till PLL is fully stopped */
  while (LL_RCC_PLL_IsReady() != 0U)
 8006ed6:	e008      	b.n	8006eea <HAL_RCC_DeInit+0xc2>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ed8:	f7ff f938 	bl	800614c <HAL_GetTick>
 8006edc:	4602      	mov	r2, r0
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	1ad3      	subs	r3, r2, r3
 8006ee2:	2b0a      	cmp	r3, #10
 8006ee4:	d901      	bls.n	8006eea <HAL_RCC_DeInit+0xc2>
    {
      return HAL_TIMEOUT;
 8006ee6:	2303      	movs	r3, #3
 8006ee8:	e025      	b.n	8006f36 <HAL_RCC_DeInit+0x10e>
  while (LL_RCC_PLL_IsReady() != 0U)
 8006eea:	f7ff ff19 	bl	8006d20 <LL_RCC_PLL_IsReady>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d1f1      	bne.n	8006ed8 <HAL_RCC_DeInit+0xb0>
    }
  }

  /* once PLL is OFF, reset PLLCFGR register to default value */
  WRITE_REG(RCC->PLLCFGR, RCC_PLLCFR_RESET_VALUE);
 8006ef4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ef8:	4a12      	ldr	r2, [pc, #72]	; (8006f44 <HAL_RCC_DeInit+0x11c>)
 8006efa:	60da      	str	r2, [r3, #12]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 8006efc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f00:	2200      	movs	r2, #0
 8006f02:	619a      	str	r2, [r3, #24]

  /* Clear all flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 8006f04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f08:	f04f 32ff 	mov.w	r2, #4294967295
 8006f0c:	621a      	str	r2, [r3, #32]

  /* EXTCFGR reset*/
  WRITE_REG(RCC->EXTCFGR, RCC_EXTCFGR_RESET_VALUE);
 8006f0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f12:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006f16:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = MSI_VALUE;
 8006f1a:	4b0b      	ldr	r3, [pc, #44]	; (8006f48 <HAL_RCC_DeInit+0x120>)
 8006f1c:	4a0b      	ldr	r2, [pc, #44]	; (8006f4c <HAL_RCC_DeInit+0x124>)
 8006f1e:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006f20:	4b0b      	ldr	r3, [pc, #44]	; (8006f50 <HAL_RCC_DeInit+0x128>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4618      	mov	r0, r3
 8006f26:	f7ff f8c5 	bl	80060b4 <HAL_InitTick>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d001      	beq.n	8006f34 <HAL_RCC_DeInit+0x10c>
  {
    return HAL_ERROR;
 8006f30:	2301      	movs	r3, #1
 8006f32:	e000      	b.n	8006f36 <HAL_RCC_DeInit+0x10e>
  }
  else
  {
    return HAL_OK;
 8006f34:	2300      	movs	r3, #0
  }
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3708      	adds	r7, #8
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}
 8006f3e:	bf00      	nop
 8006f40:	feeef4ff 	.word	0xfeeef4ff
 8006f44:	22040100 	.word	0x22040100
 8006f48:	20000000 	.word	0x20000000
 8006f4c:	003d0900 	.word	0x003d0900
 8006f50:	20000004 	.word	0x20000004

08006f54 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b088      	sub	sp, #32
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d101      	bne.n	8006f66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	e38b      	b.n	800767e <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f66:	f7ff fe37 	bl	8006bd8 <LL_RCC_GetSysClkSource>
 8006f6a:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006f6c:	f7ff ff0b 	bl	8006d86 <LL_RCC_PLL_GetMainSource>
 8006f70:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f003 0320 	and.w	r3, r3, #32
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	f000 80c9 	beq.w	8007112 <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006f80:	69fb      	ldr	r3, [r7, #28]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d005      	beq.n	8006f92 <HAL_RCC_OscConfig+0x3e>
 8006f86:	69fb      	ldr	r3, [r7, #28]
 8006f88:	2b0c      	cmp	r3, #12
 8006f8a:	d17b      	bne.n	8007084 <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006f8c:	69bb      	ldr	r3, [r7, #24]
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d178      	bne.n	8007084 <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006f92:	f7ff fdb0 	bl	8006af6 <LL_RCC_MSI_IsReady>
 8006f96:	4603      	mov	r3, r0
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d005      	beq.n	8006fa8 <HAL_RCC_OscConfig+0x54>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6a1b      	ldr	r3, [r3, #32]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d101      	bne.n	8006fa8 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	e36a      	b.n	800767e <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006fac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f003 0308 	and.w	r3, r3, #8
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d005      	beq.n	8006fc6 <HAL_RCC_OscConfig+0x72>
 8006fba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006fc4:	e006      	b.n	8006fd4 <HAL_RCC_OscConfig+0x80>
 8006fc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006fce:	091b      	lsrs	r3, r3, #4
 8006fd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d222      	bcs.n	800701e <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f000 fd51 	bl	8007a84 <RCC_SetFlashLatencyFromMSIRange>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d001      	beq.n	8006fec <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e348      	b.n	800767e <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006fec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ff6:	f043 0308 	orr.w	r3, r3, #8
 8006ffa:	6013      	str	r3, [r2, #0]
 8006ffc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800700a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800700e:	4313      	orrs	r3, r2
 8007010:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007016:	4618      	mov	r0, r3
 8007018:	f7ff fdb7 	bl	8006b8a <LL_RCC_MSI_SetCalibTrimming>
 800701c:	e021      	b.n	8007062 <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800701e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007028:	f043 0308 	orr.w	r3, r3, #8
 800702c:	6013      	str	r3, [r2, #0]
 800702e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800703c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007040:	4313      	orrs	r3, r2
 8007042:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007048:	4618      	mov	r0, r3
 800704a:	f7ff fd9e 	bl	8006b8a <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007052:	4618      	mov	r0, r3
 8007054:	f000 fd16 	bl	8007a84 <RCC_SetFlashLatencyFromMSIRange>
 8007058:	4603      	mov	r3, r0
 800705a:	2b00      	cmp	r3, #0
 800705c:	d001      	beq.n	8007062 <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 800705e:	2301      	movs	r3, #1
 8007060:	e30d      	b.n	800767e <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8007062:	f000 fcd7 	bl	8007a14 <HAL_RCC_GetHCLKFreq>
 8007066:	4603      	mov	r3, r0
 8007068:	4aa1      	ldr	r2, [pc, #644]	; (80072f0 <HAL_RCC_OscConfig+0x39c>)
 800706a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800706c:	4ba1      	ldr	r3, [pc, #644]	; (80072f4 <HAL_RCC_OscConfig+0x3a0>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4618      	mov	r0, r3
 8007072:	f7ff f81f 	bl	80060b4 <HAL_InitTick>
 8007076:	4603      	mov	r3, r0
 8007078:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 800707a:	7cfb      	ldrb	r3, [r7, #19]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d047      	beq.n	8007110 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8007080:	7cfb      	ldrb	r3, [r7, #19]
 8007082:	e2fc      	b.n	800767e <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6a1b      	ldr	r3, [r3, #32]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d02c      	beq.n	80070e6 <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800708c:	f7ff fd17 	bl	8006abe <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007090:	f7ff f85c 	bl	800614c <HAL_GetTick>
 8007094:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8007096:	e008      	b.n	80070aa <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007098:	f7ff f858 	bl	800614c <HAL_GetTick>
 800709c:	4602      	mov	r2, r0
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	1ad3      	subs	r3, r2, r3
 80070a2:	2b02      	cmp	r3, #2
 80070a4:	d901      	bls.n	80070aa <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 80070a6:	2303      	movs	r3, #3
 80070a8:	e2e9      	b.n	800767e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 80070aa:	f7ff fd24 	bl	8006af6 <LL_RCC_MSI_IsReady>
 80070ae:	4603      	mov	r3, r0
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d0f1      	beq.n	8007098 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80070b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80070be:	f043 0308 	orr.w	r3, r3, #8
 80070c2:	6013      	str	r3, [r2, #0]
 80070c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80070d6:	4313      	orrs	r3, r2
 80070d8:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070de:	4618      	mov	r0, r3
 80070e0:	f7ff fd53 	bl	8006b8a <LL_RCC_MSI_SetCalibTrimming>
 80070e4:	e015      	b.n	8007112 <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80070e6:	f7ff fcf8 	bl	8006ada <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80070ea:	f7ff f82f 	bl	800614c <HAL_GetTick>
 80070ee:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80070f0:	e008      	b.n	8007104 <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80070f2:	f7ff f82b 	bl	800614c <HAL_GetTick>
 80070f6:	4602      	mov	r2, r0
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	1ad3      	subs	r3, r2, r3
 80070fc:	2b02      	cmp	r3, #2
 80070fe:	d901      	bls.n	8007104 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8007100:	2303      	movs	r3, #3
 8007102:	e2bc      	b.n	800767e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 8007104:	f7ff fcf7 	bl	8006af6 <LL_RCC_MSI_IsReady>
 8007108:	4603      	mov	r3, r0
 800710a:	2b00      	cmp	r3, #0
 800710c:	d1f1      	bne.n	80070f2 <HAL_RCC_OscConfig+0x19e>
 800710e:	e000      	b.n	8007112 <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007110:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f003 0301 	and.w	r3, r3, #1
 800711a:	2b00      	cmp	r3, #0
 800711c:	d05f      	beq.n	80071de <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800711e:	69fb      	ldr	r3, [r7, #28]
 8007120:	2b08      	cmp	r3, #8
 8007122:	d005      	beq.n	8007130 <HAL_RCC_OscConfig+0x1dc>
 8007124:	69fb      	ldr	r3, [r7, #28]
 8007126:	2b0c      	cmp	r3, #12
 8007128:	d10d      	bne.n	8007146 <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800712a:	69bb      	ldr	r3, [r7, #24]
 800712c:	2b03      	cmp	r3, #3
 800712e:	d10a      	bne.n	8007146 <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007130:	f7ff fc31 	bl	8006996 <LL_RCC_HSE_IsReady>
 8007134:	4603      	mov	r3, r0
 8007136:	2b00      	cmp	r3, #0
 8007138:	d050      	beq.n	80071dc <HAL_RCC_OscConfig+0x288>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d14c      	bne.n	80071dc <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 8007142:	2301      	movs	r3, #1
 8007144:	e29b      	b.n	800767e <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8007146:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007158:	4313      	orrs	r3, r2
 800715a:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007164:	d102      	bne.n	800716c <HAL_RCC_OscConfig+0x218>
 8007166:	f7ff fbfa 	bl	800695e <LL_RCC_HSE_Enable>
 800716a:	e00d      	b.n	8007188 <HAL_RCC_OscConfig+0x234>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8007174:	d104      	bne.n	8007180 <HAL_RCC_OscConfig+0x22c>
 8007176:	f7ff fbc5 	bl	8006904 <LL_RCC_HSE_EnableTcxo>
 800717a:	f7ff fbf0 	bl	800695e <LL_RCC_HSE_Enable>
 800717e:	e003      	b.n	8007188 <HAL_RCC_OscConfig+0x234>
 8007180:	f7ff fbfb 	bl	800697a <LL_RCC_HSE_Disable>
 8007184:	f7ff fbcc 	bl	8006920 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d012      	beq.n	80071b6 <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007190:	f7fe ffdc 	bl	800614c <HAL_GetTick>
 8007194:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8007196:	e008      	b.n	80071aa <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007198:	f7fe ffd8 	bl	800614c <HAL_GetTick>
 800719c:	4602      	mov	r2, r0
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	1ad3      	subs	r3, r2, r3
 80071a2:	2b64      	cmp	r3, #100	; 0x64
 80071a4:	d901      	bls.n	80071aa <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80071a6:	2303      	movs	r3, #3
 80071a8:	e269      	b.n	800767e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 80071aa:	f7ff fbf4 	bl	8006996 <LL_RCC_HSE_IsReady>
 80071ae:	4603      	mov	r3, r0
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d0f1      	beq.n	8007198 <HAL_RCC_OscConfig+0x244>
 80071b4:	e013      	b.n	80071de <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071b6:	f7fe ffc9 	bl	800614c <HAL_GetTick>
 80071ba:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80071bc:	e008      	b.n	80071d0 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80071be:	f7fe ffc5 	bl	800614c <HAL_GetTick>
 80071c2:	4602      	mov	r2, r0
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	1ad3      	subs	r3, r2, r3
 80071c8:	2b64      	cmp	r3, #100	; 0x64
 80071ca:	d901      	bls.n	80071d0 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 80071cc:	2303      	movs	r3, #3
 80071ce:	e256      	b.n	800767e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 80071d0:	f7ff fbe1 	bl	8006996 <LL_RCC_HSE_IsReady>
 80071d4:	4603      	mov	r3, r0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d1f1      	bne.n	80071be <HAL_RCC_OscConfig+0x26a>
 80071da:	e000      	b.n	80071de <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071dc:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f003 0302 	and.w	r3, r3, #2
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d04b      	beq.n	8007282 <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80071ea:	69fb      	ldr	r3, [r7, #28]
 80071ec:	2b04      	cmp	r3, #4
 80071ee:	d005      	beq.n	80071fc <HAL_RCC_OscConfig+0x2a8>
 80071f0:	69fb      	ldr	r3, [r7, #28]
 80071f2:	2b0c      	cmp	r3, #12
 80071f4:	d113      	bne.n	800721e <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80071f6:	69bb      	ldr	r3, [r7, #24]
 80071f8:	2b02      	cmp	r3, #2
 80071fa:	d110      	bne.n	800721e <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80071fc:	f7ff fbf8 	bl	80069f0 <LL_RCC_HSI_IsReady>
 8007200:	4603      	mov	r3, r0
 8007202:	2b00      	cmp	r3, #0
 8007204:	d005      	beq.n	8007212 <HAL_RCC_OscConfig+0x2be>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	691b      	ldr	r3, [r3, #16]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d101      	bne.n	8007212 <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 800720e:	2301      	movs	r3, #1
 8007210:	e235      	b.n	800767e <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	695b      	ldr	r3, [r3, #20]
 8007216:	4618      	mov	r0, r3
 8007218:	f7ff fbfb 	bl	8006a12 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800721c:	e031      	b.n	8007282 <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	691b      	ldr	r3, [r3, #16]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d019      	beq.n	800725a <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007226:	f7ff fbc7 	bl	80069b8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800722a:	f7fe ff8f 	bl	800614c <HAL_GetTick>
 800722e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8007230:	e008      	b.n	8007244 <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007232:	f7fe ff8b 	bl	800614c <HAL_GetTick>
 8007236:	4602      	mov	r2, r0
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	1ad3      	subs	r3, r2, r3
 800723c:	2b02      	cmp	r3, #2
 800723e:	d901      	bls.n	8007244 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8007240:	2303      	movs	r3, #3
 8007242:	e21c      	b.n	800767e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 8007244:	f7ff fbd4 	bl	80069f0 <LL_RCC_HSI_IsReady>
 8007248:	4603      	mov	r3, r0
 800724a:	2b00      	cmp	r3, #0
 800724c:	d0f1      	beq.n	8007232 <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	695b      	ldr	r3, [r3, #20]
 8007252:	4618      	mov	r0, r3
 8007254:	f7ff fbdd 	bl	8006a12 <LL_RCC_HSI_SetCalibTrimming>
 8007258:	e013      	b.n	8007282 <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800725a:	f7ff fbbb 	bl	80069d4 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800725e:	f7fe ff75 	bl	800614c <HAL_GetTick>
 8007262:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8007264:	e008      	b.n	8007278 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007266:	f7fe ff71 	bl	800614c <HAL_GetTick>
 800726a:	4602      	mov	r2, r0
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	1ad3      	subs	r3, r2, r3
 8007270:	2b02      	cmp	r3, #2
 8007272:	d901      	bls.n	8007278 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8007274:	2303      	movs	r3, #3
 8007276:	e202      	b.n	800767e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 8007278:	f7ff fbba 	bl	80069f0 <LL_RCC_HSI_IsReady>
 800727c:	4603      	mov	r3, r0
 800727e:	2b00      	cmp	r3, #0
 8007280:	d1f1      	bne.n	8007266 <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f003 0308 	and.w	r3, r3, #8
 800728a:	2b00      	cmp	r3, #0
 800728c:	d06f      	beq.n	800736e <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	699b      	ldr	r3, [r3, #24]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d057      	beq.n	8007346 <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 8007296:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800729a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800729e:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	69da      	ldr	r2, [r3, #28]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f003 0310 	and.w	r3, r3, #16
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d036      	beq.n	800731c <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	f003 0302 	and.w	r3, r3, #2
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d006      	beq.n	80072c6 <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d101      	bne.n	80072c6 <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	e1db      	b.n	800767e <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f003 0301 	and.w	r3, r3, #1
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d018      	beq.n	8007302 <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 80072d0:	f7ff fbd4 	bl	8006a7c <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80072d4:	f7fe ff3a 	bl	800614c <HAL_GetTick>
 80072d8:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80072da:	e00d      	b.n	80072f8 <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072dc:	f7fe ff36 	bl	800614c <HAL_GetTick>
 80072e0:	4602      	mov	r2, r0
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	1ad3      	subs	r3, r2, r3
 80072e6:	2b11      	cmp	r3, #17
 80072e8:	d906      	bls.n	80072f8 <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 80072ea:	2303      	movs	r3, #3
 80072ec:	e1c7      	b.n	800767e <HAL_RCC_OscConfig+0x72a>
 80072ee:	bf00      	nop
 80072f0:	20000000 	.word	0x20000000
 80072f4:	20000004 	.word	0x20000004
          while (LL_RCC_LSI_IsReady() != 0U)
 80072f8:	f7ff fbd0 	bl	8006a9c <LL_RCC_LSI_IsReady>
 80072fc:	4603      	mov	r3, r0
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d1ec      	bne.n	80072dc <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8007302:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007306:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800730a:	f023 0210 	bic.w	r2, r3, #16
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	69db      	ldr	r3, [r3, #28]
 8007312:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007316:	4313      	orrs	r3, r2
 8007318:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800731c:	f7ff fb9e 	bl	8006a5c <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007320:	f7fe ff14 	bl	800614c <HAL_GetTick>
 8007324:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8007326:	e008      	b.n	800733a <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007328:	f7fe ff10 	bl	800614c <HAL_GetTick>
 800732c:	4602      	mov	r2, r0
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	1ad3      	subs	r3, r2, r3
 8007332:	2b11      	cmp	r3, #17
 8007334:	d901      	bls.n	800733a <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 8007336:	2303      	movs	r3, #3
 8007338:	e1a1      	b.n	800767e <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 800733a:	f7ff fbaf 	bl	8006a9c <LL_RCC_LSI_IsReady>
 800733e:	4603      	mov	r3, r0
 8007340:	2b00      	cmp	r3, #0
 8007342:	d0f1      	beq.n	8007328 <HAL_RCC_OscConfig+0x3d4>
 8007344:	e013      	b.n	800736e <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007346:	f7ff fb99 	bl	8006a7c <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800734a:	f7fe feff 	bl	800614c <HAL_GetTick>
 800734e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8007350:	e008      	b.n	8007364 <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007352:	f7fe fefb 	bl	800614c <HAL_GetTick>
 8007356:	4602      	mov	r2, r0
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	1ad3      	subs	r3, r2, r3
 800735c:	2b11      	cmp	r3, #17
 800735e:	d901      	bls.n	8007364 <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 8007360:	2303      	movs	r3, #3
 8007362:	e18c      	b.n	800767e <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 8007364:	f7ff fb9a 	bl	8006a9c <LL_RCC_LSI_IsReady>
 8007368:	4603      	mov	r3, r0
 800736a:	2b00      	cmp	r3, #0
 800736c:	d1f1      	bne.n	8007352 <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f003 0304 	and.w	r3, r3, #4
 8007376:	2b00      	cmp	r3, #0
 8007378:	f000 80d8 	beq.w	800752c <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800737c:	f7ff fab0 	bl	80068e0 <LL_PWR_IsEnabledBkUpAccess>
 8007380:	4603      	mov	r3, r0
 8007382:	2b00      	cmp	r3, #0
 8007384:	d113      	bne.n	80073ae <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8007386:	f7ff fa91 	bl	80068ac <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800738a:	f7fe fedf 	bl	800614c <HAL_GetTick>
 800738e:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8007390:	e008      	b.n	80073a4 <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007392:	f7fe fedb 	bl	800614c <HAL_GetTick>
 8007396:	4602      	mov	r2, r0
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	1ad3      	subs	r3, r2, r3
 800739c:	2b02      	cmp	r3, #2
 800739e:	d901      	bls.n	80073a4 <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 80073a0:	2303      	movs	r3, #3
 80073a2:	e16c      	b.n	800767e <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80073a4:	f7ff fa9c 	bl	80068e0 <LL_PWR_IsEnabledBkUpAccess>
 80073a8:	4603      	mov	r3, r0
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d0f1      	beq.n	8007392 <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	68db      	ldr	r3, [r3, #12]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d07b      	beq.n	80074ae <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	68db      	ldr	r3, [r3, #12]
 80073ba:	2b85      	cmp	r3, #133	; 0x85
 80073bc:	d003      	beq.n	80073c6 <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	2b05      	cmp	r3, #5
 80073c4:	d109      	bne.n	80073da <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80073c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80073d2:	f043 0304 	orr.w	r3, r3, #4
 80073d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073da:	f7fe feb7 	bl	800614c <HAL_GetTick>
 80073de:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80073e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80073ec:	f043 0301 	orr.w	r3, r3, #1
 80073f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80073f4:	e00a      	b.n	800740c <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073f6:	f7fe fea9 	bl	800614c <HAL_GetTick>
 80073fa:	4602      	mov	r2, r0
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	1ad3      	subs	r3, r2, r3
 8007400:	f241 3288 	movw	r2, #5000	; 0x1388
 8007404:	4293      	cmp	r3, r2
 8007406:	d901      	bls.n	800740c <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8007408:	2303      	movs	r3, #3
 800740a:	e138      	b.n	800767e <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 800740c:	f7ff fb15 	bl	8006a3a <LL_RCC_LSE_IsReady>
 8007410:	4603      	mov	r3, r0
 8007412:	2b00      	cmp	r3, #0
 8007414:	d0ef      	beq.n	80073f6 <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	68db      	ldr	r3, [r3, #12]
 800741a:	2b81      	cmp	r3, #129	; 0x81
 800741c:	d003      	beq.n	8007426 <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	68db      	ldr	r3, [r3, #12]
 8007422:	2b85      	cmp	r3, #133	; 0x85
 8007424:	d121      	bne.n	800746a <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007426:	f7fe fe91 	bl	800614c <HAL_GetTick>
 800742a:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800742c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007434:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800743c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007440:	e00a      	b.n	8007458 <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007442:	f7fe fe83 	bl	800614c <HAL_GetTick>
 8007446:	4602      	mov	r2, r0
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	1ad3      	subs	r3, r2, r3
 800744c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007450:	4293      	cmp	r3, r2
 8007452:	d901      	bls.n	8007458 <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 8007454:	2303      	movs	r3, #3
 8007456:	e112      	b.n	800767e <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007458:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800745c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007460:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007464:	2b00      	cmp	r3, #0
 8007466:	d0ec      	beq.n	8007442 <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8007468:	e060      	b.n	800752c <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800746a:	f7fe fe6f 	bl	800614c <HAL_GetTick>
 800746e:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007470:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007478:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800747c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007480:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007484:	e00a      	b.n	800749c <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007486:	f7fe fe61 	bl	800614c <HAL_GetTick>
 800748a:	4602      	mov	r2, r0
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	1ad3      	subs	r3, r2, r3
 8007490:	f241 3288 	movw	r2, #5000	; 0x1388
 8007494:	4293      	cmp	r3, r2
 8007496:	d901      	bls.n	800749c <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 8007498:	2303      	movs	r3, #3
 800749a:	e0f0      	b.n	800767e <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800749c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d1ec      	bne.n	8007486 <HAL_RCC_OscConfig+0x532>
 80074ac:	e03e      	b.n	800752c <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074ae:	f7fe fe4d 	bl	800614c <HAL_GetTick>
 80074b2:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80074b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80074c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80074c8:	e00a      	b.n	80074e0 <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074ca:	f7fe fe3f 	bl	800614c <HAL_GetTick>
 80074ce:	4602      	mov	r2, r0
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	1ad3      	subs	r3, r2, r3
 80074d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80074d8:	4293      	cmp	r3, r2
 80074da:	d901      	bls.n	80074e0 <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 80074dc:	2303      	movs	r3, #3
 80074de:	e0ce      	b.n	800767e <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80074e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d1ec      	bne.n	80074ca <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074f0:	f7fe fe2c 	bl	800614c <HAL_GetTick>
 80074f4:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80074f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007502:	f023 0301 	bic.w	r3, r3, #1
 8007506:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800750a:	e00a      	b.n	8007522 <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800750c:	f7fe fe1e 	bl	800614c <HAL_GetTick>
 8007510:	4602      	mov	r2, r0
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	1ad3      	subs	r3, r2, r3
 8007516:	f241 3288 	movw	r2, #5000	; 0x1388
 800751a:	4293      	cmp	r3, r2
 800751c:	d901      	bls.n	8007522 <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 800751e:	2303      	movs	r3, #3
 8007520:	e0ad      	b.n	800767e <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 8007522:	f7ff fa8a 	bl	8006a3a <LL_RCC_LSE_IsReady>
 8007526:	4603      	mov	r3, r0
 8007528:	2b00      	cmp	r3, #0
 800752a:	d1ef      	bne.n	800750c <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007530:	2b00      	cmp	r3, #0
 8007532:	f000 80a3 	beq.w	800767c <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007536:	69fb      	ldr	r3, [r7, #28]
 8007538:	2b0c      	cmp	r3, #12
 800753a:	d076      	beq.n	800762a <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007540:	2b02      	cmp	r3, #2
 8007542:	d14b      	bne.n	80075dc <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007544:	f7ff fbde 	bl	8006d04 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007548:	f7fe fe00 	bl	800614c <HAL_GetTick>
 800754c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800754e:	e008      	b.n	8007562 <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007550:	f7fe fdfc 	bl	800614c <HAL_GetTick>
 8007554:	4602      	mov	r2, r0
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	1ad3      	subs	r3, r2, r3
 800755a:	2b0a      	cmp	r3, #10
 800755c:	d901      	bls.n	8007562 <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 800755e:	2303      	movs	r3, #3
 8007560:	e08d      	b.n	800767e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8007562:	f7ff fbdd 	bl	8006d20 <LL_RCC_PLL_IsReady>
 8007566:	4603      	mov	r3, r0
 8007568:	2b00      	cmp	r3, #0
 800756a:	d1f1      	bne.n	8007550 <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800756c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007570:	68da      	ldr	r2, [r3, #12]
 8007572:	4b45      	ldr	r3, [pc, #276]	; (8007688 <HAL_RCC_OscConfig+0x734>)
 8007574:	4013      	ands	r3, r2
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800757a:	687a      	ldr	r2, [r7, #4]
 800757c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800757e:	4311      	orrs	r1, r2
 8007580:	687a      	ldr	r2, [r7, #4]
 8007582:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007584:	0212      	lsls	r2, r2, #8
 8007586:	4311      	orrs	r1, r2
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800758c:	4311      	orrs	r1, r2
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007592:	4311      	orrs	r1, r2
 8007594:	687a      	ldr	r2, [r7, #4]
 8007596:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007598:	430a      	orrs	r2, r1
 800759a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800759e:	4313      	orrs	r3, r2
 80075a0:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80075a2:	f7ff fba1 	bl	8006ce8 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80075a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075aa:	68db      	ldr	r3, [r3, #12]
 80075ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80075b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075b4:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075b6:	f7fe fdc9 	bl	800614c <HAL_GetTick>
 80075ba:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80075bc:	e008      	b.n	80075d0 <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075be:	f7fe fdc5 	bl	800614c <HAL_GetTick>
 80075c2:	4602      	mov	r2, r0
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	1ad3      	subs	r3, r2, r3
 80075c8:	2b0a      	cmp	r3, #10
 80075ca:	d901      	bls.n	80075d0 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 80075cc:	2303      	movs	r3, #3
 80075ce:	e056      	b.n	800767e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 80075d0:	f7ff fba6 	bl	8006d20 <LL_RCC_PLL_IsReady>
 80075d4:	4603      	mov	r3, r0
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d0f1      	beq.n	80075be <HAL_RCC_OscConfig+0x66a>
 80075da:	e04f      	b.n	800767c <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075dc:	f7ff fb92 	bl	8006d04 <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80075e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075e4:	68db      	ldr	r3, [r3, #12]
 80075e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80075ea:	f023 0303 	bic.w	r3, r3, #3
 80075ee:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 80075f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075f4:	68db      	ldr	r3, [r3, #12]
 80075f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80075fa:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80075fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007602:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007604:	f7fe fda2 	bl	800614c <HAL_GetTick>
 8007608:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800760a:	e008      	b.n	800761e <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800760c:	f7fe fd9e 	bl	800614c <HAL_GetTick>
 8007610:	4602      	mov	r2, r0
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	1ad3      	subs	r3, r2, r3
 8007616:	2b0a      	cmp	r3, #10
 8007618:	d901      	bls.n	800761e <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 800761a:	2303      	movs	r3, #3
 800761c:	e02f      	b.n	800767e <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 800761e:	f7ff fb7f 	bl	8006d20 <LL_RCC_PLL_IsReady>
 8007622:	4603      	mov	r3, r0
 8007624:	2b00      	cmp	r3, #0
 8007626:	d1f1      	bne.n	800760c <HAL_RCC_OscConfig+0x6b8>
 8007628:	e028      	b.n	800767c <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800762e:	2b01      	cmp	r3, #1
 8007630:	d101      	bne.n	8007636 <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 8007632:	2301      	movs	r3, #1
 8007634:	e023      	b.n	800767e <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007636:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800763a:	68db      	ldr	r3, [r3, #12]
 800763c:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800763e:	69bb      	ldr	r3, [r7, #24]
 8007640:	f003 0203 	and.w	r2, r3, #3
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007648:	429a      	cmp	r2, r3
 800764a:	d115      	bne.n	8007678 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 800764c:	69bb      	ldr	r3, [r7, #24]
 800764e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007656:	429a      	cmp	r2, r3
 8007658:	d10e      	bne.n	8007678 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800765a:	69bb      	ldr	r3, [r7, #24]
 800765c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007664:	021b      	lsls	r3, r3, #8
 8007666:	429a      	cmp	r2, r3
 8007668:	d106      	bne.n	8007678 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800766a:	69bb      	ldr	r3, [r7, #24]
 800766c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007674:	429a      	cmp	r2, r3
 8007676:	d001      	beq.n	800767c <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 8007678:	2301      	movs	r3, #1
 800767a:	e000      	b.n	800767e <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 800767c:	2300      	movs	r3, #0
}
 800767e:	4618      	mov	r0, r3
 8007680:	3720      	adds	r7, #32
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}
 8007686:	bf00      	nop
 8007688:	11c1808c 	.word	0x11c1808c

0800768c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b084      	sub	sp, #16
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d101      	bne.n	80076a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	e10f      	b.n	80078c0 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80076a0:	4b89      	ldr	r3, [pc, #548]	; (80078c8 <HAL_RCC_ClockConfig+0x23c>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f003 0307 	and.w	r3, r3, #7
 80076a8:	683a      	ldr	r2, [r7, #0]
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d91b      	bls.n	80076e6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076ae:	4b86      	ldr	r3, [pc, #536]	; (80078c8 <HAL_RCC_ClockConfig+0x23c>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f023 0207 	bic.w	r2, r3, #7
 80076b6:	4984      	ldr	r1, [pc, #528]	; (80078c8 <HAL_RCC_ClockConfig+0x23c>)
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	4313      	orrs	r3, r2
 80076bc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076be:	f7fe fd45 	bl	800614c <HAL_GetTick>
 80076c2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80076c4:	e008      	b.n	80076d8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80076c6:	f7fe fd41 	bl	800614c <HAL_GetTick>
 80076ca:	4602      	mov	r2, r0
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	1ad3      	subs	r3, r2, r3
 80076d0:	2b02      	cmp	r3, #2
 80076d2:	d901      	bls.n	80076d8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80076d4:	2303      	movs	r3, #3
 80076d6:	e0f3      	b.n	80078c0 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80076d8:	4b7b      	ldr	r3, [pc, #492]	; (80078c8 <HAL_RCC_ClockConfig+0x23c>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f003 0307 	and.w	r3, r3, #7
 80076e0:	683a      	ldr	r2, [r7, #0]
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d1ef      	bne.n	80076c6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f003 0302 	and.w	r3, r3, #2
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d016      	beq.n	8007720 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	4618      	mov	r0, r3
 80076f8:	f7ff fa79 	bl	8006bee <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80076fc:	f7fe fd26 	bl	800614c <HAL_GetTick>
 8007700:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8007702:	e008      	b.n	8007716 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007704:	f7fe fd22 	bl	800614c <HAL_GetTick>
 8007708:	4602      	mov	r2, r0
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	1ad3      	subs	r3, r2, r3
 800770e:	2b02      	cmp	r3, #2
 8007710:	d901      	bls.n	8007716 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8007712:	2303      	movs	r3, #3
 8007714:	e0d4      	b.n	80078c0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8007716:	f7ff fb41 	bl	8006d9c <LL_RCC_IsActiveFlag_HPRE>
 800771a:	4603      	mov	r3, r0
 800771c:	2b00      	cmp	r3, #0
 800771e:	d0f1      	beq.n	8007704 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007728:	2b00      	cmp	r3, #0
 800772a:	d016      	beq.n	800775a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	695b      	ldr	r3, [r3, #20]
 8007730:	4618      	mov	r0, r3
 8007732:	f7ff fa6f 	bl	8006c14 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007736:	f7fe fd09 	bl	800614c <HAL_GetTick>
 800773a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800773c:	e008      	b.n	8007750 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800773e:	f7fe fd05 	bl	800614c <HAL_GetTick>
 8007742:	4602      	mov	r2, r0
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	1ad3      	subs	r3, r2, r3
 8007748:	2b02      	cmp	r3, #2
 800774a:	d901      	bls.n	8007750 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800774c:	2303      	movs	r3, #3
 800774e:	e0b7      	b.n	80078c0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8007750:	f7ff fb35 	bl	8006dbe <LL_RCC_IsActiveFlag_SHDHPRE>
 8007754:	4603      	mov	r3, r0
 8007756:	2b00      	cmp	r3, #0
 8007758:	d0f1      	beq.n	800773e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f003 0304 	and.w	r3, r3, #4
 8007762:	2b00      	cmp	r3, #0
 8007764:	d016      	beq.n	8007794 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	68db      	ldr	r3, [r3, #12]
 800776a:	4618      	mov	r0, r3
 800776c:	f7ff fa68 	bl	8006c40 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007770:	f7fe fcec 	bl	800614c <HAL_GetTick>
 8007774:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8007776:	e008      	b.n	800778a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007778:	f7fe fce8 	bl	800614c <HAL_GetTick>
 800777c:	4602      	mov	r2, r0
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	1ad3      	subs	r3, r2, r3
 8007782:	2b02      	cmp	r3, #2
 8007784:	d901      	bls.n	800778a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8007786:	2303      	movs	r3, #3
 8007788:	e09a      	b.n	80078c0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800778a:	f7ff fb2a 	bl	8006de2 <LL_RCC_IsActiveFlag_PPRE1>
 800778e:	4603      	mov	r3, r0
 8007790:	2b00      	cmp	r3, #0
 8007792:	d0f1      	beq.n	8007778 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f003 0308 	and.w	r3, r3, #8
 800779c:	2b00      	cmp	r3, #0
 800779e:	d017      	beq.n	80077d0 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	691b      	ldr	r3, [r3, #16]
 80077a4:	00db      	lsls	r3, r3, #3
 80077a6:	4618      	mov	r0, r3
 80077a8:	f7ff fa5d 	bl	8006c66 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80077ac:	f7fe fcce 	bl	800614c <HAL_GetTick>
 80077b0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80077b2:	e008      	b.n	80077c6 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80077b4:	f7fe fcca 	bl	800614c <HAL_GetTick>
 80077b8:	4602      	mov	r2, r0
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	1ad3      	subs	r3, r2, r3
 80077be:	2b02      	cmp	r3, #2
 80077c0:	d901      	bls.n	80077c6 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 80077c2:	2303      	movs	r3, #3
 80077c4:	e07c      	b.n	80078c0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80077c6:	f7ff fb1d 	bl	8006e04 <LL_RCC_IsActiveFlag_PPRE2>
 80077ca:	4603      	mov	r3, r0
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d0f1      	beq.n	80077b4 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f003 0301 	and.w	r3, r3, #1
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d043      	beq.n	8007864 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	2b02      	cmp	r3, #2
 80077e2:	d106      	bne.n	80077f2 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80077e4:	f7ff f8d7 	bl	8006996 <LL_RCC_HSE_IsReady>
 80077e8:	4603      	mov	r3, r0
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d11e      	bne.n	800782c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80077ee:	2301      	movs	r3, #1
 80077f0:	e066      	b.n	80078c0 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	2b03      	cmp	r3, #3
 80077f8:	d106      	bne.n	8007808 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80077fa:	f7ff fa91 	bl	8006d20 <LL_RCC_PLL_IsReady>
 80077fe:	4603      	mov	r3, r0
 8007800:	2b00      	cmp	r3, #0
 8007802:	d113      	bne.n	800782c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007804:	2301      	movs	r3, #1
 8007806:	e05b      	b.n	80078c0 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d106      	bne.n	800781e <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8007810:	f7ff f971 	bl	8006af6 <LL_RCC_MSI_IsReady>
 8007814:	4603      	mov	r3, r0
 8007816:	2b00      	cmp	r3, #0
 8007818:	d108      	bne.n	800782c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800781a:	2301      	movs	r3, #1
 800781c:	e050      	b.n	80078c0 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800781e:	f7ff f8e7 	bl	80069f0 <LL_RCC_HSI_IsReady>
 8007822:	4603      	mov	r3, r0
 8007824:	2b00      	cmp	r3, #0
 8007826:	d101      	bne.n	800782c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007828:	2301      	movs	r3, #1
 800782a:	e049      	b.n	80078c0 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	4618      	mov	r0, r3
 8007832:	f7ff f9be 	bl	8006bb2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007836:	f7fe fc89 	bl	800614c <HAL_GetTick>
 800783a:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800783c:	e00a      	b.n	8007854 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800783e:	f7fe fc85 	bl	800614c <HAL_GetTick>
 8007842:	4602      	mov	r2, r0
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	1ad3      	subs	r3, r2, r3
 8007848:	f241 3288 	movw	r2, #5000	; 0x1388
 800784c:	4293      	cmp	r3, r2
 800784e:	d901      	bls.n	8007854 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8007850:	2303      	movs	r3, #3
 8007852:	e035      	b.n	80078c0 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007854:	f7ff f9c0 	bl	8006bd8 <LL_RCC_GetSysClkSource>
 8007858:	4602      	mov	r2, r0
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	009b      	lsls	r3, r3, #2
 8007860:	429a      	cmp	r2, r3
 8007862:	d1ec      	bne.n	800783e <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007864:	4b18      	ldr	r3, [pc, #96]	; (80078c8 <HAL_RCC_ClockConfig+0x23c>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f003 0307 	and.w	r3, r3, #7
 800786c:	683a      	ldr	r2, [r7, #0]
 800786e:	429a      	cmp	r2, r3
 8007870:	d21b      	bcs.n	80078aa <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007872:	4b15      	ldr	r3, [pc, #84]	; (80078c8 <HAL_RCC_ClockConfig+0x23c>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f023 0207 	bic.w	r2, r3, #7
 800787a:	4913      	ldr	r1, [pc, #76]	; (80078c8 <HAL_RCC_ClockConfig+0x23c>)
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	4313      	orrs	r3, r2
 8007880:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007882:	f7fe fc63 	bl	800614c <HAL_GetTick>
 8007886:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007888:	e008      	b.n	800789c <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800788a:	f7fe fc5f 	bl	800614c <HAL_GetTick>
 800788e:	4602      	mov	r2, r0
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	1ad3      	subs	r3, r2, r3
 8007894:	2b02      	cmp	r3, #2
 8007896:	d901      	bls.n	800789c <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8007898:	2303      	movs	r3, #3
 800789a:	e011      	b.n	80078c0 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800789c:	4b0a      	ldr	r3, [pc, #40]	; (80078c8 <HAL_RCC_ClockConfig+0x23c>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f003 0307 	and.w	r3, r3, #7
 80078a4:	683a      	ldr	r2, [r7, #0]
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d1ef      	bne.n	800788a <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80078aa:	f000 f8b3 	bl	8007a14 <HAL_RCC_GetHCLKFreq>
 80078ae:	4603      	mov	r3, r0
 80078b0:	4a06      	ldr	r2, [pc, #24]	; (80078cc <HAL_RCC_ClockConfig+0x240>)
 80078b2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80078b4:	4b06      	ldr	r3, [pc, #24]	; (80078d0 <HAL_RCC_ClockConfig+0x244>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4618      	mov	r0, r3
 80078ba:	f7fe fbfb 	bl	80060b4 <HAL_InitTick>
 80078be:	4603      	mov	r3, r0
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3710      	adds	r7, #16
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}
 80078c8:	58004000 	.word	0x58004000
 80078cc:	20000000 	.word	0x20000000
 80078d0:	20000004 	.word	0x20000004

080078d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80078d4:	b590      	push	{r4, r7, lr}
 80078d6:	b087      	sub	sp, #28
 80078d8:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80078da:	2300      	movs	r3, #0
 80078dc:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80078de:	2300      	movs	r3, #0
 80078e0:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80078e2:	f7ff f979 	bl	8006bd8 <LL_RCC_GetSysClkSource>
 80078e6:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80078e8:	f7ff fa4d 	bl	8006d86 <LL_RCC_PLL_GetMainSource>
 80078ec:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d005      	beq.n	8007900 <HAL_RCC_GetSysClockFreq+0x2c>
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	2b0c      	cmp	r3, #12
 80078f8:	d139      	bne.n	800796e <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d136      	bne.n	800796e <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8007900:	f7ff f909 	bl	8006b16 <LL_RCC_MSI_IsEnabledRangeSelect>
 8007904:	4603      	mov	r3, r0
 8007906:	2b00      	cmp	r3, #0
 8007908:	d115      	bne.n	8007936 <HAL_RCC_GetSysClockFreq+0x62>
 800790a:	f7ff f904 	bl	8006b16 <LL_RCC_MSI_IsEnabledRangeSelect>
 800790e:	4603      	mov	r3, r0
 8007910:	2b01      	cmp	r3, #1
 8007912:	d106      	bne.n	8007922 <HAL_RCC_GetSysClockFreq+0x4e>
 8007914:	f7ff f922 	bl	8006b5c <LL_RCC_MSI_GetRange>
 8007918:	4603      	mov	r3, r0
 800791a:	0a1b      	lsrs	r3, r3, #8
 800791c:	f003 030f 	and.w	r3, r3, #15
 8007920:	e005      	b.n	800792e <HAL_RCC_GetSysClockFreq+0x5a>
 8007922:	f7ff f926 	bl	8006b72 <LL_RCC_MSI_GetRangeAfterStandby>
 8007926:	4603      	mov	r3, r0
 8007928:	0a1b      	lsrs	r3, r3, #8
 800792a:	f003 030f 	and.w	r3, r3, #15
 800792e:	4a36      	ldr	r2, [pc, #216]	; (8007a08 <HAL_RCC_GetSysClockFreq+0x134>)
 8007930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007934:	e014      	b.n	8007960 <HAL_RCC_GetSysClockFreq+0x8c>
 8007936:	f7ff f8ee 	bl	8006b16 <LL_RCC_MSI_IsEnabledRangeSelect>
 800793a:	4603      	mov	r3, r0
 800793c:	2b01      	cmp	r3, #1
 800793e:	d106      	bne.n	800794e <HAL_RCC_GetSysClockFreq+0x7a>
 8007940:	f7ff f90c 	bl	8006b5c <LL_RCC_MSI_GetRange>
 8007944:	4603      	mov	r3, r0
 8007946:	091b      	lsrs	r3, r3, #4
 8007948:	f003 030f 	and.w	r3, r3, #15
 800794c:	e005      	b.n	800795a <HAL_RCC_GetSysClockFreq+0x86>
 800794e:	f7ff f910 	bl	8006b72 <LL_RCC_MSI_GetRangeAfterStandby>
 8007952:	4603      	mov	r3, r0
 8007954:	091b      	lsrs	r3, r3, #4
 8007956:	f003 030f 	and.w	r3, r3, #15
 800795a:	4a2b      	ldr	r2, [pc, #172]	; (8007a08 <HAL_RCC_GetSysClockFreq+0x134>)
 800795c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007960:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d115      	bne.n	8007994 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800796c:	e012      	b.n	8007994 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	2b04      	cmp	r3, #4
 8007972:	d102      	bne.n	800797a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007974:	4b25      	ldr	r3, [pc, #148]	; (8007a0c <HAL_RCC_GetSysClockFreq+0x138>)
 8007976:	617b      	str	r3, [r7, #20]
 8007978:	e00c      	b.n	8007994 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	2b08      	cmp	r3, #8
 800797e:	d109      	bne.n	8007994 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007980:	f7fe ffdc 	bl	800693c <LL_RCC_HSE_IsEnabledDiv2>
 8007984:	4603      	mov	r3, r0
 8007986:	2b01      	cmp	r3, #1
 8007988:	d102      	bne.n	8007990 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800798a:	4b20      	ldr	r3, [pc, #128]	; (8007a0c <HAL_RCC_GetSysClockFreq+0x138>)
 800798c:	617b      	str	r3, [r7, #20]
 800798e:	e001      	b.n	8007994 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8007990:	4b1f      	ldr	r3, [pc, #124]	; (8007a10 <HAL_RCC_GetSysClockFreq+0x13c>)
 8007992:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007994:	f7ff f920 	bl	8006bd8 <LL_RCC_GetSysClkSource>
 8007998:	4603      	mov	r3, r0
 800799a:	2b0c      	cmp	r3, #12
 800799c:	d12f      	bne.n	80079fe <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800799e:	f7ff f9f2 	bl	8006d86 <LL_RCC_PLL_GetMainSource>
 80079a2:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2b02      	cmp	r3, #2
 80079a8:	d003      	beq.n	80079b2 <HAL_RCC_GetSysClockFreq+0xde>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2b03      	cmp	r3, #3
 80079ae:	d003      	beq.n	80079b8 <HAL_RCC_GetSysClockFreq+0xe4>
 80079b0:	e00d      	b.n	80079ce <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80079b2:	4b16      	ldr	r3, [pc, #88]	; (8007a0c <HAL_RCC_GetSysClockFreq+0x138>)
 80079b4:	60fb      	str	r3, [r7, #12]
        break;
 80079b6:	e00d      	b.n	80079d4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80079b8:	f7fe ffc0 	bl	800693c <LL_RCC_HSE_IsEnabledDiv2>
 80079bc:	4603      	mov	r3, r0
 80079be:	2b01      	cmp	r3, #1
 80079c0:	d102      	bne.n	80079c8 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80079c2:	4b12      	ldr	r3, [pc, #72]	; (8007a0c <HAL_RCC_GetSysClockFreq+0x138>)
 80079c4:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80079c6:	e005      	b.n	80079d4 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80079c8:	4b11      	ldr	r3, [pc, #68]	; (8007a10 <HAL_RCC_GetSysClockFreq+0x13c>)
 80079ca:	60fb      	str	r3, [r7, #12]
        break;
 80079cc:	e002      	b.n	80079d4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	60fb      	str	r3, [r7, #12]
        break;
 80079d2:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80079d4:	f7ff f9b5 	bl	8006d42 <LL_RCC_PLL_GetN>
 80079d8:	4602      	mov	r2, r0
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	fb03 f402 	mul.w	r4, r3, r2
 80079e0:	f7ff f9c6 	bl	8006d70 <LL_RCC_PLL_GetDivider>
 80079e4:	4603      	mov	r3, r0
 80079e6:	091b      	lsrs	r3, r3, #4
 80079e8:	3301      	adds	r3, #1
 80079ea:	fbb4 f4f3 	udiv	r4, r4, r3
 80079ee:	f7ff f9b4 	bl	8006d5a <LL_RCC_PLL_GetR>
 80079f2:	4603      	mov	r3, r0
 80079f4:	0f5b      	lsrs	r3, r3, #29
 80079f6:	3301      	adds	r3, #1
 80079f8:	fbb4 f3f3 	udiv	r3, r4, r3
 80079fc:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80079fe:	697b      	ldr	r3, [r7, #20]
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	371c      	adds	r7, #28
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd90      	pop	{r4, r7, pc}
 8007a08:	080108b4 	.word	0x080108b4
 8007a0c:	00f42400 	.word	0x00f42400
 8007a10:	01e84800 	.word	0x01e84800

08007a14 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a14:	b598      	push	{r3, r4, r7, lr}
 8007a16:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8007a18:	f7ff ff5c 	bl	80078d4 <HAL_RCC_GetSysClockFreq>
 8007a1c:	4604      	mov	r4, r0
 8007a1e:	f7ff f935 	bl	8006c8c <LL_RCC_GetAHBPrescaler>
 8007a22:	4603      	mov	r3, r0
 8007a24:	091b      	lsrs	r3, r3, #4
 8007a26:	f003 030f 	and.w	r3, r3, #15
 8007a2a:	4a03      	ldr	r2, [pc, #12]	; (8007a38 <HAL_RCC_GetHCLKFreq+0x24>)
 8007a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a30:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	bd98      	pop	{r3, r4, r7, pc}
 8007a38:	08010854 	.word	0x08010854

08007a3c <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a3c:	b598      	push	{r3, r4, r7, lr}
 8007a3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8007a40:	f7ff ffe8 	bl	8007a14 <HAL_RCC_GetHCLKFreq>
 8007a44:	4604      	mov	r4, r0
 8007a46:	f7ff f939 	bl	8006cbc <LL_RCC_GetAPB1Prescaler>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	0a1b      	lsrs	r3, r3, #8
 8007a4e:	4a03      	ldr	r2, [pc, #12]	; (8007a5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007a50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a54:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	bd98      	pop	{r3, r4, r7, pc}
 8007a5c:	08010894 	.word	0x08010894

08007a60 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a60:	b598      	push	{r3, r4, r7, lr}
 8007a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8007a64:	f7ff ffd6 	bl	8007a14 <HAL_RCC_GetHCLKFreq>
 8007a68:	4604      	mov	r4, r0
 8007a6a:	f7ff f932 	bl	8006cd2 <LL_RCC_GetAPB2Prescaler>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	0adb      	lsrs	r3, r3, #11
 8007a72:	4a03      	ldr	r2, [pc, #12]	; (8007a80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007a74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a78:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	bd98      	pop	{r3, r4, r7, pc}
 8007a80:	08010894 	.word	0x08010894

08007a84 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8007a84:	b590      	push	{r4, r7, lr}
 8007a86:	b085      	sub	sp, #20
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	091b      	lsrs	r3, r3, #4
 8007a90:	f003 030f 	and.w	r3, r3, #15
 8007a94:	4a10      	ldr	r2, [pc, #64]	; (8007ad8 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8007a96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a9a:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8007a9c:	f7ff f901 	bl	8006ca2 <LL_RCC_GetAHB3Prescaler>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	091b      	lsrs	r3, r3, #4
 8007aa4:	f003 030f 	and.w	r3, r3, #15
 8007aa8:	4a0c      	ldr	r2, [pc, #48]	; (8007adc <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8007aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007aae:	68fa      	ldr	r2, [r7, #12]
 8007ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ab4:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	4a09      	ldr	r2, [pc, #36]	; (8007ae0 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8007aba:	fba2 2303 	umull	r2, r3, r2, r3
 8007abe:	0c9c      	lsrs	r4, r3, #18
 8007ac0:	f7fe ff02 	bl	80068c8 <HAL_PWREx_GetVoltageRange>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	4619      	mov	r1, r3
 8007ac8:	4620      	mov	r0, r4
 8007aca:	f000 f80b 	bl	8007ae4 <RCC_SetFlashLatency>
 8007ace:	4603      	mov	r3, r0
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3714      	adds	r7, #20
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd90      	pop	{r4, r7, pc}
 8007ad8:	080108b4 	.word	0x080108b4
 8007adc:	08010854 	.word	0x08010854
 8007ae0:	431bde83 	.word	0x431bde83

08007ae4 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b08e      	sub	sp, #56	; 0x38
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8007aee:	4a3a      	ldr	r2, [pc, #232]	; (8007bd8 <RCC_SetFlashLatency+0xf4>)
 8007af0:	f107 0320 	add.w	r3, r7, #32
 8007af4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007af8:	6018      	str	r0, [r3, #0]
 8007afa:	3304      	adds	r3, #4
 8007afc:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8007afe:	4a37      	ldr	r2, [pc, #220]	; (8007bdc <RCC_SetFlashLatency+0xf8>)
 8007b00:	f107 0318 	add.w	r3, r7, #24
 8007b04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007b08:	6018      	str	r0, [r3, #0]
 8007b0a:	3304      	adds	r3, #4
 8007b0c:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8007b0e:	4a34      	ldr	r2, [pc, #208]	; (8007be0 <RCC_SetFlashLatency+0xfc>)
 8007b10:	f107 030c 	add.w	r3, r7, #12
 8007b14:	ca07      	ldmia	r2, {r0, r1, r2}
 8007b16:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b24:	d11b      	bne.n	8007b5e <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007b26:	2300      	movs	r3, #0
 8007b28:	633b      	str	r3, [r7, #48]	; 0x30
 8007b2a:	e014      	b.n	8007b56 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8007b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b2e:	005b      	lsls	r3, r3, #1
 8007b30:	3338      	adds	r3, #56	; 0x38
 8007b32:	443b      	add	r3, r7
 8007b34:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8007b38:	461a      	mov	r2, r3
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d807      	bhi.n	8007b50 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	3338      	adds	r3, #56	; 0x38
 8007b46:	443b      	add	r3, r7
 8007b48:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8007b4c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b4e:	e021      	b.n	8007b94 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b52:	3301      	adds	r3, #1
 8007b54:	633b      	str	r3, [r7, #48]	; 0x30
 8007b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b58:	2b02      	cmp	r3, #2
 8007b5a:	d9e7      	bls.n	8007b2c <RCC_SetFlashLatency+0x48>
 8007b5c:	e01a      	b.n	8007b94 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007b5e:	2300      	movs	r3, #0
 8007b60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b62:	e014      	b.n	8007b8e <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8007b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b66:	005b      	lsls	r3, r3, #1
 8007b68:	3338      	adds	r3, #56	; 0x38
 8007b6a:	443b      	add	r3, r7
 8007b6c:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8007b70:	461a      	mov	r2, r3
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d807      	bhi.n	8007b88 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b7a:	009b      	lsls	r3, r3, #2
 8007b7c:	3338      	adds	r3, #56	; 0x38
 8007b7e:	443b      	add	r3, r7
 8007b80:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8007b84:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b86:	e005      	b.n	8007b94 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b8a:	3301      	adds	r3, #1
 8007b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b90:	2b02      	cmp	r3, #2
 8007b92:	d9e7      	bls.n	8007b64 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007b94:	4b13      	ldr	r3, [pc, #76]	; (8007be4 <RCC_SetFlashLatency+0x100>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f023 0207 	bic.w	r2, r3, #7
 8007b9c:	4911      	ldr	r1, [pc, #68]	; (8007be4 <RCC_SetFlashLatency+0x100>)
 8007b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007ba4:	f7fe fad2 	bl	800614c <HAL_GetTick>
 8007ba8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007baa:	e008      	b.n	8007bbe <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007bac:	f7fe face 	bl	800614c <HAL_GetTick>
 8007bb0:	4602      	mov	r2, r0
 8007bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb4:	1ad3      	subs	r3, r2, r3
 8007bb6:	2b02      	cmp	r3, #2
 8007bb8:	d901      	bls.n	8007bbe <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8007bba:	2303      	movs	r3, #3
 8007bbc:	e007      	b.n	8007bce <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007bbe:	4b09      	ldr	r3, [pc, #36]	; (8007be4 <RCC_SetFlashLatency+0x100>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f003 0307 	and.w	r3, r3, #7
 8007bc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	d1ef      	bne.n	8007bac <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8007bcc:	2300      	movs	r3, #0
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3738      	adds	r7, #56	; 0x38
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
 8007bd6:	bf00      	nop
 8007bd8:	08010764 	.word	0x08010764
 8007bdc:	0801076c 	.word	0x0801076c
 8007be0:	08010774 	.word	0x08010774
 8007be4:	58004000 	.word	0x58004000

08007be8 <LL_RCC_LSE_IsReady>:
{
 8007be8:	b480      	push	{r7}
 8007bea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007bec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bf4:	f003 0302 	and.w	r3, r3, #2
 8007bf8:	2b02      	cmp	r3, #2
 8007bfa:	d101      	bne.n	8007c00 <LL_RCC_LSE_IsReady+0x18>
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	e000      	b.n	8007c02 <LL_RCC_LSE_IsReady+0x1a>
 8007c00:	2300      	movs	r3, #0
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bc80      	pop	{r7}
 8007c08:	4770      	bx	lr

08007c0a <LL_RCC_SetUSARTClockSource>:
{
 8007c0a:	b480      	push	{r7}
 8007c0c:	b083      	sub	sp, #12
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8007c12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c16:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	0c1b      	lsrs	r3, r3, #16
 8007c1e:	43db      	mvns	r3, r3
 8007c20:	401a      	ands	r2, r3
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007c30:	bf00      	nop
 8007c32:	370c      	adds	r7, #12
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bc80      	pop	{r7}
 8007c38:	4770      	bx	lr

08007c3a <LL_RCC_SetI2SClockSource>:
{
 8007c3a:	b480      	push	{r7}
 8007c3c:	b083      	sub	sp, #12
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8007c42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c4a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	4313      	orrs	r3, r2
 8007c56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007c5a:	bf00      	nop
 8007c5c:	370c      	adds	r7, #12
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bc80      	pop	{r7}
 8007c62:	4770      	bx	lr

08007c64 <LL_RCC_SetLPUARTClockSource>:
{
 8007c64:	b480      	push	{r7}
 8007c66:	b083      	sub	sp, #12
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8007c6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c74:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007c78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007c84:	bf00      	nop
 8007c86:	370c      	adds	r7, #12
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bc80      	pop	{r7}
 8007c8c:	4770      	bx	lr

08007c8e <LL_RCC_SetI2CClockSource>:
{
 8007c8e:	b480      	push	{r7}
 8007c90:	b083      	sub	sp, #12
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8007c96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c9a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	091b      	lsrs	r3, r3, #4
 8007ca2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8007ca6:	43db      	mvns	r3, r3
 8007ca8:	401a      	ands	r2, r3
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	011b      	lsls	r3, r3, #4
 8007cae:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8007cb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007cbc:	bf00      	nop
 8007cbe:	370c      	adds	r7, #12
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bc80      	pop	{r7}
 8007cc4:	4770      	bx	lr

08007cc6 <LL_RCC_SetLPTIMClockSource>:
{
 8007cc6:	b480      	push	{r7}
 8007cc8:	b083      	sub	sp, #12
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8007cce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cd2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	0c1b      	lsrs	r3, r3, #16
 8007cda:	041b      	lsls	r3, r3, #16
 8007cdc:	43db      	mvns	r3, r3
 8007cde:	401a      	ands	r2, r3
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	041b      	lsls	r3, r3, #16
 8007ce4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007cee:	bf00      	nop
 8007cf0:	370c      	adds	r7, #12
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bc80      	pop	{r7}
 8007cf6:	4770      	bx	lr

08007cf8 <LL_RCC_SetRNGClockSource>:
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b083      	sub	sp, #12
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8007d00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d08:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8007d0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	4313      	orrs	r3, r2
 8007d14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007d18:	bf00      	nop
 8007d1a:	370c      	adds	r7, #12
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bc80      	pop	{r7}
 8007d20:	4770      	bx	lr

08007d22 <LL_RCC_SetADCClockSource>:
{
 8007d22:	b480      	push	{r7}
 8007d24:	b083      	sub	sp, #12
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8007d2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d32:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007d36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007d42:	bf00      	nop
 8007d44:	370c      	adds	r7, #12
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bc80      	pop	{r7}
 8007d4a:	4770      	bx	lr

08007d4c <LL_RCC_SetRTCClockSource>:
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b083      	sub	sp, #12
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8007d54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007d60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	4313      	orrs	r3, r2
 8007d68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8007d6c:	bf00      	nop
 8007d6e:	370c      	adds	r7, #12
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bc80      	pop	{r7}
 8007d74:	4770      	bx	lr

08007d76 <LL_RCC_GetRTCClockSource>:
{
 8007d76:	b480      	push	{r7}
 8007d78:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8007d7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d82:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bc80      	pop	{r7}
 8007d8c:	4770      	bx	lr

08007d8e <LL_RCC_ForceBackupDomainReset>:
{
 8007d8e:	b480      	push	{r7}
 8007d90:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007d92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007d9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007da2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007da6:	bf00      	nop
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bc80      	pop	{r7}
 8007dac:	4770      	bx	lr

08007dae <LL_RCC_ReleaseBackupDomainReset>:
{
 8007dae:	b480      	push	{r7}
 8007db0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007db2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007dbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007dc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007dc6:	bf00      	nop
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bc80      	pop	{r7}
 8007dcc:	4770      	bx	lr
	...

08007dd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b086      	sub	sp, #24
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8007ddc:	2300      	movs	r3, #0
 8007dde:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8007de0:	2300      	movs	r3, #0
 8007de2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d058      	beq.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8007df0:	f7fe fd5c 	bl	80068ac <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007df4:	f7fe f9aa 	bl	800614c <HAL_GetTick>
 8007df8:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8007dfa:	e009      	b.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007dfc:	f7fe f9a6 	bl	800614c <HAL_GetTick>
 8007e00:	4602      	mov	r2, r0
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	1ad3      	subs	r3, r2, r3
 8007e06:	2b02      	cmp	r3, #2
 8007e08:	d902      	bls.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8007e0a:	2303      	movs	r3, #3
 8007e0c:	74fb      	strb	r3, [r7, #19]
        break;
 8007e0e:	e006      	b.n	8007e1e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8007e10:	4b7b      	ldr	r3, [pc, #492]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e1c:	d1ee      	bne.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8007e1e:	7cfb      	ldrb	r3, [r7, #19]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d13c      	bne.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8007e24:	f7ff ffa7 	bl	8007d76 <LL_RCC_GetRTCClockSource>
 8007e28:	4602      	mov	r2, r0
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	d00f      	beq.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007e32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e3e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007e40:	f7ff ffa5 	bl	8007d8e <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007e44:	f7ff ffb3 	bl	8007dae <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007e48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	f003 0302 	and.w	r3, r3, #2
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d014      	beq.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e5c:	f7fe f976 	bl	800614c <HAL_GetTick>
 8007e60:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8007e62:	e00b      	b.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e64:	f7fe f972 	bl	800614c <HAL_GetTick>
 8007e68:	4602      	mov	r2, r0
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	1ad3      	subs	r3, r2, r3
 8007e6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d902      	bls.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8007e76:	2303      	movs	r3, #3
 8007e78:	74fb      	strb	r3, [r7, #19]
            break;
 8007e7a:	e004      	b.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8007e7c:	f7ff feb4 	bl	8007be8 <LL_RCC_LSE_IsReady>
 8007e80:	4603      	mov	r3, r0
 8007e82:	2b01      	cmp	r3, #1
 8007e84:	d1ee      	bne.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8007e86:	7cfb      	ldrb	r3, [r7, #19]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d105      	bne.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e90:	4618      	mov	r0, r3
 8007e92:	f7ff ff5b 	bl	8007d4c <LL_RCC_SetRTCClockSource>
 8007e96:	e004      	b.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007e98:	7cfb      	ldrb	r3, [r7, #19]
 8007e9a:	74bb      	strb	r3, [r7, #18]
 8007e9c:	e001      	b.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e9e:	7cfb      	ldrb	r3, [r7, #19]
 8007ea0:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f003 0301 	and.w	r3, r3, #1
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d004      	beq.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f7ff fea9 	bl	8007c0a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f003 0302 	and.w	r3, r3, #2
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d004      	beq.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	689b      	ldr	r3, [r3, #8]
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f7ff fe9e 	bl	8007c0a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f003 0320 	and.w	r3, r3, #32
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d004      	beq.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	691b      	ldr	r3, [r3, #16]
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f7ff fec0 	bl	8007c64 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d004      	beq.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6a1b      	ldr	r3, [r3, #32]
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f7ff fee6 	bl	8007cc6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d004      	beq.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f7ff fedb 	bl	8007cc6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d004      	beq.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f20:	4618      	mov	r0, r3
 8007f22:	f7ff fed0 	bl	8007cc6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d004      	beq.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	695b      	ldr	r3, [r3, #20]
 8007f36:	4618      	mov	r0, r3
 8007f38:	f7ff fea9 	bl	8007c8e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d004      	beq.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	699b      	ldr	r3, [r3, #24]
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f7ff fe9e 	bl	8007c8e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d004      	beq.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	69db      	ldr	r3, [r3, #28]
 8007f62:	4618      	mov	r0, r3
 8007f64:	f7ff fe93 	bl	8007c8e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f003 0310 	and.w	r3, r3, #16
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d011      	beq.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	68db      	ldr	r3, [r3, #12]
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f7ff fe5e 	bl	8007c3a <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	68db      	ldr	r3, [r3, #12]
 8007f82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f86:	d107      	bne.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8007f88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f8c:	68db      	ldr	r3, [r3, #12]
 8007f8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007f96:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d010      	beq.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f7ff fea5 	bl	8007cf8 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d107      	bne.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8007fb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fba:	68db      	ldr	r3, [r3, #12]
 8007fbc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007fc0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007fc4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d011      	beq.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f7ff fea3 	bl	8007d22 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fe4:	d107      	bne.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007fe6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fea:	68db      	ldr	r3, [r3, #12]
 8007fec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ff0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ff4:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8007ff6:	7cbb      	ldrb	r3, [r7, #18]
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3718      	adds	r7, #24
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}
 8008000:	58000400 	.word	0x58000400

08008004 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8008004:	b480      	push	{r7}
 8008006:	b083      	sub	sp, #12
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 800800c:	4b06      	ldr	r3, [pc, #24]	; (8008028 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800800e:	689b      	ldr	r3, [r3, #8]
 8008010:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008014:	4904      	ldr	r1, [pc, #16]	; (8008028 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	4313      	orrs	r3, r2
 800801a:	608b      	str	r3, [r1, #8]
}
 800801c:	bf00      	nop
 800801e:	370c      	adds	r7, #12
 8008020:	46bd      	mov	sp, r7
 8008022:	bc80      	pop	{r7}
 8008024:	4770      	bx	lr
 8008026:	bf00      	nop
 8008028:	58000400 	.word	0x58000400

0800802c <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 800802c:	b480      	push	{r7}
 800802e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8008030:	4b05      	ldr	r3, [pc, #20]	; (8008048 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8008032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008036:	4a04      	ldr	r2, [pc, #16]	; (8008048 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8008038:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800803c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008040:	bf00      	nop
 8008042:	46bd      	mov	sp, r7
 8008044:	bc80      	pop	{r7}
 8008046:	4770      	bx	lr
 8008048:	58000400 	.word	0x58000400

0800804c <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 800804c:	b480      	push	{r7}
 800804e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8008050:	4b05      	ldr	r3, [pc, #20]	; (8008068 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8008052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008056:	4a04      	ldr	r2, [pc, #16]	; (8008068 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8008058:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800805c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008060:	bf00      	nop
 8008062:	46bd      	mov	sp, r7
 8008064:	bc80      	pop	{r7}
 8008066:	4770      	bx	lr
 8008068:	58000400 	.word	0x58000400

0800806c <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 800806c:	b480      	push	{r7}
 800806e:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8008070:	4b03      	ldr	r3, [pc, #12]	; (8008080 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8008072:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008076:	619a      	str	r2, [r3, #24]
}
 8008078:	bf00      	nop
 800807a:	46bd      	mov	sp, r7
 800807c:	bc80      	pop	{r7}
 800807e:	4770      	bx	lr
 8008080:	58000400 	.word	0x58000400

08008084 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8008084:	b480      	push	{r7}
 8008086:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8008088:	4b06      	ldr	r3, [pc, #24]	; (80080a4 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 800808a:	695b      	ldr	r3, [r3, #20]
 800808c:	f003 0302 	and.w	r3, r3, #2
 8008090:	2b02      	cmp	r3, #2
 8008092:	d101      	bne.n	8008098 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8008094:	2301      	movs	r3, #1
 8008096:	e000      	b.n	800809a <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8008098:	2300      	movs	r3, #0
}
 800809a:	4618      	mov	r0, r3
 800809c:	46bd      	mov	sp, r7
 800809e:	bc80      	pop	{r7}
 80080a0:	4770      	bx	lr
 80080a2:	bf00      	nop
 80080a4:	58000400 	.word	0x58000400

080080a8 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 80080a8:	b480      	push	{r7}
 80080aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 80080ac:	4b06      	ldr	r3, [pc, #24]	; (80080c8 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 80080ae:	695b      	ldr	r3, [r3, #20]
 80080b0:	f003 0304 	and.w	r3, r3, #4
 80080b4:	2b04      	cmp	r3, #4
 80080b6:	d101      	bne.n	80080bc <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 80080b8:	2301      	movs	r3, #1
 80080ba:	e000      	b.n	80080be <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 80080bc:	2300      	movs	r3, #0
}
 80080be:	4618      	mov	r0, r3
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bc80      	pop	{r7}
 80080c4:	4770      	bx	lr
 80080c6:	bf00      	nop
 80080c8:	58000400 	.word	0x58000400

080080cc <LL_RCC_RF_DisableReset>:
{
 80080cc:	b480      	push	{r7}
 80080ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 80080d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80080d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80080dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80080e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80080e4:	bf00      	nop
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bc80      	pop	{r7}
 80080ea:	4770      	bx	lr

080080ec <LL_RCC_IsRFUnderReset>:
{
 80080ec:	b480      	push	{r7}
 80080ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 80080f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80080f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80080fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008100:	d101      	bne.n	8008106 <LL_RCC_IsRFUnderReset+0x1a>
 8008102:	2301      	movs	r3, #1
 8008104:	e000      	b.n	8008108 <LL_RCC_IsRFUnderReset+0x1c>
 8008106:	2300      	movs	r3, #0
}
 8008108:	4618      	mov	r0, r3
 800810a:	46bd      	mov	sp, r7
 800810c:	bc80      	pop	{r7}
 800810e:	4770      	bx	lr

08008110 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8008110:	b480      	push	{r7}
 8008112:	b083      	sub	sp, #12
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8008118:	4b06      	ldr	r3, [pc, #24]	; (8008134 <LL_EXTI_EnableIT_32_63+0x24>)
 800811a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800811e:	4905      	ldr	r1, [pc, #20]	; (8008134 <LL_EXTI_EnableIT_32_63+0x24>)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	4313      	orrs	r3, r2
 8008124:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8008128:	bf00      	nop
 800812a:	370c      	adds	r7, #12
 800812c:	46bd      	mov	sp, r7
 800812e:	bc80      	pop	{r7}
 8008130:	4770      	bx	lr
 8008132:	bf00      	nop
 8008134:	58000800 	.word	0x58000800

08008138 <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b084      	sub	sp, #16
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d103      	bne.n	800814e <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8008146:	2301      	movs	r3, #1
 8008148:	73fb      	strb	r3, [r7, #15]
    return status;
 800814a:	7bfb      	ldrb	r3, [r7, #15]
 800814c:	e04b      	b.n	80081e6 <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 800814e:	2300      	movs	r3, #0
 8008150:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	799b      	ldrb	r3, [r3, #6]
 8008156:	b2db      	uxtb	r3, r3
 8008158:	2b00      	cmp	r3, #0
 800815a:	d105      	bne.n	8008168 <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2200      	movs	r2, #0
 8008160:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f7fd fc58 	bl	8005a18 <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2202      	movs	r2, #2
 800816c:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 800816e:	f7ff ffad 	bl	80080cc <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008172:	4b1f      	ldr	r3, [pc, #124]	; (80081f0 <HAL_SUBGHZ_Init+0xb8>)
 8008174:	681a      	ldr	r2, [r3, #0]
 8008176:	4613      	mov	r3, r2
 8008178:	00db      	lsls	r3, r3, #3
 800817a:	1a9b      	subs	r3, r3, r2
 800817c:	009b      	lsls	r3, r3, #2
 800817e:	0cdb      	lsrs	r3, r3, #19
 8008180:	2264      	movs	r2, #100	; 0x64
 8008182:	fb02 f303 	mul.w	r3, r2, r3
 8008186:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d105      	bne.n	800819a <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 800818e:	2301      	movs	r3, #1
 8008190:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2201      	movs	r2, #1
 8008196:	609a      	str	r2, [r3, #8]
      break;
 8008198:	e007      	b.n	80081aa <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	3b01      	subs	r3, #1
 800819e:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 80081a0:	f7ff ffa4 	bl	80080ec <LL_RCC_IsRFUnderReset>
 80081a4:	4603      	mov	r3, r0
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d1ee      	bne.n	8008188 <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 80081aa:	f7ff ff3f 	bl	800802c <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 80081ae:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80081b2:	f7ff ffad 	bl	8008110 <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 80081b6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80081ba:	f7ff ff23 	bl	8008004 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 80081be:	f7ff ff55 	bl	800806c <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 80081c2:	7bfb      	ldrb	r3, [r7, #15]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d10a      	bne.n	80081de <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4618      	mov	r0, r3
 80081ce:	f000 fa2f 	bl	8008630 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2201      	movs	r2, #1
 80081d6:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2200      	movs	r2, #0
 80081dc:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2201      	movs	r2, #1
 80081e2:	719a      	strb	r2, [r3, #6]

  return status;
 80081e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3710      	adds	r7, #16
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}
 80081ee:	bf00      	nop
 80081f0:	20000000 	.word	0x20000000

080081f4 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b086      	sub	sp, #24
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	60f8      	str	r0, [r7, #12]
 80081fc:	607a      	str	r2, [r7, #4]
 80081fe:	461a      	mov	r2, r3
 8008200:	460b      	mov	r3, r1
 8008202:	817b      	strh	r3, [r7, #10]
 8008204:	4613      	mov	r3, r2
 8008206:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	799b      	ldrb	r3, [r3, #6]
 800820c:	b2db      	uxtb	r3, r3
 800820e:	2b01      	cmp	r3, #1
 8008210:	d14a      	bne.n	80082a8 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	795b      	ldrb	r3, [r3, #5]
 8008216:	2b01      	cmp	r3, #1
 8008218:	d101      	bne.n	800821e <HAL_SUBGHZ_WriteRegisters+0x2a>
 800821a:	2302      	movs	r3, #2
 800821c:	e045      	b.n	80082aa <HAL_SUBGHZ_WriteRegisters+0xb6>
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	2201      	movs	r2, #1
 8008222:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2202      	movs	r2, #2
 8008228:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800822a:	68f8      	ldr	r0, [r7, #12]
 800822c:	f000 face 	bl	80087cc <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008230:	f7ff ff0c 	bl	800804c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8008234:	210d      	movs	r1, #13
 8008236:	68f8      	ldr	r0, [r7, #12]
 8008238:	f000 fa1a 	bl	8008670 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800823c:	897b      	ldrh	r3, [r7, #10]
 800823e:	0a1b      	lsrs	r3, r3, #8
 8008240:	b29b      	uxth	r3, r3
 8008242:	b2db      	uxtb	r3, r3
 8008244:	4619      	mov	r1, r3
 8008246:	68f8      	ldr	r0, [r7, #12]
 8008248:	f000 fa12 	bl	8008670 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800824c:	897b      	ldrh	r3, [r7, #10]
 800824e:	b2db      	uxtb	r3, r3
 8008250:	4619      	mov	r1, r3
 8008252:	68f8      	ldr	r0, [r7, #12]
 8008254:	f000 fa0c 	bl	8008670 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008258:	2300      	movs	r3, #0
 800825a:	82bb      	strh	r3, [r7, #20]
 800825c:	e00a      	b.n	8008274 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800825e:	8abb      	ldrh	r3, [r7, #20]
 8008260:	687a      	ldr	r2, [r7, #4]
 8008262:	4413      	add	r3, r2
 8008264:	781b      	ldrb	r3, [r3, #0]
 8008266:	4619      	mov	r1, r3
 8008268:	68f8      	ldr	r0, [r7, #12]
 800826a:	f000 fa01 	bl	8008670 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800826e:	8abb      	ldrh	r3, [r7, #20]
 8008270:	3301      	adds	r3, #1
 8008272:	82bb      	strh	r3, [r7, #20]
 8008274:	8aba      	ldrh	r2, [r7, #20]
 8008276:	893b      	ldrh	r3, [r7, #8]
 8008278:	429a      	cmp	r2, r3
 800827a:	d3f0      	bcc.n	800825e <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800827c:	f7ff fed6 	bl	800802c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008280:	68f8      	ldr	r0, [r7, #12]
 8008282:	f000 fac7 	bl	8008814 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	689b      	ldr	r3, [r3, #8]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d002      	beq.n	8008294 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 800828e:	2301      	movs	r3, #1
 8008290:	75fb      	strb	r3, [r7, #23]
 8008292:	e001      	b.n	8008298 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8008294:	2300      	movs	r3, #0
 8008296:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	2201      	movs	r2, #1
 800829c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2200      	movs	r2, #0
 80082a2:	715a      	strb	r2, [r3, #5]

    return status;
 80082a4:	7dfb      	ldrb	r3, [r7, #23]
 80082a6:	e000      	b.n	80082aa <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80082a8:	2302      	movs	r3, #2
  }
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3718      	adds	r7, #24
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}

080082b2 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 80082b2:	b580      	push	{r7, lr}
 80082b4:	b088      	sub	sp, #32
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	60f8      	str	r0, [r7, #12]
 80082ba:	607a      	str	r2, [r7, #4]
 80082bc:	461a      	mov	r2, r3
 80082be:	460b      	mov	r3, r1
 80082c0:	817b      	strh	r3, [r7, #10]
 80082c2:	4613      	mov	r3, r2
 80082c4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	799b      	ldrb	r3, [r3, #6]
 80082ce:	b2db      	uxtb	r3, r3
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d14a      	bne.n	800836a <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	795b      	ldrb	r3, [r3, #5]
 80082d8:	2b01      	cmp	r3, #1
 80082da:	d101      	bne.n	80082e0 <HAL_SUBGHZ_ReadRegisters+0x2e>
 80082dc:	2302      	movs	r3, #2
 80082de:	e045      	b.n	800836c <HAL_SUBGHZ_ReadRegisters+0xba>
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2201      	movs	r2, #1
 80082e4:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80082e6:	68f8      	ldr	r0, [r7, #12]
 80082e8:	f000 fa70 	bl	80087cc <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80082ec:	f7ff feae 	bl	800804c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 80082f0:	211d      	movs	r1, #29
 80082f2:	68f8      	ldr	r0, [r7, #12]
 80082f4:	f000 f9bc 	bl	8008670 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80082f8:	897b      	ldrh	r3, [r7, #10]
 80082fa:	0a1b      	lsrs	r3, r3, #8
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	b2db      	uxtb	r3, r3
 8008300:	4619      	mov	r1, r3
 8008302:	68f8      	ldr	r0, [r7, #12]
 8008304:	f000 f9b4 	bl	8008670 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8008308:	897b      	ldrh	r3, [r7, #10]
 800830a:	b2db      	uxtb	r3, r3
 800830c:	4619      	mov	r1, r3
 800830e:	68f8      	ldr	r0, [r7, #12]
 8008310:	f000 f9ae 	bl	8008670 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8008314:	2100      	movs	r1, #0
 8008316:	68f8      	ldr	r0, [r7, #12]
 8008318:	f000 f9aa 	bl	8008670 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800831c:	2300      	movs	r3, #0
 800831e:	82fb      	strh	r3, [r7, #22]
 8008320:	e009      	b.n	8008336 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8008322:	69b9      	ldr	r1, [r7, #24]
 8008324:	68f8      	ldr	r0, [r7, #12]
 8008326:	f000 f9f9 	bl	800871c <SUBGHZSPI_Receive>
      pData++;
 800832a:	69bb      	ldr	r3, [r7, #24]
 800832c:	3301      	adds	r3, #1
 800832e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8008330:	8afb      	ldrh	r3, [r7, #22]
 8008332:	3301      	adds	r3, #1
 8008334:	82fb      	strh	r3, [r7, #22]
 8008336:	8afa      	ldrh	r2, [r7, #22]
 8008338:	893b      	ldrh	r3, [r7, #8]
 800833a:	429a      	cmp	r2, r3
 800833c:	d3f1      	bcc.n	8008322 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800833e:	f7ff fe75 	bl	800802c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008342:	68f8      	ldr	r0, [r7, #12]
 8008344:	f000 fa66 	bl	8008814 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	689b      	ldr	r3, [r3, #8]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d002      	beq.n	8008356 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8008350:	2301      	movs	r3, #1
 8008352:	77fb      	strb	r3, [r7, #31]
 8008354:	e001      	b.n	800835a <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8008356:	2300      	movs	r3, #0
 8008358:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2201      	movs	r2, #1
 800835e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	2200      	movs	r2, #0
 8008364:	715a      	strb	r2, [r3, #5]

    return status;
 8008366:	7ffb      	ldrb	r3, [r7, #31]
 8008368:	e000      	b.n	800836c <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 800836a:	2302      	movs	r3, #2
  }
}
 800836c:	4618      	mov	r0, r3
 800836e:	3720      	adds	r7, #32
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b086      	sub	sp, #24
 8008378:	af00      	add	r7, sp, #0
 800837a:	60f8      	str	r0, [r7, #12]
 800837c:	607a      	str	r2, [r7, #4]
 800837e:	461a      	mov	r2, r3
 8008380:	460b      	mov	r3, r1
 8008382:	72fb      	strb	r3, [r7, #11]
 8008384:	4613      	mov	r3, r2
 8008386:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	799b      	ldrb	r3, [r3, #6]
 800838c:	b2db      	uxtb	r3, r3
 800838e:	2b01      	cmp	r3, #1
 8008390:	d14a      	bne.n	8008428 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	795b      	ldrb	r3, [r3, #5]
 8008396:	2b01      	cmp	r3, #1
 8008398:	d101      	bne.n	800839e <HAL_SUBGHZ_ExecSetCmd+0x2a>
 800839a:	2302      	movs	r3, #2
 800839c:	e045      	b.n	800842a <HAL_SUBGHZ_ExecSetCmd+0xb6>
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	2201      	movs	r2, #1
 80083a2:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80083a4:	68f8      	ldr	r0, [r7, #12]
 80083a6:	f000 fa11 	bl	80087cc <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 80083aa:	7afb      	ldrb	r3, [r7, #11]
 80083ac:	2b84      	cmp	r3, #132	; 0x84
 80083ae:	d002      	beq.n	80083b6 <HAL_SUBGHZ_ExecSetCmd+0x42>
 80083b0:	7afb      	ldrb	r3, [r7, #11]
 80083b2:	2b94      	cmp	r3, #148	; 0x94
 80083b4:	d103      	bne.n	80083be <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	2201      	movs	r2, #1
 80083ba:	711a      	strb	r2, [r3, #4]
 80083bc:	e002      	b.n	80083c4 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2200      	movs	r2, #0
 80083c2:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80083c4:	f7ff fe42 	bl	800804c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80083c8:	7afb      	ldrb	r3, [r7, #11]
 80083ca:	4619      	mov	r1, r3
 80083cc:	68f8      	ldr	r0, [r7, #12]
 80083ce:	f000 f94f 	bl	8008670 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80083d2:	2300      	movs	r3, #0
 80083d4:	82bb      	strh	r3, [r7, #20]
 80083d6:	e00a      	b.n	80083ee <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80083d8:	8abb      	ldrh	r3, [r7, #20]
 80083da:	687a      	ldr	r2, [r7, #4]
 80083dc:	4413      	add	r3, r2
 80083de:	781b      	ldrb	r3, [r3, #0]
 80083e0:	4619      	mov	r1, r3
 80083e2:	68f8      	ldr	r0, [r7, #12]
 80083e4:	f000 f944 	bl	8008670 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80083e8:	8abb      	ldrh	r3, [r7, #20]
 80083ea:	3301      	adds	r3, #1
 80083ec:	82bb      	strh	r3, [r7, #20]
 80083ee:	8aba      	ldrh	r2, [r7, #20]
 80083f0:	893b      	ldrh	r3, [r7, #8]
 80083f2:	429a      	cmp	r2, r3
 80083f4:	d3f0      	bcc.n	80083d8 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80083f6:	f7ff fe19 	bl	800802c <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 80083fa:	7afb      	ldrb	r3, [r7, #11]
 80083fc:	2b84      	cmp	r3, #132	; 0x84
 80083fe:	d002      	beq.n	8008406 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008400:	68f8      	ldr	r0, [r7, #12]
 8008402:	f000 fa07 	bl	8008814 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	689b      	ldr	r3, [r3, #8]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d002      	beq.n	8008414 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 800840e:	2301      	movs	r3, #1
 8008410:	75fb      	strb	r3, [r7, #23]
 8008412:	e001      	b.n	8008418 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8008414:	2300      	movs	r3, #0
 8008416:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2201      	movs	r2, #1
 800841c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2200      	movs	r2, #0
 8008422:	715a      	strb	r2, [r3, #5]

    return status;
 8008424:	7dfb      	ldrb	r3, [r7, #23]
 8008426:	e000      	b.n	800842a <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8008428:	2302      	movs	r3, #2
  }
}
 800842a:	4618      	mov	r0, r3
 800842c:	3718      	adds	r7, #24
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}

08008432 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8008432:	b580      	push	{r7, lr}
 8008434:	b088      	sub	sp, #32
 8008436:	af00      	add	r7, sp, #0
 8008438:	60f8      	str	r0, [r7, #12]
 800843a:	607a      	str	r2, [r7, #4]
 800843c:	461a      	mov	r2, r3
 800843e:	460b      	mov	r3, r1
 8008440:	72fb      	strb	r3, [r7, #11]
 8008442:	4613      	mov	r3, r2
 8008444:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	799b      	ldrb	r3, [r3, #6]
 800844e:	b2db      	uxtb	r3, r3
 8008450:	2b01      	cmp	r3, #1
 8008452:	d13d      	bne.n	80084d0 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	795b      	ldrb	r3, [r3, #5]
 8008458:	2b01      	cmp	r3, #1
 800845a:	d101      	bne.n	8008460 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 800845c:	2302      	movs	r3, #2
 800845e:	e038      	b.n	80084d2 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	2201      	movs	r2, #1
 8008464:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008466:	68f8      	ldr	r0, [r7, #12]
 8008468:	f000 f9b0 	bl	80087cc <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800846c:	f7ff fdee 	bl	800804c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8008470:	7afb      	ldrb	r3, [r7, #11]
 8008472:	4619      	mov	r1, r3
 8008474:	68f8      	ldr	r0, [r7, #12]
 8008476:	f000 f8fb 	bl	8008670 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800847a:	2100      	movs	r1, #0
 800847c:	68f8      	ldr	r0, [r7, #12]
 800847e:	f000 f8f7 	bl	8008670 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008482:	2300      	movs	r3, #0
 8008484:	82fb      	strh	r3, [r7, #22]
 8008486:	e009      	b.n	800849c <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8008488:	69b9      	ldr	r1, [r7, #24]
 800848a:	68f8      	ldr	r0, [r7, #12]
 800848c:	f000 f946 	bl	800871c <SUBGHZSPI_Receive>
      pData++;
 8008490:	69bb      	ldr	r3, [r7, #24]
 8008492:	3301      	adds	r3, #1
 8008494:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8008496:	8afb      	ldrh	r3, [r7, #22]
 8008498:	3301      	adds	r3, #1
 800849a:	82fb      	strh	r3, [r7, #22]
 800849c:	8afa      	ldrh	r2, [r7, #22]
 800849e:	893b      	ldrh	r3, [r7, #8]
 80084a0:	429a      	cmp	r2, r3
 80084a2:	d3f1      	bcc.n	8008488 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80084a4:	f7ff fdc2 	bl	800802c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80084a8:	68f8      	ldr	r0, [r7, #12]
 80084aa:	f000 f9b3 	bl	8008814 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	689b      	ldr	r3, [r3, #8]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d002      	beq.n	80084bc <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 80084b6:	2301      	movs	r3, #1
 80084b8:	77fb      	strb	r3, [r7, #31]
 80084ba:	e001      	b.n	80084c0 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 80084bc:	2300      	movs	r3, #0
 80084be:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2201      	movs	r2, #1
 80084c4:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	2200      	movs	r2, #0
 80084ca:	715a      	strb	r2, [r3, #5]

    return status;
 80084cc:	7ffb      	ldrb	r3, [r7, #31]
 80084ce:	e000      	b.n	80084d2 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80084d0:	2302      	movs	r3, #2
  }
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3720      	adds	r7, #32
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}

080084da <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 80084da:	b580      	push	{r7, lr}
 80084dc:	b086      	sub	sp, #24
 80084de:	af00      	add	r7, sp, #0
 80084e0:	60f8      	str	r0, [r7, #12]
 80084e2:	607a      	str	r2, [r7, #4]
 80084e4:	461a      	mov	r2, r3
 80084e6:	460b      	mov	r3, r1
 80084e8:	72fb      	strb	r3, [r7, #11]
 80084ea:	4613      	mov	r3, r2
 80084ec:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	799b      	ldrb	r3, [r3, #6]
 80084f2:	b2db      	uxtb	r3, r3
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d13e      	bne.n	8008576 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	795b      	ldrb	r3, [r3, #5]
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	d101      	bne.n	8008504 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8008500:	2302      	movs	r3, #2
 8008502:	e039      	b.n	8008578 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	2201      	movs	r2, #1
 8008508:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800850a:	68f8      	ldr	r0, [r7, #12]
 800850c:	f000 f95e 	bl	80087cc <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8008510:	f7ff fd9c 	bl	800804c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8008514:	210e      	movs	r1, #14
 8008516:	68f8      	ldr	r0, [r7, #12]
 8008518:	f000 f8aa 	bl	8008670 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800851c:	7afb      	ldrb	r3, [r7, #11]
 800851e:	4619      	mov	r1, r3
 8008520:	68f8      	ldr	r0, [r7, #12]
 8008522:	f000 f8a5 	bl	8008670 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8008526:	2300      	movs	r3, #0
 8008528:	82bb      	strh	r3, [r7, #20]
 800852a:	e00a      	b.n	8008542 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800852c:	8abb      	ldrh	r3, [r7, #20]
 800852e:	687a      	ldr	r2, [r7, #4]
 8008530:	4413      	add	r3, r2
 8008532:	781b      	ldrb	r3, [r3, #0]
 8008534:	4619      	mov	r1, r3
 8008536:	68f8      	ldr	r0, [r7, #12]
 8008538:	f000 f89a 	bl	8008670 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800853c:	8abb      	ldrh	r3, [r7, #20]
 800853e:	3301      	adds	r3, #1
 8008540:	82bb      	strh	r3, [r7, #20]
 8008542:	8aba      	ldrh	r2, [r7, #20]
 8008544:	893b      	ldrh	r3, [r7, #8]
 8008546:	429a      	cmp	r2, r3
 8008548:	d3f0      	bcc.n	800852c <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800854a:	f7ff fd6f 	bl	800802c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800854e:	68f8      	ldr	r0, [r7, #12]
 8008550:	f000 f960 	bl	8008814 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	689b      	ldr	r3, [r3, #8]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d002      	beq.n	8008562 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 800855c:	2301      	movs	r3, #1
 800855e:	75fb      	strb	r3, [r7, #23]
 8008560:	e001      	b.n	8008566 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8008562:	2300      	movs	r3, #0
 8008564:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	2201      	movs	r2, #1
 800856a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2200      	movs	r2, #0
 8008570:	715a      	strb	r2, [r3, #5]

    return status;
 8008572:	7dfb      	ldrb	r3, [r7, #23]
 8008574:	e000      	b.n	8008578 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8008576:	2302      	movs	r3, #2
  }
}
 8008578:	4618      	mov	r0, r3
 800857a:	3718      	adds	r7, #24
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}

08008580 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b088      	sub	sp, #32
 8008584:	af00      	add	r7, sp, #0
 8008586:	60f8      	str	r0, [r7, #12]
 8008588:	607a      	str	r2, [r7, #4]
 800858a:	461a      	mov	r2, r3
 800858c:	460b      	mov	r3, r1
 800858e:	72fb      	strb	r3, [r7, #11]
 8008590:	4613      	mov	r3, r2
 8008592:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	799b      	ldrb	r3, [r3, #6]
 800859c:	b2db      	uxtb	r3, r3
 800859e:	2b01      	cmp	r3, #1
 80085a0:	d141      	bne.n	8008626 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	795b      	ldrb	r3, [r3, #5]
 80085a6:	2b01      	cmp	r3, #1
 80085a8:	d101      	bne.n	80085ae <HAL_SUBGHZ_ReadBuffer+0x2e>
 80085aa:	2302      	movs	r3, #2
 80085ac:	e03c      	b.n	8008628 <HAL_SUBGHZ_ReadBuffer+0xa8>
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2201      	movs	r2, #1
 80085b2:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80085b4:	68f8      	ldr	r0, [r7, #12]
 80085b6:	f000 f909 	bl	80087cc <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80085ba:	f7ff fd47 	bl	800804c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 80085be:	211e      	movs	r1, #30
 80085c0:	68f8      	ldr	r0, [r7, #12]
 80085c2:	f000 f855 	bl	8008670 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80085c6:	7afb      	ldrb	r3, [r7, #11]
 80085c8:	4619      	mov	r1, r3
 80085ca:	68f8      	ldr	r0, [r7, #12]
 80085cc:	f000 f850 	bl	8008670 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80085d0:	2100      	movs	r1, #0
 80085d2:	68f8      	ldr	r0, [r7, #12]
 80085d4:	f000 f84c 	bl	8008670 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80085d8:	2300      	movs	r3, #0
 80085da:	82fb      	strh	r3, [r7, #22]
 80085dc:	e009      	b.n	80085f2 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80085de:	69b9      	ldr	r1, [r7, #24]
 80085e0:	68f8      	ldr	r0, [r7, #12]
 80085e2:	f000 f89b 	bl	800871c <SUBGHZSPI_Receive>
      pData++;
 80085e6:	69bb      	ldr	r3, [r7, #24]
 80085e8:	3301      	adds	r3, #1
 80085ea:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80085ec:	8afb      	ldrh	r3, [r7, #22]
 80085ee:	3301      	adds	r3, #1
 80085f0:	82fb      	strh	r3, [r7, #22]
 80085f2:	8afa      	ldrh	r2, [r7, #22]
 80085f4:	893b      	ldrh	r3, [r7, #8]
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d3f1      	bcc.n	80085de <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80085fa:	f7ff fd17 	bl	800802c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80085fe:	68f8      	ldr	r0, [r7, #12]
 8008600:	f000 f908 	bl	8008814 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	689b      	ldr	r3, [r3, #8]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d002      	beq.n	8008612 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 800860c:	2301      	movs	r3, #1
 800860e:	77fb      	strb	r3, [r7, #31]
 8008610:	e001      	b.n	8008616 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8008612:	2300      	movs	r3, #0
 8008614:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	2201      	movs	r2, #1
 800861a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	2200      	movs	r2, #0
 8008620:	715a      	strb	r2, [r3, #5]

    return status;
 8008622:	7ffb      	ldrb	r3, [r7, #31]
 8008624:	e000      	b.n	8008628 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8008626:	2302      	movs	r3, #2
  }
}
 8008628:	4618      	mov	r0, r3
 800862a:	3720      	adds	r7, #32
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}

08008630 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8008630:	b480      	push	{r7}
 8008632:	b083      	sub	sp, #12
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8008638:	4b0c      	ldr	r3, [pc, #48]	; (800866c <SUBGHZSPI_Init+0x3c>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a0b      	ldr	r2, [pc, #44]	; (800866c <SUBGHZSPI_Init+0x3c>)
 800863e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008642:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8008644:	4a09      	ldr	r2, [pc, #36]	; (800866c <SUBGHZSPI_Init+0x3c>)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 800864c:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 800864e:	4b07      	ldr	r3, [pc, #28]	; (800866c <SUBGHZSPI_Init+0x3c>)
 8008650:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8008654:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8008656:	4b05      	ldr	r3, [pc, #20]	; (800866c <SUBGHZSPI_Init+0x3c>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a04      	ldr	r2, [pc, #16]	; (800866c <SUBGHZSPI_Init+0x3c>)
 800865c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008660:	6013      	str	r3, [r2, #0]
}
 8008662:	bf00      	nop
 8008664:	370c      	adds	r7, #12
 8008666:	46bd      	mov	sp, r7
 8008668:	bc80      	pop	{r7}
 800866a:	4770      	bx	lr
 800866c:	58010000 	.word	0x58010000

08008670 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8008670:	b480      	push	{r7}
 8008672:	b087      	sub	sp, #28
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
 8008678:	460b      	mov	r3, r1
 800867a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800867c:	2300      	movs	r3, #0
 800867e:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8008680:	4b23      	ldr	r3, [pc, #140]	; (8008710 <SUBGHZSPI_Transmit+0xa0>)
 8008682:	681a      	ldr	r2, [r3, #0]
 8008684:	4613      	mov	r3, r2
 8008686:	00db      	lsls	r3, r3, #3
 8008688:	1a9b      	subs	r3, r3, r2
 800868a:	009b      	lsls	r3, r3, #2
 800868c:	0cdb      	lsrs	r3, r3, #19
 800868e:	2264      	movs	r2, #100	; 0x64
 8008690:	fb02 f303 	mul.w	r3, r2, r3
 8008694:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d105      	bne.n	80086a8 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 800869c:	2301      	movs	r3, #1
 800869e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2201      	movs	r2, #1
 80086a4:	609a      	str	r2, [r3, #8]
      break;
 80086a6:	e008      	b.n	80086ba <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	3b01      	subs	r3, #1
 80086ac:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80086ae:	4b19      	ldr	r3, [pc, #100]	; (8008714 <SUBGHZSPI_Transmit+0xa4>)
 80086b0:	689b      	ldr	r3, [r3, #8]
 80086b2:	f003 0302 	and.w	r3, r3, #2
 80086b6:	2b02      	cmp	r3, #2
 80086b8:	d1ed      	bne.n	8008696 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80086ba:	4b17      	ldr	r3, [pc, #92]	; (8008718 <SUBGHZSPI_Transmit+0xa8>)
 80086bc:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	78fa      	ldrb	r2, [r7, #3]
 80086c2:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80086c4:	4b12      	ldr	r3, [pc, #72]	; (8008710 <SUBGHZSPI_Transmit+0xa0>)
 80086c6:	681a      	ldr	r2, [r3, #0]
 80086c8:	4613      	mov	r3, r2
 80086ca:	00db      	lsls	r3, r3, #3
 80086cc:	1a9b      	subs	r3, r3, r2
 80086ce:	009b      	lsls	r3, r3, #2
 80086d0:	0cdb      	lsrs	r3, r3, #19
 80086d2:	2264      	movs	r2, #100	; 0x64
 80086d4:	fb02 f303 	mul.w	r3, r2, r3
 80086d8:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d105      	bne.n	80086ec <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 80086e0:	2301      	movs	r3, #1
 80086e2:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2201      	movs	r2, #1
 80086e8:	609a      	str	r2, [r3, #8]
      break;
 80086ea:	e008      	b.n	80086fe <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	3b01      	subs	r3, #1
 80086f0:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80086f2:	4b08      	ldr	r3, [pc, #32]	; (8008714 <SUBGHZSPI_Transmit+0xa4>)
 80086f4:	689b      	ldr	r3, [r3, #8]
 80086f6:	f003 0301 	and.w	r3, r3, #1
 80086fa:	2b01      	cmp	r3, #1
 80086fc:	d1ed      	bne.n	80086da <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 80086fe:	4b05      	ldr	r3, [pc, #20]	; (8008714 <SUBGHZSPI_Transmit+0xa4>)
 8008700:	68db      	ldr	r3, [r3, #12]

  return status;
 8008702:	7dfb      	ldrb	r3, [r7, #23]
}
 8008704:	4618      	mov	r0, r3
 8008706:	371c      	adds	r7, #28
 8008708:	46bd      	mov	sp, r7
 800870a:	bc80      	pop	{r7}
 800870c:	4770      	bx	lr
 800870e:	bf00      	nop
 8008710:	20000000 	.word	0x20000000
 8008714:	58010000 	.word	0x58010000
 8008718:	5801000c 	.word	0x5801000c

0800871c <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 800871c:	b480      	push	{r7}
 800871e:	b087      	sub	sp, #28
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008726:	2300      	movs	r3, #0
 8008728:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800872a:	4b25      	ldr	r3, [pc, #148]	; (80087c0 <SUBGHZSPI_Receive+0xa4>)
 800872c:	681a      	ldr	r2, [r3, #0]
 800872e:	4613      	mov	r3, r2
 8008730:	00db      	lsls	r3, r3, #3
 8008732:	1a9b      	subs	r3, r3, r2
 8008734:	009b      	lsls	r3, r3, #2
 8008736:	0cdb      	lsrs	r3, r3, #19
 8008738:	2264      	movs	r2, #100	; 0x64
 800873a:	fb02 f303 	mul.w	r3, r2, r3
 800873e:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d105      	bne.n	8008752 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8008746:	2301      	movs	r3, #1
 8008748:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2201      	movs	r2, #1
 800874e:	609a      	str	r2, [r3, #8]
      break;
 8008750:	e008      	b.n	8008764 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	3b01      	subs	r3, #1
 8008756:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8008758:	4b1a      	ldr	r3, [pc, #104]	; (80087c4 <SUBGHZSPI_Receive+0xa8>)
 800875a:	689b      	ldr	r3, [r3, #8]
 800875c:	f003 0302 	and.w	r3, r3, #2
 8008760:	2b02      	cmp	r3, #2
 8008762:	d1ed      	bne.n	8008740 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8008764:	4b18      	ldr	r3, [pc, #96]	; (80087c8 <SUBGHZSPI_Receive+0xac>)
 8008766:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	22ff      	movs	r2, #255	; 0xff
 800876c:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800876e:	4b14      	ldr	r3, [pc, #80]	; (80087c0 <SUBGHZSPI_Receive+0xa4>)
 8008770:	681a      	ldr	r2, [r3, #0]
 8008772:	4613      	mov	r3, r2
 8008774:	00db      	lsls	r3, r3, #3
 8008776:	1a9b      	subs	r3, r3, r2
 8008778:	009b      	lsls	r3, r3, #2
 800877a:	0cdb      	lsrs	r3, r3, #19
 800877c:	2264      	movs	r2, #100	; 0x64
 800877e:	fb02 f303 	mul.w	r3, r2, r3
 8008782:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d105      	bne.n	8008796 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 800878a:	2301      	movs	r3, #1
 800878c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2201      	movs	r2, #1
 8008792:	609a      	str	r2, [r3, #8]
      break;
 8008794:	e008      	b.n	80087a8 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	3b01      	subs	r3, #1
 800879a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800879c:	4b09      	ldr	r3, [pc, #36]	; (80087c4 <SUBGHZSPI_Receive+0xa8>)
 800879e:	689b      	ldr	r3, [r3, #8]
 80087a0:	f003 0301 	and.w	r3, r3, #1
 80087a4:	2b01      	cmp	r3, #1
 80087a6:	d1ed      	bne.n	8008784 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 80087a8:	4b06      	ldr	r3, [pc, #24]	; (80087c4 <SUBGHZSPI_Receive+0xa8>)
 80087aa:	68db      	ldr	r3, [r3, #12]
 80087ac:	b2da      	uxtb	r2, r3
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	701a      	strb	r2, [r3, #0]

  return status;
 80087b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	371c      	adds	r7, #28
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bc80      	pop	{r7}
 80087bc:	4770      	bx	lr
 80087be:	bf00      	nop
 80087c0:	20000000 	.word	0x20000000
 80087c4:	58010000 	.word	0x58010000
 80087c8:	5801000c 	.word	0x5801000c

080087cc <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b084      	sub	sp, #16
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	791b      	ldrb	r3, [r3, #4]
 80087d8:	2b01      	cmp	r3, #1
 80087da:	d111      	bne.n	8008800 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 80087dc:	4b0c      	ldr	r3, [pc, #48]	; (8008810 <SUBGHZ_CheckDeviceReady+0x44>)
 80087de:	681a      	ldr	r2, [r3, #0]
 80087e0:	4613      	mov	r3, r2
 80087e2:	005b      	lsls	r3, r3, #1
 80087e4:	4413      	add	r3, r2
 80087e6:	00db      	lsls	r3, r3, #3
 80087e8:	0c1b      	lsrs	r3, r3, #16
 80087ea:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80087ec:	f7ff fc2e 	bl	800804c <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	3b01      	subs	r3, #1
 80087f4:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d1f9      	bne.n	80087f0 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80087fc:	f7ff fc16 	bl	800802c <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f000 f807 	bl	8008814 <SUBGHZ_WaitOnBusy>
 8008806:	4603      	mov	r3, r0
}
 8008808:	4618      	mov	r0, r3
 800880a:	3710      	adds	r7, #16
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}
 8008810:	20000000 	.word	0x20000000

08008814 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b086      	sub	sp, #24
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 800881c:	2300      	movs	r3, #0
 800881e:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8008820:	4b12      	ldr	r3, [pc, #72]	; (800886c <SUBGHZ_WaitOnBusy+0x58>)
 8008822:	681a      	ldr	r2, [r3, #0]
 8008824:	4613      	mov	r3, r2
 8008826:	005b      	lsls	r3, r3, #1
 8008828:	4413      	add	r3, r2
 800882a:	00db      	lsls	r3, r3, #3
 800882c:	0d1b      	lsrs	r3, r3, #20
 800882e:	2264      	movs	r2, #100	; 0x64
 8008830:	fb02 f303 	mul.w	r3, r2, r3
 8008834:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8008836:	f7ff fc37 	bl	80080a8 <LL_PWR_IsActiveFlag_RFBUSYMS>
 800883a:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d105      	bne.n	800884e <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8008842:	2301      	movs	r3, #1
 8008844:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2202      	movs	r2, #2
 800884a:	609a      	str	r2, [r3, #8]
      break;
 800884c:	e009      	b.n	8008862 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	3b01      	subs	r3, #1
 8008852:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8008854:	f7ff fc16 	bl	8008084 <LL_PWR_IsActiveFlag_RFBUSYS>
 8008858:	4602      	mov	r2, r0
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	4013      	ands	r3, r2
 800885e:	2b01      	cmp	r3, #1
 8008860:	d0e9      	beq.n	8008836 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8008862:	7dfb      	ldrb	r3, [r7, #23]
}
 8008864:	4618      	mov	r0, r3
 8008866:	3718      	adds	r7, #24
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}
 800886c:	20000000 	.word	0x20000000

08008870 <LL_RCC_GetUSARTClockSource>:
{
 8008870:	b480      	push	{r7}
 8008872:	b083      	sub	sp, #12
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8008878:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800887c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	401a      	ands	r2, r3
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	041b      	lsls	r3, r3, #16
 8008888:	4313      	orrs	r3, r2
}
 800888a:	4618      	mov	r0, r3
 800888c:	370c      	adds	r7, #12
 800888e:	46bd      	mov	sp, r7
 8008890:	bc80      	pop	{r7}
 8008892:	4770      	bx	lr

08008894 <LL_RCC_GetLPUARTClockSource>:
{
 8008894:	b480      	push	{r7}
 8008896:	b083      	sub	sp, #12
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800889c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088a0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	4013      	ands	r3, r2
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	370c      	adds	r7, #12
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bc80      	pop	{r7}
 80088b0:	4770      	bx	lr

080088b2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80088b2:	b580      	push	{r7, lr}
 80088b4:	b082      	sub	sp, #8
 80088b6:	af00      	add	r7, sp, #0
 80088b8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d101      	bne.n	80088c4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80088c0:	2301      	movs	r3, #1
 80088c2:	e042      	b.n	800894a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d106      	bne.n	80088dc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2200      	movs	r2, #0
 80088d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f7fd f8aa 	bl	8005a30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2224      	movs	r2, #36	; 0x24
 80088e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	681a      	ldr	r2, [r3, #0]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f022 0201 	bic.w	r2, r2, #1
 80088f2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f000 f8d5 	bl	8008aa4 <UART_SetConfig>
 80088fa:	4603      	mov	r3, r0
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	d101      	bne.n	8008904 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008900:	2301      	movs	r3, #1
 8008902:	e022      	b.n	800894a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008908:	2b00      	cmp	r3, #0
 800890a:	d002      	beq.n	8008912 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f000 fb3d 	bl	8008f8c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	685a      	ldr	r2, [r3, #4]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008920:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	689a      	ldr	r2, [r3, #8]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008930:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	681a      	ldr	r2, [r3, #0]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f042 0201 	orr.w	r2, r2, #1
 8008940:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f000 fbc3 	bl	80090ce <UART_CheckIdleState>
 8008948:	4603      	mov	r3, r0
}
 800894a:	4618      	mov	r0, r3
 800894c:	3708      	adds	r7, #8
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}
	...

08008954 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008954:	b480      	push	{r7}
 8008956:	b091      	sub	sp, #68	; 0x44
 8008958:	af00      	add	r7, sp, #0
 800895a:	60f8      	str	r0, [r7, #12]
 800895c:	60b9      	str	r1, [r7, #8]
 800895e:	4613      	mov	r3, r2
 8008960:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008968:	2b20      	cmp	r3, #32
 800896a:	f040 808c 	bne.w	8008a86 <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d002      	beq.n	800897a <HAL_UART_Transmit_IT+0x26>
 8008974:	88fb      	ldrh	r3, [r7, #6]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d101      	bne.n	800897e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800897a:	2301      	movs	r3, #1
 800897c:	e084      	b.n	8008a88 <HAL_UART_Transmit_IT+0x134>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008984:	2b01      	cmp	r3, #1
 8008986:	d101      	bne.n	800898c <HAL_UART_Transmit_IT+0x38>
 8008988:	2302      	movs	r3, #2
 800898a:	e07d      	b.n	8008a88 <HAL_UART_Transmit_IT+0x134>
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2201      	movs	r2, #1
 8008990:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	68ba      	ldr	r2, [r7, #8]
 8008998:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	88fa      	ldrh	r2, [r7, #6]
 800899e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	88fa      	ldrh	r2, [r7, #6]
 80089a6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	2200      	movs	r2, #0
 80089ae:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	2200      	movs	r2, #0
 80089b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2221      	movs	r2, #33	; 0x21
 80089bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089c8:	d12e      	bne.n	8008a28 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	689b      	ldr	r3, [r3, #8]
 80089ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089d2:	d107      	bne.n	80089e4 <HAL_UART_Transmit_IT+0x90>
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	691b      	ldr	r3, [r3, #16]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d103      	bne.n	80089e4 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	4a2d      	ldr	r2, [pc, #180]	; (8008a94 <HAL_UART_Transmit_IT+0x140>)
 80089e0:	675a      	str	r2, [r3, #116]	; 0x74
 80089e2:	e002      	b.n	80089ea <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	4a2c      	ldr	r2, [pc, #176]	; (8008a98 <HAL_UART_Transmit_IT+0x144>)
 80089e8:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2200      	movs	r2, #0
 80089ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	3308      	adds	r3, #8
 80089f8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089fc:	e853 3f00 	ldrex	r3, [r3]
 8008a00:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a04:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008a08:	63bb      	str	r3, [r7, #56]	; 0x38
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	3308      	adds	r3, #8
 8008a10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a12:	637a      	str	r2, [r7, #52]	; 0x34
 8008a14:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a16:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008a18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a1a:	e841 2300 	strex	r3, r2, [r1]
 8008a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d1e5      	bne.n	80089f2 <HAL_UART_Transmit_IT+0x9e>
 8008a26:	e02c      	b.n	8008a82 <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	689b      	ldr	r3, [r3, #8]
 8008a2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a30:	d107      	bne.n	8008a42 <HAL_UART_Transmit_IT+0xee>
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	691b      	ldr	r3, [r3, #16]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d103      	bne.n	8008a42 <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	4a17      	ldr	r2, [pc, #92]	; (8008a9c <HAL_UART_Transmit_IT+0x148>)
 8008a3e:	675a      	str	r2, [r3, #116]	; 0x74
 8008a40:	e002      	b.n	8008a48 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	4a16      	ldr	r2, [pc, #88]	; (8008aa0 <HAL_UART_Transmit_IT+0x14c>)
 8008a46:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	e853 3f00 	ldrex	r3, [r3]
 8008a5c:	613b      	str	r3, [r7, #16]
   return(result);
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a6e:	623b      	str	r3, [r7, #32]
 8008a70:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a72:	69f9      	ldr	r1, [r7, #28]
 8008a74:	6a3a      	ldr	r2, [r7, #32]
 8008a76:	e841 2300 	strex	r3, r2, [r1]
 8008a7a:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a7c:	69bb      	ldr	r3, [r7, #24]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d1e6      	bne.n	8008a50 <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 8008a82:	2300      	movs	r3, #0
 8008a84:	e000      	b.n	8008a88 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 8008a86:	2302      	movs	r3, #2
  }
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3744      	adds	r7, #68	; 0x44
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bc80      	pop	{r7}
 8008a90:	4770      	bx	lr
 8008a92:	bf00      	nop
 8008a94:	08009549 	.word	0x08009549
 8008a98:	0800946b 	.word	0x0800946b
 8008a9c:	080093ab 	.word	0x080093ab
 8008aa0:	080092f5 	.word	0x080092f5

08008aa4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008aa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008aa8:	b08c      	sub	sp, #48	; 0x30
 8008aaa:	af00      	add	r7, sp, #0
 8008aac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	689a      	ldr	r2, [r3, #8]
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	691b      	ldr	r3, [r3, #16]
 8008abc:	431a      	orrs	r2, r3
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	695b      	ldr	r3, [r3, #20]
 8008ac2:	431a      	orrs	r2, r3
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	69db      	ldr	r3, [r3, #28]
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	681a      	ldr	r2, [r3, #0]
 8008ad2:	4b94      	ldr	r3, [pc, #592]	; (8008d24 <UART_SetConfig+0x280>)
 8008ad4:	4013      	ands	r3, r2
 8008ad6:	697a      	ldr	r2, [r7, #20]
 8008ad8:	6812      	ldr	r2, [r2, #0]
 8008ada:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008adc:	430b      	orrs	r3, r1
 8008ade:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	685b      	ldr	r3, [r3, #4]
 8008ae6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	68da      	ldr	r2, [r3, #12]
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	430a      	orrs	r2, r1
 8008af4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	699b      	ldr	r3, [r3, #24]
 8008afa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008afc:	697b      	ldr	r3, [r7, #20]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4a89      	ldr	r2, [pc, #548]	; (8008d28 <UART_SetConfig+0x284>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d004      	beq.n	8008b10 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	6a1b      	ldr	r3, [r3, #32]
 8008b0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	689b      	ldr	r3, [r3, #8]
 8008b16:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008b1a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008b1e:	697a      	ldr	r2, [r7, #20]
 8008b20:	6812      	ldr	r2, [r2, #0]
 8008b22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b24:	430b      	orrs	r3, r1
 8008b26:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b2e:	f023 010f 	bic.w	r1, r3, #15
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	430a      	orrs	r2, r1
 8008b3c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4a7a      	ldr	r2, [pc, #488]	; (8008d2c <UART_SetConfig+0x288>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d127      	bne.n	8008b98 <UART_SetConfig+0xf4>
 8008b48:	2003      	movs	r0, #3
 8008b4a:	f7ff fe91 	bl	8008870 <LL_RCC_GetUSARTClockSource>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8008b54:	2b03      	cmp	r3, #3
 8008b56:	d81b      	bhi.n	8008b90 <UART_SetConfig+0xec>
 8008b58:	a201      	add	r2, pc, #4	; (adr r2, 8008b60 <UART_SetConfig+0xbc>)
 8008b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b5e:	bf00      	nop
 8008b60:	08008b71 	.word	0x08008b71
 8008b64:	08008b81 	.word	0x08008b81
 8008b68:	08008b79 	.word	0x08008b79
 8008b6c:	08008b89 	.word	0x08008b89
 8008b70:	2301      	movs	r3, #1
 8008b72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b76:	e080      	b.n	8008c7a <UART_SetConfig+0x1d6>
 8008b78:	2302      	movs	r3, #2
 8008b7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b7e:	e07c      	b.n	8008c7a <UART_SetConfig+0x1d6>
 8008b80:	2304      	movs	r3, #4
 8008b82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b86:	e078      	b.n	8008c7a <UART_SetConfig+0x1d6>
 8008b88:	2308      	movs	r3, #8
 8008b8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b8e:	e074      	b.n	8008c7a <UART_SetConfig+0x1d6>
 8008b90:	2310      	movs	r3, #16
 8008b92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b96:	e070      	b.n	8008c7a <UART_SetConfig+0x1d6>
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	4a64      	ldr	r2, [pc, #400]	; (8008d30 <UART_SetConfig+0x28c>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d138      	bne.n	8008c14 <UART_SetConfig+0x170>
 8008ba2:	200c      	movs	r0, #12
 8008ba4:	f7ff fe64 	bl	8008870 <LL_RCC_GetUSARTClockSource>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8008bae:	2b0c      	cmp	r3, #12
 8008bb0:	d82c      	bhi.n	8008c0c <UART_SetConfig+0x168>
 8008bb2:	a201      	add	r2, pc, #4	; (adr r2, 8008bb8 <UART_SetConfig+0x114>)
 8008bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bb8:	08008bed 	.word	0x08008bed
 8008bbc:	08008c0d 	.word	0x08008c0d
 8008bc0:	08008c0d 	.word	0x08008c0d
 8008bc4:	08008c0d 	.word	0x08008c0d
 8008bc8:	08008bfd 	.word	0x08008bfd
 8008bcc:	08008c0d 	.word	0x08008c0d
 8008bd0:	08008c0d 	.word	0x08008c0d
 8008bd4:	08008c0d 	.word	0x08008c0d
 8008bd8:	08008bf5 	.word	0x08008bf5
 8008bdc:	08008c0d 	.word	0x08008c0d
 8008be0:	08008c0d 	.word	0x08008c0d
 8008be4:	08008c0d 	.word	0x08008c0d
 8008be8:	08008c05 	.word	0x08008c05
 8008bec:	2300      	movs	r3, #0
 8008bee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008bf2:	e042      	b.n	8008c7a <UART_SetConfig+0x1d6>
 8008bf4:	2302      	movs	r3, #2
 8008bf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008bfa:	e03e      	b.n	8008c7a <UART_SetConfig+0x1d6>
 8008bfc:	2304      	movs	r3, #4
 8008bfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c02:	e03a      	b.n	8008c7a <UART_SetConfig+0x1d6>
 8008c04:	2308      	movs	r3, #8
 8008c06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c0a:	e036      	b.n	8008c7a <UART_SetConfig+0x1d6>
 8008c0c:	2310      	movs	r3, #16
 8008c0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c12:	e032      	b.n	8008c7a <UART_SetConfig+0x1d6>
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	4a43      	ldr	r2, [pc, #268]	; (8008d28 <UART_SetConfig+0x284>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d12a      	bne.n	8008c74 <UART_SetConfig+0x1d0>
 8008c1e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8008c22:	f7ff fe37 	bl	8008894 <LL_RCC_GetLPUARTClockSource>
 8008c26:	4603      	mov	r3, r0
 8008c28:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008c2c:	d01a      	beq.n	8008c64 <UART_SetConfig+0x1c0>
 8008c2e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008c32:	d81b      	bhi.n	8008c6c <UART_SetConfig+0x1c8>
 8008c34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c38:	d00c      	beq.n	8008c54 <UART_SetConfig+0x1b0>
 8008c3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c3e:	d815      	bhi.n	8008c6c <UART_SetConfig+0x1c8>
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d003      	beq.n	8008c4c <UART_SetConfig+0x1a8>
 8008c44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c48:	d008      	beq.n	8008c5c <UART_SetConfig+0x1b8>
 8008c4a:	e00f      	b.n	8008c6c <UART_SetConfig+0x1c8>
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c52:	e012      	b.n	8008c7a <UART_SetConfig+0x1d6>
 8008c54:	2302      	movs	r3, #2
 8008c56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c5a:	e00e      	b.n	8008c7a <UART_SetConfig+0x1d6>
 8008c5c:	2304      	movs	r3, #4
 8008c5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c62:	e00a      	b.n	8008c7a <UART_SetConfig+0x1d6>
 8008c64:	2308      	movs	r3, #8
 8008c66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c6a:	e006      	b.n	8008c7a <UART_SetConfig+0x1d6>
 8008c6c:	2310      	movs	r3, #16
 8008c6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c72:	e002      	b.n	8008c7a <UART_SetConfig+0x1d6>
 8008c74:	2310      	movs	r3, #16
 8008c76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	4a2a      	ldr	r2, [pc, #168]	; (8008d28 <UART_SetConfig+0x284>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	f040 80a4 	bne.w	8008dce <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008c86:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008c8a:	2b08      	cmp	r3, #8
 8008c8c:	d823      	bhi.n	8008cd6 <UART_SetConfig+0x232>
 8008c8e:	a201      	add	r2, pc, #4	; (adr r2, 8008c94 <UART_SetConfig+0x1f0>)
 8008c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c94:	08008cb9 	.word	0x08008cb9
 8008c98:	08008cd7 	.word	0x08008cd7
 8008c9c:	08008cc1 	.word	0x08008cc1
 8008ca0:	08008cd7 	.word	0x08008cd7
 8008ca4:	08008cc7 	.word	0x08008cc7
 8008ca8:	08008cd7 	.word	0x08008cd7
 8008cac:	08008cd7 	.word	0x08008cd7
 8008cb0:	08008cd7 	.word	0x08008cd7
 8008cb4:	08008ccf 	.word	0x08008ccf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008cb8:	f7fe fec0 	bl	8007a3c <HAL_RCC_GetPCLK1Freq>
 8008cbc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008cbe:	e010      	b.n	8008ce2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008cc0:	4b1c      	ldr	r3, [pc, #112]	; (8008d34 <UART_SetConfig+0x290>)
 8008cc2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008cc4:	e00d      	b.n	8008ce2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008cc6:	f7fe fe05 	bl	80078d4 <HAL_RCC_GetSysClockFreq>
 8008cca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008ccc:	e009      	b.n	8008ce2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008cce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008cd2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008cd4:	e005      	b.n	8008ce2 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008ce0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	f000 8137 	beq.w	8008f58 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cee:	4a12      	ldr	r2, [pc, #72]	; (8008d38 <UART_SetConfig+0x294>)
 8008cf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cf4:	461a      	mov	r2, r3
 8008cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf8:	fbb3 f3f2 	udiv	r3, r3, r2
 8008cfc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	685a      	ldr	r2, [r3, #4]
 8008d02:	4613      	mov	r3, r2
 8008d04:	005b      	lsls	r3, r3, #1
 8008d06:	4413      	add	r3, r2
 8008d08:	69ba      	ldr	r2, [r7, #24]
 8008d0a:	429a      	cmp	r2, r3
 8008d0c:	d305      	bcc.n	8008d1a <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	685b      	ldr	r3, [r3, #4]
 8008d12:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008d14:	69ba      	ldr	r2, [r7, #24]
 8008d16:	429a      	cmp	r2, r3
 8008d18:	d910      	bls.n	8008d3c <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008d20:	e11a      	b.n	8008f58 <UART_SetConfig+0x4b4>
 8008d22:	bf00      	nop
 8008d24:	cfff69f3 	.word	0xcfff69f3
 8008d28:	40008000 	.word	0x40008000
 8008d2c:	40013800 	.word	0x40013800
 8008d30:	40004400 	.word	0x40004400
 8008d34:	00f42400 	.word	0x00f42400
 8008d38:	08010920 	.word	0x08010920
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d3e:	2200      	movs	r2, #0
 8008d40:	60bb      	str	r3, [r7, #8]
 8008d42:	60fa      	str	r2, [r7, #12]
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d48:	4a8e      	ldr	r2, [pc, #568]	; (8008f84 <UART_SetConfig+0x4e0>)
 8008d4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d4e:	b29b      	uxth	r3, r3
 8008d50:	2200      	movs	r2, #0
 8008d52:	603b      	str	r3, [r7, #0]
 8008d54:	607a      	str	r2, [r7, #4]
 8008d56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d5a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008d5e:	f7f8 fa3d 	bl	80011dc <__aeabi_uldivmod>
 8008d62:	4602      	mov	r2, r0
 8008d64:	460b      	mov	r3, r1
 8008d66:	4610      	mov	r0, r2
 8008d68:	4619      	mov	r1, r3
 8008d6a:	f04f 0200 	mov.w	r2, #0
 8008d6e:	f04f 0300 	mov.w	r3, #0
 8008d72:	020b      	lsls	r3, r1, #8
 8008d74:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008d78:	0202      	lsls	r2, r0, #8
 8008d7a:	6979      	ldr	r1, [r7, #20]
 8008d7c:	6849      	ldr	r1, [r1, #4]
 8008d7e:	0849      	lsrs	r1, r1, #1
 8008d80:	2000      	movs	r0, #0
 8008d82:	460c      	mov	r4, r1
 8008d84:	4605      	mov	r5, r0
 8008d86:	eb12 0804 	adds.w	r8, r2, r4
 8008d8a:	eb43 0905 	adc.w	r9, r3, r5
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	685b      	ldr	r3, [r3, #4]
 8008d92:	2200      	movs	r2, #0
 8008d94:	469a      	mov	sl, r3
 8008d96:	4693      	mov	fp, r2
 8008d98:	4652      	mov	r2, sl
 8008d9a:	465b      	mov	r3, fp
 8008d9c:	4640      	mov	r0, r8
 8008d9e:	4649      	mov	r1, r9
 8008da0:	f7f8 fa1c 	bl	80011dc <__aeabi_uldivmod>
 8008da4:	4602      	mov	r2, r0
 8008da6:	460b      	mov	r3, r1
 8008da8:	4613      	mov	r3, r2
 8008daa:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008dac:	6a3b      	ldr	r3, [r7, #32]
 8008dae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008db2:	d308      	bcc.n	8008dc6 <UART_SetConfig+0x322>
 8008db4:	6a3b      	ldr	r3, [r7, #32]
 8008db6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008dba:	d204      	bcs.n	8008dc6 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8008dbc:	697b      	ldr	r3, [r7, #20]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	6a3a      	ldr	r2, [r7, #32]
 8008dc2:	60da      	str	r2, [r3, #12]
 8008dc4:	e0c8      	b.n	8008f58 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008dcc:	e0c4      	b.n	8008f58 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	69db      	ldr	r3, [r3, #28]
 8008dd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008dd6:	d168      	bne.n	8008eaa <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8008dd8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008ddc:	2b08      	cmp	r3, #8
 8008dde:	d828      	bhi.n	8008e32 <UART_SetConfig+0x38e>
 8008de0:	a201      	add	r2, pc, #4	; (adr r2, 8008de8 <UART_SetConfig+0x344>)
 8008de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008de6:	bf00      	nop
 8008de8:	08008e0d 	.word	0x08008e0d
 8008dec:	08008e15 	.word	0x08008e15
 8008df0:	08008e1d 	.word	0x08008e1d
 8008df4:	08008e33 	.word	0x08008e33
 8008df8:	08008e23 	.word	0x08008e23
 8008dfc:	08008e33 	.word	0x08008e33
 8008e00:	08008e33 	.word	0x08008e33
 8008e04:	08008e33 	.word	0x08008e33
 8008e08:	08008e2b 	.word	0x08008e2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e0c:	f7fe fe16 	bl	8007a3c <HAL_RCC_GetPCLK1Freq>
 8008e10:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008e12:	e014      	b.n	8008e3e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e14:	f7fe fe24 	bl	8007a60 <HAL_RCC_GetPCLK2Freq>
 8008e18:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008e1a:	e010      	b.n	8008e3e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008e1c:	4b5a      	ldr	r3, [pc, #360]	; (8008f88 <UART_SetConfig+0x4e4>)
 8008e1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008e20:	e00d      	b.n	8008e3e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e22:	f7fe fd57 	bl	80078d4 <HAL_RCC_GetSysClockFreq>
 8008e26:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008e28:	e009      	b.n	8008e3e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008e30:	e005      	b.n	8008e3e <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8008e32:	2300      	movs	r3, #0
 8008e34:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008e36:	2301      	movs	r3, #1
 8008e38:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008e3c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	f000 8089 	beq.w	8008f58 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e4a:	4a4e      	ldr	r2, [pc, #312]	; (8008f84 <UART_SetConfig+0x4e0>)
 8008e4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e50:	461a      	mov	r2, r3
 8008e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e54:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e58:	005a      	lsls	r2, r3, #1
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	685b      	ldr	r3, [r3, #4]
 8008e5e:	085b      	lsrs	r3, r3, #1
 8008e60:	441a      	add	r2, r3
 8008e62:	697b      	ldr	r3, [r7, #20]
 8008e64:	685b      	ldr	r3, [r3, #4]
 8008e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e6a:	b29b      	uxth	r3, r3
 8008e6c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e6e:	6a3b      	ldr	r3, [r7, #32]
 8008e70:	2b0f      	cmp	r3, #15
 8008e72:	d916      	bls.n	8008ea2 <UART_SetConfig+0x3fe>
 8008e74:	6a3b      	ldr	r3, [r7, #32]
 8008e76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e7a:	d212      	bcs.n	8008ea2 <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008e7c:	6a3b      	ldr	r3, [r7, #32]
 8008e7e:	b29b      	uxth	r3, r3
 8008e80:	f023 030f 	bic.w	r3, r3, #15
 8008e84:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008e86:	6a3b      	ldr	r3, [r7, #32]
 8008e88:	085b      	lsrs	r3, r3, #1
 8008e8a:	b29b      	uxth	r3, r3
 8008e8c:	f003 0307 	and.w	r3, r3, #7
 8008e90:	b29a      	uxth	r2, r3
 8008e92:	8bfb      	ldrh	r3, [r7, #30]
 8008e94:	4313      	orrs	r3, r2
 8008e96:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	8bfa      	ldrh	r2, [r7, #30]
 8008e9e:	60da      	str	r2, [r3, #12]
 8008ea0:	e05a      	b.n	8008f58 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008ea8:	e056      	b.n	8008f58 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008eaa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008eae:	2b08      	cmp	r3, #8
 8008eb0:	d827      	bhi.n	8008f02 <UART_SetConfig+0x45e>
 8008eb2:	a201      	add	r2, pc, #4	; (adr r2, 8008eb8 <UART_SetConfig+0x414>)
 8008eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eb8:	08008edd 	.word	0x08008edd
 8008ebc:	08008ee5 	.word	0x08008ee5
 8008ec0:	08008eed 	.word	0x08008eed
 8008ec4:	08008f03 	.word	0x08008f03
 8008ec8:	08008ef3 	.word	0x08008ef3
 8008ecc:	08008f03 	.word	0x08008f03
 8008ed0:	08008f03 	.word	0x08008f03
 8008ed4:	08008f03 	.word	0x08008f03
 8008ed8:	08008efb 	.word	0x08008efb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008edc:	f7fe fdae 	bl	8007a3c <HAL_RCC_GetPCLK1Freq>
 8008ee0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008ee2:	e014      	b.n	8008f0e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ee4:	f7fe fdbc 	bl	8007a60 <HAL_RCC_GetPCLK2Freq>
 8008ee8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008eea:	e010      	b.n	8008f0e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008eec:	4b26      	ldr	r3, [pc, #152]	; (8008f88 <UART_SetConfig+0x4e4>)
 8008eee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008ef0:	e00d      	b.n	8008f0e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ef2:	f7fe fcef 	bl	80078d4 <HAL_RCC_GetSysClockFreq>
 8008ef6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008ef8:	e009      	b.n	8008f0e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008efa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008efe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008f00:	e005      	b.n	8008f0e <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8008f02:	2300      	movs	r3, #0
 8008f04:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008f06:	2301      	movs	r3, #1
 8008f08:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008f0c:	bf00      	nop
    }

    if (pclk != 0U)
 8008f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d021      	beq.n	8008f58 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f18:	4a1a      	ldr	r2, [pc, #104]	; (8008f84 <UART_SetConfig+0x4e0>)
 8008f1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f1e:	461a      	mov	r2, r3
 8008f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f22:	fbb3 f2f2 	udiv	r2, r3, r2
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	685b      	ldr	r3, [r3, #4]
 8008f2a:	085b      	lsrs	r3, r3, #1
 8008f2c:	441a      	add	r2, r3
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	685b      	ldr	r3, [r3, #4]
 8008f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f36:	b29b      	uxth	r3, r3
 8008f38:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f3a:	6a3b      	ldr	r3, [r7, #32]
 8008f3c:	2b0f      	cmp	r3, #15
 8008f3e:	d908      	bls.n	8008f52 <UART_SetConfig+0x4ae>
 8008f40:	6a3b      	ldr	r3, [r7, #32]
 8008f42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f46:	d204      	bcs.n	8008f52 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = usartdiv;
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	6a3a      	ldr	r2, [r7, #32]
 8008f4e:	60da      	str	r2, [r3, #12]
 8008f50:	e002      	b.n	8008f58 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8008f52:	2301      	movs	r3, #1
 8008f54:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	2201      	movs	r2, #1
 8008f64:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	2200      	movs	r2, #0
 8008f72:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008f74:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3730      	adds	r7, #48	; 0x30
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f82:	bf00      	nop
 8008f84:	08010920 	.word	0x08010920
 8008f88:	00f42400 	.word	0x00f42400

08008f8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b083      	sub	sp, #12
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f98:	f003 0301 	and.w	r3, r3, #1
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d00a      	beq.n	8008fb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	685b      	ldr	r3, [r3, #4]
 8008fa6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	430a      	orrs	r2, r1
 8008fb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fba:	f003 0302 	and.w	r3, r3, #2
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d00a      	beq.n	8008fd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	430a      	orrs	r2, r1
 8008fd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fdc:	f003 0304 	and.w	r3, r3, #4
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d00a      	beq.n	8008ffa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	685b      	ldr	r3, [r3, #4]
 8008fea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	430a      	orrs	r2, r1
 8008ff8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ffe:	f003 0308 	and.w	r3, r3, #8
 8009002:	2b00      	cmp	r3, #0
 8009004:	d00a      	beq.n	800901c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	685b      	ldr	r3, [r3, #4]
 800900c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	430a      	orrs	r2, r1
 800901a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009020:	f003 0310 	and.w	r3, r3, #16
 8009024:	2b00      	cmp	r3, #0
 8009026:	d00a      	beq.n	800903e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	689b      	ldr	r3, [r3, #8]
 800902e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	430a      	orrs	r2, r1
 800903c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009042:	f003 0320 	and.w	r3, r3, #32
 8009046:	2b00      	cmp	r3, #0
 8009048:	d00a      	beq.n	8009060 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	689b      	ldr	r3, [r3, #8]
 8009050:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	430a      	orrs	r2, r1
 800905e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009068:	2b00      	cmp	r3, #0
 800906a:	d01a      	beq.n	80090a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	685b      	ldr	r3, [r3, #4]
 8009072:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	430a      	orrs	r2, r1
 8009080:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009086:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800908a:	d10a      	bne.n	80090a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	685b      	ldr	r3, [r3, #4]
 8009092:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	430a      	orrs	r2, r1
 80090a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d00a      	beq.n	80090c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	685b      	ldr	r3, [r3, #4]
 80090b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	430a      	orrs	r2, r1
 80090c2:	605a      	str	r2, [r3, #4]
  }
}
 80090c4:	bf00      	nop
 80090c6:	370c      	adds	r7, #12
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bc80      	pop	{r7}
 80090cc:	4770      	bx	lr

080090ce <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80090ce:	b580      	push	{r7, lr}
 80090d0:	b086      	sub	sp, #24
 80090d2:	af02      	add	r7, sp, #8
 80090d4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2200      	movs	r2, #0
 80090da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80090de:	f7fd f835 	bl	800614c <HAL_GetTick>
 80090e2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f003 0308 	and.w	r3, r3, #8
 80090ee:	2b08      	cmp	r3, #8
 80090f0:	d10e      	bne.n	8009110 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80090f2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80090f6:	9300      	str	r3, [sp, #0]
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	2200      	movs	r2, #0
 80090fc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f000 f82f 	bl	8009164 <UART_WaitOnFlagUntilTimeout>
 8009106:	4603      	mov	r3, r0
 8009108:	2b00      	cmp	r3, #0
 800910a:	d001      	beq.n	8009110 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800910c:	2303      	movs	r3, #3
 800910e:	e025      	b.n	800915c <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f003 0304 	and.w	r3, r3, #4
 800911a:	2b04      	cmp	r3, #4
 800911c:	d10e      	bne.n	800913c <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800911e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009122:	9300      	str	r3, [sp, #0]
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2200      	movs	r2, #0
 8009128:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f000 f819 	bl	8009164 <UART_WaitOnFlagUntilTimeout>
 8009132:	4603      	mov	r3, r0
 8009134:	2b00      	cmp	r3, #0
 8009136:	d001      	beq.n	800913c <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009138:	2303      	movs	r3, #3
 800913a:	e00f      	b.n	800915c <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2220      	movs	r2, #32
 8009140:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2220      	movs	r2, #32
 8009148:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2200      	movs	r2, #0
 8009150:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2200      	movs	r2, #0
 8009156:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800915a:	2300      	movs	r3, #0
}
 800915c:	4618      	mov	r0, r3
 800915e:	3710      	adds	r7, #16
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}

08009164 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b09c      	sub	sp, #112	; 0x70
 8009168:	af00      	add	r7, sp, #0
 800916a:	60f8      	str	r0, [r7, #12]
 800916c:	60b9      	str	r1, [r7, #8]
 800916e:	603b      	str	r3, [r7, #0]
 8009170:	4613      	mov	r3, r2
 8009172:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009174:	e0a9      	b.n	80092ca <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009176:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800917c:	f000 80a5 	beq.w	80092ca <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009180:	f7fc ffe4 	bl	800614c <HAL_GetTick>
 8009184:	4602      	mov	r2, r0
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	1ad3      	subs	r3, r2, r3
 800918a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800918c:	429a      	cmp	r2, r3
 800918e:	d302      	bcc.n	8009196 <UART_WaitOnFlagUntilTimeout+0x32>
 8009190:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009192:	2b00      	cmp	r3, #0
 8009194:	d140      	bne.n	8009218 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800919c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800919e:	e853 3f00 	ldrex	r3, [r3]
 80091a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80091a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091a6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80091aa:	667b      	str	r3, [r7, #100]	; 0x64
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	461a      	mov	r2, r3
 80091b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80091b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80091b6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091b8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80091ba:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80091bc:	e841 2300 	strex	r3, r2, [r1]
 80091c0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80091c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d1e6      	bne.n	8009196 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	3308      	adds	r3, #8
 80091ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091d2:	e853 3f00 	ldrex	r3, [r3]
 80091d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80091d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091da:	f023 0301 	bic.w	r3, r3, #1
 80091de:	663b      	str	r3, [r7, #96]	; 0x60
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	3308      	adds	r3, #8
 80091e6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80091e8:	64ba      	str	r2, [r7, #72]	; 0x48
 80091ea:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ec:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80091ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80091f0:	e841 2300 	strex	r3, r2, [r1]
 80091f4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80091f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d1e5      	bne.n	80091c8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	2220      	movs	r2, #32
 8009200:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2220      	movs	r2, #32
 8009208:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	2200      	movs	r2, #0
 8009210:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009214:	2303      	movs	r3, #3
 8009216:	e069      	b.n	80092ec <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f003 0304 	and.w	r3, r3, #4
 8009222:	2b00      	cmp	r3, #0
 8009224:	d051      	beq.n	80092ca <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	69db      	ldr	r3, [r3, #28]
 800922c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009230:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009234:	d149      	bne.n	80092ca <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800923e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009248:	e853 3f00 	ldrex	r3, [r3]
 800924c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800924e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009250:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009254:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	461a      	mov	r2, r3
 800925c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800925e:	637b      	str	r3, [r7, #52]	; 0x34
 8009260:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009262:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009264:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009266:	e841 2300 	strex	r3, r2, [r1]
 800926a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800926c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800926e:	2b00      	cmp	r3, #0
 8009270:	d1e6      	bne.n	8009240 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	3308      	adds	r3, #8
 8009278:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	e853 3f00 	ldrex	r3, [r3]
 8009280:	613b      	str	r3, [r7, #16]
   return(result);
 8009282:	693b      	ldr	r3, [r7, #16]
 8009284:	f023 0301 	bic.w	r3, r3, #1
 8009288:	66bb      	str	r3, [r7, #104]	; 0x68
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	3308      	adds	r3, #8
 8009290:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009292:	623a      	str	r2, [r7, #32]
 8009294:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009296:	69f9      	ldr	r1, [r7, #28]
 8009298:	6a3a      	ldr	r2, [r7, #32]
 800929a:	e841 2300 	strex	r3, r2, [r1]
 800929e:	61bb      	str	r3, [r7, #24]
   return(result);
 80092a0:	69bb      	ldr	r3, [r7, #24]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d1e5      	bne.n	8009272 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	2220      	movs	r2, #32
 80092aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	2220      	movs	r2, #32
 80092b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	2220      	movs	r2, #32
 80092ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	2200      	movs	r2, #0
 80092c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80092c6:	2303      	movs	r3, #3
 80092c8:	e010      	b.n	80092ec <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	69da      	ldr	r2, [r3, #28]
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	4013      	ands	r3, r2
 80092d4:	68ba      	ldr	r2, [r7, #8]
 80092d6:	429a      	cmp	r2, r3
 80092d8:	bf0c      	ite	eq
 80092da:	2301      	moveq	r3, #1
 80092dc:	2300      	movne	r3, #0
 80092de:	b2db      	uxtb	r3, r3
 80092e0:	461a      	mov	r2, r3
 80092e2:	79fb      	ldrb	r3, [r7, #7]
 80092e4:	429a      	cmp	r2, r3
 80092e6:	f43f af46 	beq.w	8009176 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80092ea:	2300      	movs	r3, #0
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	3770      	adds	r7, #112	; 0x70
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}

080092f4 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80092f4:	b480      	push	{r7}
 80092f6:	b08f      	sub	sp, #60	; 0x3c
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009302:	2b21      	cmp	r3, #33	; 0x21
 8009304:	d14c      	bne.n	80093a0 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800930c:	b29b      	uxth	r3, r3
 800930e:	2b00      	cmp	r3, #0
 8009310:	d132      	bne.n	8009378 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009318:	6a3b      	ldr	r3, [r7, #32]
 800931a:	e853 3f00 	ldrex	r3, [r3]
 800931e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009320:	69fb      	ldr	r3, [r7, #28]
 8009322:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009326:	637b      	str	r3, [r7, #52]	; 0x34
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	461a      	mov	r2, r3
 800932e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009330:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009332:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009334:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009336:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009338:	e841 2300 	strex	r3, r2, [r1]
 800933c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800933e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009340:	2b00      	cmp	r3, #0
 8009342:	d1e6      	bne.n	8009312 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	e853 3f00 	ldrex	r3, [r3]
 8009350:	60bb      	str	r3, [r7, #8]
   return(result);
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009358:	633b      	str	r3, [r7, #48]	; 0x30
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	461a      	mov	r2, r3
 8009360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009362:	61bb      	str	r3, [r7, #24]
 8009364:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009366:	6979      	ldr	r1, [r7, #20]
 8009368:	69ba      	ldr	r2, [r7, #24]
 800936a:	e841 2300 	strex	r3, r2, [r1]
 800936e:	613b      	str	r3, [r7, #16]
   return(result);
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d1e6      	bne.n	8009344 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8009376:	e013      	b.n	80093a0 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800937c:	781a      	ldrb	r2, [r3, #0]
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009388:	1c5a      	adds	r2, r3, #1
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009394:	b29b      	uxth	r3, r3
 8009396:	3b01      	subs	r3, #1
 8009398:	b29a      	uxth	r2, r3
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80093a0:	bf00      	nop
 80093a2:	373c      	adds	r7, #60	; 0x3c
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bc80      	pop	{r7}
 80093a8:	4770      	bx	lr

080093aa <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80093aa:	b480      	push	{r7}
 80093ac:	b091      	sub	sp, #68	; 0x44
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093b8:	2b21      	cmp	r3, #33	; 0x21
 80093ba:	d151      	bne.n	8009460 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80093c2:	b29b      	uxth	r3, r3
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d132      	bne.n	800942e <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d0:	e853 3f00 	ldrex	r3, [r3]
 80093d4:	623b      	str	r3, [r7, #32]
   return(result);
 80093d6:	6a3b      	ldr	r3, [r7, #32]
 80093d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80093dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	461a      	mov	r2, r3
 80093e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093e6:	633b      	str	r3, [r7, #48]	; 0x30
 80093e8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80093ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093ee:	e841 2300 	strex	r3, r2, [r1]
 80093f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80093f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d1e6      	bne.n	80093c8 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	e853 3f00 	ldrex	r3, [r3]
 8009406:	60fb      	str	r3, [r7, #12]
   return(result);
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800940e:	637b      	str	r3, [r7, #52]	; 0x34
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	461a      	mov	r2, r3
 8009416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009418:	61fb      	str	r3, [r7, #28]
 800941a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800941c:	69b9      	ldr	r1, [r7, #24]
 800941e:	69fa      	ldr	r2, [r7, #28]
 8009420:	e841 2300 	strex	r3, r2, [r1]
 8009424:	617b      	str	r3, [r7, #20]
   return(result);
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d1e6      	bne.n	80093fa <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800942c:	e018      	b.n	8009460 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009432:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009434:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009436:	881b      	ldrh	r3, [r3, #0]
 8009438:	461a      	mov	r2, r3
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009442:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009448:	1c9a      	adds	r2, r3, #2
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009454:	b29b      	uxth	r3, r3
 8009456:	3b01      	subs	r3, #1
 8009458:	b29a      	uxth	r2, r3
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8009460:	bf00      	nop
 8009462:	3744      	adds	r7, #68	; 0x44
 8009464:	46bd      	mov	sp, r7
 8009466:	bc80      	pop	{r7}
 8009468:	4770      	bx	lr

0800946a <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800946a:	b480      	push	{r7}
 800946c:	b091      	sub	sp, #68	; 0x44
 800946e:	af00      	add	r7, sp, #0
 8009470:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009478:	2b21      	cmp	r3, #33	; 0x21
 800947a:	d160      	bne.n	800953e <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009482:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009484:	e057      	b.n	8009536 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800948c:	b29b      	uxth	r3, r3
 800948e:	2b00      	cmp	r3, #0
 8009490:	d133      	bne.n	80094fa <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	3308      	adds	r3, #8
 8009498:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800949a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800949c:	e853 3f00 	ldrex	r3, [r3]
 80094a0:	623b      	str	r3, [r7, #32]
   return(result);
 80094a2:	6a3b      	ldr	r3, [r7, #32]
 80094a4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80094a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	3308      	adds	r3, #8
 80094b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80094b2:	633a      	str	r2, [r7, #48]	; 0x30
 80094b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80094b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094ba:	e841 2300 	strex	r3, r2, [r1]
 80094be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80094c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d1e5      	bne.n	8009492 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094cc:	693b      	ldr	r3, [r7, #16]
 80094ce:	e853 3f00 	ldrex	r3, [r3]
 80094d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094da:	637b      	str	r3, [r7, #52]	; 0x34
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	461a      	mov	r2, r3
 80094e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094e4:	61fb      	str	r3, [r7, #28]
 80094e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094e8:	69b9      	ldr	r1, [r7, #24]
 80094ea:	69fa      	ldr	r2, [r7, #28]
 80094ec:	e841 2300 	strex	r3, r2, [r1]
 80094f0:	617b      	str	r3, [r7, #20]
   return(result);
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d1e6      	bne.n	80094c6 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80094f8:	e021      	b.n	800953e <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	69db      	ldr	r3, [r3, #28]
 8009500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009504:	2b00      	cmp	r3, #0
 8009506:	d013      	beq.n	8009530 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800950c:	781a      	ldrb	r2, [r3, #0]
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009518:	1c5a      	adds	r2, r3, #1
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009524:	b29b      	uxth	r3, r3
 8009526:	3b01      	subs	r3, #1
 8009528:	b29a      	uxth	r2, r3
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009530:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009532:	3b01      	subs	r3, #1
 8009534:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009536:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009538:	2b00      	cmp	r3, #0
 800953a:	d1a4      	bne.n	8009486 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800953c:	e7ff      	b.n	800953e <UART_TxISR_8BIT_FIFOEN+0xd4>
 800953e:	bf00      	nop
 8009540:	3744      	adds	r7, #68	; 0x44
 8009542:	46bd      	mov	sp, r7
 8009544:	bc80      	pop	{r7}
 8009546:	4770      	bx	lr

08009548 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009548:	b480      	push	{r7}
 800954a:	b091      	sub	sp, #68	; 0x44
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009556:	2b21      	cmp	r3, #33	; 0x21
 8009558:	d165      	bne.n	8009626 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009560:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009562:	e05c      	b.n	800961e <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800956a:	b29b      	uxth	r3, r3
 800956c:	2b00      	cmp	r3, #0
 800956e:	d133      	bne.n	80095d8 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	3308      	adds	r3, #8
 8009576:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009578:	6a3b      	ldr	r3, [r7, #32]
 800957a:	e853 3f00 	ldrex	r3, [r3]
 800957e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009580:	69fb      	ldr	r3, [r7, #28]
 8009582:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009586:	637b      	str	r3, [r7, #52]	; 0x34
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	3308      	adds	r3, #8
 800958e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009590:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009592:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009594:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009596:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009598:	e841 2300 	strex	r3, r2, [r1]
 800959c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800959e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d1e5      	bne.n	8009570 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	e853 3f00 	ldrex	r3, [r3]
 80095b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095b8:	633b      	str	r3, [r7, #48]	; 0x30
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	461a      	mov	r2, r3
 80095c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c2:	61bb      	str	r3, [r7, #24]
 80095c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095c6:	6979      	ldr	r1, [r7, #20]
 80095c8:	69ba      	ldr	r2, [r7, #24]
 80095ca:	e841 2300 	strex	r3, r2, [r1]
 80095ce:	613b      	str	r3, [r7, #16]
   return(result);
 80095d0:	693b      	ldr	r3, [r7, #16]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d1e6      	bne.n	80095a4 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80095d6:	e026      	b.n	8009626 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	69db      	ldr	r3, [r3, #28]
 80095de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d018      	beq.n	8009618 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095ea:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80095ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ee:	881b      	ldrh	r3, [r3, #0]
 80095f0:	461a      	mov	r2, r3
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80095fa:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009600:	1c9a      	adds	r2, r3, #2
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800960c:	b29b      	uxth	r3, r3
 800960e:	3b01      	subs	r3, #1
 8009610:	b29a      	uxth	r2, r3
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009618:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800961a:	3b01      	subs	r3, #1
 800961c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800961e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009620:	2b00      	cmp	r3, #0
 8009622:	d19f      	bne.n	8009564 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8009624:	e7ff      	b.n	8009626 <UART_TxISR_16BIT_FIFOEN+0xde>
 8009626:	bf00      	nop
 8009628:	3744      	adds	r7, #68	; 0x44
 800962a:	46bd      	mov	sp, r7
 800962c:	bc80      	pop	{r7}
 800962e:	4770      	bx	lr

08009630 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009630:	b480      	push	{r7}
 8009632:	b085      	sub	sp, #20
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800963e:	2b01      	cmp	r3, #1
 8009640:	d101      	bne.n	8009646 <HAL_UARTEx_DisableFifoMode+0x16>
 8009642:	2302      	movs	r3, #2
 8009644:	e027      	b.n	8009696 <HAL_UARTEx_DisableFifoMode+0x66>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2201      	movs	r2, #1
 800964a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2224      	movs	r2, #36	; 0x24
 8009652:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	681a      	ldr	r2, [r3, #0]
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f022 0201 	bic.w	r2, r2, #1
 800966c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009674:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2200      	movs	r2, #0
 800967a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	68fa      	ldr	r2, [r7, #12]
 8009682:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2220      	movs	r2, #32
 8009688:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2200      	movs	r2, #0
 8009690:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009694:	2300      	movs	r3, #0
}
 8009696:	4618      	mov	r0, r3
 8009698:	3714      	adds	r7, #20
 800969a:	46bd      	mov	sp, r7
 800969c:	bc80      	pop	{r7}
 800969e:	4770      	bx	lr

080096a0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b084      	sub	sp, #16
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
 80096a8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80096b0:	2b01      	cmp	r3, #1
 80096b2:	d101      	bne.n	80096b8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80096b4:	2302      	movs	r3, #2
 80096b6:	e02d      	b.n	8009714 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2201      	movs	r2, #1
 80096bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2224      	movs	r2, #36	; 0x24
 80096c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	681a      	ldr	r2, [r3, #0]
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f022 0201 	bic.w	r2, r2, #1
 80096de:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	689b      	ldr	r3, [r3, #8]
 80096e6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	683a      	ldr	r2, [r7, #0]
 80096f0:	430a      	orrs	r2, r1
 80096f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f000 f84f 	bl	8009798 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	68fa      	ldr	r2, [r7, #12]
 8009700:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2220      	movs	r2, #32
 8009706:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2200      	movs	r2, #0
 800970e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009712:	2300      	movs	r3, #0
}
 8009714:	4618      	mov	r0, r3
 8009716:	3710      	adds	r7, #16
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}

0800971c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b084      	sub	sp, #16
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
 8009724:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800972c:	2b01      	cmp	r3, #1
 800972e:	d101      	bne.n	8009734 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009730:	2302      	movs	r3, #2
 8009732:	e02d      	b.n	8009790 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2201      	movs	r2, #1
 8009738:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2224      	movs	r2, #36	; 0x24
 8009740:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	681a      	ldr	r2, [r3, #0]
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f022 0201 	bic.w	r2, r2, #1
 800975a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	689b      	ldr	r3, [r3, #8]
 8009762:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	683a      	ldr	r2, [r7, #0]
 800976c:	430a      	orrs	r2, r1
 800976e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f000 f811 	bl	8009798 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	68fa      	ldr	r2, [r7, #12]
 800977c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2220      	movs	r2, #32
 8009782:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2200      	movs	r2, #0
 800978a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800978e:	2300      	movs	r3, #0
}
 8009790:	4618      	mov	r0, r3
 8009792:	3710      	adds	r7, #16
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}

08009798 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009798:	b480      	push	{r7}
 800979a:	b085      	sub	sp, #20
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d108      	bne.n	80097ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2201      	movs	r2, #1
 80097ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2201      	movs	r2, #1
 80097b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80097b8:	e031      	b.n	800981e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80097ba:	2308      	movs	r3, #8
 80097bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80097be:	2308      	movs	r3, #8
 80097c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	689b      	ldr	r3, [r3, #8]
 80097c8:	0e5b      	lsrs	r3, r3, #25
 80097ca:	b2db      	uxtb	r3, r3
 80097cc:	f003 0307 	and.w	r3, r3, #7
 80097d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	689b      	ldr	r3, [r3, #8]
 80097d8:	0f5b      	lsrs	r3, r3, #29
 80097da:	b2db      	uxtb	r3, r3
 80097dc:	f003 0307 	and.w	r3, r3, #7
 80097e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80097e2:	7bbb      	ldrb	r3, [r7, #14]
 80097e4:	7b3a      	ldrb	r2, [r7, #12]
 80097e6:	4910      	ldr	r1, [pc, #64]	; (8009828 <UARTEx_SetNbDataToProcess+0x90>)
 80097e8:	5c8a      	ldrb	r2, [r1, r2]
 80097ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80097ee:	7b3a      	ldrb	r2, [r7, #12]
 80097f0:	490e      	ldr	r1, [pc, #56]	; (800982c <UARTEx_SetNbDataToProcess+0x94>)
 80097f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80097f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80097f8:	b29a      	uxth	r2, r3
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009800:	7bfb      	ldrb	r3, [r7, #15]
 8009802:	7b7a      	ldrb	r2, [r7, #13]
 8009804:	4908      	ldr	r1, [pc, #32]	; (8009828 <UARTEx_SetNbDataToProcess+0x90>)
 8009806:	5c8a      	ldrb	r2, [r1, r2]
 8009808:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800980c:	7b7a      	ldrb	r2, [r7, #13]
 800980e:	4907      	ldr	r1, [pc, #28]	; (800982c <UARTEx_SetNbDataToProcess+0x94>)
 8009810:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009812:	fb93 f3f2 	sdiv	r3, r3, r2
 8009816:	b29a      	uxth	r2, r3
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800981e:	bf00      	nop
 8009820:	3714      	adds	r7, #20
 8009822:	46bd      	mov	sp, r7
 8009824:	bc80      	pop	{r7}
 8009826:	4770      	bx	lr
 8009828:	08010938 	.word	0x08010938
 800982c:	08010940 	.word	0x08010940

08009830 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b084      	sub	sp, #16
 8009834:	af02      	add	r7, sp, #8
 8009836:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8009838:	4a24      	ldr	r2, [pc, #144]	; (80098cc <RadioInit+0x9c>)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 800983e:	4b24      	ldr	r3, [pc, #144]	; (80098d0 <RadioInit+0xa0>)
 8009840:	2200      	movs	r2, #0
 8009842:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8009844:	4b22      	ldr	r3, [pc, #136]	; (80098d0 <RadioInit+0xa0>)
 8009846:	2200      	movs	r2, #0
 8009848:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 800984a:	4b21      	ldr	r3, [pc, #132]	; (80098d0 <RadioInit+0xa0>)
 800984c:	2200      	movs	r2, #0
 800984e:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8009850:	4b1f      	ldr	r3, [pc, #124]	; (80098d0 <RadioInit+0xa0>)
 8009852:	2200      	movs	r2, #0
 8009854:	659a      	str	r2, [r3, #88]	; 0x58

    SUBGRF_Init( RadioOnDioIrq );
 8009856:	481f      	ldr	r0, [pc, #124]	; (80098d4 <RadioInit+0xa4>)
 8009858:	f001 ff50 	bl	800b6fc <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 800985c:	4b1c      	ldr	r3, [pc, #112]	; (80098d0 <RadioInit+0xa0>)
 800985e:	2200      	movs	r2, #0
 8009860:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 8009862:	4b1b      	ldr	r3, [pc, #108]	; (80098d0 <RadioInit+0xa0>)
 8009864:	2200      	movs	r2, #0
 8009866:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8009868:	f002 f9de 	bl	800bc28 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 800986c:	2100      	movs	r1, #0
 800986e:	2000      	movs	r0, #0
 8009870:	f002 fda6 	bl	800c3c0 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8009874:	2204      	movs	r2, #4
 8009876:	2100      	movs	r1, #0
 8009878:	2001      	movs	r0, #1
 800987a:	f002 fb63 	bl	800bf44 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800987e:	2300      	movs	r3, #0
 8009880:	2200      	movs	r2, #0
 8009882:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009886:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800988a:	f002 fa93 	bl	800bdb4 <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 800988e:	f000 fe7d 	bl	800a58c <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8009892:	2300      	movs	r3, #0
 8009894:	9300      	str	r3, [sp, #0]
 8009896:	4b10      	ldr	r3, [pc, #64]	; (80098d8 <RadioInit+0xa8>)
 8009898:	2200      	movs	r2, #0
 800989a:	f04f 31ff 	mov.w	r1, #4294967295
 800989e:	480f      	ldr	r0, [pc, #60]	; (80098dc <RadioInit+0xac>)
 80098a0:	f003 f9aa 	bl	800cbf8 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 80098a4:	2300      	movs	r3, #0
 80098a6:	9300      	str	r3, [sp, #0]
 80098a8:	4b0d      	ldr	r3, [pc, #52]	; (80098e0 <RadioInit+0xb0>)
 80098aa:	2200      	movs	r2, #0
 80098ac:	f04f 31ff 	mov.w	r1, #4294967295
 80098b0:	480c      	ldr	r0, [pc, #48]	; (80098e4 <RadioInit+0xb4>)
 80098b2:	f003 f9a1 	bl	800cbf8 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 80098b6:	4809      	ldr	r0, [pc, #36]	; (80098dc <RadioInit+0xac>)
 80098b8:	f003 fa42 	bl	800cd40 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 80098bc:	4809      	ldr	r0, [pc, #36]	; (80098e4 <RadioInit+0xb4>)
 80098be:	f003 fa3f 	bl	800cd40 <UTIL_TIMER_Stop>
}
 80098c2:	bf00      	nop
 80098c4:	3708      	adds	r7, #8
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bd80      	pop	{r7, pc}
 80098ca:	bf00      	nop
 80098cc:	20000590 	.word	0x20000590
 80098d0:	20000594 	.word	0x20000594
 80098d4:	0800a979 	.word	0x0800a979
 80098d8:	0800a901 	.word	0x0800a901
 80098dc:	200005f0 	.word	0x200005f0
 80098e0:	0800a915 	.word	0x0800a915
 80098e4:	20000608 	.word	0x20000608

080098e8 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 80098ec:	f001 ff48 	bl	800b780 <SUBGRF_GetOperatingMode>
 80098f0:	4603      	mov	r3, r0
 80098f2:	2b07      	cmp	r3, #7
 80098f4:	d00a      	beq.n	800990c <RadioGetStatus+0x24>
 80098f6:	2b07      	cmp	r3, #7
 80098f8:	dc0a      	bgt.n	8009910 <RadioGetStatus+0x28>
 80098fa:	2b04      	cmp	r3, #4
 80098fc:	d002      	beq.n	8009904 <RadioGetStatus+0x1c>
 80098fe:	2b05      	cmp	r3, #5
 8009900:	d002      	beq.n	8009908 <RadioGetStatus+0x20>
 8009902:	e005      	b.n	8009910 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8009904:	2302      	movs	r3, #2
 8009906:	e004      	b.n	8009912 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8009908:	2301      	movs	r3, #1
 800990a:	e002      	b.n	8009912 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 800990c:	2303      	movs	r3, #3
 800990e:	e000      	b.n	8009912 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8009910:	2300      	movs	r3, #0
    }
}
 8009912:	4618      	mov	r0, r3
 8009914:	bd80      	pop	{r7, pc}
	...

08009918 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b082      	sub	sp, #8
 800991c:	af00      	add	r7, sp, #0
 800991e:	4603      	mov	r3, r0
 8009920:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8009922:	4a2a      	ldr	r2, [pc, #168]	; (80099cc <RadioSetModem+0xb4>)
 8009924:	79fb      	ldrb	r3, [r7, #7]
 8009926:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8009928:	79fb      	ldrb	r3, [r7, #7]
 800992a:	4618      	mov	r0, r3
 800992c:	f003 f879 	bl	800ca22 <RFW_SetRadioModem>
    switch( modem )
 8009930:	79fb      	ldrb	r3, [r7, #7]
 8009932:	2b05      	cmp	r3, #5
 8009934:	d80e      	bhi.n	8009954 <RadioSetModem+0x3c>
 8009936:	a201      	add	r2, pc, #4	; (adr r2, 800993c <RadioSetModem+0x24>)
 8009938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800993c:	08009963 	.word	0x08009963
 8009940:	08009971 	.word	0x08009971
 8009944:	08009955 	.word	0x08009955
 8009948:	08009997 	.word	0x08009997
 800994c:	080099a5 	.word	0x080099a5
 8009950:	080099b3 	.word	0x080099b3
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8009954:	2003      	movs	r0, #3
 8009956:	f002 facf 	bl	800bef8 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800995a:	4b1c      	ldr	r3, [pc, #112]	; (80099cc <RadioSetModem+0xb4>)
 800995c:	2200      	movs	r2, #0
 800995e:	735a      	strb	r2, [r3, #13]
        break;
 8009960:	e02f      	b.n	80099c2 <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8009962:	2000      	movs	r0, #0
 8009964:	f002 fac8 	bl	800bef8 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8009968:	4b18      	ldr	r3, [pc, #96]	; (80099cc <RadioSetModem+0xb4>)
 800996a:	2200      	movs	r2, #0
 800996c:	735a      	strb	r2, [r3, #13]
        break;
 800996e:	e028      	b.n	80099c2 <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8009970:	2001      	movs	r0, #1
 8009972:	f002 fac1 	bl	800bef8 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8009976:	4b15      	ldr	r3, [pc, #84]	; (80099cc <RadioSetModem+0xb4>)
 8009978:	7b5a      	ldrb	r2, [r3, #13]
 800997a:	4b14      	ldr	r3, [pc, #80]	; (80099cc <RadioSetModem+0xb4>)
 800997c:	7b1b      	ldrb	r3, [r3, #12]
 800997e:	429a      	cmp	r2, r3
 8009980:	d01e      	beq.n	80099c0 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8009982:	4b12      	ldr	r3, [pc, #72]	; (80099cc <RadioSetModem+0xb4>)
 8009984:	7b1a      	ldrb	r2, [r3, #12]
 8009986:	4b11      	ldr	r3, [pc, #68]	; (80099cc <RadioSetModem+0xb4>)
 8009988:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 800998a:	4b10      	ldr	r3, [pc, #64]	; (80099cc <RadioSetModem+0xb4>)
 800998c:	7b5b      	ldrb	r3, [r3, #13]
 800998e:	4618      	mov	r0, r3
 8009990:	f000 ff80 	bl	800a894 <RadioSetPublicNetwork>
        }
        break;
 8009994:	e014      	b.n	80099c0 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8009996:	2002      	movs	r0, #2
 8009998:	f002 faae 	bl	800bef8 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800999c:	4b0b      	ldr	r3, [pc, #44]	; (80099cc <RadioSetModem+0xb4>)
 800999e:	2200      	movs	r2, #0
 80099a0:	735a      	strb	r2, [r3, #13]
        break;
 80099a2:	e00e      	b.n	80099c2 <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80099a4:	2002      	movs	r0, #2
 80099a6:	f002 faa7 	bl	800bef8 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80099aa:	4b08      	ldr	r3, [pc, #32]	; (80099cc <RadioSetModem+0xb4>)
 80099ac:	2200      	movs	r2, #0
 80099ae:	735a      	strb	r2, [r3, #13]
        break;
 80099b0:	e007      	b.n	80099c2 <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80099b2:	2000      	movs	r0, #0
 80099b4:	f002 faa0 	bl	800bef8 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80099b8:	4b04      	ldr	r3, [pc, #16]	; (80099cc <RadioSetModem+0xb4>)
 80099ba:	2200      	movs	r2, #0
 80099bc:	735a      	strb	r2, [r3, #13]
        break;
 80099be:	e000      	b.n	80099c2 <RadioSetModem+0xaa>
        break;
 80099c0:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 80099c2:	bf00      	nop
 80099c4:	3708      	adds	r7, #8
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd80      	pop	{r7, pc}
 80099ca:	bf00      	nop
 80099cc:	20000594 	.word	0x20000594

080099d0 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b082      	sub	sp, #8
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f002 fa47 	bl	800be6c <SUBGRF_SetRfFrequency>
}
 80099de:	bf00      	nop
 80099e0:	3708      	adds	r7, #8
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}

080099e6 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 80099e6:	b580      	push	{r7, lr}
 80099e8:	b090      	sub	sp, #64	; 0x40
 80099ea:	af0a      	add	r7, sp, #40	; 0x28
 80099ec:	60f8      	str	r0, [r7, #12]
 80099ee:	60b9      	str	r1, [r7, #8]
 80099f0:	603b      	str	r3, [r7, #0]
 80099f2:	4613      	mov	r3, r2
 80099f4:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 80099f6:	2301      	movs	r3, #1
 80099f8:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 80099fa:	2300      	movs	r3, #0
 80099fc:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 80099fe:	2300      	movs	r3, #0
 8009a00:	613b      	str	r3, [r7, #16]

    RadioStandby( );  /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 8009a02:	f000 fdd6 	bl	800a5b2 <RadioStandby>

    RadioSetModem( MODEM_FSK );
 8009a06:	2000      	movs	r0, #0
 8009a08:	f7ff ff86 	bl	8009918 <RadioSetModem>

    RadioSetChannel( freq );
 8009a0c:	68f8      	ldr	r0, [r7, #12]
 8009a0e:	f7ff ffdf 	bl	80099d0 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8009a12:	2301      	movs	r3, #1
 8009a14:	9309      	str	r3, [sp, #36]	; 0x24
 8009a16:	2300      	movs	r3, #0
 8009a18:	9308      	str	r3, [sp, #32]
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	9307      	str	r3, [sp, #28]
 8009a1e:	2300      	movs	r3, #0
 8009a20:	9306      	str	r3, [sp, #24]
 8009a22:	2300      	movs	r3, #0
 8009a24:	9305      	str	r3, [sp, #20]
 8009a26:	2300      	movs	r3, #0
 8009a28:	9304      	str	r3, [sp, #16]
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	9303      	str	r3, [sp, #12]
 8009a2e:	2300      	movs	r3, #0
 8009a30:	9302      	str	r3, [sp, #8]
 8009a32:	2303      	movs	r3, #3
 8009a34:	9301      	str	r3, [sp, #4]
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	9300      	str	r3, [sp, #0]
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8009a40:	68b9      	ldr	r1, [r7, #8]
 8009a42:	2000      	movs	r0, #0
 8009a44:	f000 f83c 	bl	8009ac0 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8009a48:	2000      	movs	r0, #0
 8009a4a:	f000 fdb9 	bl	800a5c0 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8009a4e:	f000 ff4f 	bl	800a8f0 <RadioGetWakeupTime>
 8009a52:	4603      	mov	r3, r0
 8009a54:	4618      	mov	r0, r3
 8009a56:	f7fc f85e 	bl	8005b16 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8009a5a:	f003 fa0b 	bl	800ce74 <UTIL_TIMER_GetCurrentTime>
 8009a5e:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8009a60:	e00d      	b.n	8009a7e <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8009a62:	2000      	movs	r0, #0
 8009a64:	f000 fe94 	bl	800a790 <RadioRssi>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8009a6c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8009a70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009a74:	429a      	cmp	r2, r3
 8009a76:	dd02      	ble.n	8009a7e <RadioIsChannelFree+0x98>
        {
            status = false;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	75fb      	strb	r3, [r7, #23]
            break;
 8009a7c:	e006      	b.n	8009a8c <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8009a7e:	6938      	ldr	r0, [r7, #16]
 8009a80:	f003 fa0a 	bl	800ce98 <UTIL_TIMER_GetElapsedTime>
 8009a84:	4602      	mov	r2, r0
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	d8ea      	bhi.n	8009a62 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( ); /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 8009a8c:	f000 fd91 	bl	800a5b2 <RadioStandby>

    return status;
 8009a90:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	3718      	adds	r7, #24
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}

08009a9a <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8009a9a:	b580      	push	{r7, lr}
 8009a9c:	b082      	sub	sp, #8
 8009a9e:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	2100      	movs	r1, #0
 8009aaa:	2000      	movs	r0, #0
 8009aac:	f002 f982 	bl	800bdb4 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8009ab0:	f001 ff37 	bl	800b922 <SUBGRF_GetRandom>
 8009ab4:	6078      	str	r0, [r7, #4]

    return rnd;
 8009ab6:	687b      	ldr	r3, [r7, #4]
}
 8009ab8:	4618      	mov	r0, r3
 8009aba:	3708      	adds	r7, #8
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bd80      	pop	{r7, pc}

08009ac0 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b08a      	sub	sp, #40	; 0x28
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	60b9      	str	r1, [r7, #8]
 8009ac8:	607a      	str	r2, [r7, #4]
 8009aca:	461a      	mov	r2, r3
 8009acc:	4603      	mov	r3, r0
 8009ace:	73fb      	strb	r3, [r7, #15]
 8009ad0:	4613      	mov	r3, r2
 8009ad2:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8009ad4:	4ab9      	ldr	r2, [pc, #740]	; (8009dbc <RadioSetRxConfig+0x2fc>)
 8009ad6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8009ada:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8009adc:	f002 ff5f 	bl	800c99e <RFW_DeInit>
    if( rxContinuous == true )
 8009ae0:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d001      	beq.n	8009aec <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 8009aec:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d004      	beq.n	8009afe <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8009af4:	4ab2      	ldr	r2, [pc, #712]	; (8009dc0 <RadioSetRxConfig+0x300>)
 8009af6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8009afa:	7013      	strb	r3, [r2, #0]
 8009afc:	e002      	b.n	8009b04 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8009afe:	4bb0      	ldr	r3, [pc, #704]	; (8009dc0 <RadioSetRxConfig+0x300>)
 8009b00:	22ff      	movs	r2, #255	; 0xff
 8009b02:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8009b04:	7bfb      	ldrb	r3, [r7, #15]
 8009b06:	2b05      	cmp	r3, #5
 8009b08:	d009      	beq.n	8009b1e <RadioSetRxConfig+0x5e>
 8009b0a:	2b05      	cmp	r3, #5
 8009b0c:	f300 81ca 	bgt.w	8009ea4 <RadioSetRxConfig+0x3e4>
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	f000 80bf 	beq.w	8009c94 <RadioSetRxConfig+0x1d4>
 8009b16:	2b01      	cmp	r3, #1
 8009b18:	f000 8124 	beq.w	8009d64 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8009b1c:	e1c2      	b.n	8009ea4 <RadioSetRxConfig+0x3e4>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8009b1e:	2001      	movs	r0, #1
 8009b20:	f002 f844 	bl	800bbac <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8009b24:	4ba5      	ldr	r3, [pc, #660]	; (8009dbc <RadioSetRxConfig+0x2fc>)
 8009b26:	2200      	movs	r2, #0
 8009b28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8009b2c:	4aa3      	ldr	r2, [pc, #652]	; (8009dbc <RadioSetRxConfig+0x2fc>)
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8009b32:	4ba2      	ldr	r3, [pc, #648]	; (8009dbc <RadioSetRxConfig+0x2fc>)
 8009b34:	2209      	movs	r2, #9
 8009b36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8009b3a:	4ba0      	ldr	r3, [pc, #640]	; (8009dbc <RadioSetRxConfig+0x2fc>)
 8009b3c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8009b40:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8009b42:	68b8      	ldr	r0, [r7, #8]
 8009b44:	f002 fe5e 	bl	800c804 <SUBGRF_GetFskBandwidthRegValue>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	461a      	mov	r2, r3
 8009b4c:	4b9b      	ldr	r3, [pc, #620]	; (8009dbc <RadioSetRxConfig+0x2fc>)
 8009b4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8009b52:	4b9a      	ldr	r3, [pc, #616]	; (8009dbc <RadioSetRxConfig+0x2fc>)
 8009b54:	2200      	movs	r2, #0
 8009b56:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8009b58:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009b5a:	00db      	lsls	r3, r3, #3
 8009b5c:	b29a      	uxth	r2, r3
 8009b5e:	4b97      	ldr	r3, [pc, #604]	; (8009dbc <RadioSetRxConfig+0x2fc>)
 8009b60:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8009b62:	4b96      	ldr	r3, [pc, #600]	; (8009dbc <RadioSetRxConfig+0x2fc>)
 8009b64:	2200      	movs	r2, #0
 8009b66:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8009b68:	4b94      	ldr	r3, [pc, #592]	; (8009dbc <RadioSetRxConfig+0x2fc>)
 8009b6a:	2210      	movs	r2, #16
 8009b6c:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8009b6e:	4b93      	ldr	r3, [pc, #588]	; (8009dbc <RadioSetRxConfig+0x2fc>)
 8009b70:	2200      	movs	r2, #0
 8009b72:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8009b74:	4b91      	ldr	r3, [pc, #580]	; (8009dbc <RadioSetRxConfig+0x2fc>)
 8009b76:	2200      	movs	r2, #0
 8009b78:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8009b7a:	4b91      	ldr	r3, [pc, #580]	; (8009dc0 <RadioSetRxConfig+0x300>)
 8009b7c:	781a      	ldrb	r2, [r3, #0]
 8009b7e:	4b8f      	ldr	r3, [pc, #572]	; (8009dbc <RadioSetRxConfig+0x2fc>)
 8009b80:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8009b82:	4b8e      	ldr	r3, [pc, #568]	; (8009dbc <RadioSetRxConfig+0x2fc>)
 8009b84:	2201      	movs	r2, #1
 8009b86:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8009b88:	4b8c      	ldr	r3, [pc, #560]	; (8009dbc <RadioSetRxConfig+0x2fc>)
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8009b8e:	2005      	movs	r0, #5
 8009b90:	f7ff fec2 	bl	8009918 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009b94:	488b      	ldr	r0, [pc, #556]	; (8009dc4 <RadioSetRxConfig+0x304>)
 8009b96:	f002 faa3 	bl	800c0e0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009b9a:	488b      	ldr	r0, [pc, #556]	; (8009dc8 <RadioSetRxConfig+0x308>)
 8009b9c:	f002 fb72 	bl	800c284 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8009ba0:	4a8a      	ldr	r2, [pc, #552]	; (8009dcc <RadioSetRxConfig+0x30c>)
 8009ba2:	f107 031c 	add.w	r3, r7, #28
 8009ba6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009baa:	e883 0003 	stmia.w	r3, {r0, r1}
 8009bae:	f107 031c 	add.w	r3, r7, #28
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f001 fe33 	bl	800b81e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8009bb8:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009bbc:	f001 fe7e 	bl	800b8bc <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8009bc0:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8009bc4:	f000 fe03 	bl	800a7ce <RadioRead>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 8009bce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009bd2:	f023 0310 	bic.w	r3, r3, #16
 8009bd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 8009bda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009bde:	4619      	mov	r1, r3
 8009be0:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8009be4:	f000 fde1 	bl	800a7aa <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8009be8:	2104      	movs	r1, #4
 8009bea:	f640 00b9 	movw	r0, #2233	; 0x8b9
 8009bee:	f000 fddc 	bl	800a7aa <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 8009bf2:	f640 009b 	movw	r0, #2203	; 0x89b
 8009bf6:	f000 fdea 	bl	800a7ce <RadioRead>
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8009c00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c04:	f023 031c 	bic.w	r3, r3, #28
 8009c08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8009c0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c10:	f043 0308 	orr.w	r3, r3, #8
 8009c14:	b2db      	uxtb	r3, r3
 8009c16:	4619      	mov	r1, r3
 8009c18:	f640 009b 	movw	r0, #2203	; 0x89b
 8009c1c:	f000 fdc5 	bl	800a7aa <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8009c20:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8009c24:	f000 fdd3 	bl	800a7ce <RadioRead>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8009c2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c32:	f023 0318 	bic.w	r3, r3, #24
 8009c36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 8009c3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c3e:	f043 0318 	orr.w	r3, r3, #24
 8009c42:	b2db      	uxtb	r3, r3
 8009c44:	4619      	mov	r1, r3
 8009c46:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8009c4a:	f000 fdae 	bl	800a7aa <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 8009c4e:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8009c52:	f000 fdbc 	bl	800a7ce <RadioRead>
 8009c56:	4603      	mov	r3, r0
 8009c58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8009c5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8009c68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c6c:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8009c70:	b2db      	uxtb	r3, r3
 8009c72:	4619      	mov	r1, r3
 8009c74:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8009c78:	f000 fd97 	bl	800a7aa <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8009c7c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009c7e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8009c82:	fb02 f303 	mul.w	r3, r2, r3
 8009c86:	461a      	mov	r2, r3
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c8e:	4a4b      	ldr	r2, [pc, #300]	; (8009dbc <RadioSetRxConfig+0x2fc>)
 8009c90:	6093      	str	r3, [r2, #8]
            break;
 8009c92:	e108      	b.n	8009ea6 <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8009c94:	2000      	movs	r0, #0
 8009c96:	f001 ff89 	bl	800bbac <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8009c9a:	4b48      	ldr	r3, [pc, #288]	; (8009dbc <RadioSetRxConfig+0x2fc>)
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8009ca2:	4a46      	ldr	r2, [pc, #280]	; (8009dbc <RadioSetRxConfig+0x2fc>)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8009ca8:	4b44      	ldr	r3, [pc, #272]	; (8009dbc <RadioSetRxConfig+0x2fc>)
 8009caa:	220b      	movs	r2, #11
 8009cac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8009cb0:	68b8      	ldr	r0, [r7, #8]
 8009cb2:	f002 fda7 	bl	800c804 <SUBGRF_GetFskBandwidthRegValue>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	461a      	mov	r2, r3
 8009cba:	4b40      	ldr	r3, [pc, #256]	; (8009dbc <RadioSetRxConfig+0x2fc>)
 8009cbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8009cc0:	4b3e      	ldr	r3, [pc, #248]	; (8009dbc <RadioSetRxConfig+0x2fc>)
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8009cc6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009cc8:	00db      	lsls	r3, r3, #3
 8009cca:	b29a      	uxth	r2, r3
 8009ccc:	4b3b      	ldr	r3, [pc, #236]	; (8009dbc <RadioSetRxConfig+0x2fc>)
 8009cce:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8009cd0:	4b3a      	ldr	r3, [pc, #232]	; (8009dbc <RadioSetRxConfig+0x2fc>)
 8009cd2:	2204      	movs	r2, #4
 8009cd4:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8009cd6:	4b39      	ldr	r3, [pc, #228]	; (8009dbc <RadioSetRxConfig+0x2fc>)
 8009cd8:	2218      	movs	r2, #24
 8009cda:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8009cdc:	4b37      	ldr	r3, [pc, #220]	; (8009dbc <RadioSetRxConfig+0x2fc>)
 8009cde:	2200      	movs	r2, #0
 8009ce0:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8009ce2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8009ce6:	f083 0301 	eor.w	r3, r3, #1
 8009cea:	b2db      	uxtb	r3, r3
 8009cec:	461a      	mov	r2, r3
 8009cee:	4b33      	ldr	r3, [pc, #204]	; (8009dbc <RadioSetRxConfig+0x2fc>)
 8009cf0:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8009cf2:	4b33      	ldr	r3, [pc, #204]	; (8009dc0 <RadioSetRxConfig+0x300>)
 8009cf4:	781a      	ldrb	r2, [r3, #0]
 8009cf6:	4b31      	ldr	r3, [pc, #196]	; (8009dbc <RadioSetRxConfig+0x2fc>)
 8009cf8:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8009cfa:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d003      	beq.n	8009d0a <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8009d02:	4b2e      	ldr	r3, [pc, #184]	; (8009dbc <RadioSetRxConfig+0x2fc>)
 8009d04:	22f2      	movs	r2, #242	; 0xf2
 8009d06:	75da      	strb	r2, [r3, #23]
 8009d08:	e002      	b.n	8009d10 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8009d0a:	4b2c      	ldr	r3, [pc, #176]	; (8009dbc <RadioSetRxConfig+0x2fc>)
 8009d0c:	2201      	movs	r2, #1
 8009d0e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8009d10:	4b2a      	ldr	r3, [pc, #168]	; (8009dbc <RadioSetRxConfig+0x2fc>)
 8009d12:	2201      	movs	r2, #1
 8009d14:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8009d16:	f000 fc4c 	bl	800a5b2 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8009d1a:	2000      	movs	r0, #0
 8009d1c:	f7ff fdfc 	bl	8009918 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009d20:	4828      	ldr	r0, [pc, #160]	; (8009dc4 <RadioSetRxConfig+0x304>)
 8009d22:	f002 f9dd 	bl	800c0e0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009d26:	4828      	ldr	r0, [pc, #160]	; (8009dc8 <RadioSetRxConfig+0x308>)
 8009d28:	f002 faac 	bl	800c284 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8009d2c:	4a28      	ldr	r2, [pc, #160]	; (8009dd0 <RadioSetRxConfig+0x310>)
 8009d2e:	f107 0314 	add.w	r3, r7, #20
 8009d32:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009d36:	e883 0003 	stmia.w	r3, {r0, r1}
 8009d3a:	f107 0314 	add.w	r3, r7, #20
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f001 fd6d 	bl	800b81e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8009d44:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009d48:	f001 fdb8 	bl	800b8bc <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8009d4c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009d4e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8009d52:	fb02 f303 	mul.w	r3, r2, r3
 8009d56:	461a      	mov	r2, r3
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d5e:	4a17      	ldr	r2, [pc, #92]	; (8009dbc <RadioSetRxConfig+0x2fc>)
 8009d60:	6093      	str	r3, [r2, #8]
            break;
 8009d62:	e0a0      	b.n	8009ea6 <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8009d64:	2000      	movs	r0, #0
 8009d66:	f001 ff21 	bl	800bbac <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8009d6a:	4b14      	ldr	r3, [pc, #80]	; (8009dbc <RadioSetRxConfig+0x2fc>)
 8009d6c:	2201      	movs	r2, #1
 8009d6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	b2da      	uxtb	r2, r3
 8009d76:	4b11      	ldr	r3, [pc, #68]	; (8009dbc <RadioSetRxConfig+0x2fc>)
 8009d78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8009d7c:	4a15      	ldr	r2, [pc, #84]	; (8009dd4 <RadioSetRxConfig+0x314>)
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	4413      	add	r3, r2
 8009d82:	781a      	ldrb	r2, [r3, #0]
 8009d84:	4b0d      	ldr	r3, [pc, #52]	; (8009dbc <RadioSetRxConfig+0x2fc>)
 8009d86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8009d8a:	4a0c      	ldr	r2, [pc, #48]	; (8009dbc <RadioSetRxConfig+0x2fc>)
 8009d8c:	7bbb      	ldrb	r3, [r7, #14]
 8009d8e:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d105      	bne.n	8009da4 <RadioSetRxConfig+0x2e4>
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2b0b      	cmp	r3, #11
 8009d9c:	d008      	beq.n	8009db0 <RadioSetRxConfig+0x2f0>
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2b0c      	cmp	r3, #12
 8009da2:	d005      	beq.n	8009db0 <RadioSetRxConfig+0x2f0>
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	2b01      	cmp	r3, #1
 8009da8:	d116      	bne.n	8009dd8 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2b0c      	cmp	r3, #12
 8009dae:	d113      	bne.n	8009dd8 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8009db0:	4b02      	ldr	r3, [pc, #8]	; (8009dbc <RadioSetRxConfig+0x2fc>)
 8009db2:	2201      	movs	r2, #1
 8009db4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8009db8:	e012      	b.n	8009de0 <RadioSetRxConfig+0x320>
 8009dba:	bf00      	nop
 8009dbc:	20000594 	.word	0x20000594
 8009dc0:	20000009 	.word	0x20000009
 8009dc4:	200005cc 	.word	0x200005cc
 8009dc8:	200005a2 	.word	0x200005a2
 8009dcc:	08010780 	.word	0x08010780
 8009dd0:	08010788 	.word	0x08010788
 8009dd4:	080109cc 	.word	0x080109cc
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8009dd8:	4b35      	ldr	r3, [pc, #212]	; (8009eb0 <RadioSetRxConfig+0x3f0>)
 8009dda:	2200      	movs	r2, #0
 8009ddc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8009de0:	4b33      	ldr	r3, [pc, #204]	; (8009eb0 <RadioSetRxConfig+0x3f0>)
 8009de2:	2201      	movs	r2, #1
 8009de4:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8009de6:	4b32      	ldr	r3, [pc, #200]	; (8009eb0 <RadioSetRxConfig+0x3f0>)
 8009de8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009dec:	2b05      	cmp	r3, #5
 8009dee:	d004      	beq.n	8009dfa <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8009df0:	4b2f      	ldr	r3, [pc, #188]	; (8009eb0 <RadioSetRxConfig+0x3f0>)
 8009df2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8009df6:	2b06      	cmp	r3, #6
 8009df8:	d10a      	bne.n	8009e10 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 8009dfa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009dfc:	2b0b      	cmp	r3, #11
 8009dfe:	d803      	bhi.n	8009e08 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8009e00:	4b2b      	ldr	r3, [pc, #172]	; (8009eb0 <RadioSetRxConfig+0x3f0>)
 8009e02:	220c      	movs	r2, #12
 8009e04:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8009e06:	e006      	b.n	8009e16 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8009e08:	4a29      	ldr	r2, [pc, #164]	; (8009eb0 <RadioSetRxConfig+0x3f0>)
 8009e0a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009e0c:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8009e0e:	e002      	b.n	8009e16 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8009e10:	4a27      	ldr	r2, [pc, #156]	; (8009eb0 <RadioSetRxConfig+0x3f0>)
 8009e12:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009e14:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8009e16:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8009e1a:	4b25      	ldr	r3, [pc, #148]	; (8009eb0 <RadioSetRxConfig+0x3f0>)
 8009e1c:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8009e1e:	4b25      	ldr	r3, [pc, #148]	; (8009eb4 <RadioSetRxConfig+0x3f4>)
 8009e20:	781a      	ldrb	r2, [r3, #0]
 8009e22:	4b23      	ldr	r3, [pc, #140]	; (8009eb0 <RadioSetRxConfig+0x3f0>)
 8009e24:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8009e26:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8009e2a:	4b21      	ldr	r3, [pc, #132]	; (8009eb0 <RadioSetRxConfig+0x3f0>)
 8009e2c:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8009e30:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8009e34:	4b1e      	ldr	r3, [pc, #120]	; (8009eb0 <RadioSetRxConfig+0x3f0>)
 8009e36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8009e3a:	f000 fbba 	bl	800a5b2 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8009e3e:	2001      	movs	r0, #1
 8009e40:	f7ff fd6a 	bl	8009918 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009e44:	481c      	ldr	r0, [pc, #112]	; (8009eb8 <RadioSetRxConfig+0x3f8>)
 8009e46:	f002 f94b 	bl	800c0e0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009e4a:	481c      	ldr	r0, [pc, #112]	; (8009ebc <RadioSetRxConfig+0x3fc>)
 8009e4c:	f002 fa1a 	bl	800c284 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8009e50:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009e52:	b2db      	uxtb	r3, r3
 8009e54:	4618      	mov	r0, r3
 8009e56:	f001 feb8 	bl	800bbca <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8009e5a:	4b15      	ldr	r3, [pc, #84]	; (8009eb0 <RadioSetRxConfig+0x3f0>)
 8009e5c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009e60:	2b01      	cmp	r3, #1
 8009e62:	d10d      	bne.n	8009e80 <RadioSetRxConfig+0x3c0>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8009e64:	f240 7036 	movw	r0, #1846	; 0x736
 8009e68:	f002 fb68 	bl	800c53c <SUBGRF_ReadRegister>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	f023 0304 	bic.w	r3, r3, #4
 8009e72:	b2db      	uxtb	r3, r3
 8009e74:	4619      	mov	r1, r3
 8009e76:	f240 7036 	movw	r0, #1846	; 0x736
 8009e7a:	f002 fb4b 	bl	800c514 <SUBGRF_WriteRegister>
 8009e7e:	e00c      	b.n	8009e9a <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8009e80:	f240 7036 	movw	r0, #1846	; 0x736
 8009e84:	f002 fb5a 	bl	800c53c <SUBGRF_ReadRegister>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	f043 0304 	orr.w	r3, r3, #4
 8009e8e:	b2db      	uxtb	r3, r3
 8009e90:	4619      	mov	r1, r3
 8009e92:	f240 7036 	movw	r0, #1846	; 0x736
 8009e96:	f002 fb3d 	bl	800c514 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8009e9a:	4b05      	ldr	r3, [pc, #20]	; (8009eb0 <RadioSetRxConfig+0x3f0>)
 8009e9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009ea0:	609a      	str	r2, [r3, #8]
            break;
 8009ea2:	e000      	b.n	8009ea6 <RadioSetRxConfig+0x3e6>
            break;
 8009ea4:	bf00      	nop
    }
}
 8009ea6:	bf00      	nop
 8009ea8:	3728      	adds	r7, #40	; 0x28
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}
 8009eae:	bf00      	nop
 8009eb0:	20000594 	.word	0x20000594
 8009eb4:	20000009 	.word	0x20000009
 8009eb8:	200005cc 	.word	0x200005cc
 8009ebc:	200005a2 	.word	0x200005a2

08009ec0 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b086      	sub	sp, #24
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	60ba      	str	r2, [r7, #8]
 8009ec8:	607b      	str	r3, [r7, #4]
 8009eca:	4603      	mov	r3, r0
 8009ecc:	73fb      	strb	r3, [r7, #15]
 8009ece:	460b      	mov	r3, r1
 8009ed0:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8009ed2:	f002 fd64 	bl	800c99e <RFW_DeInit>
    switch( modem )
 8009ed6:	7bfb      	ldrb	r3, [r7, #15]
 8009ed8:	2b04      	cmp	r3, #4
 8009eda:	f000 80c7 	beq.w	800a06c <RadioSetTxConfig+0x1ac>
 8009ede:	2b04      	cmp	r3, #4
 8009ee0:	f300 80d6 	bgt.w	800a090 <RadioSetTxConfig+0x1d0>
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d002      	beq.n	8009eee <RadioSetTxConfig+0x2e>
 8009ee8:	2b01      	cmp	r3, #1
 8009eea:	d059      	beq.n	8009fa0 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8009eec:	e0d0      	b.n	800a090 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8009eee:	4b74      	ldr	r3, [pc, #464]	; (800a0c0 <RadioSetTxConfig+0x200>)
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8009ef6:	4a72      	ldr	r2, [pc, #456]	; (800a0c0 <RadioSetTxConfig+0x200>)
 8009ef8:	6a3b      	ldr	r3, [r7, #32]
 8009efa:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8009efc:	4b70      	ldr	r3, [pc, #448]	; (800a0c0 <RadioSetTxConfig+0x200>)
 8009efe:	220b      	movs	r2, #11
 8009f00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	f002 fc7d 	bl	800c804 <SUBGRF_GetFskBandwidthRegValue>
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	461a      	mov	r2, r3
 8009f0e:	4b6c      	ldr	r3, [pc, #432]	; (800a0c0 <RadioSetTxConfig+0x200>)
 8009f10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8009f14:	4a6a      	ldr	r2, [pc, #424]	; (800a0c0 <RadioSetTxConfig+0x200>)
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8009f1a:	4b69      	ldr	r3, [pc, #420]	; (800a0c0 <RadioSetTxConfig+0x200>)
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8009f20:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009f22:	00db      	lsls	r3, r3, #3
 8009f24:	b29a      	uxth	r2, r3
 8009f26:	4b66      	ldr	r3, [pc, #408]	; (800a0c0 <RadioSetTxConfig+0x200>)
 8009f28:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8009f2a:	4b65      	ldr	r3, [pc, #404]	; (800a0c0 <RadioSetTxConfig+0x200>)
 8009f2c:	2204      	movs	r2, #4
 8009f2e:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8009f30:	4b63      	ldr	r3, [pc, #396]	; (800a0c0 <RadioSetTxConfig+0x200>)
 8009f32:	2218      	movs	r2, #24
 8009f34:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8009f36:	4b62      	ldr	r3, [pc, #392]	; (800a0c0 <RadioSetTxConfig+0x200>)
 8009f38:	2200      	movs	r2, #0
 8009f3a:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8009f3c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009f40:	f083 0301 	eor.w	r3, r3, #1
 8009f44:	b2db      	uxtb	r3, r3
 8009f46:	461a      	mov	r2, r3
 8009f48:	4b5d      	ldr	r3, [pc, #372]	; (800a0c0 <RadioSetTxConfig+0x200>)
 8009f4a:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8009f4c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d003      	beq.n	8009f5c <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8009f54:	4b5a      	ldr	r3, [pc, #360]	; (800a0c0 <RadioSetTxConfig+0x200>)
 8009f56:	22f2      	movs	r2, #242	; 0xf2
 8009f58:	75da      	strb	r2, [r3, #23]
 8009f5a:	e002      	b.n	8009f62 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8009f5c:	4b58      	ldr	r3, [pc, #352]	; (800a0c0 <RadioSetTxConfig+0x200>)
 8009f5e:	2201      	movs	r2, #1
 8009f60:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8009f62:	4b57      	ldr	r3, [pc, #348]	; (800a0c0 <RadioSetTxConfig+0x200>)
 8009f64:	2201      	movs	r2, #1
 8009f66:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8009f68:	f000 fb23 	bl	800a5b2 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8009f6c:	2000      	movs	r0, #0
 8009f6e:	f7ff fcd3 	bl	8009918 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009f72:	4854      	ldr	r0, [pc, #336]	; (800a0c4 <RadioSetTxConfig+0x204>)
 8009f74:	f002 f8b4 	bl	800c0e0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8009f78:	4853      	ldr	r0, [pc, #332]	; (800a0c8 <RadioSetTxConfig+0x208>)
 8009f7a:	f002 f983 	bl	800c284 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8009f7e:	4a53      	ldr	r2, [pc, #332]	; (800a0cc <RadioSetTxConfig+0x20c>)
 8009f80:	f107 0310 	add.w	r3, r7, #16
 8009f84:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009f88:	e883 0003 	stmia.w	r3, {r0, r1}
 8009f8c:	f107 0310 	add.w	r3, r7, #16
 8009f90:	4618      	mov	r0, r3
 8009f92:	f001 fc44 	bl	800b81e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8009f96:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009f9a:	f001 fc8f 	bl	800b8bc <SUBGRF_SetWhiteningSeed>
            break;
 8009f9e:	e078      	b.n	800a092 <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8009fa0:	4b47      	ldr	r3, [pc, #284]	; (800a0c0 <RadioSetTxConfig+0x200>)
 8009fa2:	2201      	movs	r2, #1
 8009fa4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8009fa8:	6a3b      	ldr	r3, [r7, #32]
 8009faa:	b2da      	uxtb	r2, r3
 8009fac:	4b44      	ldr	r3, [pc, #272]	; (800a0c0 <RadioSetTxConfig+0x200>)
 8009fae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8009fb2:	4a47      	ldr	r2, [pc, #284]	; (800a0d0 <RadioSetTxConfig+0x210>)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	4413      	add	r3, r2
 8009fb8:	781a      	ldrb	r2, [r3, #0]
 8009fba:	4b41      	ldr	r3, [pc, #260]	; (800a0c0 <RadioSetTxConfig+0x200>)
 8009fbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8009fc0:	4a3f      	ldr	r2, [pc, #252]	; (800a0c0 <RadioSetTxConfig+0x200>)
 8009fc2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009fc6:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d105      	bne.n	8009fdc <RadioSetTxConfig+0x11c>
 8009fd0:	6a3b      	ldr	r3, [r7, #32]
 8009fd2:	2b0b      	cmp	r3, #11
 8009fd4:	d008      	beq.n	8009fe8 <RadioSetTxConfig+0x128>
 8009fd6:	6a3b      	ldr	r3, [r7, #32]
 8009fd8:	2b0c      	cmp	r3, #12
 8009fda:	d005      	beq.n	8009fe8 <RadioSetTxConfig+0x128>
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2b01      	cmp	r3, #1
 8009fe0:	d107      	bne.n	8009ff2 <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8009fe2:	6a3b      	ldr	r3, [r7, #32]
 8009fe4:	2b0c      	cmp	r3, #12
 8009fe6:	d104      	bne.n	8009ff2 <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8009fe8:	4b35      	ldr	r3, [pc, #212]	; (800a0c0 <RadioSetTxConfig+0x200>)
 8009fea:	2201      	movs	r2, #1
 8009fec:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8009ff0:	e003      	b.n	8009ffa <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8009ff2:	4b33      	ldr	r3, [pc, #204]	; (800a0c0 <RadioSetTxConfig+0x200>)
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8009ffa:	4b31      	ldr	r3, [pc, #196]	; (800a0c0 <RadioSetTxConfig+0x200>)
 8009ffc:	2201      	movs	r2, #1
 8009ffe:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800a000:	4b2f      	ldr	r3, [pc, #188]	; (800a0c0 <RadioSetTxConfig+0x200>)
 800a002:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a006:	2b05      	cmp	r3, #5
 800a008:	d004      	beq.n	800a014 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 800a00a:	4b2d      	ldr	r3, [pc, #180]	; (800a0c0 <RadioSetTxConfig+0x200>)
 800a00c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800a010:	2b06      	cmp	r3, #6
 800a012:	d10a      	bne.n	800a02a <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 800a014:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a016:	2b0b      	cmp	r3, #11
 800a018:	d803      	bhi.n	800a022 <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800a01a:	4b29      	ldr	r3, [pc, #164]	; (800a0c0 <RadioSetTxConfig+0x200>)
 800a01c:	220c      	movs	r2, #12
 800a01e:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 800a020:	e006      	b.n	800a030 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800a022:	4a27      	ldr	r2, [pc, #156]	; (800a0c0 <RadioSetTxConfig+0x200>)
 800a024:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a026:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 800a028:	e002      	b.n	800a030 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800a02a:	4a25      	ldr	r2, [pc, #148]	; (800a0c0 <RadioSetTxConfig+0x200>)
 800a02c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a02e:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800a030:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800a034:	4b22      	ldr	r3, [pc, #136]	; (800a0c0 <RadioSetTxConfig+0x200>)
 800a036:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800a038:	4b26      	ldr	r3, [pc, #152]	; (800a0d4 <RadioSetTxConfig+0x214>)
 800a03a:	781a      	ldrb	r2, [r3, #0]
 800a03c:	4b20      	ldr	r3, [pc, #128]	; (800a0c0 <RadioSetTxConfig+0x200>)
 800a03e:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800a040:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800a044:	4b1e      	ldr	r3, [pc, #120]	; (800a0c0 <RadioSetTxConfig+0x200>)
 800a046:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800a04a:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 800a04e:	4b1c      	ldr	r3, [pc, #112]	; (800a0c0 <RadioSetTxConfig+0x200>)
 800a050:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 800a054:	f000 faad 	bl	800a5b2 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 800a058:	2001      	movs	r0, #1
 800a05a:	f7ff fc5d 	bl	8009918 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800a05e:	4819      	ldr	r0, [pc, #100]	; (800a0c4 <RadioSetTxConfig+0x204>)
 800a060:	f002 f83e 	bl	800c0e0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800a064:	4818      	ldr	r0, [pc, #96]	; (800a0c8 <RadioSetTxConfig+0x208>)
 800a066:	f002 f90d 	bl	800c284 <SUBGRF_SetPacketParams>
            break;
 800a06a:	e012      	b.n	800a092 <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 800a06c:	2004      	movs	r0, #4
 800a06e:	f7ff fc53 	bl	8009918 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800a072:	4b13      	ldr	r3, [pc, #76]	; (800a0c0 <RadioSetTxConfig+0x200>)
 800a074:	2202      	movs	r2, #2
 800a076:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 800a07a:	4a11      	ldr	r2, [pc, #68]	; (800a0c0 <RadioSetTxConfig+0x200>)
 800a07c:	6a3b      	ldr	r3, [r7, #32]
 800a07e:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800a080:	4b0f      	ldr	r3, [pc, #60]	; (800a0c0 <RadioSetTxConfig+0x200>)
 800a082:	2216      	movs	r2, #22
 800a084:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800a088:	480e      	ldr	r0, [pc, #56]	; (800a0c4 <RadioSetTxConfig+0x204>)
 800a08a:	f002 f829 	bl	800c0e0 <SUBGRF_SetModulationParams>
            break;
 800a08e:	e000      	b.n	800a092 <RadioSetTxConfig+0x1d2>
            break;
 800a090:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800a092:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a096:	4618      	mov	r0, r3
 800a098:	f002 fb58 	bl	800c74c <SUBGRF_SetRfTxPower>
 800a09c:	4603      	mov	r3, r0
 800a09e:	461a      	mov	r2, r3
 800a0a0:	4b07      	ldr	r3, [pc, #28]	; (800a0c0 <RadioSetTxConfig+0x200>)
 800a0a2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 800a0a6:	4b06      	ldr	r3, [pc, #24]	; (800a0c0 <RadioSetTxConfig+0x200>)
 800a0a8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f002 fc8a 	bl	800c9c6 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800a0b2:	4a03      	ldr	r2, [pc, #12]	; (800a0c0 <RadioSetTxConfig+0x200>)
 800a0b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0b6:	6053      	str	r3, [r2, #4]
}
 800a0b8:	bf00      	nop
 800a0ba:	3718      	adds	r7, #24
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}
 800a0c0:	20000594 	.word	0x20000594
 800a0c4:	200005cc 	.word	0x200005cc
 800a0c8:	200005a2 	.word	0x200005a2
 800a0cc:	08010788 	.word	0x08010788
 800a0d0:	080109cc 	.word	0x080109cc
 800a0d4:	20000009 	.word	0x20000009

0800a0d8 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 800a0d8:	b480      	push	{r7}
 800a0da:	b083      	sub	sp, #12
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
    return true;
 800a0e0:	2301      	movs	r3, #1
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	370c      	adds	r7, #12
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bc80      	pop	{r7}
 800a0ea:	4770      	bx	lr

0800a0ec <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b085      	sub	sp, #20
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	60fb      	str	r3, [r7, #12]

    switch( bw )
 800a0fa:	79fb      	ldrb	r3, [r7, #7]
 800a0fc:	2b0a      	cmp	r3, #10
 800a0fe:	d83e      	bhi.n	800a17e <RadioGetLoRaBandwidthInHz+0x92>
 800a100:	a201      	add	r2, pc, #4	; (adr r2, 800a108 <RadioGetLoRaBandwidthInHz+0x1c>)
 800a102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a106:	bf00      	nop
 800a108:	0800a135 	.word	0x0800a135
 800a10c:	0800a145 	.word	0x0800a145
 800a110:	0800a155 	.word	0x0800a155
 800a114:	0800a165 	.word	0x0800a165
 800a118:	0800a16d 	.word	0x0800a16d
 800a11c:	0800a173 	.word	0x0800a173
 800a120:	0800a179 	.word	0x0800a179
 800a124:	0800a17f 	.word	0x0800a17f
 800a128:	0800a13d 	.word	0x0800a13d
 800a12c:	0800a14d 	.word	0x0800a14d
 800a130:	0800a15d 	.word	0x0800a15d
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 800a134:	f641 6384 	movw	r3, #7812	; 0x1e84
 800a138:	60fb      	str	r3, [r7, #12]
        break;
 800a13a:	e020      	b.n	800a17e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 800a13c:	f642 03b1 	movw	r3, #10417	; 0x28b1
 800a140:	60fb      	str	r3, [r7, #12]
        break;
 800a142:	e01c      	b.n	800a17e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 800a144:	f643 5309 	movw	r3, #15625	; 0x3d09
 800a148:	60fb      	str	r3, [r7, #12]
        break;
 800a14a:	e018      	b.n	800a17e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 800a14c:	f245 1361 	movw	r3, #20833	; 0x5161
 800a150:	60fb      	str	r3, [r7, #12]
        break;
 800a152:	e014      	b.n	800a17e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 800a154:	f647 2312 	movw	r3, #31250	; 0x7a12
 800a158:	60fb      	str	r3, [r7, #12]
        break;
 800a15a:	e010      	b.n	800a17e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 800a15c:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 800a160:	60fb      	str	r3, [r7, #12]
        break;
 800a162:	e00c      	b.n	800a17e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 800a164:	f24f 4324 	movw	r3, #62500	; 0xf424
 800a168:	60fb      	str	r3, [r7, #12]
        break;
 800a16a:	e008      	b.n	800a17e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 800a16c:	4b07      	ldr	r3, [pc, #28]	; (800a18c <RadioGetLoRaBandwidthInHz+0xa0>)
 800a16e:	60fb      	str	r3, [r7, #12]
        break;
 800a170:	e005      	b.n	800a17e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 800a172:	4b07      	ldr	r3, [pc, #28]	; (800a190 <RadioGetLoRaBandwidthInHz+0xa4>)
 800a174:	60fb      	str	r3, [r7, #12]
        break;
 800a176:	e002      	b.n	800a17e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 800a178:	4b06      	ldr	r3, [pc, #24]	; (800a194 <RadioGetLoRaBandwidthInHz+0xa8>)
 800a17a:	60fb      	str	r3, [r7, #12]
        break;
 800a17c:	bf00      	nop
    }

    return bandwidthInHz;
 800a17e:	68fb      	ldr	r3, [r7, #12]
}
 800a180:	4618      	mov	r0, r3
 800a182:	3714      	adds	r7, #20
 800a184:	46bd      	mov	sp, r7
 800a186:	bc80      	pop	{r7}
 800a188:	4770      	bx	lr
 800a18a:	bf00      	nop
 800a18c:	0001e848 	.word	0x0001e848
 800a190:	0003d090 	.word	0x0003d090
 800a194:	0007a120 	.word	0x0007a120

0800a198 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800a198:	b480      	push	{r7}
 800a19a:	b083      	sub	sp, #12
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
 800a1a0:	4608      	mov	r0, r1
 800a1a2:	4611      	mov	r1, r2
 800a1a4:	461a      	mov	r2, r3
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	70fb      	strb	r3, [r7, #3]
 800a1aa:	460b      	mov	r3, r1
 800a1ac:	803b      	strh	r3, [r7, #0]
 800a1ae:	4613      	mov	r3, r2
 800a1b0:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 800a1b2:	883b      	ldrh	r3, [r7, #0]
 800a1b4:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800a1b6:	78ba      	ldrb	r2, [r7, #2]
 800a1b8:	f082 0201 	eor.w	r2, r2, #1
 800a1bc:	b2d2      	uxtb	r2, r2
 800a1be:	2a00      	cmp	r2, #0
 800a1c0:	d001      	beq.n	800a1c6 <RadioGetGfskTimeOnAirNumerator+0x2e>
 800a1c2:	2208      	movs	r2, #8
 800a1c4:	e000      	b.n	800a1c8 <RadioGetGfskTimeOnAirNumerator+0x30>
 800a1c6:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 800a1c8:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800a1ca:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 800a1ce:	7c3b      	ldrb	r3, [r7, #16]
 800a1d0:	7d39      	ldrb	r1, [r7, #20]
 800a1d2:	2900      	cmp	r1, #0
 800a1d4:	d001      	beq.n	800a1da <RadioGetGfskTimeOnAirNumerator+0x42>
 800a1d6:	2102      	movs	r1, #2
 800a1d8:	e000      	b.n	800a1dc <RadioGetGfskTimeOnAirNumerator+0x44>
 800a1da:	2100      	movs	r1, #0
 800a1dc:	440b      	add	r3, r1
 800a1de:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800a1e0:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	370c      	adds	r7, #12
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bc80      	pop	{r7}
 800a1ea:	4770      	bx	lr

0800a1ec <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800a1ec:	b480      	push	{r7}
 800a1ee:	b08b      	sub	sp, #44	; 0x2c
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	60f8      	str	r0, [r7, #12]
 800a1f4:	60b9      	str	r1, [r7, #8]
 800a1f6:	4611      	mov	r1, r2
 800a1f8:	461a      	mov	r2, r3
 800a1fa:	460b      	mov	r3, r1
 800a1fc:	71fb      	strb	r3, [r7, #7]
 800a1fe:	4613      	mov	r3, r2
 800a200:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 800a202:	79fb      	ldrb	r3, [r7, #7]
 800a204:	3304      	adds	r3, #4
 800a206:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 800a208:	2300      	movs	r3, #0
 800a20a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	2b05      	cmp	r3, #5
 800a212:	d002      	beq.n	800a21a <RadioGetLoRaTimeOnAirNumerator+0x2e>
 800a214:	68bb      	ldr	r3, [r7, #8]
 800a216:	2b06      	cmp	r3, #6
 800a218:	d104      	bne.n	800a224 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 800a21a:	88bb      	ldrh	r3, [r7, #4]
 800a21c:	2b0b      	cmp	r3, #11
 800a21e:	d801      	bhi.n	800a224 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 800a220:	230c      	movs	r3, #12
 800a222:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d105      	bne.n	800a236 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	2b0b      	cmp	r3, #11
 800a22e:	d008      	beq.n	800a242 <RadioGetLoRaTimeOnAirNumerator+0x56>
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	2b0c      	cmp	r3, #12
 800a234:	d005      	beq.n	800a242 <RadioGetLoRaTimeOnAirNumerator+0x56>
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	2b01      	cmp	r3, #1
 800a23a:	d105      	bne.n	800a248 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	2b0c      	cmp	r3, #12
 800a240:	d102      	bne.n	800a248 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 800a242:	2301      	movs	r3, #1
 800a244:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800a248:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800a24c:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 800a24e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a252:	2a00      	cmp	r2, #0
 800a254:	d001      	beq.n	800a25a <RadioGetLoRaTimeOnAirNumerator+0x6e>
 800a256:	2210      	movs	r2, #16
 800a258:	e000      	b.n	800a25c <RadioGetLoRaTimeOnAirNumerator+0x70>
 800a25a:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800a25c:	4413      	add	r3, r2
 800a25e:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 800a264:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 800a266:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800a26a:	2a00      	cmp	r2, #0
 800a26c:	d001      	beq.n	800a272 <RadioGetLoRaTimeOnAirNumerator+0x86>
 800a26e:	2200      	movs	r2, #0
 800a270:	e000      	b.n	800a274 <RadioGetLoRaTimeOnAirNumerator+0x88>
 800a272:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 800a274:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800a276:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	2b06      	cmp	r3, #6
 800a27c:	d803      	bhi.n	800a286 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	009b      	lsls	r3, r3, #2
 800a282:	623b      	str	r3, [r7, #32]
 800a284:	e00e      	b.n	800a2a4 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 800a286:	69fb      	ldr	r3, [r7, #28]
 800a288:	3308      	adds	r3, #8
 800a28a:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 800a28c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a290:	2b00      	cmp	r3, #0
 800a292:	d004      	beq.n	800a29e <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	3b02      	subs	r3, #2
 800a298:	009b      	lsls	r3, r3, #2
 800a29a:	623b      	str	r3, [r7, #32]
 800a29c:	e002      	b.n	800a2a4 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	009b      	lsls	r3, r3, #2
 800a2a2:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 800a2a4:	69fb      	ldr	r3, [r7, #28]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	da01      	bge.n	800a2ae <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800a2ae:	69fa      	ldr	r2, [r7, #28]
 800a2b0:	6a3b      	ldr	r3, [r7, #32]
 800a2b2:	4413      	add	r3, r2
 800a2b4:	1e5a      	subs	r2, r3, #1
 800a2b6:	6a3b      	ldr	r3, [r7, #32]
 800a2b8:	fb92 f3f3 	sdiv	r3, r2, r3
 800a2bc:	697a      	ldr	r2, [r7, #20]
 800a2be:	fb03 f202 	mul.w	r2, r3, r2
 800a2c2:	88bb      	ldrh	r3, [r7, #4]
 800a2c4:	4413      	add	r3, r2
    int32_t intermediate =
 800a2c6:	330c      	adds	r3, #12
 800a2c8:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	2b06      	cmp	r3, #6
 800a2ce:	d802      	bhi.n	800a2d6 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 800a2d0:	69bb      	ldr	r3, [r7, #24]
 800a2d2:	3302      	adds	r3, #2
 800a2d4:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800a2d6:	69bb      	ldr	r3, [r7, #24]
 800a2d8:	009b      	lsls	r3, r3, #2
 800a2da:	1c5a      	adds	r2, r3, #1
 800a2dc:	68bb      	ldr	r3, [r7, #8]
 800a2de:	3b02      	subs	r3, #2
 800a2e0:	fa02 f303 	lsl.w	r3, r2, r3
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	372c      	adds	r7, #44	; 0x2c
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bc80      	pop	{r7}
 800a2ec:	4770      	bx	lr
	...

0800a2f0 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b08a      	sub	sp, #40	; 0x28
 800a2f4:	af04      	add	r7, sp, #16
 800a2f6:	60b9      	str	r1, [r7, #8]
 800a2f8:	607a      	str	r2, [r7, #4]
 800a2fa:	461a      	mov	r2, r3
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	73fb      	strb	r3, [r7, #15]
 800a300:	4613      	mov	r3, r2
 800a302:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 800a304:	2300      	movs	r3, #0
 800a306:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 800a308:	2301      	movs	r3, #1
 800a30a:	613b      	str	r3, [r7, #16]

    switch( modem )
 800a30c:	7bfb      	ldrb	r3, [r7, #15]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d002      	beq.n	800a318 <RadioTimeOnAir+0x28>
 800a312:	2b01      	cmp	r3, #1
 800a314:	d017      	beq.n	800a346 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 800a316:	e035      	b.n	800a384 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 800a318:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 800a31c:	8c3a      	ldrh	r2, [r7, #32]
 800a31e:	7bb9      	ldrb	r1, [r7, #14]
 800a320:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a324:	9301      	str	r3, [sp, #4]
 800a326:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a32a:	9300      	str	r3, [sp, #0]
 800a32c:	4603      	mov	r3, r0
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	f7ff ff32 	bl	800a198 <RadioGetGfskTimeOnAirNumerator>
 800a334:	4603      	mov	r3, r0
 800a336:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a33a:	fb02 f303 	mul.w	r3, r2, r3
 800a33e:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	613b      	str	r3, [r7, #16]
        break;
 800a344:	e01e      	b.n	800a384 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 800a346:	8c39      	ldrh	r1, [r7, #32]
 800a348:	7bba      	ldrb	r2, [r7, #14]
 800a34a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a34e:	9302      	str	r3, [sp, #8]
 800a350:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a354:	9301      	str	r3, [sp, #4]
 800a356:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a35a:	9300      	str	r3, [sp, #0]
 800a35c:	460b      	mov	r3, r1
 800a35e:	6879      	ldr	r1, [r7, #4]
 800a360:	68b8      	ldr	r0, [r7, #8]
 800a362:	f7ff ff43 	bl	800a1ec <RadioGetLoRaTimeOnAirNumerator>
 800a366:	4603      	mov	r3, r0
 800a368:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a36c:	fb02 f303 	mul.w	r3, r2, r3
 800a370:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 800a372:	4a0a      	ldr	r2, [pc, #40]	; (800a39c <RadioTimeOnAir+0xac>)
 800a374:	68bb      	ldr	r3, [r7, #8]
 800a376:	4413      	add	r3, r2
 800a378:	781b      	ldrb	r3, [r3, #0]
 800a37a:	4618      	mov	r0, r3
 800a37c:	f7ff feb6 	bl	800a0ec <RadioGetLoRaBandwidthInHz>
 800a380:	6138      	str	r0, [r7, #16]
        break;
 800a382:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator ); /* ST_WORKAROUND : simplified calculation with macro usage */
 800a384:	697a      	ldr	r2, [r7, #20]
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	4413      	add	r3, r2
 800a38a:	1e5a      	subs	r2, r3, #1
 800a38c:	693b      	ldr	r3, [r7, #16]
 800a38e:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800a392:	4618      	mov	r0, r3
 800a394:	3718      	adds	r7, #24
 800a396:	46bd      	mov	sp, r7
 800a398:	bd80      	pop	{r7, pc}
 800a39a:	bf00      	nop
 800a39c:	080109cc 	.word	0x080109cc

0800a3a0 <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b084      	sub	sp, #16
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
 800a3a8:	460b      	mov	r3, r1
 800a3aa:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	f240 2101 	movw	r1, #513	; 0x201
 800a3b4:	f240 2001 	movw	r0, #513	; 0x201
 800a3b8:	f001 fcfc 	bl	800bdb4 <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 800a3bc:	4b6f      	ldr	r3, [pc, #444]	; (800a57c <RadioSend+0x1dc>)
 800a3be:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800a3c2:	2101      	movs	r1, #1
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f002 f999 	bl	800c6fc <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 800a3ca:	4b6c      	ldr	r3, [pc, #432]	; (800a57c <RadioSend+0x1dc>)
 800a3cc:	781b      	ldrb	r3, [r3, #0]
 800a3ce:	2b01      	cmp	r3, #1
 800a3d0:	d112      	bne.n	800a3f8 <RadioSend+0x58>
 800a3d2:	4b6a      	ldr	r3, [pc, #424]	; (800a57c <RadioSend+0x1dc>)
 800a3d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a3d8:	2b06      	cmp	r3, #6
 800a3da:	d10d      	bne.n	800a3f8 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 800a3dc:	f640 0089 	movw	r0, #2185	; 0x889
 800a3e0:	f002 f8ac 	bl	800c53c <SUBGRF_ReadRegister>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	f023 0304 	bic.w	r3, r3, #4
 800a3ea:	b2db      	uxtb	r3, r3
 800a3ec:	4619      	mov	r1, r3
 800a3ee:	f640 0089 	movw	r0, #2185	; 0x889
 800a3f2:	f002 f88f 	bl	800c514 <SUBGRF_WriteRegister>
 800a3f6:	e00c      	b.n	800a412 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 800a3f8:	f640 0089 	movw	r0, #2185	; 0x889
 800a3fc:	f002 f89e 	bl	800c53c <SUBGRF_ReadRegister>
 800a400:	4603      	mov	r3, r0
 800a402:	f043 0304 	orr.w	r3, r3, #4
 800a406:	b2db      	uxtb	r3, r3
 800a408:	4619      	mov	r1, r3
 800a40a:	f640 0089 	movw	r0, #2185	; 0x889
 800a40e:	f002 f881 	bl	800c514 <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch( SubgRf.Modem )
 800a412:	4b5a      	ldr	r3, [pc, #360]	; (800a57c <RadioSend+0x1dc>)
 800a414:	781b      	ldrb	r3, [r3, #0]
 800a416:	2b04      	cmp	r3, #4
 800a418:	f200 80a1 	bhi.w	800a55e <RadioSend+0x1be>
 800a41c:	a201      	add	r2, pc, #4	; (adr r2, 800a424 <RadioSend+0x84>)
 800a41e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a422:	bf00      	nop
 800a424:	0800a453 	.word	0x0800a453
 800a428:	0800a439 	.word	0x0800a439
 800a42c:	0800a453 	.word	0x0800a453
 800a430:	0800a4a7 	.word	0x0800a4a7
 800a434:	0800a4c7 	.word	0x0800a4c7
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 800a438:	4a50      	ldr	r2, [pc, #320]	; (800a57c <RadioSend+0x1dc>)
 800a43a:	78fb      	ldrb	r3, [r7, #3]
 800a43c:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800a43e:	4850      	ldr	r0, [pc, #320]	; (800a580 <RadioSend+0x1e0>)
 800a440:	f001 ff20 	bl	800c284 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 800a444:	78fb      	ldrb	r3, [r7, #3]
 800a446:	2200      	movs	r2, #0
 800a448:	4619      	mov	r1, r3
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f001 f9d4 	bl	800b7f8 <SUBGRF_SendPayload>
            break;
 800a450:	e086      	b.n	800a560 <RadioSend+0x1c0>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 800a452:	f002 faaa 	bl	800c9aa <RFW_Is_Init>
 800a456:	4603      	mov	r3, r0
 800a458:	2b01      	cmp	r3, #1
 800a45a:	d117      	bne.n	800a48c <RadioSend+0xec>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 800a45c:	f107 020d 	add.w	r2, r7, #13
 800a460:	78fb      	ldrb	r3, [r7, #3]
 800a462:	4619      	mov	r1, r3
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f002 fab8 	bl	800c9da <RFW_TransmitInit>
 800a46a:	4603      	mov	r3, r0
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	f040 8081 	bne.w	800a574 <RadioSend+0x1d4>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 800a472:	7b7a      	ldrb	r2, [r7, #13]
 800a474:	4b41      	ldr	r3, [pc, #260]	; (800a57c <RadioSend+0x1dc>)
 800a476:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800a478:	4841      	ldr	r0, [pc, #260]	; (800a580 <RadioSend+0x1e0>)
 800a47a:	f001 ff03 	bl	800c284 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 800a47e:	7b7b      	ldrb	r3, [r7, #13]
 800a480:	2200      	movs	r2, #0
 800a482:	4619      	mov	r1, r3
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	f001 f9b7 	bl	800b7f8 <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 800a48a:	e069      	b.n	800a560 <RadioSend+0x1c0>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 800a48c:	4a3b      	ldr	r2, [pc, #236]	; (800a57c <RadioSend+0x1dc>)
 800a48e:	78fb      	ldrb	r3, [r7, #3]
 800a490:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800a492:	483b      	ldr	r0, [pc, #236]	; (800a580 <RadioSend+0x1e0>)
 800a494:	f001 fef6 	bl	800c284 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 800a498:	78fb      	ldrb	r3, [r7, #3]
 800a49a:	2200      	movs	r2, #0
 800a49c:	4619      	mov	r1, r3
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f001 f9aa 	bl	800b7f8 <SUBGRF_SendPayload>
            break;
 800a4a4:	e05c      	b.n	800a560 <RadioSend+0x1c0>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 800a4a6:	4b35      	ldr	r3, [pc, #212]	; (800a57c <RadioSend+0x1dc>)
 800a4a8:	2202      	movs	r2, #2
 800a4aa:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 800a4ac:	4a33      	ldr	r2, [pc, #204]	; (800a57c <RadioSend+0x1dc>)
 800a4ae:	78fb      	ldrb	r3, [r7, #3]
 800a4b0:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800a4b2:	4833      	ldr	r0, [pc, #204]	; (800a580 <RadioSend+0x1e0>)
 800a4b4:	f001 fee6 	bl	800c284 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 800a4b8:	78fb      	ldrb	r3, [r7, #3]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	4619      	mov	r1, r3
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f001 f99a 	bl	800b7f8 <SUBGRF_SendPayload>
            break;
 800a4c4:	e04c      	b.n	800a560 <RadioSend+0x1c0>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 800a4c6:	78fb      	ldrb	r3, [r7, #3]
 800a4c8:	461a      	mov	r2, r3
 800a4ca:	6879      	ldr	r1, [r7, #4]
 800a4cc:	482d      	ldr	r0, [pc, #180]	; (800a584 <RadioSend+0x1e4>)
 800a4ce:	f000 fc8a 	bl	800ade6 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 800a4d2:	4b2a      	ldr	r3, [pc, #168]	; (800a57c <RadioSend+0x1dc>)
 800a4d4:	2202      	movs	r2, #2
 800a4d6:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 800a4d8:	78fb      	ldrb	r3, [r7, #3]
 800a4da:	3301      	adds	r3, #1
 800a4dc:	b2da      	uxtb	r2, r3
 800a4de:	4b27      	ldr	r3, [pc, #156]	; (800a57c <RadioSend+0x1dc>)
 800a4e0:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800a4e2:	4827      	ldr	r0, [pc, #156]	; (800a580 <RadioSend+0x1e0>)
 800a4e4:	f001 fece 	bl	800c284 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 800a4e8:	2100      	movs	r1, #0
 800a4ea:	20f1      	movs	r0, #241	; 0xf1
 800a4ec:	f000 f95d 	bl	800a7aa <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 800a4f0:	2100      	movs	r1, #0
 800a4f2:	20f0      	movs	r0, #240	; 0xf0
 800a4f4:	f000 f959 	bl	800a7aa <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 800a4f8:	4b20      	ldr	r3, [pc, #128]	; (800a57c <RadioSend+0x1dc>)
 800a4fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4fc:	2b64      	cmp	r3, #100	; 0x64
 800a4fe:	d108      	bne.n	800a512 <RadioSend+0x172>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 800a500:	2170      	movs	r1, #112	; 0x70
 800a502:	20f3      	movs	r0, #243	; 0xf3
 800a504:	f000 f951 	bl	800a7aa <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 800a508:	211d      	movs	r1, #29
 800a50a:	20f2      	movs	r0, #242	; 0xf2
 800a50c:	f000 f94d 	bl	800a7aa <RadioWrite>
 800a510:	e007      	b.n	800a522 <RadioSend+0x182>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 800a512:	21e1      	movs	r1, #225	; 0xe1
 800a514:	20f3      	movs	r0, #243	; 0xf3
 800a516:	f000 f948 	bl	800a7aa <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 800a51a:	2104      	movs	r1, #4
 800a51c:	20f2      	movs	r0, #242	; 0xf2
 800a51e:	f000 f944 	bl	800a7aa <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 800a522:	78fb      	ldrb	r3, [r7, #3]
 800a524:	b29b      	uxth	r3, r3
 800a526:	00db      	lsls	r3, r3, #3
 800a528:	b29b      	uxth	r3, r3
 800a52a:	3302      	adds	r3, #2
 800a52c:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 800a52e:	89fb      	ldrh	r3, [r7, #14]
 800a530:	0a1b      	lsrs	r3, r3, #8
 800a532:	b29b      	uxth	r3, r3
 800a534:	b2db      	uxtb	r3, r3
 800a536:	4619      	mov	r1, r3
 800a538:	20f4      	movs	r0, #244	; 0xf4
 800a53a:	f000 f936 	bl	800a7aa <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 800a53e:	89fb      	ldrh	r3, [r7, #14]
 800a540:	b2db      	uxtb	r3, r3
 800a542:	4619      	mov	r1, r3
 800a544:	20f5      	movs	r0, #245	; 0xf5
 800a546:	f000 f930 	bl	800a7aa <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 800a54a:	78fb      	ldrb	r3, [r7, #3]
 800a54c:	3301      	adds	r3, #1
 800a54e:	b2db      	uxtb	r3, r3
 800a550:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800a554:	4619      	mov	r1, r3
 800a556:	480b      	ldr	r0, [pc, #44]	; (800a584 <RadioSend+0x1e4>)
 800a558:	f001 f94e 	bl	800b7f8 <SUBGRF_SendPayload>
            break;
 800a55c:	e000      	b.n	800a560 <RadioSend+0x1c0>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 800a55e:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 800a560:	4b06      	ldr	r3, [pc, #24]	; (800a57c <RadioSend+0x1dc>)
 800a562:	685b      	ldr	r3, [r3, #4]
 800a564:	4619      	mov	r1, r3
 800a566:	4808      	ldr	r0, [pc, #32]	; (800a588 <RadioSend+0x1e8>)
 800a568:	f002 fc5a 	bl	800ce20 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 800a56c:	4806      	ldr	r0, [pc, #24]	; (800a588 <RadioSend+0x1e8>)
 800a56e:	f002 fb79 	bl	800cc64 <UTIL_TIMER_Start>
 800a572:	e000      	b.n	800a576 <RadioSend+0x1d6>
                return;
 800a574:	bf00      	nop
}
 800a576:	3710      	adds	r7, #16
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}
 800a57c:	20000594 	.word	0x20000594
 800a580:	200005a2 	.word	0x200005a2
 800a584:	20000490 	.word	0x20000490
 800a588:	200005f0 	.word	0x200005f0

0800a58c <RadioSleep>:

static void RadioSleep( void )
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b082      	sub	sp, #8
 800a590:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 800a592:	2300      	movs	r3, #0
 800a594:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 800a596:	793b      	ldrb	r3, [r7, #4]
 800a598:	f043 0304 	orr.w	r3, r3, #4
 800a59c:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 800a59e:	7938      	ldrb	r0, [r7, #4]
 800a5a0:	f001 fa06 	bl	800b9b0 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 800a5a4:	2002      	movs	r0, #2
 800a5a6:	f7fb fab6 	bl	8005b16 <HAL_Delay>
}
 800a5aa:	bf00      	nop
 800a5ac:	3708      	adds	r7, #8
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}

0800a5b2 <RadioStandby>:

static void RadioStandby( void )
{
 800a5b2:	b580      	push	{r7, lr}
 800a5b4:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 800a5b6:	2000      	movs	r0, #0
 800a5b8:	f001 fa2c 	bl	800ba14 <SUBGRF_SetStandby>
}
 800a5bc:	bf00      	nop
 800a5be:	bd80      	pop	{r7, pc}

0800a5c0 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b082      	sub	sp, #8
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init( ) )
 800a5c8:	f002 f9ef 	bl	800c9aa <RFW_Is_Init>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	2b01      	cmp	r3, #1
 800a5d0:	d102      	bne.n	800a5d8 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 800a5d2:	f002 fa12 	bl	800c9fa <RFW_ReceiveInit>
 800a5d6:	e007      	b.n	800a5e8 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800a5d8:	2300      	movs	r3, #0
 800a5da:	2200      	movs	r2, #0
 800a5dc:	f240 2162 	movw	r1, #610	; 0x262
 800a5e0:	f240 2062 	movw	r0, #610	; 0x262
 800a5e4:	f001 fbe6 	bl	800bdb4 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d006      	beq.n	800a5fc <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 800a5ee:	6879      	ldr	r1, [r7, #4]
 800a5f0:	4811      	ldr	r0, [pc, #68]	; (800a638 <RadioRx+0x78>)
 800a5f2:	f002 fc15 	bl	800ce20 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800a5f6:	4810      	ldr	r0, [pc, #64]	; (800a638 <RadioRx+0x78>)
 800a5f8:	f002 fb34 	bl	800cc64 <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800a5fc:	4b0f      	ldr	r3, [pc, #60]	; (800a63c <RadioRx+0x7c>)
 800a5fe:	2200      	movs	r2, #0
 800a600:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800a602:	4b0e      	ldr	r3, [pc, #56]	; (800a63c <RadioRx+0x7c>)
 800a604:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800a608:	2100      	movs	r1, #0
 800a60a:	4618      	mov	r0, r3
 800a60c:	f002 f876 	bl	800c6fc <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 800a610:	4b0a      	ldr	r3, [pc, #40]	; (800a63c <RadioRx+0x7c>)
 800a612:	785b      	ldrb	r3, [r3, #1]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d004      	beq.n	800a622 <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800a618:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800a61c:	f001 fa36 	bl	800ba8c <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 800a620:	e005      	b.n	800a62e <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 800a622:	4b06      	ldr	r3, [pc, #24]	; (800a63c <RadioRx+0x7c>)
 800a624:	689b      	ldr	r3, [r3, #8]
 800a626:	019b      	lsls	r3, r3, #6
 800a628:	4618      	mov	r0, r3
 800a62a:	f001 fa2f 	bl	800ba8c <SUBGRF_SetRx>
}
 800a62e:	bf00      	nop
 800a630:	3708      	adds	r7, #8
 800a632:	46bd      	mov	sp, r7
 800a634:	bd80      	pop	{r7, pc}
 800a636:	bf00      	nop
 800a638:	20000608 	.word	0x20000608
 800a63c:	20000594 	.word	0x20000594

0800a640 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b082      	sub	sp, #8
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init() )
 800a648:	f002 f9af 	bl	800c9aa <RFW_Is_Init>
 800a64c:	4603      	mov	r3, r0
 800a64e:	2b01      	cmp	r3, #1
 800a650:	d102      	bne.n	800a658 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 800a652:	f002 f9d2 	bl	800c9fa <RFW_ReceiveInit>
 800a656:	e007      	b.n	800a668 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800a658:	2300      	movs	r3, #0
 800a65a:	2200      	movs	r2, #0
 800a65c:	f240 2162 	movw	r1, #610	; 0x262
 800a660:	f240 2062 	movw	r0, #610	; 0x262
 800a664:	f001 fba6 	bl	800bdb4 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d006      	beq.n	800a67c <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 800a66e:	6879      	ldr	r1, [r7, #4]
 800a670:	4811      	ldr	r0, [pc, #68]	; (800a6b8 <RadioRxBoosted+0x78>)
 800a672:	f002 fbd5 	bl	800ce20 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800a676:	4810      	ldr	r0, [pc, #64]	; (800a6b8 <RadioRxBoosted+0x78>)
 800a678:	f002 faf4 	bl	800cc64 <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800a67c:	4b0f      	ldr	r3, [pc, #60]	; (800a6bc <RadioRxBoosted+0x7c>)
 800a67e:	2200      	movs	r2, #0
 800a680:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800a682:	4b0e      	ldr	r3, [pc, #56]	; (800a6bc <RadioRxBoosted+0x7c>)
 800a684:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800a688:	2100      	movs	r1, #0
 800a68a:	4618      	mov	r0, r3
 800a68c:	f002 f836 	bl	800c6fc <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 800a690:	4b0a      	ldr	r3, [pc, #40]	; (800a6bc <RadioRxBoosted+0x7c>)
 800a692:	785b      	ldrb	r3, [r3, #1]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d004      	beq.n	800a6a2 <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 800a698:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800a69c:	f001 fa16 	bl	800bacc <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 800a6a0:	e005      	b.n	800a6ae <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 800a6a2:	4b06      	ldr	r3, [pc, #24]	; (800a6bc <RadioRxBoosted+0x7c>)
 800a6a4:	689b      	ldr	r3, [r3, #8]
 800a6a6:	019b      	lsls	r3, r3, #6
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	f001 fa0f 	bl	800bacc <SUBGRF_SetRxBoosted>
}
 800a6ae:	bf00      	nop
 800a6b0:	3708      	adds	r7, #8
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}
 800a6b6:	bf00      	nop
 800a6b8:	20000608 	.word	0x20000608
 800a6bc:	20000594 	.word	0x20000594

0800a6c0 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b082      	sub	sp, #8
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
 800a6c8:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	005a      	lsls	r2, r3, #1
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	4413      	add	r3, r2
 800a6d2:	4a0c      	ldr	r2, [pc, #48]	; (800a704 <RadioSetRxDutyCycle+0x44>)
 800a6d4:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	2200      	movs	r2, #0
 800a6da:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a6de:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800a6e2:	f001 fb67 	bl	800bdb4 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800a6e6:	4b07      	ldr	r3, [pc, #28]	; (800a704 <RadioSetRxDutyCycle+0x44>)
 800a6e8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800a6ec:	2100      	movs	r1, #0
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f002 f804 	bl	800c6fc <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 800a6f4:	6839      	ldr	r1, [r7, #0]
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f001 fa0c 	bl	800bb14 <SUBGRF_SetRxDutyCycle>
}
 800a6fc:	bf00      	nop
 800a6fe:	3708      	adds	r7, #8
 800a700:	46bd      	mov	sp, r7
 800a702:	bd80      	pop	{r7, pc}
 800a704:	20000594 	.word	0x20000594

0800a708 <RadioStartCad>:

static void RadioStartCad( void )
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800a70c:	4b09      	ldr	r3, [pc, #36]	; (800a734 <RadioStartCad+0x2c>)
 800a70e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800a712:	2100      	movs	r1, #0
 800a714:	4618      	mov	r0, r3
 800a716:	f001 fff1 	bl	800c6fc <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 800a71a:	2300      	movs	r3, #0
 800a71c:	2200      	movs	r2, #0
 800a71e:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800a722:	f44f 70c0 	mov.w	r0, #384	; 0x180
 800a726:	f001 fb45 	bl	800bdb4 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 800a72a:	f001 fa1f 	bl	800bb6c <SUBGRF_SetCad>
}
 800a72e:	bf00      	nop
 800a730:	bd80      	pop	{r7, pc}
 800a732:	bf00      	nop
 800a734:	20000594 	.word	0x20000594

0800a738 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b084      	sub	sp, #16
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
 800a740:	460b      	mov	r3, r1
 800a742:	70fb      	strb	r3, [r7, #3]
 800a744:	4613      	mov	r3, r2
 800a746:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 800a748:	883b      	ldrh	r3, [r7, #0]
 800a74a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a74e:	fb02 f303 	mul.w	r3, r2, r3
 800a752:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	f001 fb89 	bl	800be6c <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 800a75a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a75e:	4618      	mov	r0, r3
 800a760:	f001 fff4 	bl	800c74c <SUBGRF_SetRfTxPower>
 800a764:	4603      	mov	r3, r0
 800a766:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 800a768:	7afb      	ldrb	r3, [r7, #11]
 800a76a:	2101      	movs	r1, #1
 800a76c:	4618      	mov	r0, r3
 800a76e:	f001 ffc5 	bl	800c6fc <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 800a772:	f001 fa09 	bl	800bb88 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 800a776:	68f9      	ldr	r1, [r7, #12]
 800a778:	4804      	ldr	r0, [pc, #16]	; (800a78c <RadioSetTxContinuousWave+0x54>)
 800a77a:	f002 fb51 	bl	800ce20 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 800a77e:	4803      	ldr	r0, [pc, #12]	; (800a78c <RadioSetTxContinuousWave+0x54>)
 800a780:	f002 fa70 	bl	800cc64 <UTIL_TIMER_Start>
}
 800a784:	bf00      	nop
 800a786:	3710      	adds	r7, #16
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}
 800a78c:	200005f0 	.word	0x200005f0

0800a790 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b082      	sub	sp, #8
 800a794:	af00      	add	r7, sp, #0
 800a796:	4603      	mov	r3, r0
 800a798:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 800a79a:	f001 fe28 	bl	800c3ee <SUBGRF_GetRssiInst>
 800a79e:	4603      	mov	r3, r0
 800a7a0:	b21b      	sxth	r3, r3
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	3708      	adds	r7, #8
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}

0800a7aa <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 800a7aa:	b580      	push	{r7, lr}
 800a7ac:	b082      	sub	sp, #8
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	4603      	mov	r3, r0
 800a7b2:	460a      	mov	r2, r1
 800a7b4:	80fb      	strh	r3, [r7, #6]
 800a7b6:	4613      	mov	r3, r2
 800a7b8:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 800a7ba:	797a      	ldrb	r2, [r7, #5]
 800a7bc:	88fb      	ldrh	r3, [r7, #6]
 800a7be:	4611      	mov	r1, r2
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	f001 fea7 	bl	800c514 <SUBGRF_WriteRegister>
}
 800a7c6:	bf00      	nop
 800a7c8:	3708      	adds	r7, #8
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd80      	pop	{r7, pc}

0800a7ce <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 800a7ce:	b580      	push	{r7, lr}
 800a7d0:	b082      	sub	sp, #8
 800a7d2:	af00      	add	r7, sp, #0
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 800a7d8:	88fb      	ldrh	r3, [r7, #6]
 800a7da:	4618      	mov	r0, r3
 800a7dc:	f001 feae 	bl	800c53c <SUBGRF_ReadRegister>
 800a7e0:	4603      	mov	r3, r0
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3708      	adds	r7, #8
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}

0800a7ea <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 800a7ea:	b580      	push	{r7, lr}
 800a7ec:	b082      	sub	sp, #8
 800a7ee:	af00      	add	r7, sp, #0
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	6039      	str	r1, [r7, #0]
 800a7f4:	80fb      	strh	r3, [r7, #6]
 800a7f6:	4613      	mov	r3, r2
 800a7f8:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 800a7fa:	797b      	ldrb	r3, [r7, #5]
 800a7fc:	b29a      	uxth	r2, r3
 800a7fe:	88fb      	ldrh	r3, [r7, #6]
 800a800:	6839      	ldr	r1, [r7, #0]
 800a802:	4618      	mov	r0, r3
 800a804:	f001 feae 	bl	800c564 <SUBGRF_WriteRegisters>
}
 800a808:	bf00      	nop
 800a80a:	3708      	adds	r7, #8
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}

0800a810 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b082      	sub	sp, #8
 800a814:	af00      	add	r7, sp, #0
 800a816:	4603      	mov	r3, r0
 800a818:	6039      	str	r1, [r7, #0]
 800a81a:	80fb      	strh	r3, [r7, #6]
 800a81c:	4613      	mov	r3, r2
 800a81e:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 800a820:	797b      	ldrb	r3, [r7, #5]
 800a822:	b29a      	uxth	r2, r3
 800a824:	88fb      	ldrh	r3, [r7, #6]
 800a826:	6839      	ldr	r1, [r7, #0]
 800a828:	4618      	mov	r0, r3
 800a82a:	f001 febd 	bl	800c5a8 <SUBGRF_ReadRegisters>
}
 800a82e:	bf00      	nop
 800a830:	3708      	adds	r7, #8
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}
	...

0800a838 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b082      	sub	sp, #8
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	4603      	mov	r3, r0
 800a840:	460a      	mov	r2, r1
 800a842:	71fb      	strb	r3, [r7, #7]
 800a844:	4613      	mov	r3, r2
 800a846:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 800a848:	79fb      	ldrb	r3, [r7, #7]
 800a84a:	2b01      	cmp	r3, #1
 800a84c:	d10a      	bne.n	800a864 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 800a84e:	4a0e      	ldr	r2, [pc, #56]	; (800a888 <RadioSetMaxPayloadLength+0x50>)
 800a850:	79bb      	ldrb	r3, [r7, #6]
 800a852:	7013      	strb	r3, [r2, #0]
 800a854:	4b0c      	ldr	r3, [pc, #48]	; (800a888 <RadioSetMaxPayloadLength+0x50>)
 800a856:	781a      	ldrb	r2, [r3, #0]
 800a858:	4b0c      	ldr	r3, [pc, #48]	; (800a88c <RadioSetMaxPayloadLength+0x54>)
 800a85a:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800a85c:	480c      	ldr	r0, [pc, #48]	; (800a890 <RadioSetMaxPayloadLength+0x58>)
 800a85e:	f001 fd11 	bl	800c284 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 800a862:	e00d      	b.n	800a880 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 800a864:	4b09      	ldr	r3, [pc, #36]	; (800a88c <RadioSetMaxPayloadLength+0x54>)
 800a866:	7d5b      	ldrb	r3, [r3, #21]
 800a868:	2b01      	cmp	r3, #1
 800a86a:	d109      	bne.n	800a880 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 800a86c:	4a06      	ldr	r2, [pc, #24]	; (800a888 <RadioSetMaxPayloadLength+0x50>)
 800a86e:	79bb      	ldrb	r3, [r7, #6]
 800a870:	7013      	strb	r3, [r2, #0]
 800a872:	4b05      	ldr	r3, [pc, #20]	; (800a888 <RadioSetMaxPayloadLength+0x50>)
 800a874:	781a      	ldrb	r2, [r3, #0]
 800a876:	4b05      	ldr	r3, [pc, #20]	; (800a88c <RadioSetMaxPayloadLength+0x54>)
 800a878:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800a87a:	4805      	ldr	r0, [pc, #20]	; (800a890 <RadioSetMaxPayloadLength+0x58>)
 800a87c:	f001 fd02 	bl	800c284 <SUBGRF_SetPacketParams>
}
 800a880:	bf00      	nop
 800a882:	3708      	adds	r7, #8
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}
 800a888:	20000009 	.word	0x20000009
 800a88c:	20000594 	.word	0x20000594
 800a890:	200005a2 	.word	0x200005a2

0800a894 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b082      	sub	sp, #8
 800a898:	af00      	add	r7, sp, #0
 800a89a:	4603      	mov	r3, r0
 800a89c:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 800a89e:	4a13      	ldr	r2, [pc, #76]	; (800a8ec <RadioSetPublicNetwork+0x58>)
 800a8a0:	79fb      	ldrb	r3, [r7, #7]
 800a8a2:	7313      	strb	r3, [r2, #12]
 800a8a4:	4b11      	ldr	r3, [pc, #68]	; (800a8ec <RadioSetPublicNetwork+0x58>)
 800a8a6:	7b1a      	ldrb	r2, [r3, #12]
 800a8a8:	4b10      	ldr	r3, [pc, #64]	; (800a8ec <RadioSetPublicNetwork+0x58>)
 800a8aa:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 800a8ac:	2001      	movs	r0, #1
 800a8ae:	f7ff f833 	bl	8009918 <RadioSetModem>
    if( enable == true )
 800a8b2:	79fb      	ldrb	r3, [r7, #7]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d00a      	beq.n	800a8ce <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 800a8b8:	2134      	movs	r1, #52	; 0x34
 800a8ba:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 800a8be:	f001 fe29 	bl	800c514 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 800a8c2:	2144      	movs	r1, #68	; 0x44
 800a8c4:	f240 7041 	movw	r0, #1857	; 0x741
 800a8c8:	f001 fe24 	bl	800c514 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 800a8cc:	e009      	b.n	800a8e2 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 800a8ce:	2114      	movs	r1, #20
 800a8d0:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 800a8d4:	f001 fe1e 	bl	800c514 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 800a8d8:	2124      	movs	r1, #36	; 0x24
 800a8da:	f240 7041 	movw	r0, #1857	; 0x741
 800a8de:	f001 fe19 	bl	800c514 <SUBGRF_WriteRegister>
}
 800a8e2:	bf00      	nop
 800a8e4:	3708      	adds	r7, #8
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd80      	pop	{r7, pc}
 800a8ea:	bf00      	nop
 800a8ec:	20000594 	.word	0x20000594

0800a8f0 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 800a8f4:	f001 ff5e 	bl	800c7b4 <SUBGRF_GetRadioWakeUpTime>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	3303      	adds	r3, #3
}
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	bd80      	pop	{r7, pc}

0800a900 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b082      	sub	sp, #8
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 800a908:	f000 f80e 	bl	800a928 <RadioOnTxTimeoutProcess>
}
 800a90c:	bf00      	nop
 800a90e:	3708      	adds	r7, #8
 800a910:	46bd      	mov	sp, r7
 800a912:	bd80      	pop	{r7, pc}

0800a914 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b082      	sub	sp, #8
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 800a91c:	f000 f818 	bl	800a950 <RadioOnRxTimeoutProcess>
}
 800a920:	bf00      	nop
 800a922:	3708      	adds	r7, #8
 800a924:	46bd      	mov	sp, r7
 800a926:	bd80      	pop	{r7, pc}

0800a928 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800a92c:	4b07      	ldr	r3, [pc, #28]	; (800a94c <RadioOnTxTimeoutProcess+0x24>)
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d008      	beq.n	800a946 <RadioOnTxTimeoutProcess+0x1e>
 800a934:	4b05      	ldr	r3, [pc, #20]	; (800a94c <RadioOnTxTimeoutProcess+0x24>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	685b      	ldr	r3, [r3, #4]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d003      	beq.n	800a946 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 800a93e:	4b03      	ldr	r3, [pc, #12]	; (800a94c <RadioOnTxTimeoutProcess+0x24>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	685b      	ldr	r3, [r3, #4]
 800a944:	4798      	blx	r3
    }
}
 800a946:	bf00      	nop
 800a948:	bd80      	pop	{r7, pc}
 800a94a:	bf00      	nop
 800a94c:	20000590 	.word	0x20000590

0800a950 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 800a950:	b580      	push	{r7, lr}
 800a952:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800a954:	4b07      	ldr	r3, [pc, #28]	; (800a974 <RadioOnRxTimeoutProcess+0x24>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d008      	beq.n	800a96e <RadioOnRxTimeoutProcess+0x1e>
 800a95c:	4b05      	ldr	r3, [pc, #20]	; (800a974 <RadioOnRxTimeoutProcess+0x24>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	68db      	ldr	r3, [r3, #12]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d003      	beq.n	800a96e <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 800a966:	4b03      	ldr	r3, [pc, #12]	; (800a974 <RadioOnRxTimeoutProcess+0x24>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	68db      	ldr	r3, [r3, #12]
 800a96c:	4798      	blx	r3
    }
}
 800a96e:	bf00      	nop
 800a970:	bd80      	pop	{r7, pc}
 800a972:	bf00      	nop
 800a974:	20000590 	.word	0x20000590

0800a978 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b082      	sub	sp, #8
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	4603      	mov	r3, r0
 800a980:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 800a982:	4a05      	ldr	r2, [pc, #20]	; (800a998 <RadioOnDioIrq+0x20>)
 800a984:	88fb      	ldrh	r3, [r7, #6]
 800a986:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 800a98a:	f000 f807 	bl	800a99c <RadioIrqProcess>
}
 800a98e:	bf00      	nop
 800a990:	3708      	adds	r7, #8
 800a992:	46bd      	mov	sp, r7
 800a994:	bd80      	pop	{r7, pc}
 800a996:	bf00      	nop
 800a998:	20000594 	.word	0x20000594

0800a99c <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 800a99c:	b590      	push	{r4, r7, lr}
 800a99e:	b083      	sub	sp, #12
 800a9a0:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 800a9aa:	4ba5      	ldr	r3, [pc, #660]	; (800ac40 <RadioIrqProcess+0x2a4>)
 800a9ac:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800a9b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a9b4:	f000 810c 	beq.w	800abd0 <RadioIrqProcess+0x234>
 800a9b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a9bc:	f300 81c0 	bgt.w	800ad40 <RadioIrqProcess+0x3a4>
 800a9c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9c4:	f000 80f0 	beq.w	800aba8 <RadioIrqProcess+0x20c>
 800a9c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9cc:	f300 81b8 	bgt.w	800ad40 <RadioIrqProcess+0x3a4>
 800a9d0:	2b80      	cmp	r3, #128	; 0x80
 800a9d2:	f000 80d5 	beq.w	800ab80 <RadioIrqProcess+0x1e4>
 800a9d6:	2b80      	cmp	r3, #128	; 0x80
 800a9d8:	f300 81b2 	bgt.w	800ad40 <RadioIrqProcess+0x3a4>
 800a9dc:	2b20      	cmp	r3, #32
 800a9de:	dc49      	bgt.n	800aa74 <RadioIrqProcess+0xd8>
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	f340 81ad 	ble.w	800ad40 <RadioIrqProcess+0x3a4>
 800a9e6:	3b01      	subs	r3, #1
 800a9e8:	2b1f      	cmp	r3, #31
 800a9ea:	f200 81a9 	bhi.w	800ad40 <RadioIrqProcess+0x3a4>
 800a9ee:	a201      	add	r2, pc, #4	; (adr r2, 800a9f4 <RadioIrqProcess+0x58>)
 800a9f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9f4:	0800aa7d 	.word	0x0800aa7d
 800a9f8:	0800aab7 	.word	0x0800aab7
 800a9fc:	0800ad41 	.word	0x0800ad41
 800aa00:	0800ac5d 	.word	0x0800ac5d
 800aa04:	0800ad41 	.word	0x0800ad41
 800aa08:	0800ad41 	.word	0x0800ad41
 800aa0c:	0800ad41 	.word	0x0800ad41
 800aa10:	0800accb 	.word	0x0800accb
 800aa14:	0800ad41 	.word	0x0800ad41
 800aa18:	0800ad41 	.word	0x0800ad41
 800aa1c:	0800ad41 	.word	0x0800ad41
 800aa20:	0800ad41 	.word	0x0800ad41
 800aa24:	0800ad41 	.word	0x0800ad41
 800aa28:	0800ad41 	.word	0x0800ad41
 800aa2c:	0800ad41 	.word	0x0800ad41
 800aa30:	0800ad41 	.word	0x0800ad41
 800aa34:	0800ad41 	.word	0x0800ad41
 800aa38:	0800ad41 	.word	0x0800ad41
 800aa3c:	0800ad41 	.word	0x0800ad41
 800aa40:	0800ad41 	.word	0x0800ad41
 800aa44:	0800ad41 	.word	0x0800ad41
 800aa48:	0800ad41 	.word	0x0800ad41
 800aa4c:	0800ad41 	.word	0x0800ad41
 800aa50:	0800ad41 	.word	0x0800ad41
 800aa54:	0800ad41 	.word	0x0800ad41
 800aa58:	0800ad41 	.word	0x0800ad41
 800aa5c:	0800ad41 	.word	0x0800ad41
 800aa60:	0800ad41 	.word	0x0800ad41
 800aa64:	0800ad41 	.word	0x0800ad41
 800aa68:	0800ad41 	.word	0x0800ad41
 800aa6c:	0800ad41 	.word	0x0800ad41
 800aa70:	0800acdb 	.word	0x0800acdb
 800aa74:	2b40      	cmp	r3, #64	; 0x40
 800aa76:	f000 814b 	beq.w	800ad10 <RadioIrqProcess+0x374>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 800aa7a:	e161      	b.n	800ad40 <RadioIrqProcess+0x3a4>
        TimerStop( &TxTimeoutTimer );
 800aa7c:	4871      	ldr	r0, [pc, #452]	; (800ac44 <RadioIrqProcess+0x2a8>)
 800aa7e:	f002 f95f 	bl	800cd40 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 800aa82:	2000      	movs	r0, #0
 800aa84:	f000 ffc6 	bl	800ba14 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 800aa88:	f001 ff96 	bl	800c9b8 <RFW_Is_LongPacketModeEnabled>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	2b01      	cmp	r3, #1
 800aa90:	d101      	bne.n	800aa96 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 800aa92:	f001 ffba 	bl	800ca0a <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800aa96:	4b6c      	ldr	r3, [pc, #432]	; (800ac48 <RadioIrqProcess+0x2ac>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	f000 8152 	beq.w	800ad44 <RadioIrqProcess+0x3a8>
 800aaa0:	4b69      	ldr	r3, [pc, #420]	; (800ac48 <RadioIrqProcess+0x2ac>)
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	f000 814c 	beq.w	800ad44 <RadioIrqProcess+0x3a8>
            RadioEvents->TxDone( );
 800aaac:	4b66      	ldr	r3, [pc, #408]	; (800ac48 <RadioIrqProcess+0x2ac>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	4798      	blx	r3
        break;
 800aab4:	e146      	b.n	800ad44 <RadioIrqProcess+0x3a8>
        TimerStop( &RxTimeoutTimer );
 800aab6:	4865      	ldr	r0, [pc, #404]	; (800ac4c <RadioIrqProcess+0x2b0>)
 800aab8:	f002 f942 	bl	800cd40 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800aabc:	4b60      	ldr	r3, [pc, #384]	; (800ac40 <RadioIrqProcess+0x2a4>)
 800aabe:	785b      	ldrb	r3, [r3, #1]
 800aac0:	f083 0301 	eor.w	r3, r3, #1
 800aac4:	b2db      	uxtb	r3, r3
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d014      	beq.n	800aaf4 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 800aaca:	2000      	movs	r0, #0
 800aacc:	f000 ffa2 	bl	800ba14 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 800aad0:	2100      	movs	r1, #0
 800aad2:	f640 1002 	movw	r0, #2306	; 0x902
 800aad6:	f001 fd1d 	bl	800c514 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 800aada:	f640 1044 	movw	r0, #2372	; 0x944
 800aade:	f001 fd2d 	bl	800c53c <SUBGRF_ReadRegister>
 800aae2:	4603      	mov	r3, r0
 800aae4:	f043 0302 	orr.w	r3, r3, #2
 800aae8:	b2db      	uxtb	r3, r3
 800aaea:	4619      	mov	r1, r3
 800aaec:	f640 1044 	movw	r0, #2372	; 0x944
 800aaf0:	f001 fd10 	bl	800c514 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 800aaf4:	1dfb      	adds	r3, r7, #7
 800aaf6:	22ff      	movs	r2, #255	; 0xff
 800aaf8:	4619      	mov	r1, r3
 800aafa:	4855      	ldr	r0, [pc, #340]	; (800ac50 <RadioIrqProcess+0x2b4>)
 800aafc:	f000 fe5a 	bl	800b7b4 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 800ab00:	4854      	ldr	r0, [pc, #336]	; (800ac54 <RadioIrqProcess+0x2b8>)
 800ab02:	f001 fcb5 	bl	800c470 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800ab06:	4b50      	ldr	r3, [pc, #320]	; (800ac48 <RadioIrqProcess+0x2ac>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d036      	beq.n	800ab7c <RadioIrqProcess+0x1e0>
 800ab0e:	4b4e      	ldr	r3, [pc, #312]	; (800ac48 <RadioIrqProcess+0x2ac>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	689b      	ldr	r3, [r3, #8]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d031      	beq.n	800ab7c <RadioIrqProcess+0x1e0>
            switch( SubgRf.PacketStatus.packetType )
 800ab18:	4b49      	ldr	r3, [pc, #292]	; (800ac40 <RadioIrqProcess+0x2a4>)
 800ab1a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ab1e:	2b01      	cmp	r3, #1
 800ab20:	d10e      	bne.n	800ab40 <RadioIrqProcess+0x1a4>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 800ab22:	4b49      	ldr	r3, [pc, #292]	; (800ac48 <RadioIrqProcess+0x2ac>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	689c      	ldr	r4, [r3, #8]
 800ab28:	79fb      	ldrb	r3, [r7, #7]
 800ab2a:	b299      	uxth	r1, r3
 800ab2c:	4b44      	ldr	r3, [pc, #272]	; (800ac40 <RadioIrqProcess+0x2a4>)
 800ab2e:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 800ab32:	b21a      	sxth	r2, r3
 800ab34:	4b42      	ldr	r3, [pc, #264]	; (800ac40 <RadioIrqProcess+0x2a4>)
 800ab36:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 800ab3a:	4845      	ldr	r0, [pc, #276]	; (800ac50 <RadioIrqProcess+0x2b4>)
 800ab3c:	47a0      	blx	r4
                break;
 800ab3e:	e01e      	b.n	800ab7e <RadioIrqProcess+0x1e2>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 800ab40:	4b3f      	ldr	r3, [pc, #252]	; (800ac40 <RadioIrqProcess+0x2a4>)
 800ab42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab44:	463a      	mov	r2, r7
 800ab46:	4611      	mov	r1, r2
 800ab48:	4618      	mov	r0, r3
 800ab4a:	f001 fe83 	bl	800c854 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 800ab4e:	4b3e      	ldr	r3, [pc, #248]	; (800ac48 <RadioIrqProcess+0x2ac>)
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	689c      	ldr	r4, [r3, #8]
 800ab54:	79fb      	ldrb	r3, [r7, #7]
 800ab56:	b299      	uxth	r1, r3
 800ab58:	4b39      	ldr	r3, [pc, #228]	; (800ac40 <RadioIrqProcess+0x2a4>)
 800ab5a:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 800ab5e:	b218      	sxth	r0, r3
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800ab66:	4a3c      	ldr	r2, [pc, #240]	; (800ac58 <RadioIrqProcess+0x2bc>)
 800ab68:	fb82 c203 	smull	ip, r2, r2, r3
 800ab6c:	1192      	asrs	r2, r2, #6
 800ab6e:	17db      	asrs	r3, r3, #31
 800ab70:	1ad3      	subs	r3, r2, r3
 800ab72:	b25b      	sxtb	r3, r3
 800ab74:	4602      	mov	r2, r0
 800ab76:	4836      	ldr	r0, [pc, #216]	; (800ac50 <RadioIrqProcess+0x2b4>)
 800ab78:	47a0      	blx	r4
                break;
 800ab7a:	e000      	b.n	800ab7e <RadioIrqProcess+0x1e2>
        }
 800ab7c:	bf00      	nop
        break;
 800ab7e:	e0f0      	b.n	800ad62 <RadioIrqProcess+0x3c6>
        SUBGRF_SetStandby( STDBY_RC );
 800ab80:	2000      	movs	r0, #0
 800ab82:	f000 ff47 	bl	800ba14 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800ab86:	4b30      	ldr	r3, [pc, #192]	; (800ac48 <RadioIrqProcess+0x2ac>)
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	f000 80dc 	beq.w	800ad48 <RadioIrqProcess+0x3ac>
 800ab90:	4b2d      	ldr	r3, [pc, #180]	; (800ac48 <RadioIrqProcess+0x2ac>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	699b      	ldr	r3, [r3, #24]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	f000 80d6 	beq.w	800ad48 <RadioIrqProcess+0x3ac>
            RadioEvents->CadDone( false );
 800ab9c:	4b2a      	ldr	r3, [pc, #168]	; (800ac48 <RadioIrqProcess+0x2ac>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	699b      	ldr	r3, [r3, #24]
 800aba2:	2000      	movs	r0, #0
 800aba4:	4798      	blx	r3
        break;
 800aba6:	e0cf      	b.n	800ad48 <RadioIrqProcess+0x3ac>
        SUBGRF_SetStandby( STDBY_RC );
 800aba8:	2000      	movs	r0, #0
 800abaa:	f000 ff33 	bl	800ba14 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800abae:	4b26      	ldr	r3, [pc, #152]	; (800ac48 <RadioIrqProcess+0x2ac>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	f000 80ca 	beq.w	800ad4c <RadioIrqProcess+0x3b0>
 800abb8:	4b23      	ldr	r3, [pc, #140]	; (800ac48 <RadioIrqProcess+0x2ac>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	699b      	ldr	r3, [r3, #24]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	f000 80c4 	beq.w	800ad4c <RadioIrqProcess+0x3b0>
            RadioEvents->CadDone( true );
 800abc4:	4b20      	ldr	r3, [pc, #128]	; (800ac48 <RadioIrqProcess+0x2ac>)
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	699b      	ldr	r3, [r3, #24]
 800abca:	2001      	movs	r0, #1
 800abcc:	4798      	blx	r3
        break;
 800abce:	e0bd      	b.n	800ad4c <RadioIrqProcess+0x3b0>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 800abd0:	f000 fdd6 	bl	800b780 <SUBGRF_GetOperatingMode>
 800abd4:	4603      	mov	r3, r0
 800abd6:	2b04      	cmp	r3, #4
 800abd8:	d115      	bne.n	800ac06 <RadioIrqProcess+0x26a>
            TimerStop( &TxTimeoutTimer );
 800abda:	481a      	ldr	r0, [pc, #104]	; (800ac44 <RadioIrqProcess+0x2a8>)
 800abdc:	f002 f8b0 	bl	800cd40 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800abe0:	2000      	movs	r0, #0
 800abe2:	f000 ff17 	bl	800ba14 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800abe6:	4b18      	ldr	r3, [pc, #96]	; (800ac48 <RadioIrqProcess+0x2ac>)
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	2b00      	cmp	r3, #0
 800abec:	f000 80b0 	beq.w	800ad50 <RadioIrqProcess+0x3b4>
 800abf0:	4b15      	ldr	r3, [pc, #84]	; (800ac48 <RadioIrqProcess+0x2ac>)
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	685b      	ldr	r3, [r3, #4]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	f000 80aa 	beq.w	800ad50 <RadioIrqProcess+0x3b4>
                RadioEvents->TxTimeout( );
 800abfc:	4b12      	ldr	r3, [pc, #72]	; (800ac48 <RadioIrqProcess+0x2ac>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	685b      	ldr	r3, [r3, #4]
 800ac02:	4798      	blx	r3
        break;
 800ac04:	e0a4      	b.n	800ad50 <RadioIrqProcess+0x3b4>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 800ac06:	f000 fdbb 	bl	800b780 <SUBGRF_GetOperatingMode>
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	2b05      	cmp	r3, #5
 800ac0e:	f040 809f 	bne.w	800ad50 <RadioIrqProcess+0x3b4>
            TimerStop( &RxTimeoutTimer );
 800ac12:	480e      	ldr	r0, [pc, #56]	; (800ac4c <RadioIrqProcess+0x2b0>)
 800ac14:	f002 f894 	bl	800cd40 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800ac18:	2000      	movs	r0, #0
 800ac1a:	f000 fefb 	bl	800ba14 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800ac1e:	4b0a      	ldr	r3, [pc, #40]	; (800ac48 <RadioIrqProcess+0x2ac>)
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	f000 8094 	beq.w	800ad50 <RadioIrqProcess+0x3b4>
 800ac28:	4b07      	ldr	r3, [pc, #28]	; (800ac48 <RadioIrqProcess+0x2ac>)
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	68db      	ldr	r3, [r3, #12]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	f000 808e 	beq.w	800ad50 <RadioIrqProcess+0x3b4>
                RadioEvents->RxTimeout( );
 800ac34:	4b04      	ldr	r3, [pc, #16]	; (800ac48 <RadioIrqProcess+0x2ac>)
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	68db      	ldr	r3, [r3, #12]
 800ac3a:	4798      	blx	r3
        break;
 800ac3c:	e088      	b.n	800ad50 <RadioIrqProcess+0x3b4>
 800ac3e:	bf00      	nop
 800ac40:	20000594 	.word	0x20000594
 800ac44:	200005f0 	.word	0x200005f0
 800ac48:	20000590 	.word	0x20000590
 800ac4c:	20000608 	.word	0x20000608
 800ac50:	20000490 	.word	0x20000490
 800ac54:	200005b8 	.word	0x200005b8
 800ac58:	10624dd3 	.word	0x10624dd3
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 800ac5c:	4b43      	ldr	r3, [pc, #268]	; (800ad6c <RadioIrqProcess+0x3d0>)
 800ac5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d077      	beq.n	800ad54 <RadioIrqProcess+0x3b8>
          Radio.Write(SUBGHZ_RTCPRDR2, (SubgRf.RxDcPreambleDetectTimeout>>16)&0xFF); /*Update Radio RTC Period MSB*/
 800ac64:	4a42      	ldr	r2, [pc, #264]	; (800ad70 <RadioIrqProcess+0x3d4>)
 800ac66:	4b41      	ldr	r3, [pc, #260]	; (800ad6c <RadioIrqProcess+0x3d0>)
 800ac68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac6a:	0c1b      	lsrs	r3, r3, #16
 800ac6c:	b2db      	uxtb	r3, r3
 800ac6e:	4619      	mov	r1, r3
 800ac70:	f640 1003 	movw	r0, #2307	; 0x903
 800ac74:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR1, (SubgRf.RxDcPreambleDetectTimeout>>8)&0xFF); /*Update Radio RTC Period MidByte*/
 800ac76:	4a3e      	ldr	r2, [pc, #248]	; (800ad70 <RadioIrqProcess+0x3d4>)
 800ac78:	4b3c      	ldr	r3, [pc, #240]	; (800ad6c <RadioIrqProcess+0x3d0>)
 800ac7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac7c:	0a1b      	lsrs	r3, r3, #8
 800ac7e:	b2db      	uxtb	r3, r3
 800ac80:	4619      	mov	r1, r3
 800ac82:	f640 1004 	movw	r0, #2308	; 0x904
 800ac86:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR0, (SubgRf.RxDcPreambleDetectTimeout)&0xFF); /*Update Radio RTC Period lsb*/
 800ac88:	4a39      	ldr	r2, [pc, #228]	; (800ad70 <RadioIrqProcess+0x3d4>)
 800ac8a:	4b38      	ldr	r3, [pc, #224]	; (800ad6c <RadioIrqProcess+0x3d0>)
 800ac8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac8e:	b2db      	uxtb	r3, r3
 800ac90:	4619      	mov	r1, r3
 800ac92:	f640 1005 	movw	r0, #2309	; 0x905
 800ac96:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCCTLR, Radio.Read(SUBGHZ_RTCCTLR)|0x1); /*restart Radio RTC*/
 800ac98:	4c35      	ldr	r4, [pc, #212]	; (800ad70 <RadioIrqProcess+0x3d4>)
 800ac9a:	4b36      	ldr	r3, [pc, #216]	; (800ad74 <RadioIrqProcess+0x3d8>)
 800ac9c:	f640 1002 	movw	r0, #2306	; 0x902
 800aca0:	4798      	blx	r3
 800aca2:	4603      	mov	r3, r0
 800aca4:	f043 0301 	orr.w	r3, r3, #1
 800aca8:	b2db      	uxtb	r3, r3
 800acaa:	4619      	mov	r1, r3
 800acac:	f640 1002 	movw	r0, #2306	; 0x902
 800acb0:	47a0      	blx	r4
          SubgRf.RxDcPreambleDetectTimeout = 0;
 800acb2:	4b2e      	ldr	r3, [pc, #184]	; (800ad6c <RadioIrqProcess+0x3d0>)
 800acb4:	2200      	movs	r2, #0
 800acb6:	659a      	str	r2, [r3, #88]	; 0x58
          SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800acb8:	2300      	movs	r3, #0
 800acba:	2200      	movs	r2, #0
 800acbc:	f240 2162 	movw	r1, #610	; 0x262
 800acc0:	f240 2062 	movw	r0, #610	; 0x262
 800acc4:	f001 f876 	bl	800bdb4 <SUBGRF_SetDioIrqParams>
        break;
 800acc8:	e044      	b.n	800ad54 <RadioIrqProcess+0x3b8>
        if( 1UL == RFW_Is_Init( ) )
 800acca:	f001 fe6e 	bl	800c9aa <RFW_Is_Init>
 800acce:	4603      	mov	r3, r0
 800acd0:	2b01      	cmp	r3, #1
 800acd2:	d141      	bne.n	800ad58 <RadioIrqProcess+0x3bc>
            RFW_ReceivePayload( );
 800acd4:	f001 fe9f 	bl	800ca16 <RFW_ReceivePayload>
        break;
 800acd8:	e03e      	b.n	800ad58 <RadioIrqProcess+0x3bc>
        TimerStop( &RxTimeoutTimer );
 800acda:	4827      	ldr	r0, [pc, #156]	; (800ad78 <RadioIrqProcess+0x3dc>)
 800acdc:	f002 f830 	bl	800cd40 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800ace0:	4b22      	ldr	r3, [pc, #136]	; (800ad6c <RadioIrqProcess+0x3d0>)
 800ace2:	785b      	ldrb	r3, [r3, #1]
 800ace4:	f083 0301 	eor.w	r3, r3, #1
 800ace8:	b2db      	uxtb	r3, r3
 800acea:	2b00      	cmp	r3, #0
 800acec:	d002      	beq.n	800acf4 <RadioIrqProcess+0x358>
            SUBGRF_SetStandby( STDBY_RC );
 800acee:	2000      	movs	r0, #0
 800acf0:	f000 fe90 	bl	800ba14 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800acf4:	4b21      	ldr	r3, [pc, #132]	; (800ad7c <RadioIrqProcess+0x3e0>)
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d02f      	beq.n	800ad5c <RadioIrqProcess+0x3c0>
 800acfc:	4b1f      	ldr	r3, [pc, #124]	; (800ad7c <RadioIrqProcess+0x3e0>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	68db      	ldr	r3, [r3, #12]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d02a      	beq.n	800ad5c <RadioIrqProcess+0x3c0>
            RadioEvents->RxTimeout( );
 800ad06:	4b1d      	ldr	r3, [pc, #116]	; (800ad7c <RadioIrqProcess+0x3e0>)
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	68db      	ldr	r3, [r3, #12]
 800ad0c:	4798      	blx	r3
        break;
 800ad0e:	e025      	b.n	800ad5c <RadioIrqProcess+0x3c0>
        if( SubgRf.RxContinuous == false )
 800ad10:	4b16      	ldr	r3, [pc, #88]	; (800ad6c <RadioIrqProcess+0x3d0>)
 800ad12:	785b      	ldrb	r3, [r3, #1]
 800ad14:	f083 0301 	eor.w	r3, r3, #1
 800ad18:	b2db      	uxtb	r3, r3
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d002      	beq.n	800ad24 <RadioIrqProcess+0x388>
            SUBGRF_SetStandby( STDBY_RC );
 800ad1e:	2000      	movs	r0, #0
 800ad20:	f000 fe78 	bl	800ba14 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 800ad24:	4b15      	ldr	r3, [pc, #84]	; (800ad7c <RadioIrqProcess+0x3e0>)
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d019      	beq.n	800ad60 <RadioIrqProcess+0x3c4>
 800ad2c:	4b13      	ldr	r3, [pc, #76]	; (800ad7c <RadioIrqProcess+0x3e0>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	691b      	ldr	r3, [r3, #16]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d014      	beq.n	800ad60 <RadioIrqProcess+0x3c4>
            RadioEvents->RxError( );
 800ad36:	4b11      	ldr	r3, [pc, #68]	; (800ad7c <RadioIrqProcess+0x3e0>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	691b      	ldr	r3, [r3, #16]
 800ad3c:	4798      	blx	r3
        break;
 800ad3e:	e00f      	b.n	800ad60 <RadioIrqProcess+0x3c4>
        break;
 800ad40:	bf00      	nop
 800ad42:	e00e      	b.n	800ad62 <RadioIrqProcess+0x3c6>
        break;
 800ad44:	bf00      	nop
 800ad46:	e00c      	b.n	800ad62 <RadioIrqProcess+0x3c6>
        break;
 800ad48:	bf00      	nop
 800ad4a:	e00a      	b.n	800ad62 <RadioIrqProcess+0x3c6>
        break;
 800ad4c:	bf00      	nop
 800ad4e:	e008      	b.n	800ad62 <RadioIrqProcess+0x3c6>
        break;
 800ad50:	bf00      	nop
 800ad52:	e006      	b.n	800ad62 <RadioIrqProcess+0x3c6>
        break;
 800ad54:	bf00      	nop
 800ad56:	e004      	b.n	800ad62 <RadioIrqProcess+0x3c6>
        break;
 800ad58:	bf00      	nop
 800ad5a:	e002      	b.n	800ad62 <RadioIrqProcess+0x3c6>
        break;
 800ad5c:	bf00      	nop
 800ad5e:	e000      	b.n	800ad62 <RadioIrqProcess+0x3c6>
        break;
 800ad60:	bf00      	nop
    }
}
 800ad62:	bf00      	nop
 800ad64:	370c      	adds	r7, #12
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd90      	pop	{r4, r7, pc}
 800ad6a:	bf00      	nop
 800ad6c:	20000594 	.word	0x20000594
 800ad70:	0800a7ab 	.word	0x0800a7ab
 800ad74:	0800a7cf 	.word	0x0800a7cf
 800ad78:	20000608 	.word	0x20000608
 800ad7c:	20000590 	.word	0x20000590

0800ad80 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 800ad84:	4b09      	ldr	r3, [pc, #36]	; (800adac <RadioTxPrbs+0x2c>)
 800ad86:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800ad8a:	2101      	movs	r1, #1
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	f001 fcb5 	bl	800c6fc <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 800ad92:	4b07      	ldr	r3, [pc, #28]	; (800adb0 <RadioTxPrbs+0x30>)
 800ad94:	212d      	movs	r1, #45	; 0x2d
 800ad96:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800ad9a:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 800ad9c:	f000 fefd 	bl	800bb9a <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 800ada0:	4804      	ldr	r0, [pc, #16]	; (800adb4 <RadioTxPrbs+0x34>)
 800ada2:	f000 fe53 	bl	800ba4c <SUBGRF_SetTx>
}
 800ada6:	bf00      	nop
 800ada8:	bd80      	pop	{r7, pc}
 800adaa:	bf00      	nop
 800adac:	20000594 	.word	0x20000594
 800adb0:	0800a7ab 	.word	0x0800a7ab
 800adb4:	000fffff 	.word	0x000fffff

0800adb8 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b084      	sub	sp, #16
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	4603      	mov	r3, r0
 800adc0:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 800adc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800adc6:	4618      	mov	r0, r3
 800adc8:	f001 fcc0 	bl	800c74c <SUBGRF_SetRfTxPower>
 800adcc:	4603      	mov	r3, r0
 800adce:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 800add0:	7bfb      	ldrb	r3, [r7, #15]
 800add2:	2101      	movs	r1, #1
 800add4:	4618      	mov	r0, r3
 800add6:	f001 fc91 	bl	800c6fc <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 800adda:	f000 fed5 	bl	800bb88 <SUBGRF_SetTxContinuousWave>
}
 800adde:	bf00      	nop
 800ade0:	3710      	adds	r7, #16
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd80      	pop	{r7, pc}

0800ade6 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 800ade6:	b480      	push	{r7}
 800ade8:	b089      	sub	sp, #36	; 0x24
 800adea:	af00      	add	r7, sp, #0
 800adec:	60f8      	str	r0, [r7, #12]
 800adee:	60b9      	str	r1, [r7, #8]
 800adf0:	4613      	mov	r3, r2
 800adf2:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 800adf4:	2300      	movs	r3, #0
 800adf6:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 800adf8:	2300      	movs	r3, #0
 800adfa:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 800adfc:	2300      	movs	r3, #0
 800adfe:	61bb      	str	r3, [r7, #24]
 800ae00:	e011      	b.n	800ae26 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 800ae02:	69bb      	ldr	r3, [r7, #24]
 800ae04:	68ba      	ldr	r2, [r7, #8]
 800ae06:	4413      	add	r3, r2
 800ae08:	781a      	ldrb	r2, [r3, #0]
 800ae0a:	69bb      	ldr	r3, [r7, #24]
 800ae0c:	68b9      	ldr	r1, [r7, #8]
 800ae0e:	440b      	add	r3, r1
 800ae10:	43d2      	mvns	r2, r2
 800ae12:	b2d2      	uxtb	r2, r2
 800ae14:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 800ae16:	69bb      	ldr	r3, [r7, #24]
 800ae18:	68fa      	ldr	r2, [r7, #12]
 800ae1a:	4413      	add	r3, r2
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 800ae20:	69bb      	ldr	r3, [r7, #24]
 800ae22:	3301      	adds	r3, #1
 800ae24:	61bb      	str	r3, [r7, #24]
 800ae26:	79fb      	ldrb	r3, [r7, #7]
 800ae28:	69ba      	ldr	r2, [r7, #24]
 800ae2a:	429a      	cmp	r2, r3
 800ae2c:	dbe9      	blt.n	800ae02 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 800ae2e:	2300      	movs	r3, #0
 800ae30:	61bb      	str	r3, [r7, #24]
 800ae32:	e049      	b.n	800aec8 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 800ae34:	69bb      	ldr	r3, [r7, #24]
 800ae36:	425a      	negs	r2, r3
 800ae38:	f003 0307 	and.w	r3, r3, #7
 800ae3c:	f002 0207 	and.w	r2, r2, #7
 800ae40:	bf58      	it	pl
 800ae42:	4253      	negpl	r3, r2
 800ae44:	b2db      	uxtb	r3, r3
 800ae46:	f1c3 0307 	rsb	r3, r3, #7
 800ae4a:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 800ae4c:	69bb      	ldr	r3, [r7, #24]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	da00      	bge.n	800ae54 <payload_integration+0x6e>
 800ae52:	3307      	adds	r3, #7
 800ae54:	10db      	asrs	r3, r3, #3
 800ae56:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 800ae58:	69bb      	ldr	r3, [r7, #24]
 800ae5a:	3301      	adds	r3, #1
 800ae5c:	425a      	negs	r2, r3
 800ae5e:	f003 0307 	and.w	r3, r3, #7
 800ae62:	f002 0207 	and.w	r2, r2, #7
 800ae66:	bf58      	it	pl
 800ae68:	4253      	negpl	r3, r2
 800ae6a:	b2db      	uxtb	r3, r3
 800ae6c:	f1c3 0307 	rsb	r3, r3, #7
 800ae70:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 800ae72:	69bb      	ldr	r3, [r7, #24]
 800ae74:	3301      	adds	r3, #1
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	da00      	bge.n	800ae7c <payload_integration+0x96>
 800ae7a:	3307      	adds	r3, #7
 800ae7c:	10db      	asrs	r3, r3, #3
 800ae7e:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 800ae80:	7dbb      	ldrb	r3, [r7, #22]
 800ae82:	68ba      	ldr	r2, [r7, #8]
 800ae84:	4413      	add	r3, r2
 800ae86:	781b      	ldrb	r3, [r3, #0]
 800ae88:	461a      	mov	r2, r3
 800ae8a:	7dfb      	ldrb	r3, [r7, #23]
 800ae8c:	fa42 f303 	asr.w	r3, r2, r3
 800ae90:	b2db      	uxtb	r3, r3
 800ae92:	f003 0301 	and.w	r3, r3, #1
 800ae96:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 800ae98:	7ffa      	ldrb	r2, [r7, #31]
 800ae9a:	7cfb      	ldrb	r3, [r7, #19]
 800ae9c:	4053      	eors	r3, r2
 800ae9e:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 800aea0:	7d3b      	ldrb	r3, [r7, #20]
 800aea2:	68fa      	ldr	r2, [r7, #12]
 800aea4:	4413      	add	r3, r2
 800aea6:	781b      	ldrb	r3, [r3, #0]
 800aea8:	b25a      	sxtb	r2, r3
 800aeaa:	7ff9      	ldrb	r1, [r7, #31]
 800aeac:	7d7b      	ldrb	r3, [r7, #21]
 800aeae:	fa01 f303 	lsl.w	r3, r1, r3
 800aeb2:	b25b      	sxtb	r3, r3
 800aeb4:	4313      	orrs	r3, r2
 800aeb6:	b259      	sxtb	r1, r3
 800aeb8:	7d3b      	ldrb	r3, [r7, #20]
 800aeba:	68fa      	ldr	r2, [r7, #12]
 800aebc:	4413      	add	r3, r2
 800aebe:	b2ca      	uxtb	r2, r1
 800aec0:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 800aec2:	69bb      	ldr	r3, [r7, #24]
 800aec4:	3301      	adds	r3, #1
 800aec6:	61bb      	str	r3, [r7, #24]
 800aec8:	79fb      	ldrb	r3, [r7, #7]
 800aeca:	00db      	lsls	r3, r3, #3
 800aecc:	69ba      	ldr	r2, [r7, #24]
 800aece:	429a      	cmp	r2, r3
 800aed0:	dbb0      	blt.n	800ae34 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 800aed2:	7ffb      	ldrb	r3, [r7, #31]
 800aed4:	01db      	lsls	r3, r3, #7
 800aed6:	b25a      	sxtb	r2, r3
 800aed8:	7ffb      	ldrb	r3, [r7, #31]
 800aeda:	019b      	lsls	r3, r3, #6
 800aedc:	b25b      	sxtb	r3, r3
 800aede:	4313      	orrs	r3, r2
 800aee0:	b25b      	sxtb	r3, r3
 800aee2:	7ffa      	ldrb	r2, [r7, #31]
 800aee4:	2a00      	cmp	r2, #0
 800aee6:	d101      	bne.n	800aeec <payload_integration+0x106>
 800aee8:	2220      	movs	r2, #32
 800aeea:	e000      	b.n	800aeee <payload_integration+0x108>
 800aeec:	2200      	movs	r2, #0
 800aeee:	4313      	orrs	r3, r2
 800aef0:	b259      	sxtb	r1, r3
 800aef2:	79fb      	ldrb	r3, [r7, #7]
 800aef4:	68fa      	ldr	r2, [r7, #12]
 800aef6:	4413      	add	r3, r2
 800aef8:	b2ca      	uxtb	r2, r1
 800aefa:	701a      	strb	r2, [r3, #0]
}
 800aefc:	bf00      	nop
 800aefe:	3724      	adds	r7, #36	; 0x24
 800af00:	46bd      	mov	sp, r7
 800af02:	bc80      	pop	{r7}
 800af04:	4770      	bx	lr
	...

0800af08 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b08c      	sub	sp, #48	; 0x30
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	60b9      	str	r1, [r7, #8]
 800af10:	607a      	str	r2, [r7, #4]
 800af12:	603b      	str	r3, [r7, #0]
 800af14:	4603      	mov	r3, r0
 800af16:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 800af18:	2300      	movs	r3, #0
 800af1a:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 800af1c:	2300      	movs	r3, #0
 800af1e:	623b      	str	r3, [r7, #32]
 800af20:	2300      	movs	r3, #0
 800af22:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800af24:	f001 fd3b 	bl	800c99e <RFW_DeInit>

    if( rxContinuous != 0 )
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d001      	beq.n	800af32 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 800af2e:	2300      	movs	r3, #0
 800af30:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2b00      	cmp	r3, #0
 800af36:	bf14      	ite	ne
 800af38:	2301      	movne	r3, #1
 800af3a:	2300      	moveq	r3, #0
 800af3c:	b2da      	uxtb	r2, r3
 800af3e:	4ba3      	ldr	r3, [pc, #652]	; (800b1cc <RadioSetRxGenericConfig+0x2c4>)
 800af40:	705a      	strb	r2, [r3, #1]

    switch( modem )
 800af42:	7bfb      	ldrb	r3, [r7, #15]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d003      	beq.n	800af50 <RadioSetRxGenericConfig+0x48>
 800af48:	2b01      	cmp	r3, #1
 800af4a:	f000 80dc 	beq.w	800b106 <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 800af4e:	e194      	b.n	800b27a <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 800af50:	68bb      	ldr	r3, [r7, #8]
 800af52:	689b      	ldr	r3, [r3, #8]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d003      	beq.n	800af60 <RadioSetRxGenericConfig+0x58>
 800af58:	68bb      	ldr	r3, [r7, #8]
 800af5a:	68db      	ldr	r3, [r3, #12]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d102      	bne.n	800af66 <RadioSetRxGenericConfig+0x5e>
            return -1;
 800af60:	f04f 33ff 	mov.w	r3, #4294967295
 800af64:	e18a      	b.n	800b27c <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 800af66:	68bb      	ldr	r3, [r7, #8]
 800af68:	7f9b      	ldrb	r3, [r3, #30]
 800af6a:	2b08      	cmp	r3, #8
 800af6c:	d902      	bls.n	800af74 <RadioSetRxGenericConfig+0x6c>
            return -1;
 800af6e:	f04f 33ff 	mov.w	r3, #4294967295
 800af72:	e183      	b.n	800b27c <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 800af74:	68bb      	ldr	r3, [r7, #8]
 800af76:	6919      	ldr	r1, [r3, #16]
 800af78:	68bb      	ldr	r3, [r7, #8]
 800af7a:	7f9b      	ldrb	r3, [r3, #30]
 800af7c:	b29a      	uxth	r2, r3
 800af7e:	f107 0320 	add.w	r3, r7, #32
 800af82:	4618      	mov	r0, r3
 800af84:	f001 fdfe 	bl	800cb84 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800af88:	68bb      	ldr	r3, [r7, #8]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	bf14      	ite	ne
 800af90:	2301      	movne	r3, #1
 800af92:	2300      	moveq	r3, #0
 800af94:	b2db      	uxtb	r3, r3
 800af96:	4618      	mov	r0, r3
 800af98:	f000 fe08 	bl	800bbac <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800af9c:	4b8b      	ldr	r3, [pc, #556]	; (800b1cc <RadioSetRxGenericConfig+0x2c4>)
 800af9e:	2200      	movs	r2, #0
 800afa0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800afa4:	68bb      	ldr	r3, [r7, #8]
 800afa6:	689b      	ldr	r3, [r3, #8]
 800afa8:	4a88      	ldr	r2, [pc, #544]	; (800b1cc <RadioSetRxGenericConfig+0x2c4>)
 800afaa:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	f893 2020 	ldrb.w	r2, [r3, #32]
 800afb2:	4b86      	ldr	r3, [pc, #536]	; (800b1cc <RadioSetRxGenericConfig+0x2c4>)
 800afb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 800afb8:	68bb      	ldr	r3, [r7, #8]
 800afba:	685b      	ldr	r3, [r3, #4]
 800afbc:	4618      	mov	r0, r3
 800afbe:	f001 fc21 	bl	800c804 <SUBGRF_GetFskBandwidthRegValue>
 800afc2:	4603      	mov	r3, r0
 800afc4:	461a      	mov	r2, r3
 800afc6:	4b81      	ldr	r3, [pc, #516]	; (800b1cc <RadioSetRxGenericConfig+0x2c4>)
 800afc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800afcc:	4b7f      	ldr	r3, [pc, #508]	; (800b1cc <RadioSetRxGenericConfig+0x2c4>)
 800afce:	2200      	movs	r2, #0
 800afd0:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	68db      	ldr	r3, [r3, #12]
 800afd6:	b29b      	uxth	r3, r3
 800afd8:	00db      	lsls	r3, r3, #3
 800afda:	b29a      	uxth	r2, r3
 800afdc:	4b7b      	ldr	r3, [pc, #492]	; (800b1cc <RadioSetRxGenericConfig+0x2c4>)
 800afde:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 800afe0:	68bb      	ldr	r3, [r7, #8]
 800afe2:	7fda      	ldrb	r2, [r3, #31]
 800afe4:	4b79      	ldr	r3, [pc, #484]	; (800b1cc <RadioSetRxGenericConfig+0x2c4>)
 800afe6:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	7f9b      	ldrb	r3, [r3, #30]
 800afec:	00db      	lsls	r3, r3, #3
 800afee:	b2da      	uxtb	r2, r3
 800aff0:	4b76      	ldr	r3, [pc, #472]	; (800b1cc <RadioSetRxGenericConfig+0x2c4>)
 800aff2:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800affa:	4b74      	ldr	r3, [pc, #464]	; (800b1cc <RadioSetRxGenericConfig+0x2c4>)
 800affc:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 800affe:	68bb      	ldr	r3, [r7, #8]
 800b000:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800b004:	2b00      	cmp	r3, #0
 800b006:	d105      	bne.n	800b014 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	695b      	ldr	r3, [r3, #20]
 800b00c:	b2da      	uxtb	r2, r3
 800b00e:	4b6f      	ldr	r3, [pc, #444]	; (800b1cc <RadioSetRxGenericConfig+0x2c4>)
 800b010:	759a      	strb	r2, [r3, #22]
 800b012:	e00b      	b.n	800b02c <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800b01a:	2b02      	cmp	r3, #2
 800b01c:	d103      	bne.n	800b026 <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800b01e:	4b6b      	ldr	r3, [pc, #428]	; (800b1cc <RadioSetRxGenericConfig+0x2c4>)
 800b020:	22ff      	movs	r2, #255	; 0xff
 800b022:	759a      	strb	r2, [r3, #22]
 800b024:	e002      	b.n	800b02c <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800b026:	4b69      	ldr	r3, [pc, #420]	; (800b1cc <RadioSetRxGenericConfig+0x2c4>)
 800b028:	22ff      	movs	r2, #255	; 0xff
 800b02a:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800b02c:	68bb      	ldr	r3, [r7, #8]
 800b02e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b032:	2b02      	cmp	r3, #2
 800b034:	d004      	beq.n	800b040 <RadioSetRxGenericConfig+0x138>
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800b03c:	2b02      	cmp	r3, #2
 800b03e:	d12d      	bne.n	800b09c <RadioSetRxGenericConfig+0x194>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800b040:	68bb      	ldr	r3, [r7, #8]
 800b042:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800b046:	2bf1      	cmp	r3, #241	; 0xf1
 800b048:	d00c      	beq.n	800b064 <RadioSetRxGenericConfig+0x15c>
 800b04a:	68bb      	ldr	r3, [r7, #8]
 800b04c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800b050:	2bf2      	cmp	r3, #242	; 0xf2
 800b052:	d007      	beq.n	800b064 <RadioSetRxGenericConfig+0x15c>
 800b054:	68bb      	ldr	r3, [r7, #8]
 800b056:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800b05a:	2b01      	cmp	r3, #1
 800b05c:	d002      	beq.n	800b064 <RadioSetRxGenericConfig+0x15c>
            return -1;
 800b05e:	f04f 33ff 	mov.w	r3, #4294967295
 800b062:	e10b      	b.n	800b27c <RadioSetRxGenericConfig+0x374>
          ConfigGeneric.rtx = CONFIG_RX;
 800b064:	2300      	movs	r3, #0
 800b066:	773b      	strb	r3, [r7, #28]
          ConfigGeneric.RxConfig = config;
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	61bb      	str	r3, [r7, #24]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 800b06c:	4b58      	ldr	r3, [pc, #352]	; (800b1d0 <RadioSetRxGenericConfig+0x2c8>)
 800b06e:	6819      	ldr	r1, [r3, #0]
 800b070:	f107 0314 	add.w	r3, r7, #20
 800b074:	4a57      	ldr	r2, [pc, #348]	; (800b1d4 <RadioSetRxGenericConfig+0x2cc>)
 800b076:	4618      	mov	r0, r3
 800b078:	f001 fc84 	bl	800c984 <RFW_Init>
 800b07c:	4603      	mov	r3, r0
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d002      	beq.n	800b088 <RadioSetRxGenericConfig+0x180>
            return -1;
 800b082:	f04f 33ff 	mov.w	r3, #4294967295
 800b086:	e0f9      	b.n	800b27c <RadioSetRxGenericConfig+0x374>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800b088:	4b50      	ldr	r3, [pc, #320]	; (800b1cc <RadioSetRxGenericConfig+0x2c4>)
 800b08a:	2200      	movs	r2, #0
 800b08c:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800b08e:	4b4f      	ldr	r3, [pc, #316]	; (800b1cc <RadioSetRxGenericConfig+0x2c4>)
 800b090:	2201      	movs	r2, #1
 800b092:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800b094:	4b4d      	ldr	r3, [pc, #308]	; (800b1cc <RadioSetRxGenericConfig+0x2c4>)
 800b096:	2200      	movs	r2, #0
 800b098:	755a      	strb	r2, [r3, #21]
        {
 800b09a:	e00e      	b.n	800b0ba <RadioSetRxGenericConfig+0x1b2>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800b0a2:	4b4a      	ldr	r3, [pc, #296]	; (800b1cc <RadioSetRxGenericConfig+0x2c4>)
 800b0a4:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800b0ac:	4b47      	ldr	r3, [pc, #284]	; (800b1cc <RadioSetRxGenericConfig+0x2c4>)
 800b0ae:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800b0b6:	4b45      	ldr	r3, [pc, #276]	; (800b1cc <RadioSetRxGenericConfig+0x2c4>)
 800b0b8:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 800b0ba:	f7ff fa7a 	bl	800a5b2 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800b0be:	2000      	movs	r0, #0
 800b0c0:	f7fe fc2a 	bl	8009918 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800b0c4:	4844      	ldr	r0, [pc, #272]	; (800b1d8 <RadioSetRxGenericConfig+0x2d0>)
 800b0c6:	f001 f80b 	bl	800c0e0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800b0ca:	4844      	ldr	r0, [pc, #272]	; (800b1dc <RadioSetRxGenericConfig+0x2d4>)
 800b0cc:	f001 f8da 	bl	800c284 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800b0d0:	f107 0320 	add.w	r3, r7, #32
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	f000 fba2 	bl	800b81e <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800b0da:	68bb      	ldr	r3, [r7, #8]
 800b0dc:	8b9b      	ldrh	r3, [r3, #28]
 800b0de:	4618      	mov	r0, r3
 800b0e0:	f000 fbec 	bl	800b8bc <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 800b0e4:	68bb      	ldr	r3, [r7, #8]
 800b0e6:	8b1b      	ldrh	r3, [r3, #24]
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	f000 fbc7 	bl	800b87c <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800b0f4:	fb03 f202 	mul.w	r2, r3, r2
 800b0f8:	68bb      	ldr	r3, [r7, #8]
 800b0fa:	689b      	ldr	r3, [r3, #8]
 800b0fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b100:	4a32      	ldr	r2, [pc, #200]	; (800b1cc <RadioSetRxGenericConfig+0x2c4>)
 800b102:	6093      	str	r3, [r2, #8]
        break;
 800b104:	e0b9      	b.n	800b27a <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 800b106:	68bb      	ldr	r3, [r7, #8]
 800b108:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d102      	bne.n	800b114 <RadioSetRxGenericConfig+0x20c>
            return -1;
 800b10e:	f04f 33ff 	mov.w	r3, #4294967295
 800b112:	e0b3      	b.n	800b27c <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800b11a:	2b01      	cmp	r3, #1
 800b11c:	d104      	bne.n	800b128 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 800b11e:	68bb      	ldr	r3, [r7, #8]
 800b120:	695b      	ldr	r3, [r3, #20]
 800b122:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b126:	e002      	b.n	800b12e <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 800b128:	23ff      	movs	r3, #255	; 0xff
 800b12a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800b12e:	68bb      	ldr	r3, [r7, #8]
 800b130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b132:	2b00      	cmp	r3, #0
 800b134:	bf14      	ite	ne
 800b136:	2301      	movne	r3, #1
 800b138:	2300      	moveq	r3, #0
 800b13a:	b2db      	uxtb	r3, r3
 800b13c:	4618      	mov	r0, r3
 800b13e:	f000 fd35 	bl	800bbac <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	b2db      	uxtb	r3, r3
 800b146:	4618      	mov	r0, r3
 800b148:	f000 fd3f 	bl	800bbca <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800b14c:	4b1f      	ldr	r3, [pc, #124]	; (800b1cc <RadioSetRxGenericConfig+0x2c4>)
 800b14e:	2201      	movs	r2, #1
 800b150:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800b154:	68bb      	ldr	r3, [r7, #8]
 800b156:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800b15a:	4b1c      	ldr	r3, [pc, #112]	; (800b1cc <RadioSetRxGenericConfig+0x2c4>)
 800b15c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800b160:	68bb      	ldr	r3, [r7, #8]
 800b162:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 800b166:	4b19      	ldr	r3, [pc, #100]	; (800b1cc <RadioSetRxGenericConfig+0x2c4>)
 800b168:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 800b172:	4b16      	ldr	r3, [pc, #88]	; (800b1cc <RadioSetRxGenericConfig+0x2c4>)
 800b174:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 800b178:	68bb      	ldr	r3, [r7, #8]
 800b17a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b17e:	2b02      	cmp	r3, #2
 800b180:	d010      	beq.n	800b1a4 <RadioSetRxGenericConfig+0x29c>
 800b182:	2b02      	cmp	r3, #2
 800b184:	dc2c      	bgt.n	800b1e0 <RadioSetRxGenericConfig+0x2d8>
 800b186:	2b00      	cmp	r3, #0
 800b188:	d002      	beq.n	800b190 <RadioSetRxGenericConfig+0x288>
 800b18a:	2b01      	cmp	r3, #1
 800b18c:	d005      	beq.n	800b19a <RadioSetRxGenericConfig+0x292>
            break;
 800b18e:	e027      	b.n	800b1e0 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800b190:	4b0e      	ldr	r3, [pc, #56]	; (800b1cc <RadioSetRxGenericConfig+0x2c4>)
 800b192:	2200      	movs	r2, #0
 800b194:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800b198:	e023      	b.n	800b1e2 <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800b19a:	4b0c      	ldr	r3, [pc, #48]	; (800b1cc <RadioSetRxGenericConfig+0x2c4>)
 800b19c:	2201      	movs	r2, #1
 800b19e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800b1a2:	e01e      	b.n	800b1e2 <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800b1a4:	68bb      	ldr	r3, [r7, #8]
 800b1a6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b1aa:	2b0b      	cmp	r3, #11
 800b1ac:	d004      	beq.n	800b1b8 <RadioSetRxGenericConfig+0x2b0>
 800b1ae:	68bb      	ldr	r3, [r7, #8]
 800b1b0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b1b4:	2b0c      	cmp	r3, #12
 800b1b6:	d104      	bne.n	800b1c2 <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800b1b8:	4b04      	ldr	r3, [pc, #16]	; (800b1cc <RadioSetRxGenericConfig+0x2c4>)
 800b1ba:	2201      	movs	r2, #1
 800b1bc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800b1c0:	e00f      	b.n	800b1e2 <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800b1c2:	4b02      	ldr	r3, [pc, #8]	; (800b1cc <RadioSetRxGenericConfig+0x2c4>)
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800b1ca:	e00a      	b.n	800b1e2 <RadioSetRxGenericConfig+0x2da>
 800b1cc:	20000594 	.word	0x20000594
 800b1d0:	20000590 	.word	0x20000590
 800b1d4:	20000608 	.word	0x20000608
 800b1d8:	200005cc 	.word	0x200005cc
 800b1dc:	200005a2 	.word	0x200005a2
            break;
 800b1e0:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800b1e2:	4b28      	ldr	r3, [pc, #160]	; (800b284 <RadioSetRxGenericConfig+0x37c>)
 800b1e4:	2201      	movs	r2, #1
 800b1e6:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800b1e8:	68bb      	ldr	r3, [r7, #8]
 800b1ea:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 800b1ec:	4b25      	ldr	r3, [pc, #148]	; (800b284 <RadioSetRxGenericConfig+0x37c>)
 800b1ee:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800b1f0:	68bb      	ldr	r3, [r7, #8]
 800b1f2:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 800b1f6:	4b23      	ldr	r3, [pc, #140]	; (800b284 <RadioSetRxGenericConfig+0x37c>)
 800b1f8:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800b1fa:	4a22      	ldr	r2, [pc, #136]	; (800b284 <RadioSetRxGenericConfig+0x37c>)
 800b1fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b200:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800b202:	68bb      	ldr	r3, [r7, #8]
 800b204:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800b208:	4b1e      	ldr	r3, [pc, #120]	; (800b284 <RadioSetRxGenericConfig+0x37c>)
 800b20a:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800b20e:	68bb      	ldr	r3, [r7, #8]
 800b210:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 800b214:	4b1b      	ldr	r3, [pc, #108]	; (800b284 <RadioSetRxGenericConfig+0x37c>)
 800b216:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 800b21a:	f7ff f9ca 	bl	800a5b2 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800b21e:	2001      	movs	r0, #1
 800b220:	f7fe fb7a 	bl	8009918 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800b224:	4818      	ldr	r0, [pc, #96]	; (800b288 <RadioSetRxGenericConfig+0x380>)
 800b226:	f000 ff5b 	bl	800c0e0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800b22a:	4818      	ldr	r0, [pc, #96]	; (800b28c <RadioSetRxGenericConfig+0x384>)
 800b22c:	f001 f82a 	bl	800c284 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800b230:	4b14      	ldr	r3, [pc, #80]	; (800b284 <RadioSetRxGenericConfig+0x37c>)
 800b232:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800b236:	2b01      	cmp	r3, #1
 800b238:	d10d      	bne.n	800b256 <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 800b23a:	f240 7036 	movw	r0, #1846	; 0x736
 800b23e:	f001 f97d 	bl	800c53c <SUBGRF_ReadRegister>
 800b242:	4603      	mov	r3, r0
 800b244:	f023 0304 	bic.w	r3, r3, #4
 800b248:	b2db      	uxtb	r3, r3
 800b24a:	4619      	mov	r1, r3
 800b24c:	f240 7036 	movw	r0, #1846	; 0x736
 800b250:	f001 f960 	bl	800c514 <SUBGRF_WriteRegister>
 800b254:	e00c      	b.n	800b270 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 800b256:	f240 7036 	movw	r0, #1846	; 0x736
 800b25a:	f001 f96f 	bl	800c53c <SUBGRF_ReadRegister>
 800b25e:	4603      	mov	r3, r0
 800b260:	f043 0304 	orr.w	r3, r3, #4
 800b264:	b2db      	uxtb	r3, r3
 800b266:	4619      	mov	r1, r3
 800b268:	f240 7036 	movw	r0, #1846	; 0x736
 800b26c:	f001 f952 	bl	800c514 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 800b270:	4b04      	ldr	r3, [pc, #16]	; (800b284 <RadioSetRxGenericConfig+0x37c>)
 800b272:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b276:	609a      	str	r2, [r3, #8]
        break;
 800b278:	bf00      	nop
    }
    return status;
 800b27a:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	3730      	adds	r7, #48	; 0x30
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}
 800b284:	20000594 	.word	0x20000594
 800b288:	200005cc 	.word	0x200005cc
 800b28c:	200005a2 	.word	0x200005a2

0800b290 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b08e      	sub	sp, #56	; 0x38
 800b294:	af00      	add	r7, sp, #0
 800b296:	60b9      	str	r1, [r7, #8]
 800b298:	607b      	str	r3, [r7, #4]
 800b29a:	4603      	mov	r3, r0
 800b29c:	73fb      	strb	r3, [r7, #15]
 800b29e:	4613      	mov	r3, r2
 800b2a0:	73bb      	strb	r3, [r7, #14]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800b2aa:	f001 fb78 	bl	800c99e <RFW_DeInit>
    switch( modem )
 800b2ae:	7bfb      	ldrb	r3, [r7, #15]
 800b2b0:	2b03      	cmp	r3, #3
 800b2b2:	f200 8204 	bhi.w	800b6be <RadioSetTxGenericConfig+0x42e>
 800b2b6:	a201      	add	r2, pc, #4	; (adr r2, 800b2bc <RadioSetTxGenericConfig+0x2c>)
 800b2b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2bc:	0800b441 	.word	0x0800b441
 800b2c0:	0800b589 	.word	0x0800b589
 800b2c4:	0800b681 	.word	0x0800b681
 800b2c8:	0800b2cd 	.word	0x0800b2cd
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 800b2cc:	68bb      	ldr	r3, [r7, #8]
 800b2ce:	7c9b      	ldrb	r3, [r3, #18]
 800b2d0:	2b08      	cmp	r3, #8
 800b2d2:	d902      	bls.n	800b2da <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 800b2d4:	f04f 33ff 	mov.w	r3, #4294967295
 800b2d8:	e206      	b.n	800b6e8 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
          RADIO_MEMCPY8(syncword, config->msk.SyncWord, config->msk.SyncWordLength);
 800b2da:	68bb      	ldr	r3, [r7, #8]
 800b2dc:	6899      	ldr	r1, [r3, #8]
 800b2de:	68bb      	ldr	r3, [r7, #8]
 800b2e0:	7c9b      	ldrb	r3, [r3, #18]
 800b2e2:	b29a      	uxth	r2, r3
 800b2e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	f001 fc4b 	bl	800cb84 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 800b2ee:	68bb      	ldr	r3, [r7, #8]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d102      	bne.n	800b2fc <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 800b2f6:	f04f 33ff 	mov.w	r3, #4294967295
 800b2fa:	e1f5      	b.n	800b6e8 <RadioSetTxGenericConfig+0x458>
        }
        else if (config->msk.BitRate<= 10000)
 800b2fc:	68bb      	ldr	r3, [r7, #8]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	f242 7210 	movw	r2, #10000	; 0x2710
 800b304:	4293      	cmp	r3, r2
 800b306:	d813      	bhi.n	800b330 <RadioSetTxGenericConfig+0xa0>
        {
          /*max msk modulator datarate is 10kbps*/
          radio_modem= MODEM_MSK;
 800b308:	2302      	movs	r3, #2
 800b30a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 800b30e:	4b99      	ldr	r3, [pc, #612]	; (800b574 <RadioSetTxGenericConfig+0x2e4>)
 800b310:	2203      	movs	r2, #3
 800b312:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 800b314:	4b97      	ldr	r3, [pc, #604]	; (800b574 <RadioSetTxGenericConfig+0x2e4>)
 800b316:	2203      	movs	r2, #3
 800b318:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 800b31c:	68bb      	ldr	r3, [r7, #8]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	4a94      	ldr	r2, [pc, #592]	; (800b574 <RadioSetTxGenericConfig+0x2e4>)
 800b322:	63d3      	str	r3, [r2, #60]	; 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	7cda      	ldrb	r2, [r3, #19]
 800b328:	4b92      	ldr	r3, [pc, #584]	; (800b574 <RadioSetTxGenericConfig+0x2e4>)
 800b32a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b32e:	e017      	b.n	800b360 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
          radio_modem= MODEM_FSK;
 800b330:	2300      	movs	r3, #0
 800b332:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800b336:	4b8f      	ldr	r3, [pc, #572]	; (800b574 <RadioSetTxGenericConfig+0x2e4>)
 800b338:	2200      	movs	r2, #0
 800b33a:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800b33c:	4b8d      	ldr	r3, [pc, #564]	; (800b574 <RadioSetTxGenericConfig+0x2e4>)
 800b33e:	2200      	movs	r2, #0
 800b340:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 800b344:	68bb      	ldr	r3, [r7, #8]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	4a8a      	ldr	r2, [pc, #552]	; (800b574 <RadioSetTxGenericConfig+0x2e4>)
 800b34a:	63d3      	str	r3, [r2, #60]	; 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 800b34c:	68bb      	ldr	r3, [r7, #8]
 800b34e:	7cda      	ldrb	r2, [r3, #19]
 800b350:	4b88      	ldr	r3, [pc, #544]	; (800b574 <RadioSetTxGenericConfig+0x2e4>)
 800b352:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
          /*do msk with gfsk modulator*/
          SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate/4;
 800b356:	68bb      	ldr	r3, [r7, #8]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	089b      	lsrs	r3, r3, #2
 800b35c:	4a85      	ldr	r2, [pc, #532]	; (800b574 <RadioSetTxGenericConfig+0x2e4>)
 800b35e:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 800b360:	68bb      	ldr	r3, [r7, #8]
 800b362:	685b      	ldr	r3, [r3, #4]
 800b364:	b29b      	uxth	r3, r3
 800b366:	00db      	lsls	r3, r3, #3
 800b368:	b29a      	uxth	r2, r3
 800b36a:	4b82      	ldr	r3, [pc, #520]	; (800b574 <RadioSetTxGenericConfig+0x2e4>)
 800b36c:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 800b36e:	4b81      	ldr	r3, [pc, #516]	; (800b574 <RadioSetTxGenericConfig+0x2e4>)
 800b370:	2204      	movs	r2, #4
 800b372:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	7c9b      	ldrb	r3, [r3, #18]
 800b378:	00db      	lsls	r3, r3, #3
 800b37a:	b2da      	uxtb	r2, r3
 800b37c:	4b7d      	ldr	r3, [pc, #500]	; (800b574 <RadioSetTxGenericConfig+0x2e4>)
 800b37e:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 800b380:	4b7c      	ldr	r3, [pc, #496]	; (800b574 <RadioSetTxGenericConfig+0x2e4>)
 800b382:	2200      	movs	r2, #0
 800b384:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800b386:	68bb      	ldr	r3, [r7, #8]
 800b388:	7d9b      	ldrb	r3, [r3, #22]
 800b38a:	2b02      	cmp	r3, #2
 800b38c:	d003      	beq.n	800b396 <RadioSetTxGenericConfig+0x106>
 800b38e:	68bb      	ldr	r3, [r7, #8]
 800b390:	7d1b      	ldrb	r3, [r3, #20]
 800b392:	2b02      	cmp	r3, #2
 800b394:	d12b      	bne.n	800b3ee <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800b396:	68bb      	ldr	r3, [r7, #8]
 800b398:	7d5b      	ldrb	r3, [r3, #21]
 800b39a:	2bf1      	cmp	r3, #241	; 0xf1
 800b39c:	d00a      	beq.n	800b3b4 <RadioSetTxGenericConfig+0x124>
 800b39e:	68bb      	ldr	r3, [r7, #8]
 800b3a0:	7d5b      	ldrb	r3, [r3, #21]
 800b3a2:	2bf2      	cmp	r3, #242	; 0xf2
 800b3a4:	d006      	beq.n	800b3b4 <RadioSetTxGenericConfig+0x124>
 800b3a6:	68bb      	ldr	r3, [r7, #8]
 800b3a8:	7d5b      	ldrb	r3, [r3, #21]
 800b3aa:	2b01      	cmp	r3, #1
 800b3ac:	d002      	beq.n	800b3b4 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 800b3ae:	f04f 33ff 	mov.w	r3, #4294967295
 800b3b2:	e199      	b.n	800b6e8 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig= config;
 800b3b4:	68bb      	ldr	r3, [r7, #8]
 800b3b6:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 800b3b8:	2301      	movs	r3, #1
 800b3ba:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800b3be:	4b6e      	ldr	r3, [pc, #440]	; (800b578 <RadioSetTxGenericConfig+0x2e8>)
 800b3c0:	6819      	ldr	r1, [r3, #0]
 800b3c2:	f107 0320 	add.w	r3, r7, #32
 800b3c6:	4a6d      	ldr	r2, [pc, #436]	; (800b57c <RadioSetTxGenericConfig+0x2ec>)
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	f001 fadb 	bl	800c984 <RFW_Init>
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d002      	beq.n	800b3da <RadioSetTxGenericConfig+0x14a>
            {
              return -1;
 800b3d4:	f04f 33ff 	mov.w	r3, #4294967295
 800b3d8:	e186      	b.n	800b6e8 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800b3da:	4b66      	ldr	r3, [pc, #408]	; (800b574 <RadioSetTxGenericConfig+0x2e4>)
 800b3dc:	2200      	movs	r2, #0
 800b3de:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 800b3e0:	4b64      	ldr	r3, [pc, #400]	; (800b574 <RadioSetTxGenericConfig+0x2e4>)
 800b3e2:	2201      	movs	r2, #1
 800b3e4:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800b3e6:	4b63      	ldr	r3, [pc, #396]	; (800b574 <RadioSetTxGenericConfig+0x2e4>)
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	755a      	strb	r2, [r3, #21]
        {
 800b3ec:	e00b      	b.n	800b406 <RadioSetTxGenericConfig+0x176>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 800b3ee:	68bb      	ldr	r3, [r7, #8]
 800b3f0:	7d5a      	ldrb	r2, [r3, #21]
 800b3f2:	4b60      	ldr	r3, [pc, #384]	; (800b574 <RadioSetTxGenericConfig+0x2e4>)
 800b3f4:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 800b3f6:	68bb      	ldr	r3, [r7, #8]
 800b3f8:	7d9a      	ldrb	r2, [r3, #22]
 800b3fa:	4b5e      	ldr	r3, [pc, #376]	; (800b574 <RadioSetTxGenericConfig+0x2e4>)
 800b3fc:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 800b3fe:	68bb      	ldr	r3, [r7, #8]
 800b400:	7d1a      	ldrb	r2, [r3, #20]
 800b402:	4b5c      	ldr	r3, [pc, #368]	; (800b574 <RadioSetTxGenericConfig+0x2e4>)
 800b404:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 800b406:	f7ff f8d4 	bl	800a5b2 <RadioStandby>
        RadioSetModem( radio_modem );
 800b40a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b40e:	4618      	mov	r0, r3
 800b410:	f7fe fa82 	bl	8009918 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800b414:	485a      	ldr	r0, [pc, #360]	; (800b580 <RadioSetTxGenericConfig+0x2f0>)
 800b416:	f000 fe63 	bl	800c0e0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800b41a:	485a      	ldr	r0, [pc, #360]	; (800b584 <RadioSetTxGenericConfig+0x2f4>)
 800b41c:	f000 ff32 	bl	800c284 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800b420:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b424:	4618      	mov	r0, r3
 800b426:	f000 f9fa 	bl	800b81e <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 800b42a:	68bb      	ldr	r3, [r7, #8]
 800b42c:	8a1b      	ldrh	r3, [r3, #16]
 800b42e:	4618      	mov	r0, r3
 800b430:	f000 fa44 	bl	800b8bc <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->msk.CrcPolynomial );
 800b434:	68bb      	ldr	r3, [r7, #8]
 800b436:	899b      	ldrh	r3, [r3, #12]
 800b438:	4618      	mov	r0, r3
 800b43a:	f000 fa1f 	bl	800b87c <SUBGRF_SetCrcPolynomial>
        break;
 800b43e:	e13f      	b.n	800b6c0 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 800b440:	68bb      	ldr	r3, [r7, #8]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d102      	bne.n	800b44e <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 800b448:	f04f 33ff 	mov.w	r3, #4294967295
 800b44c:	e14c      	b.n	800b6e8 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	7c9b      	ldrb	r3, [r3, #18]
 800b452:	2b08      	cmp	r3, #8
 800b454:	d902      	bls.n	800b45c <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 800b456:	f04f 33ff 	mov.w	r3, #4294967295
 800b45a:	e145      	b.n	800b6e8 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8(syncword, config->fsk.SyncWord, config->fsk.SyncWordLength);
 800b45c:	68bb      	ldr	r3, [r7, #8]
 800b45e:	6899      	ldr	r1, [r3, #8]
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	7c9b      	ldrb	r3, [r3, #18]
 800b464:	b29a      	uxth	r2, r3
 800b466:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b46a:	4618      	mov	r0, r3
 800b46c:	f001 fb8a 	bl	800cb84 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800b470:	4b40      	ldr	r3, [pc, #256]	; (800b574 <RadioSetTxGenericConfig+0x2e4>)
 800b472:	2200      	movs	r2, #0
 800b474:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800b478:	68bb      	ldr	r3, [r7, #8]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	4a3d      	ldr	r2, [pc, #244]	; (800b574 <RadioSetTxGenericConfig+0x2e4>)
 800b47e:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 800b480:	68bb      	ldr	r3, [r7, #8]
 800b482:	7cda      	ldrb	r2, [r3, #19]
 800b484:	4b3b      	ldr	r3, [pc, #236]	; (800b574 <RadioSetTxGenericConfig+0x2e4>)
 800b486:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 800b48a:	68bb      	ldr	r3, [r7, #8]
 800b48c:	699b      	ldr	r3, [r3, #24]
 800b48e:	4a39      	ldr	r2, [pc, #228]	; (800b574 <RadioSetTxGenericConfig+0x2e4>)
 800b490:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800b492:	4b38      	ldr	r3, [pc, #224]	; (800b574 <RadioSetTxGenericConfig+0x2e4>)
 800b494:	2200      	movs	r2, #0
 800b496:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 800b498:	68bb      	ldr	r3, [r7, #8]
 800b49a:	685b      	ldr	r3, [r3, #4]
 800b49c:	b29b      	uxth	r3, r3
 800b49e:	00db      	lsls	r3, r3, #3
 800b4a0:	b29a      	uxth	r2, r3
 800b4a2:	4b34      	ldr	r3, [pc, #208]	; (800b574 <RadioSetTxGenericConfig+0x2e4>)
 800b4a4:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 800b4a6:	4b33      	ldr	r3, [pc, #204]	; (800b574 <RadioSetTxGenericConfig+0x2e4>)
 800b4a8:	2204      	movs	r2, #4
 800b4aa:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	7c9b      	ldrb	r3, [r3, #18]
 800b4b0:	00db      	lsls	r3, r3, #3
 800b4b2:	b2da      	uxtb	r2, r3
 800b4b4:	4b2f      	ldr	r3, [pc, #188]	; (800b574 <RadioSetTxGenericConfig+0x2e4>)
 800b4b6:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 800b4b8:	4b2e      	ldr	r3, [pc, #184]	; (800b574 <RadioSetTxGenericConfig+0x2e4>)
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800b4be:	68bb      	ldr	r3, [r7, #8]
 800b4c0:	7d9b      	ldrb	r3, [r3, #22]
 800b4c2:	2b02      	cmp	r3, #2
 800b4c4:	d003      	beq.n	800b4ce <RadioSetTxGenericConfig+0x23e>
 800b4c6:	68bb      	ldr	r3, [r7, #8]
 800b4c8:	7d1b      	ldrb	r3, [r3, #20]
 800b4ca:	2b02      	cmp	r3, #2
 800b4cc:	d12a      	bne.n	800b524 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800b4ce:	68bb      	ldr	r3, [r7, #8]
 800b4d0:	7d5b      	ldrb	r3, [r3, #21]
 800b4d2:	2bf1      	cmp	r3, #241	; 0xf1
 800b4d4:	d00a      	beq.n	800b4ec <RadioSetTxGenericConfig+0x25c>
 800b4d6:	68bb      	ldr	r3, [r7, #8]
 800b4d8:	7d5b      	ldrb	r3, [r3, #21]
 800b4da:	2bf2      	cmp	r3, #242	; 0xf2
 800b4dc:	d006      	beq.n	800b4ec <RadioSetTxGenericConfig+0x25c>
 800b4de:	68bb      	ldr	r3, [r7, #8]
 800b4e0:	7d5b      	ldrb	r3, [r3, #21]
 800b4e2:	2b01      	cmp	r3, #1
 800b4e4:	d002      	beq.n	800b4ec <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 800b4e6:	f04f 33ff 	mov.w	r3, #4294967295
 800b4ea:	e0fd      	b.n	800b6e8 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 800b4ec:	2301      	movs	r3, #1
 800b4ee:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 800b4f0:	68bb      	ldr	r3, [r7, #8]
 800b4f2:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800b4f4:	4b20      	ldr	r3, [pc, #128]	; (800b578 <RadioSetTxGenericConfig+0x2e8>)
 800b4f6:	6819      	ldr	r1, [r3, #0]
 800b4f8:	f107 0314 	add.w	r3, r7, #20
 800b4fc:	4a1f      	ldr	r2, [pc, #124]	; (800b57c <RadioSetTxGenericConfig+0x2ec>)
 800b4fe:	4618      	mov	r0, r3
 800b500:	f001 fa40 	bl	800c984 <RFW_Init>
 800b504:	4603      	mov	r3, r0
 800b506:	2b00      	cmp	r3, #0
 800b508:	d002      	beq.n	800b510 <RadioSetTxGenericConfig+0x280>
            {
              return -1;
 800b50a:	f04f 33ff 	mov.w	r3, #4294967295
 800b50e:	e0eb      	b.n	800b6e8 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800b510:	4b18      	ldr	r3, [pc, #96]	; (800b574 <RadioSetTxGenericConfig+0x2e4>)
 800b512:	2200      	movs	r2, #0
 800b514:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 800b516:	4b17      	ldr	r3, [pc, #92]	; (800b574 <RadioSetTxGenericConfig+0x2e4>)
 800b518:	2201      	movs	r2, #1
 800b51a:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800b51c:	4b15      	ldr	r3, [pc, #84]	; (800b574 <RadioSetTxGenericConfig+0x2e4>)
 800b51e:	2200      	movs	r2, #0
 800b520:	755a      	strb	r2, [r3, #21]
        {
 800b522:	e00b      	b.n	800b53c <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800b524:	68bb      	ldr	r3, [r7, #8]
 800b526:	7d5a      	ldrb	r2, [r3, #21]
 800b528:	4b12      	ldr	r3, [pc, #72]	; (800b574 <RadioSetTxGenericConfig+0x2e4>)
 800b52a:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800b52c:	68bb      	ldr	r3, [r7, #8]
 800b52e:	7d9a      	ldrb	r2, [r3, #22]
 800b530:	4b10      	ldr	r3, [pc, #64]	; (800b574 <RadioSetTxGenericConfig+0x2e4>)
 800b532:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 800b534:	68bb      	ldr	r3, [r7, #8]
 800b536:	7d1a      	ldrb	r2, [r3, #20]
 800b538:	4b0e      	ldr	r3, [pc, #56]	; (800b574 <RadioSetTxGenericConfig+0x2e4>)
 800b53a:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 800b53c:	f7ff f839 	bl	800a5b2 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800b540:	2000      	movs	r0, #0
 800b542:	f7fe f9e9 	bl	8009918 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800b546:	480e      	ldr	r0, [pc, #56]	; (800b580 <RadioSetTxGenericConfig+0x2f0>)
 800b548:	f000 fdca 	bl	800c0e0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800b54c:	480d      	ldr	r0, [pc, #52]	; (800b584 <RadioSetTxGenericConfig+0x2f4>)
 800b54e:	f000 fe99 	bl	800c284 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800b552:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b556:	4618      	mov	r0, r3
 800b558:	f000 f961 	bl	800b81e <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800b55c:	68bb      	ldr	r3, [r7, #8]
 800b55e:	8a1b      	ldrh	r3, [r3, #16]
 800b560:	4618      	mov	r0, r3
 800b562:	f000 f9ab 	bl	800b8bc <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 800b566:	68bb      	ldr	r3, [r7, #8]
 800b568:	899b      	ldrh	r3, [r3, #12]
 800b56a:	4618      	mov	r0, r3
 800b56c:	f000 f986 	bl	800b87c <SUBGRF_SetCrcPolynomial>
        break;
 800b570:	e0a6      	b.n	800b6c0 <RadioSetTxGenericConfig+0x430>
 800b572:	bf00      	nop
 800b574:	20000594 	.word	0x20000594
 800b578:	20000590 	.word	0x20000590
 800b57c:	200005f0 	.word	0x200005f0
 800b580:	200005cc 	.word	0x200005cc
 800b584:	200005a2 	.word	0x200005a2
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800b588:	4b59      	ldr	r3, [pc, #356]	; (800b6f0 <RadioSetTxGenericConfig+0x460>)
 800b58a:	2201      	movs	r2, #1
 800b58c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800b590:	68bb      	ldr	r3, [r7, #8]
 800b592:	781a      	ldrb	r2, [r3, #0]
 800b594:	4b56      	ldr	r3, [pc, #344]	; (800b6f0 <RadioSetTxGenericConfig+0x460>)
 800b596:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800b59a:	68bb      	ldr	r3, [r7, #8]
 800b59c:	785a      	ldrb	r2, [r3, #1]
 800b59e:	4b54      	ldr	r3, [pc, #336]	; (800b6f0 <RadioSetTxGenericConfig+0x460>)
 800b5a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 800b5a4:	68bb      	ldr	r3, [r7, #8]
 800b5a6:	789a      	ldrb	r2, [r3, #2]
 800b5a8:	4b51      	ldr	r3, [pc, #324]	; (800b6f0 <RadioSetTxGenericConfig+0x460>)
 800b5aa:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 800b5ae:	68bb      	ldr	r3, [r7, #8]
 800b5b0:	78db      	ldrb	r3, [r3, #3]
 800b5b2:	2b02      	cmp	r3, #2
 800b5b4:	d010      	beq.n	800b5d8 <RadioSetTxGenericConfig+0x348>
 800b5b6:	2b02      	cmp	r3, #2
 800b5b8:	dc20      	bgt.n	800b5fc <RadioSetTxGenericConfig+0x36c>
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d002      	beq.n	800b5c4 <RadioSetTxGenericConfig+0x334>
 800b5be:	2b01      	cmp	r3, #1
 800b5c0:	d005      	beq.n	800b5ce <RadioSetTxGenericConfig+0x33e>
            {
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
          default:
            break;
 800b5c2:	e01b      	b.n	800b5fc <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800b5c4:	4b4a      	ldr	r3, [pc, #296]	; (800b6f0 <RadioSetTxGenericConfig+0x460>)
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800b5cc:	e017      	b.n	800b5fe <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800b5ce:	4b48      	ldr	r3, [pc, #288]	; (800b6f0 <RadioSetTxGenericConfig+0x460>)
 800b5d0:	2201      	movs	r2, #1
 800b5d2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800b5d6:	e012      	b.n	800b5fe <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	781b      	ldrb	r3, [r3, #0]
 800b5dc:	2b0b      	cmp	r3, #11
 800b5de:	d003      	beq.n	800b5e8 <RadioSetTxGenericConfig+0x358>
 800b5e0:	68bb      	ldr	r3, [r7, #8]
 800b5e2:	781b      	ldrb	r3, [r3, #0]
 800b5e4:	2b0c      	cmp	r3, #12
 800b5e6:	d104      	bne.n	800b5f2 <RadioSetTxGenericConfig+0x362>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800b5e8:	4b41      	ldr	r3, [pc, #260]	; (800b6f0 <RadioSetTxGenericConfig+0x460>)
 800b5ea:	2201      	movs	r2, #1
 800b5ec:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800b5f0:	e005      	b.n	800b5fe <RadioSetTxGenericConfig+0x36e>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800b5f2:	4b3f      	ldr	r3, [pc, #252]	; (800b6f0 <RadioSetTxGenericConfig+0x460>)
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800b5fa:	e000      	b.n	800b5fe <RadioSetTxGenericConfig+0x36e>
            break;
 800b5fc:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800b5fe:	4b3c      	ldr	r3, [pc, #240]	; (800b6f0 <RadioSetTxGenericConfig+0x460>)
 800b600:	2201      	movs	r2, #1
 800b602:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	889a      	ldrh	r2, [r3, #4]
 800b608:	4b39      	ldr	r3, [pc, #228]	; (800b6f0 <RadioSetTxGenericConfig+0x460>)
 800b60a:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	799a      	ldrb	r2, [r3, #6]
 800b610:	4b37      	ldr	r3, [pc, #220]	; (800b6f0 <RadioSetTxGenericConfig+0x460>)
 800b612:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	79da      	ldrb	r2, [r3, #7]
 800b618:	4b35      	ldr	r3, [pc, #212]	; (800b6f0 <RadioSetTxGenericConfig+0x460>)
 800b61a:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800b61e:	68bb      	ldr	r3, [r7, #8]
 800b620:	7a1a      	ldrb	r2, [r3, #8]
 800b622:	4b33      	ldr	r3, [pc, #204]	; (800b6f0 <RadioSetTxGenericConfig+0x460>)
 800b624:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 800b628:	f7fe ffc3 	bl	800a5b2 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800b62c:	2001      	movs	r0, #1
 800b62e:	f7fe f973 	bl	8009918 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800b632:	4830      	ldr	r0, [pc, #192]	; (800b6f4 <RadioSetTxGenericConfig+0x464>)
 800b634:	f000 fd54 	bl	800c0e0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800b638:	482f      	ldr	r0, [pc, #188]	; (800b6f8 <RadioSetTxGenericConfig+0x468>)
 800b63a:	f000 fe23 	bl	800c284 <SUBGRF_SetPacketParams>

        // WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 800b63e:	4b2c      	ldr	r3, [pc, #176]	; (800b6f0 <RadioSetTxGenericConfig+0x460>)
 800b640:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b644:	2b06      	cmp	r3, #6
 800b646:	d10d      	bne.n	800b664 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 800b648:	f640 0089 	movw	r0, #2185	; 0x889
 800b64c:	f000 ff76 	bl	800c53c <SUBGRF_ReadRegister>
 800b650:	4603      	mov	r3, r0
 800b652:	f023 0304 	bic.w	r3, r3, #4
 800b656:	b2db      	uxtb	r3, r3
 800b658:	4619      	mov	r1, r3
 800b65a:	f640 0089 	movw	r0, #2185	; 0x889
 800b65e:	f000 ff59 	bl	800c514 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        // WORKAROUND END
        break;
 800b662:	e02d      	b.n	800b6c0 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 800b664:	f640 0089 	movw	r0, #2185	; 0x889
 800b668:	f000 ff68 	bl	800c53c <SUBGRF_ReadRegister>
 800b66c:	4603      	mov	r3, r0
 800b66e:	f043 0304 	orr.w	r3, r3, #4
 800b672:	b2db      	uxtb	r3, r3
 800b674:	4619      	mov	r1, r3
 800b676:	f640 0089 	movw	r0, #2185	; 0x889
 800b67a:	f000 ff4b 	bl	800c514 <SUBGRF_WriteRegister>
        break;
 800b67e:	e01f      	b.n	800b6c0 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 800b680:	68bb      	ldr	r3, [r7, #8]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d004      	beq.n	800b692 <RadioSetTxGenericConfig+0x402>
 800b688:	68bb      	ldr	r3, [r7, #8]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b690:	d902      	bls.n	800b698 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 800b692:	f04f 33ff 	mov.w	r3, #4294967295
 800b696:	e027      	b.n	800b6e8 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 800b698:	2003      	movs	r0, #3
 800b69a:	f7fe f93d 	bl	8009918 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800b69e:	4b14      	ldr	r3, [pc, #80]	; (800b6f0 <RadioSetTxGenericConfig+0x460>)
 800b6a0:	2202      	movs	r2, #2
 800b6a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 800b6a6:	68bb      	ldr	r3, [r7, #8]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	4a11      	ldr	r2, [pc, #68]	; (800b6f0 <RadioSetTxGenericConfig+0x460>)
 800b6ac:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800b6ae:	4b10      	ldr	r3, [pc, #64]	; (800b6f0 <RadioSetTxGenericConfig+0x460>)
 800b6b0:	2216      	movs	r2, #22
 800b6b2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800b6b6:	480f      	ldr	r0, [pc, #60]	; (800b6f4 <RadioSetTxGenericConfig+0x464>)
 800b6b8:	f000 fd12 	bl	800c0e0 <SUBGRF_SetModulationParams>
        break;
 800b6bc:	e000      	b.n	800b6c0 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 800b6be:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800b6c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	f001 f841 	bl	800c74c <SUBGRF_SetRfTxPower>
 800b6ca:	4603      	mov	r3, r0
 800b6cc:	461a      	mov	r2, r3
 800b6ce:	4b08      	ldr	r3, [pc, #32]	; (800b6f0 <RadioSetTxGenericConfig+0x460>)
 800b6d0:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 800b6d4:	4b06      	ldr	r3, [pc, #24]	; (800b6f0 <RadioSetTxGenericConfig+0x460>)
 800b6d6:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800b6da:	4618      	mov	r0, r3
 800b6dc:	f001 f973 	bl	800c9c6 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800b6e0:	4a03      	ldr	r2, [pc, #12]	; (800b6f0 <RadioSetTxGenericConfig+0x460>)
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	6053      	str	r3, [r2, #4]
    return 0;
 800b6e6:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	3738      	adds	r7, #56	; 0x38
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	bd80      	pop	{r7, pc}
 800b6f0:	20000594 	.word	0x20000594
 800b6f4:	200005cc 	.word	0x200005cc
 800b6f8:	200005a2 	.word	0x200005a2

0800b6fc <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b084      	sub	sp, #16
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d002      	beq.n	800b710 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 800b70a:	4a1a      	ldr	r2, [pc, #104]	; (800b774 <SUBGRF_Init+0x78>)
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 800b710:	f7fa f8ca 	bl	80058a8 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800b714:	2002      	movs	r0, #2
 800b716:	f001 f854 	bl	800c7c2 <Radio_SMPS_Set>

    ImageCalibrated = false;
 800b71a:	4b17      	ldr	r3, [pc, #92]	; (800b778 <SUBGRF_Init+0x7c>)
 800b71c:	2200      	movs	r2, #0
 800b71e:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 800b720:	2000      	movs	r0, #0
 800b722:	f000 f977 	bl	800ba14 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 800b726:	f001 fa02 	bl	800cb2e <RBI_IsTCXO>
 800b72a:	4603      	mov	r3, r0
 800b72c:	2b01      	cmp	r3, #1
 800b72e:	d10e      	bne.n	800b74e <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 800b730:	2140      	movs	r1, #64	; 0x40
 800b732:	2001      	movs	r0, #1
 800b734:	f000 fb78 	bl	800be28 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 800b738:	2100      	movs	r1, #0
 800b73a:	f640 1011 	movw	r0, #2321	; 0x911
 800b73e:	f000 fee9 	bl	800c514 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 800b742:	237f      	movs	r3, #127	; 0x7f
 800b744:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 800b746:	7b38      	ldrb	r0, [r7, #12]
 800b748:	f000 fa85 	bl	800bc56 <SUBGRF_Calibrate>
 800b74c:	e009      	b.n	800b762 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800b74e:	2120      	movs	r1, #32
 800b750:	f640 1011 	movw	r0, #2321	; 0x911
 800b754:	f000 fede 	bl	800c514 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800b758:	2120      	movs	r1, #32
 800b75a:	f640 1012 	movw	r0, #2322	; 0x912
 800b75e:	f000 fed9 	bl	800c514 <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 800b762:	f001 f9c1 	bl	800cae8 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 800b766:	4b05      	ldr	r3, [pc, #20]	; (800b77c <SUBGRF_Init+0x80>)
 800b768:	2201      	movs	r2, #1
 800b76a:	701a      	strb	r2, [r3, #0]
}
 800b76c:	bf00      	nop
 800b76e:	3710      	adds	r7, #16
 800b770:	46bd      	mov	sp, r7
 800b772:	bd80      	pop	{r7, pc}
 800b774:	2000062c 	.word	0x2000062c
 800b778:	20000628 	.word	0x20000628
 800b77c:	20000620 	.word	0x20000620

0800b780 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 800b780:	b480      	push	{r7}
 800b782:	af00      	add	r7, sp, #0
    return OperatingMode;
 800b784:	4b02      	ldr	r3, [pc, #8]	; (800b790 <SUBGRF_GetOperatingMode+0x10>)
 800b786:	781b      	ldrb	r3, [r3, #0]
}
 800b788:	4618      	mov	r0, r3
 800b78a:	46bd      	mov	sp, r7
 800b78c:	bc80      	pop	{r7}
 800b78e:	4770      	bx	lr
 800b790:	20000620 	.word	0x20000620

0800b794 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b082      	sub	sp, #8
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
 800b79c:	460b      	mov	r3, r1
 800b79e:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 800b7a0:	78fb      	ldrb	r3, [r7, #3]
 800b7a2:	461a      	mov	r2, r3
 800b7a4:	6879      	ldr	r1, [r7, #4]
 800b7a6:	2000      	movs	r0, #0
 800b7a8:	f000 ff20 	bl	800c5ec <SUBGRF_WriteBuffer>
}
 800b7ac:	bf00      	nop
 800b7ae:	3708      	adds	r7, #8
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bd80      	pop	{r7, pc}

0800b7b4 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b086      	sub	sp, #24
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	60f8      	str	r0, [r7, #12]
 800b7bc:	60b9      	str	r1, [r7, #8]
 800b7be:	4613      	mov	r3, r2
 800b7c0:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 800b7c6:	f107 0317 	add.w	r3, r7, #23
 800b7ca:	4619      	mov	r1, r3
 800b7cc:	68b8      	ldr	r0, [r7, #8]
 800b7ce:	f000 fe23 	bl	800c418 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 800b7d2:	68bb      	ldr	r3, [r7, #8]
 800b7d4:	781b      	ldrb	r3, [r3, #0]
 800b7d6:	79fa      	ldrb	r2, [r7, #7]
 800b7d8:	429a      	cmp	r2, r3
 800b7da:	d201      	bcs.n	800b7e0 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 800b7dc:	2301      	movs	r3, #1
 800b7de:	e007      	b.n	800b7f0 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 800b7e0:	7df8      	ldrb	r0, [r7, #23]
 800b7e2:	68bb      	ldr	r3, [r7, #8]
 800b7e4:	781b      	ldrb	r3, [r3, #0]
 800b7e6:	461a      	mov	r2, r3
 800b7e8:	68f9      	ldr	r1, [r7, #12]
 800b7ea:	f000 ff21 	bl	800c630 <SUBGRF_ReadBuffer>

    return 0;
 800b7ee:	2300      	movs	r3, #0
}
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	3718      	adds	r7, #24
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	bd80      	pop	{r7, pc}

0800b7f8 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b084      	sub	sp, #16
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	60f8      	str	r0, [r7, #12]
 800b800:	460b      	mov	r3, r1
 800b802:	607a      	str	r2, [r7, #4]
 800b804:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 800b806:	7afb      	ldrb	r3, [r7, #11]
 800b808:	4619      	mov	r1, r3
 800b80a:	68f8      	ldr	r0, [r7, #12]
 800b80c:	f7ff ffc2 	bl	800b794 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 800b810:	6878      	ldr	r0, [r7, #4]
 800b812:	f000 f91b 	bl	800ba4c <SUBGRF_SetTx>
}
 800b816:	bf00      	nop
 800b818:	3710      	adds	r7, #16
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bd80      	pop	{r7, pc}

0800b81e <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 800b81e:	b580      	push	{r7, lr}
 800b820:	b082      	sub	sp, #8
 800b822:	af00      	add	r7, sp, #0
 800b824:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 800b826:	2208      	movs	r2, #8
 800b828:	6879      	ldr	r1, [r7, #4]
 800b82a:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 800b82e:	f000 fe99 	bl	800c564 <SUBGRF_WriteRegisters>
    return 0;
 800b832:	2300      	movs	r3, #0
}
 800b834:	4618      	mov	r0, r3
 800b836:	3708      	adds	r7, #8
 800b838:	46bd      	mov	sp, r7
 800b83a:	bd80      	pop	{r7, pc}

0800b83c <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b084      	sub	sp, #16
 800b840:	af00      	add	r7, sp, #0
 800b842:	4603      	mov	r3, r0
 800b844:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 800b846:	88fb      	ldrh	r3, [r7, #6]
 800b848:	0a1b      	lsrs	r3, r3, #8
 800b84a:	b29b      	uxth	r3, r3
 800b84c:	b2db      	uxtb	r3, r3
 800b84e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 800b850:	88fb      	ldrh	r3, [r7, #6]
 800b852:	b2db      	uxtb	r3, r3
 800b854:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800b856:	f000 fb6b 	bl	800bf30 <SUBGRF_GetPacketType>
 800b85a:	4603      	mov	r3, r0
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d108      	bne.n	800b872 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 800b860:	f107 030c 	add.w	r3, r7, #12
 800b864:	2202      	movs	r2, #2
 800b866:	4619      	mov	r1, r3
 800b868:	f240 60bc 	movw	r0, #1724	; 0x6bc
 800b86c:	f000 fe7a 	bl	800c564 <SUBGRF_WriteRegisters>
            break;
 800b870:	e000      	b.n	800b874 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 800b872:	bf00      	nop
    }
}
 800b874:	bf00      	nop
 800b876:	3710      	adds	r7, #16
 800b878:	46bd      	mov	sp, r7
 800b87a:	bd80      	pop	{r7, pc}

0800b87c <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b084      	sub	sp, #16
 800b880:	af00      	add	r7, sp, #0
 800b882:	4603      	mov	r3, r0
 800b884:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 800b886:	88fb      	ldrh	r3, [r7, #6]
 800b888:	0a1b      	lsrs	r3, r3, #8
 800b88a:	b29b      	uxth	r3, r3
 800b88c:	b2db      	uxtb	r3, r3
 800b88e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 800b890:	88fb      	ldrh	r3, [r7, #6]
 800b892:	b2db      	uxtb	r3, r3
 800b894:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800b896:	f000 fb4b 	bl	800bf30 <SUBGRF_GetPacketType>
 800b89a:	4603      	mov	r3, r0
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d108      	bne.n	800b8b2 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 800b8a0:	f107 030c 	add.w	r3, r7, #12
 800b8a4:	2202      	movs	r2, #2
 800b8a6:	4619      	mov	r1, r3
 800b8a8:	f240 60be 	movw	r0, #1726	; 0x6be
 800b8ac:	f000 fe5a 	bl	800c564 <SUBGRF_WriteRegisters>
            break;
 800b8b0:	e000      	b.n	800b8b4 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 800b8b2:	bf00      	nop
    }
}
 800b8b4:	bf00      	nop
 800b8b6:	3710      	adds	r7, #16
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	bd80      	pop	{r7, pc}

0800b8bc <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b084      	sub	sp, #16
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 800b8ca:	f000 fb31 	bl	800bf30 <SUBGRF_GetPacketType>
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d121      	bne.n	800b918 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 800b8d4:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800b8d8:	f000 fe30 	bl	800c53c <SUBGRF_ReadRegister>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	f023 0301 	bic.w	r3, r3, #1
 800b8e2:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 800b8e4:	88fb      	ldrh	r3, [r7, #6]
 800b8e6:	0a1b      	lsrs	r3, r3, #8
 800b8e8:	b29b      	uxth	r3, r3
 800b8ea:	b25b      	sxtb	r3, r3
 800b8ec:	f003 0301 	and.w	r3, r3, #1
 800b8f0:	b25a      	sxtb	r2, r3
 800b8f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b8f6:	4313      	orrs	r3, r2
 800b8f8:	b25b      	sxtb	r3, r3
 800b8fa:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 800b8fc:	7bfb      	ldrb	r3, [r7, #15]
 800b8fe:	4619      	mov	r1, r3
 800b900:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800b904:	f000 fe06 	bl	800c514 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 800b908:	88fb      	ldrh	r3, [r7, #6]
 800b90a:	b2db      	uxtb	r3, r3
 800b90c:	4619      	mov	r1, r3
 800b90e:	f240 60b9 	movw	r0, #1721	; 0x6b9
 800b912:	f000 fdff 	bl	800c514 <SUBGRF_WriteRegister>
            break;
 800b916:	e000      	b.n	800b91a <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 800b918:	bf00      	nop
    }
}
 800b91a:	bf00      	nop
 800b91c:	3710      	adds	r7, #16
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}

0800b922 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 800b922:	b580      	push	{r7, lr}
 800b924:	b082      	sub	sp, #8
 800b926:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 800b928:	2300      	movs	r3, #0
 800b92a:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 800b92c:	2300      	movs	r3, #0
 800b92e:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 800b930:	2300      	movs	r3, #0
 800b932:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 800b934:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800b938:	f000 fe00 	bl	800c53c <SUBGRF_ReadRegister>
 800b93c:	4603      	mov	r3, r0
 800b93e:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 800b940:	79fb      	ldrb	r3, [r7, #7]
 800b942:	f023 0301 	bic.w	r3, r3, #1
 800b946:	b2db      	uxtb	r3, r3
 800b948:	4619      	mov	r1, r3
 800b94a:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800b94e:	f000 fde1 	bl	800c514 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 800b952:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800b956:	f000 fdf1 	bl	800c53c <SUBGRF_ReadRegister>
 800b95a:	4603      	mov	r3, r0
 800b95c:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 800b95e:	79bb      	ldrb	r3, [r7, #6]
 800b960:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b964:	b2db      	uxtb	r3, r3
 800b966:	4619      	mov	r1, r3
 800b968:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800b96c:	f000 fdd2 	bl	800c514 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800b970:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800b974:	f000 f88a 	bl	800ba8c <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 800b978:	463b      	mov	r3, r7
 800b97a:	2204      	movs	r2, #4
 800b97c:	4619      	mov	r1, r3
 800b97e:	f640 0019 	movw	r0, #2073	; 0x819
 800b982:	f000 fe11 	bl	800c5a8 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 800b986:	2000      	movs	r0, #0
 800b988:	f000 f844 	bl	800ba14 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 800b98c:	79fb      	ldrb	r3, [r7, #7]
 800b98e:	4619      	mov	r1, r3
 800b990:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800b994:	f000 fdbe 	bl	800c514 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 800b998:	79bb      	ldrb	r3, [r7, #6]
 800b99a:	4619      	mov	r1, r3
 800b99c:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800b9a0:	f000 fdb8 	bl	800c514 <SUBGRF_WriteRegister>

    return number;
 800b9a4:	683b      	ldr	r3, [r7, #0]
}
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	3708      	adds	r7, #8
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd80      	pop	{r7, pc}
	...

0800b9b0 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b084      	sub	sp, #16
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 800b9b8:	2000      	movs	r0, #0
 800b9ba:	f001 f8a0 	bl	800cafe <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800b9be:	2002      	movs	r0, #2
 800b9c0:	f000 feff 	bl	800c7c2 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800b9c4:	793b      	ldrb	r3, [r7, #4]
 800b9c6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b9ca:	b2db      	uxtb	r3, r3
 800b9cc:	009b      	lsls	r3, r3, #2
 800b9ce:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800b9d0:	793b      	ldrb	r3, [r7, #4]
 800b9d2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800b9d6:	b2db      	uxtb	r3, r3
 800b9d8:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800b9da:	b25b      	sxtb	r3, r3
 800b9dc:	4313      	orrs	r3, r2
 800b9de:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 800b9e0:	793b      	ldrb	r3, [r7, #4]
 800b9e2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800b9e6:	b2db      	uxtb	r3, r3
 800b9e8:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800b9ea:	4313      	orrs	r3, r2
 800b9ec:	b25b      	sxtb	r3, r3
 800b9ee:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800b9f0:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 800b9f2:	f107 030f 	add.w	r3, r7, #15
 800b9f6:	2201      	movs	r2, #1
 800b9f8:	4619      	mov	r1, r3
 800b9fa:	2084      	movs	r0, #132	; 0x84
 800b9fc:	f000 fe3a 	bl	800c674 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 800ba00:	4b03      	ldr	r3, [pc, #12]	; (800ba10 <SUBGRF_SetSleep+0x60>)
 800ba02:	2200      	movs	r2, #0
 800ba04:	701a      	strb	r2, [r3, #0]
}
 800ba06:	bf00      	nop
 800ba08:	3710      	adds	r7, #16
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	bd80      	pop	{r7, pc}
 800ba0e:	bf00      	nop
 800ba10:	20000620 	.word	0x20000620

0800ba14 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b082      	sub	sp, #8
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 800ba1e:	1dfb      	adds	r3, r7, #7
 800ba20:	2201      	movs	r2, #1
 800ba22:	4619      	mov	r1, r3
 800ba24:	2080      	movs	r0, #128	; 0x80
 800ba26:	f000 fe25 	bl	800c674 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 800ba2a:	79fb      	ldrb	r3, [r7, #7]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d103      	bne.n	800ba38 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 800ba30:	4b05      	ldr	r3, [pc, #20]	; (800ba48 <SUBGRF_SetStandby+0x34>)
 800ba32:	2201      	movs	r2, #1
 800ba34:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 800ba36:	e002      	b.n	800ba3e <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 800ba38:	4b03      	ldr	r3, [pc, #12]	; (800ba48 <SUBGRF_SetStandby+0x34>)
 800ba3a:	2202      	movs	r2, #2
 800ba3c:	701a      	strb	r2, [r3, #0]
}
 800ba3e:	bf00      	nop
 800ba40:	3708      	adds	r7, #8
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bd80      	pop	{r7, pc}
 800ba46:	bf00      	nop
 800ba48:	20000620 	.word	0x20000620

0800ba4c <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b084      	sub	sp, #16
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 800ba54:	4b0c      	ldr	r3, [pc, #48]	; (800ba88 <SUBGRF_SetTx+0x3c>)
 800ba56:	2204      	movs	r2, #4
 800ba58:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	0c1b      	lsrs	r3, r3, #16
 800ba5e:	b2db      	uxtb	r3, r3
 800ba60:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	0a1b      	lsrs	r3, r3, #8
 800ba66:	b2db      	uxtb	r3, r3
 800ba68:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	b2db      	uxtb	r3, r3
 800ba6e:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 800ba70:	f107 030c 	add.w	r3, r7, #12
 800ba74:	2203      	movs	r2, #3
 800ba76:	4619      	mov	r1, r3
 800ba78:	2083      	movs	r0, #131	; 0x83
 800ba7a:	f000 fdfb 	bl	800c674 <SUBGRF_WriteCommand>
}
 800ba7e:	bf00      	nop
 800ba80:	3710      	adds	r7, #16
 800ba82:	46bd      	mov	sp, r7
 800ba84:	bd80      	pop	{r7, pc}
 800ba86:	bf00      	nop
 800ba88:	20000620 	.word	0x20000620

0800ba8c <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b084      	sub	sp, #16
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800ba94:	4b0c      	ldr	r3, [pc, #48]	; (800bac8 <SUBGRF_SetRx+0x3c>)
 800ba96:	2205      	movs	r2, #5
 800ba98:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	0c1b      	lsrs	r3, r3, #16
 800ba9e:	b2db      	uxtb	r3, r3
 800baa0:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	0a1b      	lsrs	r3, r3, #8
 800baa6:	b2db      	uxtb	r3, r3
 800baa8:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	b2db      	uxtb	r3, r3
 800baae:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800bab0:	f107 030c 	add.w	r3, r7, #12
 800bab4:	2203      	movs	r2, #3
 800bab6:	4619      	mov	r1, r3
 800bab8:	2082      	movs	r0, #130	; 0x82
 800baba:	f000 fddb 	bl	800c674 <SUBGRF_WriteCommand>
}
 800babe:	bf00      	nop
 800bac0:	3710      	adds	r7, #16
 800bac2:	46bd      	mov	sp, r7
 800bac4:	bd80      	pop	{r7, pc}
 800bac6:	bf00      	nop
 800bac8:	20000620 	.word	0x20000620

0800bacc <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b084      	sub	sp, #16
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800bad4:	4b0e      	ldr	r3, [pc, #56]	; (800bb10 <SUBGRF_SetRxBoosted+0x44>)
 800bad6:	2205      	movs	r2, #5
 800bad8:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 800bada:	2197      	movs	r1, #151	; 0x97
 800badc:	f640 00ac 	movw	r0, #2220	; 0x8ac
 800bae0:	f000 fd18 	bl	800c514 <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	0c1b      	lsrs	r3, r3, #16
 800bae8:	b2db      	uxtb	r3, r3
 800baea:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	0a1b      	lsrs	r3, r3, #8
 800baf0:	b2db      	uxtb	r3, r3
 800baf2:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	b2db      	uxtb	r3, r3
 800baf8:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800bafa:	f107 030c 	add.w	r3, r7, #12
 800bafe:	2203      	movs	r2, #3
 800bb00:	4619      	mov	r1, r3
 800bb02:	2082      	movs	r0, #130	; 0x82
 800bb04:	f000 fdb6 	bl	800c674 <SUBGRF_WriteCommand>
}
 800bb08:	bf00      	nop
 800bb0a:	3710      	adds	r7, #16
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	bd80      	pop	{r7, pc}
 800bb10:	20000620 	.word	0x20000620

0800bb14 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b084      	sub	sp, #16
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
 800bb1c:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	0c1b      	lsrs	r3, r3, #16
 800bb22:	b2db      	uxtb	r3, r3
 800bb24:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	0a1b      	lsrs	r3, r3, #8
 800bb2a:	b2db      	uxtb	r3, r3
 800bb2c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	b2db      	uxtb	r3, r3
 800bb32:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 800bb34:	683b      	ldr	r3, [r7, #0]
 800bb36:	0c1b      	lsrs	r3, r3, #16
 800bb38:	b2db      	uxtb	r3, r3
 800bb3a:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 800bb3c:	683b      	ldr	r3, [r7, #0]
 800bb3e:	0a1b      	lsrs	r3, r3, #8
 800bb40:	b2db      	uxtb	r3, r3
 800bb42:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	b2db      	uxtb	r3, r3
 800bb48:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 800bb4a:	f107 0308 	add.w	r3, r7, #8
 800bb4e:	2206      	movs	r2, #6
 800bb50:	4619      	mov	r1, r3
 800bb52:	2094      	movs	r0, #148	; 0x94
 800bb54:	f000 fd8e 	bl	800c674 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 800bb58:	4b03      	ldr	r3, [pc, #12]	; (800bb68 <SUBGRF_SetRxDutyCycle+0x54>)
 800bb5a:	2206      	movs	r2, #6
 800bb5c:	701a      	strb	r2, [r3, #0]
}
 800bb5e:	bf00      	nop
 800bb60:	3710      	adds	r7, #16
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bd80      	pop	{r7, pc}
 800bb66:	bf00      	nop
 800bb68:	20000620 	.word	0x20000620

0800bb6c <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 800bb70:	2200      	movs	r2, #0
 800bb72:	2100      	movs	r1, #0
 800bb74:	20c5      	movs	r0, #197	; 0xc5
 800bb76:	f000 fd7d 	bl	800c674 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 800bb7a:	4b02      	ldr	r3, [pc, #8]	; (800bb84 <SUBGRF_SetCad+0x18>)
 800bb7c:	2207      	movs	r2, #7
 800bb7e:	701a      	strb	r2, [r3, #0]
}
 800bb80:	bf00      	nop
 800bb82:	bd80      	pop	{r7, pc}
 800bb84:	20000620 	.word	0x20000620

0800bb88 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	2100      	movs	r1, #0
 800bb90:	20d1      	movs	r0, #209	; 0xd1
 800bb92:	f000 fd6f 	bl	800c674 <SUBGRF_WriteCommand>
}
 800bb96:	bf00      	nop
 800bb98:	bd80      	pop	{r7, pc}

0800bb9a <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 800bb9a:	b580      	push	{r7, lr}
 800bb9c:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 800bb9e:	2200      	movs	r2, #0
 800bba0:	2100      	movs	r1, #0
 800bba2:	20d2      	movs	r0, #210	; 0xd2
 800bba4:	f000 fd66 	bl	800c674 <SUBGRF_WriteCommand>
}
 800bba8:	bf00      	nop
 800bbaa:	bd80      	pop	{r7, pc}

0800bbac <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b082      	sub	sp, #8
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	4603      	mov	r3, r0
 800bbb4:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 800bbb6:	1dfb      	adds	r3, r7, #7
 800bbb8:	2201      	movs	r2, #1
 800bbba:	4619      	mov	r1, r3
 800bbbc:	209f      	movs	r0, #159	; 0x9f
 800bbbe:	f000 fd59 	bl	800c674 <SUBGRF_WriteCommand>
}
 800bbc2:	bf00      	nop
 800bbc4:	3708      	adds	r7, #8
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	bd80      	pop	{r7, pc}

0800bbca <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 800bbca:	b580      	push	{r7, lr}
 800bbcc:	b084      	sub	sp, #16
 800bbce:	af00      	add	r7, sp, #0
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 800bbd4:	1dfb      	adds	r3, r7, #7
 800bbd6:	2201      	movs	r2, #1
 800bbd8:	4619      	mov	r1, r3
 800bbda:	20a0      	movs	r0, #160	; 0xa0
 800bbdc:	f000 fd4a 	bl	800c674 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 800bbe0:	79fb      	ldrb	r3, [r7, #7]
 800bbe2:	2b3f      	cmp	r3, #63	; 0x3f
 800bbe4:	d91c      	bls.n	800bc20 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 800bbe6:	79fb      	ldrb	r3, [r7, #7]
 800bbe8:	085b      	lsrs	r3, r3, #1
 800bbea:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 800bbec:	2300      	movs	r3, #0
 800bbee:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 800bbf4:	e005      	b.n	800bc02 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 800bbf6:	7bfb      	ldrb	r3, [r7, #15]
 800bbf8:	089b      	lsrs	r3, r3, #2
 800bbfa:	73fb      	strb	r3, [r7, #15]
            exp++;
 800bbfc:	7bbb      	ldrb	r3, [r7, #14]
 800bbfe:	3301      	adds	r3, #1
 800bc00:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 800bc02:	7bfb      	ldrb	r3, [r7, #15]
 800bc04:	2b1f      	cmp	r3, #31
 800bc06:	d8f6      	bhi.n	800bbf6 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 800bc08:	7bfb      	ldrb	r3, [r7, #15]
 800bc0a:	00db      	lsls	r3, r3, #3
 800bc0c:	b2da      	uxtb	r2, r3
 800bc0e:	7bbb      	ldrb	r3, [r7, #14]
 800bc10:	4413      	add	r3, r2
 800bc12:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 800bc14:	7b7b      	ldrb	r3, [r7, #13]
 800bc16:	4619      	mov	r1, r3
 800bc18:	f240 7006 	movw	r0, #1798	; 0x706
 800bc1c:	f000 fc7a 	bl	800c514 <SUBGRF_WriteRegister>
    }
}
 800bc20:	bf00      	nop
 800bc22:	3710      	adds	r7, #16
 800bc24:	46bd      	mov	sp, r7
 800bc26:	bd80      	pop	{r7, pc}

0800bc28 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b082      	sub	sp, #8
 800bc2c:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 800bc2e:	f000 ff89 	bl	800cb44 <RBI_IsDCDC>
 800bc32:	4603      	mov	r3, r0
 800bc34:	2b01      	cmp	r3, #1
 800bc36:	d102      	bne.n	800bc3e <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 800bc38:	2301      	movs	r3, #1
 800bc3a:	71fb      	strb	r3, [r7, #7]
 800bc3c:	e001      	b.n	800bc42 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 800bc3e:	2300      	movs	r3, #0
 800bc40:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 800bc42:	1dfb      	adds	r3, r7, #7
 800bc44:	2201      	movs	r2, #1
 800bc46:	4619      	mov	r1, r3
 800bc48:	2096      	movs	r0, #150	; 0x96
 800bc4a:	f000 fd13 	bl	800c674 <SUBGRF_WriteCommand>
}
 800bc4e:	bf00      	nop
 800bc50:	3708      	adds	r7, #8
 800bc52:	46bd      	mov	sp, r7
 800bc54:	bd80      	pop	{r7, pc}

0800bc56 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 800bc56:	b580      	push	{r7, lr}
 800bc58:	b084      	sub	sp, #16
 800bc5a:	af00      	add	r7, sp, #0
 800bc5c:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800bc5e:	793b      	ldrb	r3, [r7, #4]
 800bc60:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800bc64:	b2db      	uxtb	r3, r3
 800bc66:	019b      	lsls	r3, r3, #6
 800bc68:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800bc6a:	793b      	ldrb	r3, [r7, #4]
 800bc6c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800bc70:	b2db      	uxtb	r3, r3
 800bc72:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800bc74:	b25b      	sxtb	r3, r3
 800bc76:	4313      	orrs	r3, r2
 800bc78:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800bc7a:	793b      	ldrb	r3, [r7, #4]
 800bc7c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800bc80:	b2db      	uxtb	r3, r3
 800bc82:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800bc84:	b25b      	sxtb	r3, r3
 800bc86:	4313      	orrs	r3, r2
 800bc88:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800bc8a:	793b      	ldrb	r3, [r7, #4]
 800bc8c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800bc90:	b2db      	uxtb	r3, r3
 800bc92:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800bc94:	b25b      	sxtb	r3, r3
 800bc96:	4313      	orrs	r3, r2
 800bc98:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800bc9a:	793b      	ldrb	r3, [r7, #4]
 800bc9c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800bca0:	b2db      	uxtb	r3, r3
 800bca2:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800bca4:	b25b      	sxtb	r3, r3
 800bca6:	4313      	orrs	r3, r2
 800bca8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800bcaa:	793b      	ldrb	r3, [r7, #4]
 800bcac:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800bcb0:	b2db      	uxtb	r3, r3
 800bcb2:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800bcb4:	b25b      	sxtb	r3, r3
 800bcb6:	4313      	orrs	r3, r2
 800bcb8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 800bcba:	793b      	ldrb	r3, [r7, #4]
 800bcbc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800bcc0:	b2db      	uxtb	r3, r3
 800bcc2:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800bcc4:	4313      	orrs	r3, r2
 800bcc6:	b25b      	sxtb	r3, r3
 800bcc8:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800bcca:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 800bccc:	f107 030f 	add.w	r3, r7, #15
 800bcd0:	2201      	movs	r2, #1
 800bcd2:	4619      	mov	r1, r3
 800bcd4:	2089      	movs	r0, #137	; 0x89
 800bcd6:	f000 fccd 	bl	800c674 <SUBGRF_WriteCommand>
}
 800bcda:	bf00      	nop
 800bcdc:	3710      	adds	r7, #16
 800bcde:	46bd      	mov	sp, r7
 800bce0:	bd80      	pop	{r7, pc}
	...

0800bce4 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b084      	sub	sp, #16
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	4a1b      	ldr	r2, [pc, #108]	; (800bd5c <SUBGRF_CalibrateImage+0x78>)
 800bcf0:	4293      	cmp	r3, r2
 800bcf2:	d904      	bls.n	800bcfe <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 800bcf4:	23e1      	movs	r3, #225	; 0xe1
 800bcf6:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 800bcf8:	23e9      	movs	r3, #233	; 0xe9
 800bcfa:	737b      	strb	r3, [r7, #13]
 800bcfc:	e022      	b.n	800bd44 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	4a17      	ldr	r2, [pc, #92]	; (800bd60 <SUBGRF_CalibrateImage+0x7c>)
 800bd02:	4293      	cmp	r3, r2
 800bd04:	d904      	bls.n	800bd10 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 800bd06:	23d7      	movs	r3, #215	; 0xd7
 800bd08:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 800bd0a:	23db      	movs	r3, #219	; 0xdb
 800bd0c:	737b      	strb	r3, [r7, #13]
 800bd0e:	e019      	b.n	800bd44 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	4a14      	ldr	r2, [pc, #80]	; (800bd64 <SUBGRF_CalibrateImage+0x80>)
 800bd14:	4293      	cmp	r3, r2
 800bd16:	d904      	bls.n	800bd22 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 800bd18:	23c1      	movs	r3, #193	; 0xc1
 800bd1a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 800bd1c:	23c5      	movs	r3, #197	; 0xc5
 800bd1e:	737b      	strb	r3, [r7, #13]
 800bd20:	e010      	b.n	800bd44 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	4a10      	ldr	r2, [pc, #64]	; (800bd68 <SUBGRF_CalibrateImage+0x84>)
 800bd26:	4293      	cmp	r3, r2
 800bd28:	d904      	bls.n	800bd34 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 800bd2a:	2375      	movs	r3, #117	; 0x75
 800bd2c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 800bd2e:	2381      	movs	r3, #129	; 0x81
 800bd30:	737b      	strb	r3, [r7, #13]
 800bd32:	e007      	b.n	800bd44 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	4a0d      	ldr	r2, [pc, #52]	; (800bd6c <SUBGRF_CalibrateImage+0x88>)
 800bd38:	4293      	cmp	r3, r2
 800bd3a:	d903      	bls.n	800bd44 <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 800bd3c:	236b      	movs	r3, #107	; 0x6b
 800bd3e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 800bd40:	236f      	movs	r3, #111	; 0x6f
 800bd42:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 800bd44:	f107 030c 	add.w	r3, r7, #12
 800bd48:	2202      	movs	r2, #2
 800bd4a:	4619      	mov	r1, r3
 800bd4c:	2098      	movs	r0, #152	; 0x98
 800bd4e:	f000 fc91 	bl	800c674 <SUBGRF_WriteCommand>
}
 800bd52:	bf00      	nop
 800bd54:	3710      	adds	r7, #16
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bd80      	pop	{r7, pc}
 800bd5a:	bf00      	nop
 800bd5c:	35a4e900 	.word	0x35a4e900
 800bd60:	32a9f880 	.word	0x32a9f880
 800bd64:	2de54480 	.word	0x2de54480
 800bd68:	1b6b0b00 	.word	0x1b6b0b00
 800bd6c:	1954fc40 	.word	0x1954fc40

0800bd70 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 800bd70:	b590      	push	{r4, r7, lr}
 800bd72:	b085      	sub	sp, #20
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	4604      	mov	r4, r0
 800bd78:	4608      	mov	r0, r1
 800bd7a:	4611      	mov	r1, r2
 800bd7c:	461a      	mov	r2, r3
 800bd7e:	4623      	mov	r3, r4
 800bd80:	71fb      	strb	r3, [r7, #7]
 800bd82:	4603      	mov	r3, r0
 800bd84:	71bb      	strb	r3, [r7, #6]
 800bd86:	460b      	mov	r3, r1
 800bd88:	717b      	strb	r3, [r7, #5]
 800bd8a:	4613      	mov	r3, r2
 800bd8c:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 800bd8e:	79fb      	ldrb	r3, [r7, #7]
 800bd90:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 800bd92:	79bb      	ldrb	r3, [r7, #6]
 800bd94:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 800bd96:	797b      	ldrb	r3, [r7, #5]
 800bd98:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 800bd9a:	793b      	ldrb	r3, [r7, #4]
 800bd9c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800bd9e:	f107 030c 	add.w	r3, r7, #12
 800bda2:	2204      	movs	r2, #4
 800bda4:	4619      	mov	r1, r3
 800bda6:	2095      	movs	r0, #149	; 0x95
 800bda8:	f000 fc64 	bl	800c674 <SUBGRF_WriteCommand>
}
 800bdac:	bf00      	nop
 800bdae:	3714      	adds	r7, #20
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	bd90      	pop	{r4, r7, pc}

0800bdb4 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 800bdb4:	b590      	push	{r4, r7, lr}
 800bdb6:	b085      	sub	sp, #20
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	4604      	mov	r4, r0
 800bdbc:	4608      	mov	r0, r1
 800bdbe:	4611      	mov	r1, r2
 800bdc0:	461a      	mov	r2, r3
 800bdc2:	4623      	mov	r3, r4
 800bdc4:	80fb      	strh	r3, [r7, #6]
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	80bb      	strh	r3, [r7, #4]
 800bdca:	460b      	mov	r3, r1
 800bdcc:	807b      	strh	r3, [r7, #2]
 800bdce:	4613      	mov	r3, r2
 800bdd0:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800bdd2:	88fb      	ldrh	r3, [r7, #6]
 800bdd4:	0a1b      	lsrs	r3, r3, #8
 800bdd6:	b29b      	uxth	r3, r3
 800bdd8:	b2db      	uxtb	r3, r3
 800bdda:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 800bddc:	88fb      	ldrh	r3, [r7, #6]
 800bdde:	b2db      	uxtb	r3, r3
 800bde0:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800bde2:	88bb      	ldrh	r3, [r7, #4]
 800bde4:	0a1b      	lsrs	r3, r3, #8
 800bde6:	b29b      	uxth	r3, r3
 800bde8:	b2db      	uxtb	r3, r3
 800bdea:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 800bdec:	88bb      	ldrh	r3, [r7, #4]
 800bdee:	b2db      	uxtb	r3, r3
 800bdf0:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800bdf2:	887b      	ldrh	r3, [r7, #2]
 800bdf4:	0a1b      	lsrs	r3, r3, #8
 800bdf6:	b29b      	uxth	r3, r3
 800bdf8:	b2db      	uxtb	r3, r3
 800bdfa:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 800bdfc:	887b      	ldrh	r3, [r7, #2]
 800bdfe:	b2db      	uxtb	r3, r3
 800be00:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800be02:	883b      	ldrh	r3, [r7, #0]
 800be04:	0a1b      	lsrs	r3, r3, #8
 800be06:	b29b      	uxth	r3, r3
 800be08:	b2db      	uxtb	r3, r3
 800be0a:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 800be0c:	883b      	ldrh	r3, [r7, #0]
 800be0e:	b2db      	uxtb	r3, r3
 800be10:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800be12:	f107 0308 	add.w	r3, r7, #8
 800be16:	2208      	movs	r2, #8
 800be18:	4619      	mov	r1, r3
 800be1a:	2008      	movs	r0, #8
 800be1c:	f000 fc2a 	bl	800c674 <SUBGRF_WriteCommand>
}
 800be20:	bf00      	nop
 800be22:	3714      	adds	r7, #20
 800be24:	46bd      	mov	sp, r7
 800be26:	bd90      	pop	{r4, r7, pc}

0800be28 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b084      	sub	sp, #16
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	4603      	mov	r3, r0
 800be30:	6039      	str	r1, [r7, #0]
 800be32:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 800be34:	79fb      	ldrb	r3, [r7, #7]
 800be36:	f003 0307 	and.w	r3, r3, #7
 800be3a:	b2db      	uxtb	r3, r3
 800be3c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	0c1b      	lsrs	r3, r3, #16
 800be42:	b2db      	uxtb	r3, r3
 800be44:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800be46:	683b      	ldr	r3, [r7, #0]
 800be48:	0a1b      	lsrs	r3, r3, #8
 800be4a:	b2db      	uxtb	r3, r3
 800be4c:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	b2db      	uxtb	r3, r3
 800be52:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 800be54:	f107 030c 	add.w	r3, r7, #12
 800be58:	2204      	movs	r2, #4
 800be5a:	4619      	mov	r1, r3
 800be5c:	2097      	movs	r0, #151	; 0x97
 800be5e:	f000 fc09 	bl	800c674 <SUBGRF_WriteCommand>
}
 800be62:	bf00      	nop
 800be64:	3710      	adds	r7, #16
 800be66:	46bd      	mov	sp, r7
 800be68:	bd80      	pop	{r7, pc}
	...

0800be6c <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 800be6c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800be70:	b084      	sub	sp, #16
 800be72:	af00      	add	r7, sp, #0
 800be74:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 800be76:	2300      	movs	r3, #0
 800be78:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 800be7a:	4b1d      	ldr	r3, [pc, #116]	; (800bef0 <SUBGRF_SetRfFrequency+0x84>)
 800be7c:	781b      	ldrb	r3, [r3, #0]
 800be7e:	f083 0301 	eor.w	r3, r3, #1
 800be82:	b2db      	uxtb	r3, r3
 800be84:	2b00      	cmp	r3, #0
 800be86:	d005      	beq.n	800be94 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 800be88:	6878      	ldr	r0, [r7, #4]
 800be8a:	f7ff ff2b 	bl	800bce4 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 800be8e:	4b18      	ldr	r3, [pc, #96]	; (800bef0 <SUBGRF_SetRfFrequency+0x84>)
 800be90:	2201      	movs	r2, #1
 800be92:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	2200      	movs	r2, #0
 800be98:	461c      	mov	r4, r3
 800be9a:	4615      	mov	r5, r2
 800be9c:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800bea0:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800bea4:	4a13      	ldr	r2, [pc, #76]	; (800bef4 <SUBGRF_SetRfFrequency+0x88>)
 800bea6:	f04f 0300 	mov.w	r3, #0
 800beaa:	4640      	mov	r0, r8
 800beac:	4649      	mov	r1, r9
 800beae:	f7f5 f995 	bl	80011dc <__aeabi_uldivmod>
 800beb2:	4602      	mov	r2, r0
 800beb4:	460b      	mov	r3, r1
 800beb6:	4613      	mov	r3, r2
 800beb8:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	0e1b      	lsrs	r3, r3, #24
 800bebe:	b2db      	uxtb	r3, r3
 800bec0:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	0c1b      	lsrs	r3, r3, #16
 800bec6:	b2db      	uxtb	r3, r3
 800bec8:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	0a1b      	lsrs	r3, r3, #8
 800bece:	b2db      	uxtb	r3, r3
 800bed0:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	b2db      	uxtb	r3, r3
 800bed6:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800bed8:	f107 0308 	add.w	r3, r7, #8
 800bedc:	2204      	movs	r2, #4
 800bede:	4619      	mov	r1, r3
 800bee0:	2086      	movs	r0, #134	; 0x86
 800bee2:	f000 fbc7 	bl	800c674 <SUBGRF_WriteCommand>
}
 800bee6:	bf00      	nop
 800bee8:	3710      	adds	r7, #16
 800beea:	46bd      	mov	sp, r7
 800beec:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800bef0:	20000628 	.word	0x20000628
 800bef4:	01e84800 	.word	0x01e84800

0800bef8 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b082      	sub	sp, #8
 800befc:	af00      	add	r7, sp, #0
 800befe:	4603      	mov	r3, r0
 800bf00:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 800bf02:	79fa      	ldrb	r2, [r7, #7]
 800bf04:	4b09      	ldr	r3, [pc, #36]	; (800bf2c <SUBGRF_SetPacketType+0x34>)
 800bf06:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 800bf08:	79fb      	ldrb	r3, [r7, #7]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d104      	bne.n	800bf18 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 800bf0e:	2100      	movs	r1, #0
 800bf10:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800bf14:	f000 fafe 	bl	800c514 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 800bf18:	1dfb      	adds	r3, r7, #7
 800bf1a:	2201      	movs	r2, #1
 800bf1c:	4619      	mov	r1, r3
 800bf1e:	208a      	movs	r0, #138	; 0x8a
 800bf20:	f000 fba8 	bl	800c674 <SUBGRF_WriteCommand>
}
 800bf24:	bf00      	nop
 800bf26:	3708      	adds	r7, #8
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	bd80      	pop	{r7, pc}
 800bf2c:	20000621 	.word	0x20000621

0800bf30 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 800bf30:	b480      	push	{r7}
 800bf32:	af00      	add	r7, sp, #0
    return PacketType;
 800bf34:	4b02      	ldr	r3, [pc, #8]	; (800bf40 <SUBGRF_GetPacketType+0x10>)
 800bf36:	781b      	ldrb	r3, [r3, #0]
}
 800bf38:	4618      	mov	r0, r3
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	bc80      	pop	{r7}
 800bf3e:	4770      	bx	lr
 800bf40:	20000621 	.word	0x20000621

0800bf44 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b084      	sub	sp, #16
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	4603      	mov	r3, r0
 800bf4c:	71fb      	strb	r3, [r7, #7]
 800bf4e:	460b      	mov	r3, r1
 800bf50:	71bb      	strb	r3, [r7, #6]
 800bf52:	4613      	mov	r3, r2
 800bf54:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 800bf56:	79fb      	ldrb	r3, [r7, #7]
 800bf58:	2b01      	cmp	r3, #1
 800bf5a:	d149      	bne.n	800bff0 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 800bf5c:	2000      	movs	r0, #0
 800bf5e:	f000 fdfc 	bl	800cb5a <RBI_GetRFOMaxPowerConfig>
 800bf62:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 800bf64:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800bf68:	68fa      	ldr	r2, [r7, #12]
 800bf6a:	429a      	cmp	r2, r3
 800bf6c:	da01      	bge.n	800bf72 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	2b0e      	cmp	r3, #14
 800bf76:	d10e      	bne.n	800bf96 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 800bf78:	2301      	movs	r3, #1
 800bf7a:	2201      	movs	r2, #1
 800bf7c:	2100      	movs	r1, #0
 800bf7e:	2004      	movs	r0, #4
 800bf80:	f7ff fef6 	bl	800bd70 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800bf84:	79ba      	ldrb	r2, [r7, #6]
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	b2db      	uxtb	r3, r3
 800bf8a:	1ad3      	subs	r3, r2, r3
 800bf8c:	b2db      	uxtb	r3, r3
 800bf8e:	330e      	adds	r3, #14
 800bf90:	b2db      	uxtb	r3, r3
 800bf92:	71bb      	strb	r3, [r7, #6]
 800bf94:	e01f      	b.n	800bfd6 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	2b0a      	cmp	r3, #10
 800bf9a:	d10e      	bne.n	800bfba <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 800bf9c:	2301      	movs	r3, #1
 800bf9e:	2201      	movs	r2, #1
 800bfa0:	2100      	movs	r1, #0
 800bfa2:	2001      	movs	r0, #1
 800bfa4:	f7ff fee4 	bl	800bd70 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 800bfa8:	79ba      	ldrb	r2, [r7, #6]
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	b2db      	uxtb	r3, r3
 800bfae:	1ad3      	subs	r3, r2, r3
 800bfb0:	b2db      	uxtb	r3, r3
 800bfb2:	330d      	adds	r3, #13
 800bfb4:	b2db      	uxtb	r3, r3
 800bfb6:	71bb      	strb	r3, [r7, #6]
 800bfb8:	e00d      	b.n	800bfd6 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x06, 0x00, 0x01, 0x01);
 800bfba:	2301      	movs	r3, #1
 800bfbc:	2201      	movs	r2, #1
 800bfbe:	2100      	movs	r1, #0
 800bfc0:	2006      	movs	r0, #6
 800bfc2:	f7ff fed5 	bl	800bd70 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800bfc6:	79ba      	ldrb	r2, [r7, #6]
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	b2db      	uxtb	r3, r3
 800bfcc:	1ad3      	subs	r3, r2, r3
 800bfce:	b2db      	uxtb	r3, r3
 800bfd0:	330e      	adds	r3, #14
 800bfd2:	b2db      	uxtb	r3, r3
 800bfd4:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 800bfd6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800bfda:	f113 0f11 	cmn.w	r3, #17
 800bfde:	da01      	bge.n	800bfe4 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 800bfe0:	23ef      	movs	r3, #239	; 0xef
 800bfe2:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 800bfe4:	2118      	movs	r1, #24
 800bfe6:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800bfea:	f000 fa93 	bl	800c514 <SUBGRF_WriteRegister>
 800bfee:	e067      	b.n	800c0c0 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 800bff0:	f640 00d8 	movw	r0, #2264	; 0x8d8
 800bff4:	f000 faa2 	bl	800c53c <SUBGRF_ReadRegister>
 800bff8:	4603      	mov	r3, r0
 800bffa:	f043 031e 	orr.w	r3, r3, #30
 800bffe:	b2db      	uxtb	r3, r3
 800c000:	4619      	mov	r1, r3
 800c002:	f640 00d8 	movw	r0, #2264	; 0x8d8
 800c006:	f000 fa85 	bl	800c514 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 800c00a:	2001      	movs	r0, #1
 800c00c:	f000 fda5 	bl	800cb5a <RBI_GetRFOMaxPowerConfig>
 800c010:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 800c012:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800c016:	68fa      	ldr	r2, [r7, #12]
 800c018:	429a      	cmp	r2, r3
 800c01a:	da01      	bge.n	800c020 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	2b14      	cmp	r3, #20
 800c024:	d10e      	bne.n	800c044 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 800c026:	2301      	movs	r3, #1
 800c028:	2200      	movs	r2, #0
 800c02a:	2105      	movs	r1, #5
 800c02c:	2003      	movs	r0, #3
 800c02e:	f7ff fe9f 	bl	800bd70 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800c032:	79ba      	ldrb	r2, [r7, #6]
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	b2db      	uxtb	r3, r3
 800c038:	1ad3      	subs	r3, r2, r3
 800c03a:	b2db      	uxtb	r3, r3
 800c03c:	3316      	adds	r3, #22
 800c03e:	b2db      	uxtb	r3, r3
 800c040:	71bb      	strb	r3, [r7, #6]
 800c042:	e031      	b.n	800c0a8 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	2b11      	cmp	r3, #17
 800c048:	d10e      	bne.n	800c068 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 800c04a:	2301      	movs	r3, #1
 800c04c:	2200      	movs	r2, #0
 800c04e:	2103      	movs	r1, #3
 800c050:	2002      	movs	r0, #2
 800c052:	f7ff fe8d 	bl	800bd70 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800c056:	79ba      	ldrb	r2, [r7, #6]
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	b2db      	uxtb	r3, r3
 800c05c:	1ad3      	subs	r3, r2, r3
 800c05e:	b2db      	uxtb	r3, r3
 800c060:	3316      	adds	r3, #22
 800c062:	b2db      	uxtb	r3, r3
 800c064:	71bb      	strb	r3, [r7, #6]
 800c066:	e01f      	b.n	800c0a8 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	2b0e      	cmp	r3, #14
 800c06c:	d10e      	bne.n	800c08c <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 800c06e:	2301      	movs	r3, #1
 800c070:	2200      	movs	r2, #0
 800c072:	2102      	movs	r1, #2
 800c074:	2002      	movs	r0, #2
 800c076:	f7ff fe7b 	bl	800bd70 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800c07a:	79ba      	ldrb	r2, [r7, #6]
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	b2db      	uxtb	r3, r3
 800c080:	1ad3      	subs	r3, r2, r3
 800c082:	b2db      	uxtb	r3, r3
 800c084:	330e      	adds	r3, #14
 800c086:	b2db      	uxtb	r3, r3
 800c088:	71bb      	strb	r3, [r7, #6]
 800c08a:	e00d      	b.n	800c0a8 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 800c08c:	2301      	movs	r3, #1
 800c08e:	2200      	movs	r2, #0
 800c090:	2107      	movs	r1, #7
 800c092:	2004      	movs	r0, #4
 800c094:	f7ff fe6c 	bl	800bd70 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800c098:	79ba      	ldrb	r2, [r7, #6]
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	b2db      	uxtb	r3, r3
 800c09e:	1ad3      	subs	r3, r2, r3
 800c0a0:	b2db      	uxtb	r3, r3
 800c0a2:	3316      	adds	r3, #22
 800c0a4:	b2db      	uxtb	r3, r3
 800c0a6:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 800c0a8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800c0ac:	f113 0f09 	cmn.w	r3, #9
 800c0b0:	da01      	bge.n	800c0b6 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 800c0b2:	23f7      	movs	r3, #247	; 0xf7
 800c0b4:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 800c0b6:	2138      	movs	r1, #56	; 0x38
 800c0b8:	f640 00e7 	movw	r0, #2279	; 0x8e7
 800c0bc:	f000 fa2a 	bl	800c514 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 800c0c0:	79bb      	ldrb	r3, [r7, #6]
 800c0c2:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 800c0c4:	797b      	ldrb	r3, [r7, #5]
 800c0c6:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 800c0c8:	f107 0308 	add.w	r3, r7, #8
 800c0cc:	2202      	movs	r2, #2
 800c0ce:	4619      	mov	r1, r3
 800c0d0:	208e      	movs	r0, #142	; 0x8e
 800c0d2:	f000 facf 	bl	800c674 <SUBGRF_WriteCommand>
}
 800c0d6:	bf00      	nop
 800c0d8:	3710      	adds	r7, #16
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	bd80      	pop	{r7, pc}
	...

0800c0e0 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 800c0e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800c0e4:	b086      	sub	sp, #24
 800c0e6:	af00      	add	r7, sp, #0
 800c0e8:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800c0ee:	4a61      	ldr	r2, [pc, #388]	; (800c274 <SUBGRF_SetModulationParams+0x194>)
 800c0f0:	f107 0308 	add.w	r3, r7, #8
 800c0f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c0f8:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	781a      	ldrb	r2, [r3, #0]
 800c100:	4b5d      	ldr	r3, [pc, #372]	; (800c278 <SUBGRF_SetModulationParams+0x198>)
 800c102:	781b      	ldrb	r3, [r3, #0]
 800c104:	429a      	cmp	r2, r3
 800c106:	d004      	beq.n	800c112 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	781b      	ldrb	r3, [r3, #0]
 800c10c:	4618      	mov	r0, r3
 800c10e:	f7ff fef3 	bl	800bef8 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	781b      	ldrb	r3, [r3, #0]
 800c116:	2b03      	cmp	r3, #3
 800c118:	f200 80a5 	bhi.w	800c266 <SUBGRF_SetModulationParams+0x186>
 800c11c:	a201      	add	r2, pc, #4	; (adr r2, 800c124 <SUBGRF_SetModulationParams+0x44>)
 800c11e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c122:	bf00      	nop
 800c124:	0800c135 	.word	0x0800c135
 800c128:	0800c1f5 	.word	0x0800c1f5
 800c12c:	0800c1b7 	.word	0x0800c1b7
 800c130:	0800c223 	.word	0x0800c223
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 800c134:	2308      	movs	r3, #8
 800c136:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	685b      	ldr	r3, [r3, #4]
 800c13c:	4a4f      	ldr	r2, [pc, #316]	; (800c27c <SUBGRF_SetModulationParams+0x19c>)
 800c13e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c142:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800c144:	697b      	ldr	r3, [r7, #20]
 800c146:	0c1b      	lsrs	r3, r3, #16
 800c148:	b2db      	uxtb	r3, r3
 800c14a:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800c14c:	697b      	ldr	r3, [r7, #20]
 800c14e:	0a1b      	lsrs	r3, r3, #8
 800c150:	b2db      	uxtb	r3, r3
 800c152:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800c154:	697b      	ldr	r3, [r7, #20]
 800c156:	b2db      	uxtb	r3, r3
 800c158:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	7b1b      	ldrb	r3, [r3, #12]
 800c15e:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	7b5b      	ldrb	r3, [r3, #13]
 800c164:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	689b      	ldr	r3, [r3, #8]
 800c16a:	2200      	movs	r2, #0
 800c16c:	461c      	mov	r4, r3
 800c16e:	4615      	mov	r5, r2
 800c170:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 800c174:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800c178:	4a41      	ldr	r2, [pc, #260]	; (800c280 <SUBGRF_SetModulationParams+0x1a0>)
 800c17a:	f04f 0300 	mov.w	r3, #0
 800c17e:	4640      	mov	r0, r8
 800c180:	4649      	mov	r1, r9
 800c182:	f7f5 f82b 	bl	80011dc <__aeabi_uldivmod>
 800c186:	4602      	mov	r2, r0
 800c188:	460b      	mov	r3, r1
 800c18a:	4613      	mov	r3, r2
 800c18c:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 800c18e:	697b      	ldr	r3, [r7, #20]
 800c190:	0c1b      	lsrs	r3, r3, #16
 800c192:	b2db      	uxtb	r3, r3
 800c194:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 800c196:	697b      	ldr	r3, [r7, #20]
 800c198:	0a1b      	lsrs	r3, r3, #8
 800c19a:	b2db      	uxtb	r3, r3
 800c19c:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 800c19e:	697b      	ldr	r3, [r7, #20]
 800c1a0:	b2db      	uxtb	r3, r3
 800c1a2:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800c1a4:	7cfb      	ldrb	r3, [r7, #19]
 800c1a6:	b29a      	uxth	r2, r3
 800c1a8:	f107 0308 	add.w	r3, r7, #8
 800c1ac:	4619      	mov	r1, r3
 800c1ae:	208b      	movs	r0, #139	; 0x8b
 800c1b0:	f000 fa60 	bl	800c674 <SUBGRF_WriteCommand>
        break;
 800c1b4:	e058      	b.n	800c268 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 800c1b6:	2304      	movs	r3, #4
 800c1b8:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	691b      	ldr	r3, [r3, #16]
 800c1be:	4a2f      	ldr	r2, [pc, #188]	; (800c27c <SUBGRF_SetModulationParams+0x19c>)
 800c1c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1c4:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800c1c6:	697b      	ldr	r3, [r7, #20]
 800c1c8:	0c1b      	lsrs	r3, r3, #16
 800c1ca:	b2db      	uxtb	r3, r3
 800c1cc:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800c1ce:	697b      	ldr	r3, [r7, #20]
 800c1d0:	0a1b      	lsrs	r3, r3, #8
 800c1d2:	b2db      	uxtb	r3, r3
 800c1d4:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800c1d6:	697b      	ldr	r3, [r7, #20]
 800c1d8:	b2db      	uxtb	r3, r3
 800c1da:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	7d1b      	ldrb	r3, [r3, #20]
 800c1e0:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800c1e2:	7cfb      	ldrb	r3, [r7, #19]
 800c1e4:	b29a      	uxth	r2, r3
 800c1e6:	f107 0308 	add.w	r3, r7, #8
 800c1ea:	4619      	mov	r1, r3
 800c1ec:	208b      	movs	r0, #139	; 0x8b
 800c1ee:	f000 fa41 	bl	800c674 <SUBGRF_WriteCommand>
        break;
 800c1f2:	e039      	b.n	800c268 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 800c1f4:	2304      	movs	r3, #4
 800c1f6:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	7e1b      	ldrb	r3, [r3, #24]
 800c1fc:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	7e5b      	ldrb	r3, [r3, #25]
 800c202:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	7e9b      	ldrb	r3, [r3, #26]
 800c208:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	7edb      	ldrb	r3, [r3, #27]
 800c20e:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800c210:	7cfb      	ldrb	r3, [r7, #19]
 800c212:	b29a      	uxth	r2, r3
 800c214:	f107 0308 	add.w	r3, r7, #8
 800c218:	4619      	mov	r1, r3
 800c21a:	208b      	movs	r0, #139	; 0x8b
 800c21c:	f000 fa2a 	bl	800c674 <SUBGRF_WriteCommand>

        break;
 800c220:	e022      	b.n	800c268 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 800c222:	2305      	movs	r3, #5
 800c224:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	685b      	ldr	r3, [r3, #4]
 800c22a:	4a14      	ldr	r2, [pc, #80]	; (800c27c <SUBGRF_SetModulationParams+0x19c>)
 800c22c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c230:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800c232:	697b      	ldr	r3, [r7, #20]
 800c234:	0c1b      	lsrs	r3, r3, #16
 800c236:	b2db      	uxtb	r3, r3
 800c238:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800c23a:	697b      	ldr	r3, [r7, #20]
 800c23c:	0a1b      	lsrs	r3, r3, #8
 800c23e:	b2db      	uxtb	r3, r3
 800c240:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800c242:	697b      	ldr	r3, [r7, #20]
 800c244:	b2db      	uxtb	r3, r3
 800c246:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	7b1b      	ldrb	r3, [r3, #12]
 800c24c:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	7b5b      	ldrb	r3, [r3, #13]
 800c252:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800c254:	7cfb      	ldrb	r3, [r7, #19]
 800c256:	b29a      	uxth	r2, r3
 800c258:	f107 0308 	add.w	r3, r7, #8
 800c25c:	4619      	mov	r1, r3
 800c25e:	208b      	movs	r0, #139	; 0x8b
 800c260:	f000 fa08 	bl	800c674 <SUBGRF_WriteCommand>
        break;
 800c264:	e000      	b.n	800c268 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 800c266:	bf00      	nop
    }
}
 800c268:	bf00      	nop
 800c26a:	3718      	adds	r7, #24
 800c26c:	46bd      	mov	sp, r7
 800c26e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800c272:	bf00      	nop
 800c274:	08010790 	.word	0x08010790
 800c278:	20000621 	.word	0x20000621
 800c27c:	3d090000 	.word	0x3d090000
 800c280:	01e84800 	.word	0x01e84800

0800c284 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b086      	sub	sp, #24
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 800c28c:	2300      	movs	r3, #0
 800c28e:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800c290:	4a48      	ldr	r2, [pc, #288]	; (800c3b4 <SUBGRF_SetPacketParams+0x130>)
 800c292:	f107 030c 	add.w	r3, r7, #12
 800c296:	ca07      	ldmia	r2, {r0, r1, r2}
 800c298:	c303      	stmia	r3!, {r0, r1}
 800c29a:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	781a      	ldrb	r2, [r3, #0]
 800c2a0:	4b45      	ldr	r3, [pc, #276]	; (800c3b8 <SUBGRF_SetPacketParams+0x134>)
 800c2a2:	781b      	ldrb	r3, [r3, #0]
 800c2a4:	429a      	cmp	r2, r3
 800c2a6:	d004      	beq.n	800c2b2 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	781b      	ldrb	r3, [r3, #0]
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	f7ff fe23 	bl	800bef8 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	781b      	ldrb	r3, [r3, #0]
 800c2b6:	2b03      	cmp	r3, #3
 800c2b8:	d878      	bhi.n	800c3ac <SUBGRF_SetPacketParams+0x128>
 800c2ba:	a201      	add	r2, pc, #4	; (adr r2, 800c2c0 <SUBGRF_SetPacketParams+0x3c>)
 800c2bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2c0:	0800c2d1 	.word	0x0800c2d1
 800c2c4:	0800c361 	.word	0x0800c361
 800c2c8:	0800c355 	.word	0x0800c355
 800c2cc:	0800c2d1 	.word	0x0800c2d1
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	7a5b      	ldrb	r3, [r3, #9]
 800c2d4:	2bf1      	cmp	r3, #241	; 0xf1
 800c2d6:	d10a      	bne.n	800c2ee <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 800c2d8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800c2dc:	f7ff faae 	bl	800b83c <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 800c2e0:	f248 0005 	movw	r0, #32773	; 0x8005
 800c2e4:	f7ff faca 	bl	800b87c <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 800c2e8:	2302      	movs	r3, #2
 800c2ea:	75bb      	strb	r3, [r7, #22]
 800c2ec:	e011      	b.n	800c312 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	7a5b      	ldrb	r3, [r3, #9]
 800c2f2:	2bf2      	cmp	r3, #242	; 0xf2
 800c2f4:	d10a      	bne.n	800c30c <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 800c2f6:	f641 500f 	movw	r0, #7439	; 0x1d0f
 800c2fa:	f7ff fa9f 	bl	800b83c <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 800c2fe:	f241 0021 	movw	r0, #4129	; 0x1021
 800c302:	f7ff fabb 	bl	800b87c <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 800c306:	2306      	movs	r3, #6
 800c308:	75bb      	strb	r3, [r7, #22]
 800c30a:	e002      	b.n	800c312 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	7a5b      	ldrb	r3, [r3, #9]
 800c310:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 800c312:	2309      	movs	r3, #9
 800c314:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	885b      	ldrh	r3, [r3, #2]
 800c31a:	0a1b      	lsrs	r3, r3, #8
 800c31c:	b29b      	uxth	r3, r3
 800c31e:	b2db      	uxtb	r3, r3
 800c320:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	885b      	ldrh	r3, [r3, #2]
 800c326:	b2db      	uxtb	r3, r3
 800c328:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	791b      	ldrb	r3, [r3, #4]
 800c32e:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	795b      	ldrb	r3, [r3, #5]
 800c334:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	799b      	ldrb	r3, [r3, #6]
 800c33a:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	79db      	ldrb	r3, [r3, #7]
 800c340:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	7a1b      	ldrb	r3, [r3, #8]
 800c346:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 800c348:	7dbb      	ldrb	r3, [r7, #22]
 800c34a:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	7a9b      	ldrb	r3, [r3, #10]
 800c350:	753b      	strb	r3, [r7, #20]
        break;
 800c352:	e022      	b.n	800c39a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 800c354:	2301      	movs	r3, #1
 800c356:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	7b1b      	ldrb	r3, [r3, #12]
 800c35c:	733b      	strb	r3, [r7, #12]
        break;
 800c35e:	e01c      	b.n	800c39a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 800c360:	2306      	movs	r3, #6
 800c362:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	89db      	ldrh	r3, [r3, #14]
 800c368:	0a1b      	lsrs	r3, r3, #8
 800c36a:	b29b      	uxth	r3, r3
 800c36c:	b2db      	uxtb	r3, r3
 800c36e:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	89db      	ldrh	r3, [r3, #14]
 800c374:	b2db      	uxtb	r3, r3
 800c376:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	7c1a      	ldrb	r2, [r3, #16]
 800c37c:	4b0f      	ldr	r3, [pc, #60]	; (800c3bc <SUBGRF_SetPacketParams+0x138>)
 800c37e:	4611      	mov	r1, r2
 800c380:	7019      	strb	r1, [r3, #0]
 800c382:	4613      	mov	r3, r2
 800c384:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	7c5b      	ldrb	r3, [r3, #17]
 800c38a:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	7c9b      	ldrb	r3, [r3, #18]
 800c390:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	7cdb      	ldrb	r3, [r3, #19]
 800c396:	747b      	strb	r3, [r7, #17]
        break;
 800c398:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 800c39a:	7dfb      	ldrb	r3, [r7, #23]
 800c39c:	b29a      	uxth	r2, r3
 800c39e:	f107 030c 	add.w	r3, r7, #12
 800c3a2:	4619      	mov	r1, r3
 800c3a4:	208c      	movs	r0, #140	; 0x8c
 800c3a6:	f000 f965 	bl	800c674 <SUBGRF_WriteCommand>
 800c3aa:	e000      	b.n	800c3ae <SUBGRF_SetPacketParams+0x12a>
        return;
 800c3ac:	bf00      	nop
}
 800c3ae:	3718      	adds	r7, #24
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	bd80      	pop	{r7, pc}
 800c3b4:	08010798 	.word	0x08010798
 800c3b8:	20000621 	.word	0x20000621
 800c3bc:	20000622 	.word	0x20000622

0800c3c0 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b084      	sub	sp, #16
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	4603      	mov	r3, r0
 800c3c8:	460a      	mov	r2, r1
 800c3ca:	71fb      	strb	r3, [r7, #7]
 800c3cc:	4613      	mov	r3, r2
 800c3ce:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 800c3d0:	79fb      	ldrb	r3, [r7, #7]
 800c3d2:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 800c3d4:	79bb      	ldrb	r3, [r7, #6]
 800c3d6:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 800c3d8:	f107 030c 	add.w	r3, r7, #12
 800c3dc:	2202      	movs	r2, #2
 800c3de:	4619      	mov	r1, r3
 800c3e0:	208f      	movs	r0, #143	; 0x8f
 800c3e2:	f000 f947 	bl	800c674 <SUBGRF_WriteCommand>
}
 800c3e6:	bf00      	nop
 800c3e8:	3710      	adds	r7, #16
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	bd80      	pop	{r7, pc}

0800c3ee <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 800c3ee:	b580      	push	{r7, lr}
 800c3f0:	b082      	sub	sp, #8
 800c3f2:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 800c3f8:	1d3b      	adds	r3, r7, #4
 800c3fa:	2201      	movs	r2, #1
 800c3fc:	4619      	mov	r1, r3
 800c3fe:	2015      	movs	r0, #21
 800c400:	f000 f95a 	bl	800c6b8 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 800c404:	793b      	ldrb	r3, [r7, #4]
 800c406:	425b      	negs	r3, r3
 800c408:	105b      	asrs	r3, r3, #1
 800c40a:	71fb      	strb	r3, [r7, #7]
    return rssi;
 800c40c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800c410:	4618      	mov	r0, r3
 800c412:	3708      	adds	r7, #8
 800c414:	46bd      	mov	sp, r7
 800c416:	bd80      	pop	{r7, pc}

0800c418 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b084      	sub	sp, #16
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
 800c420:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 800c422:	f107 030c 	add.w	r3, r7, #12
 800c426:	2202      	movs	r2, #2
 800c428:	4619      	mov	r1, r3
 800c42a:	2013      	movs	r0, #19
 800c42c:	f000 f944 	bl	800c6b8 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800c430:	f7ff fd7e 	bl	800bf30 <SUBGRF_GetPacketType>
 800c434:	4603      	mov	r3, r0
 800c436:	2b01      	cmp	r3, #1
 800c438:	d10d      	bne.n	800c456 <SUBGRF_GetRxBufferStatus+0x3e>
 800c43a:	4b0c      	ldr	r3, [pc, #48]	; (800c46c <SUBGRF_GetRxBufferStatus+0x54>)
 800c43c:	781b      	ldrb	r3, [r3, #0]
 800c43e:	b2db      	uxtb	r3, r3
 800c440:	2b01      	cmp	r3, #1
 800c442:	d108      	bne.n	800c456 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 800c444:	f240 7002 	movw	r0, #1794	; 0x702
 800c448:	f000 f878 	bl	800c53c <SUBGRF_ReadRegister>
 800c44c:	4603      	mov	r3, r0
 800c44e:	461a      	mov	r2, r3
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	701a      	strb	r2, [r3, #0]
 800c454:	e002      	b.n	800c45c <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 800c456:	7b3a      	ldrb	r2, [r7, #12]
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 800c45c:	7b7a      	ldrb	r2, [r7, #13]
 800c45e:	683b      	ldr	r3, [r7, #0]
 800c460:	701a      	strb	r2, [r3, #0]
}
 800c462:	bf00      	nop
 800c464:	3710      	adds	r7, #16
 800c466:	46bd      	mov	sp, r7
 800c468:	bd80      	pop	{r7, pc}
 800c46a:	bf00      	nop
 800c46c:	20000622 	.word	0x20000622

0800c470 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 800c470:	b580      	push	{r7, lr}
 800c472:	b084      	sub	sp, #16
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 800c478:	f107 030c 	add.w	r3, r7, #12
 800c47c:	2203      	movs	r2, #3
 800c47e:	4619      	mov	r1, r3
 800c480:	2014      	movs	r0, #20
 800c482:	f000 f919 	bl	800c6b8 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 800c486:	f7ff fd53 	bl	800bf30 <SUBGRF_GetPacketType>
 800c48a:	4603      	mov	r3, r0
 800c48c:	461a      	mov	r2, r3
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	781b      	ldrb	r3, [r3, #0]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d002      	beq.n	800c4a0 <SUBGRF_GetPacketStatus+0x30>
 800c49a:	2b01      	cmp	r3, #1
 800c49c:	d013      	beq.n	800c4c6 <SUBGRF_GetPacketStatus+0x56>
 800c49e:	e02a      	b.n	800c4f6 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800c4a0:	7b3a      	ldrb	r2, [r7, #12]
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800c4a6:	7b7b      	ldrb	r3, [r7, #13]
 800c4a8:	425b      	negs	r3, r3
 800c4aa:	105b      	asrs	r3, r3, #1
 800c4ac:	b25a      	sxtb	r2, r3
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800c4b2:	7bbb      	ldrb	r3, [r7, #14]
 800c4b4:	425b      	negs	r3, r3
 800c4b6:	105b      	asrs	r3, r3, #1
 800c4b8:	b25a      	sxtb	r2, r3
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	609a      	str	r2, [r3, #8]
            break;
 800c4c4:	e020      	b.n	800c508 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800c4c6:	7b3b      	ldrb	r3, [r7, #12]
 800c4c8:	425b      	negs	r3, r3
 800c4ca:	105b      	asrs	r3, r3, #1
 800c4cc:	b25a      	sxtb	r2, r3
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800c4d2:	7b7b      	ldrb	r3, [r7, #13]
 800c4d4:	b25b      	sxtb	r3, r3
 800c4d6:	3302      	adds	r3, #2
 800c4d8:	109b      	asrs	r3, r3, #2
 800c4da:	b25a      	sxtb	r2, r3
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800c4e0:	7bbb      	ldrb	r3, [r7, #14]
 800c4e2:	425b      	negs	r3, r3
 800c4e4:	105b      	asrs	r3, r3, #1
 800c4e6:	b25a      	sxtb	r2, r3
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 800c4ec:	4b08      	ldr	r3, [pc, #32]	; (800c510 <SUBGRF_GetPacketStatus+0xa0>)
 800c4ee:	681a      	ldr	r2, [r3, #0]
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	611a      	str	r2, [r3, #16]
            break;
 800c4f4:	e008      	b.n	800c508 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 800c4f6:	2214      	movs	r2, #20
 800c4f8:	2100      	movs	r1, #0
 800c4fa:	6878      	ldr	r0, [r7, #4]
 800c4fc:	f000 fb61 	bl	800cbc2 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	220f      	movs	r2, #15
 800c504:	701a      	strb	r2, [r3, #0]
            break;
 800c506:	bf00      	nop
    }
}
 800c508:	bf00      	nop
 800c50a:	3710      	adds	r7, #16
 800c50c:	46bd      	mov	sp, r7
 800c50e:	bd80      	pop	{r7, pc}
 800c510:	20000624 	.word	0x20000624

0800c514 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b082      	sub	sp, #8
 800c518:	af00      	add	r7, sp, #0
 800c51a:	4603      	mov	r3, r0
 800c51c:	460a      	mov	r2, r1
 800c51e:	80fb      	strh	r3, [r7, #6]
 800c520:	4613      	mov	r3, r2
 800c522:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800c524:	1d7a      	adds	r2, r7, #5
 800c526:	88f9      	ldrh	r1, [r7, #6]
 800c528:	2301      	movs	r3, #1
 800c52a:	4803      	ldr	r0, [pc, #12]	; (800c538 <SUBGRF_WriteRegister+0x24>)
 800c52c:	f7fb fe62 	bl	80081f4 <HAL_SUBGHZ_WriteRegisters>
}
 800c530:	bf00      	nop
 800c532:	3708      	adds	r7, #8
 800c534:	46bd      	mov	sp, r7
 800c536:	bd80      	pop	{r7, pc}
 800c538:	200003d0 	.word	0x200003d0

0800c53c <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b084      	sub	sp, #16
 800c540:	af00      	add	r7, sp, #0
 800c542:	4603      	mov	r3, r0
 800c544:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800c546:	f107 020f 	add.w	r2, r7, #15
 800c54a:	88f9      	ldrh	r1, [r7, #6]
 800c54c:	2301      	movs	r3, #1
 800c54e:	4804      	ldr	r0, [pc, #16]	; (800c560 <SUBGRF_ReadRegister+0x24>)
 800c550:	f7fb feaf 	bl	80082b2 <HAL_SUBGHZ_ReadRegisters>
    return data;
 800c554:	7bfb      	ldrb	r3, [r7, #15]
}
 800c556:	4618      	mov	r0, r3
 800c558:	3710      	adds	r7, #16
 800c55a:	46bd      	mov	sp, r7
 800c55c:	bd80      	pop	{r7, pc}
 800c55e:	bf00      	nop
 800c560:	200003d0 	.word	0x200003d0

0800c564 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b086      	sub	sp, #24
 800c568:	af00      	add	r7, sp, #0
 800c56a:	4603      	mov	r3, r0
 800c56c:	6039      	str	r1, [r7, #0]
 800c56e:	80fb      	strh	r3, [r7, #6]
 800c570:	4613      	mov	r3, r2
 800c572:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c574:	f3ef 8310 	mrs	r3, PRIMASK
 800c578:	60fb      	str	r3, [r7, #12]
  return(result);
 800c57a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800c57c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c57e:	b672      	cpsid	i
}
 800c580:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800c582:	88bb      	ldrh	r3, [r7, #4]
 800c584:	88f9      	ldrh	r1, [r7, #6]
 800c586:	683a      	ldr	r2, [r7, #0]
 800c588:	4806      	ldr	r0, [pc, #24]	; (800c5a4 <SUBGRF_WriteRegisters+0x40>)
 800c58a:	f7fb fe33 	bl	80081f4 <HAL_SUBGHZ_WriteRegisters>
 800c58e:	697b      	ldr	r3, [r7, #20]
 800c590:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c592:	693b      	ldr	r3, [r7, #16]
 800c594:	f383 8810 	msr	PRIMASK, r3
}
 800c598:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800c59a:	bf00      	nop
 800c59c:	3718      	adds	r7, #24
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	bd80      	pop	{r7, pc}
 800c5a2:	bf00      	nop
 800c5a4:	200003d0 	.word	0x200003d0

0800c5a8 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b086      	sub	sp, #24
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	6039      	str	r1, [r7, #0]
 800c5b2:	80fb      	strh	r3, [r7, #6]
 800c5b4:	4613      	mov	r3, r2
 800c5b6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c5b8:	f3ef 8310 	mrs	r3, PRIMASK
 800c5bc:	60fb      	str	r3, [r7, #12]
  return(result);
 800c5be:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800c5c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c5c2:	b672      	cpsid	i
}
 800c5c4:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 800c5c6:	88bb      	ldrh	r3, [r7, #4]
 800c5c8:	88f9      	ldrh	r1, [r7, #6]
 800c5ca:	683a      	ldr	r2, [r7, #0]
 800c5cc:	4806      	ldr	r0, [pc, #24]	; (800c5e8 <SUBGRF_ReadRegisters+0x40>)
 800c5ce:	f7fb fe70 	bl	80082b2 <HAL_SUBGHZ_ReadRegisters>
 800c5d2:	697b      	ldr	r3, [r7, #20]
 800c5d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c5d6:	693b      	ldr	r3, [r7, #16]
 800c5d8:	f383 8810 	msr	PRIMASK, r3
}
 800c5dc:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800c5de:	bf00      	nop
 800c5e0:	3718      	adds	r7, #24
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	bd80      	pop	{r7, pc}
 800c5e6:	bf00      	nop
 800c5e8:	200003d0 	.word	0x200003d0

0800c5ec <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b086      	sub	sp, #24
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	6039      	str	r1, [r7, #0]
 800c5f6:	71fb      	strb	r3, [r7, #7]
 800c5f8:	4613      	mov	r3, r2
 800c5fa:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c5fc:	f3ef 8310 	mrs	r3, PRIMASK
 800c600:	60fb      	str	r3, [r7, #12]
  return(result);
 800c602:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800c604:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c606:	b672      	cpsid	i
}
 800c608:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 800c60a:	79bb      	ldrb	r3, [r7, #6]
 800c60c:	b29b      	uxth	r3, r3
 800c60e:	79f9      	ldrb	r1, [r7, #7]
 800c610:	683a      	ldr	r2, [r7, #0]
 800c612:	4806      	ldr	r0, [pc, #24]	; (800c62c <SUBGRF_WriteBuffer+0x40>)
 800c614:	f7fb ff61 	bl	80084da <HAL_SUBGHZ_WriteBuffer>
 800c618:	697b      	ldr	r3, [r7, #20]
 800c61a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c61c:	693b      	ldr	r3, [r7, #16]
 800c61e:	f383 8810 	msr	PRIMASK, r3
}
 800c622:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800c624:	bf00      	nop
 800c626:	3718      	adds	r7, #24
 800c628:	46bd      	mov	sp, r7
 800c62a:	bd80      	pop	{r7, pc}
 800c62c:	200003d0 	.word	0x200003d0

0800c630 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800c630:	b580      	push	{r7, lr}
 800c632:	b086      	sub	sp, #24
 800c634:	af00      	add	r7, sp, #0
 800c636:	4603      	mov	r3, r0
 800c638:	6039      	str	r1, [r7, #0]
 800c63a:	71fb      	strb	r3, [r7, #7]
 800c63c:	4613      	mov	r3, r2
 800c63e:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c640:	f3ef 8310 	mrs	r3, PRIMASK
 800c644:	60fb      	str	r3, [r7, #12]
  return(result);
 800c646:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800c648:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c64a:	b672      	cpsid	i
}
 800c64c:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 800c64e:	79bb      	ldrb	r3, [r7, #6]
 800c650:	b29b      	uxth	r3, r3
 800c652:	79f9      	ldrb	r1, [r7, #7]
 800c654:	683a      	ldr	r2, [r7, #0]
 800c656:	4806      	ldr	r0, [pc, #24]	; (800c670 <SUBGRF_ReadBuffer+0x40>)
 800c658:	f7fb ff92 	bl	8008580 <HAL_SUBGHZ_ReadBuffer>
 800c65c:	697b      	ldr	r3, [r7, #20]
 800c65e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c660:	693b      	ldr	r3, [r7, #16]
 800c662:	f383 8810 	msr	PRIMASK, r3
}
 800c666:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800c668:	bf00      	nop
 800c66a:	3718      	adds	r7, #24
 800c66c:	46bd      	mov	sp, r7
 800c66e:	bd80      	pop	{r7, pc}
 800c670:	200003d0 	.word	0x200003d0

0800c674 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800c674:	b580      	push	{r7, lr}
 800c676:	b086      	sub	sp, #24
 800c678:	af00      	add	r7, sp, #0
 800c67a:	4603      	mov	r3, r0
 800c67c:	6039      	str	r1, [r7, #0]
 800c67e:	71fb      	strb	r3, [r7, #7]
 800c680:	4613      	mov	r3, r2
 800c682:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c684:	f3ef 8310 	mrs	r3, PRIMASK
 800c688:	60fb      	str	r3, [r7, #12]
  return(result);
 800c68a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800c68c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c68e:	b672      	cpsid	i
}
 800c690:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800c692:	88bb      	ldrh	r3, [r7, #4]
 800c694:	79f9      	ldrb	r1, [r7, #7]
 800c696:	683a      	ldr	r2, [r7, #0]
 800c698:	4806      	ldr	r0, [pc, #24]	; (800c6b4 <SUBGRF_WriteCommand+0x40>)
 800c69a:	f7fb fe6b 	bl	8008374 <HAL_SUBGHZ_ExecSetCmd>
 800c69e:	697b      	ldr	r3, [r7, #20]
 800c6a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c6a2:	693b      	ldr	r3, [r7, #16]
 800c6a4:	f383 8810 	msr	PRIMASK, r3
}
 800c6a8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800c6aa:	bf00      	nop
 800c6ac:	3718      	adds	r7, #24
 800c6ae:	46bd      	mov	sp, r7
 800c6b0:	bd80      	pop	{r7, pc}
 800c6b2:	bf00      	nop
 800c6b4:	200003d0 	.word	0x200003d0

0800c6b8 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b086      	sub	sp, #24
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	4603      	mov	r3, r0
 800c6c0:	6039      	str	r1, [r7, #0]
 800c6c2:	71fb      	strb	r3, [r7, #7]
 800c6c4:	4613      	mov	r3, r2
 800c6c6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c6c8:	f3ef 8310 	mrs	r3, PRIMASK
 800c6cc:	60fb      	str	r3, [r7, #12]
  return(result);
 800c6ce:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800c6d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c6d2:	b672      	cpsid	i
}
 800c6d4:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 800c6d6:	88bb      	ldrh	r3, [r7, #4]
 800c6d8:	79f9      	ldrb	r1, [r7, #7]
 800c6da:	683a      	ldr	r2, [r7, #0]
 800c6dc:	4806      	ldr	r0, [pc, #24]	; (800c6f8 <SUBGRF_ReadCommand+0x40>)
 800c6de:	f7fb fea8 	bl	8008432 <HAL_SUBGHZ_ExecGetCmd>
 800c6e2:	697b      	ldr	r3, [r7, #20]
 800c6e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c6e6:	693b      	ldr	r3, [r7, #16]
 800c6e8:	f383 8810 	msr	PRIMASK, r3
}
 800c6ec:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800c6ee:	bf00      	nop
 800c6f0:	3718      	adds	r7, #24
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	bd80      	pop	{r7, pc}
 800c6f6:	bf00      	nop
 800c6f8:	200003d0 	.word	0x200003d0

0800c6fc <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b084      	sub	sp, #16
 800c700:	af00      	add	r7, sp, #0
 800c702:	4603      	mov	r3, r0
 800c704:	460a      	mov	r2, r1
 800c706:	71fb      	strb	r3, [r7, #7]
 800c708:	4613      	mov	r3, r2
 800c70a:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 800c70c:	2301      	movs	r3, #1
 800c70e:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 800c710:	79bb      	ldrb	r3, [r7, #6]
 800c712:	2b01      	cmp	r3, #1
 800c714:	d10d      	bne.n	800c732 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 800c716:	79fb      	ldrb	r3, [r7, #7]
 800c718:	2b01      	cmp	r3, #1
 800c71a:	d104      	bne.n	800c726 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 800c71c:	2302      	movs	r3, #2
 800c71e:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 800c720:	2004      	movs	r0, #4
 800c722:	f000 f84e 	bl	800c7c2 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 800c726:	79fb      	ldrb	r3, [r7, #7]
 800c728:	2b02      	cmp	r3, #2
 800c72a:	d107      	bne.n	800c73c <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 800c72c:	2303      	movs	r3, #3
 800c72e:	73fb      	strb	r3, [r7, #15]
 800c730:	e004      	b.n	800c73c <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 800c732:	79bb      	ldrb	r3, [r7, #6]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d101      	bne.n	800c73c <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 800c738:	2301      	movs	r3, #1
 800c73a:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 800c73c:	7bfb      	ldrb	r3, [r7, #15]
 800c73e:	4618      	mov	r0, r3
 800c740:	f000 f9dd 	bl	800cafe <RBI_ConfigRFSwitch>
}
 800c744:	bf00      	nop
 800c746:	3710      	adds	r7, #16
 800c748:	46bd      	mov	sp, r7
 800c74a:	bd80      	pop	{r7, pc}

0800c74c <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b084      	sub	sp, #16
 800c750:	af00      	add	r7, sp, #0
 800c752:	4603      	mov	r3, r0
 800c754:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 800c756:	2301      	movs	r3, #1
 800c758:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 800c75a:	f000 f9dd 	bl	800cb18 <RBI_GetTxConfig>
 800c75e:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 800c760:	68bb      	ldr	r3, [r7, #8]
 800c762:	2b02      	cmp	r3, #2
 800c764:	d016      	beq.n	800c794 <SUBGRF_SetRfTxPower+0x48>
 800c766:	68bb      	ldr	r3, [r7, #8]
 800c768:	2b02      	cmp	r3, #2
 800c76a:	dc16      	bgt.n	800c79a <SUBGRF_SetRfTxPower+0x4e>
 800c76c:	68bb      	ldr	r3, [r7, #8]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d003      	beq.n	800c77a <SUBGRF_SetRfTxPower+0x2e>
 800c772:	68bb      	ldr	r3, [r7, #8]
 800c774:	2b01      	cmp	r3, #1
 800c776:	d00a      	beq.n	800c78e <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 800c778:	e00f      	b.n	800c79a <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 800c77a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c77e:	2b0f      	cmp	r3, #15
 800c780:	dd02      	ble.n	800c788 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 800c782:	2302      	movs	r3, #2
 800c784:	73fb      	strb	r3, [r7, #15]
            break;
 800c786:	e009      	b.n	800c79c <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 800c788:	2301      	movs	r3, #1
 800c78a:	73fb      	strb	r3, [r7, #15]
            break;
 800c78c:	e006      	b.n	800c79c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 800c78e:	2301      	movs	r3, #1
 800c790:	73fb      	strb	r3, [r7, #15]
            break;
 800c792:	e003      	b.n	800c79c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 800c794:	2302      	movs	r3, #2
 800c796:	73fb      	strb	r3, [r7, #15]
            break;
 800c798:	e000      	b.n	800c79c <SUBGRF_SetRfTxPower+0x50>
            break;
 800c79a:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 800c79c:	f997 1007 	ldrsb.w	r1, [r7, #7]
 800c7a0:	7bfb      	ldrb	r3, [r7, #15]
 800c7a2:	2202      	movs	r2, #2
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	f7ff fbcd 	bl	800bf44 <SUBGRF_SetTxParams>

    return paSelect;
 800c7aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	3710      	adds	r7, #16
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	bd80      	pop	{r7, pc}

0800c7b4 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 800c7b4:	b480      	push	{r7}
 800c7b6:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 800c7b8:	2301      	movs	r3, #1
}
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	bc80      	pop	{r7}
 800c7c0:	4770      	bx	lr

0800c7c2 <Radio_SMPS_Set>:
{
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
}

static void Radio_SMPS_Set(uint8_t level)
{
 800c7c2:	b580      	push	{r7, lr}
 800c7c4:	b084      	sub	sp, #16
 800c7c6:	af00      	add	r7, sp, #0
 800c7c8:	4603      	mov	r3, r0
 800c7ca:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 800c7cc:	f000 f9ba 	bl	800cb44 <RBI_IsDCDC>
 800c7d0:	4603      	mov	r3, r0
 800c7d2:	2b01      	cmp	r3, #1
 800c7d4:	d112      	bne.n	800c7fc <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 800c7d6:	f640 1023 	movw	r0, #2339	; 0x923
 800c7da:	f7ff feaf 	bl	800c53c <SUBGRF_ReadRegister>
 800c7de:	4603      	mov	r3, r0
 800c7e0:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 800c7e2:	7bfb      	ldrb	r3, [r7, #15]
 800c7e4:	f023 0306 	bic.w	r3, r3, #6
 800c7e8:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800c7ea:	7bfa      	ldrb	r2, [r7, #15]
 800c7ec:	79fb      	ldrb	r3, [r7, #7]
 800c7ee:	4313      	orrs	r3, r2
 800c7f0:	b2db      	uxtb	r3, r3
 800c7f2:	4619      	mov	r1, r3
 800c7f4:	f640 1023 	movw	r0, #2339	; 0x923
 800c7f8:	f7ff fe8c 	bl	800c514 <SUBGRF_WriteRegister>
  }
}
 800c7fc:	bf00      	nop
 800c7fe:	3710      	adds	r7, #16
 800c800:	46bd      	mov	sp, r7
 800c802:	bd80      	pop	{r7, pc}

0800c804 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 800c804:	b480      	push	{r7}
 800c806:	b085      	sub	sp, #20
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d101      	bne.n	800c816 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 800c812:	231f      	movs	r3, #31
 800c814:	e016      	b.n	800c844 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800c816:	2300      	movs	r3, #0
 800c818:	73fb      	strb	r3, [r7, #15]
 800c81a:	e00f      	b.n	800c83c <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 800c81c:	7bfb      	ldrb	r3, [r7, #15]
 800c81e:	4a0c      	ldr	r2, [pc, #48]	; (800c850 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800c820:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c824:	687a      	ldr	r2, [r7, #4]
 800c826:	429a      	cmp	r2, r3
 800c828:	d205      	bcs.n	800c836 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 800c82a:	7bfb      	ldrb	r3, [r7, #15]
 800c82c:	4a08      	ldr	r2, [pc, #32]	; (800c850 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 800c82e:	00db      	lsls	r3, r3, #3
 800c830:	4413      	add	r3, r2
 800c832:	791b      	ldrb	r3, [r3, #4]
 800c834:	e006      	b.n	800c844 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800c836:	7bfb      	ldrb	r3, [r7, #15]
 800c838:	3301      	adds	r3, #1
 800c83a:	73fb      	strb	r3, [r7, #15]
 800c83c:	7bfb      	ldrb	r3, [r7, #15]
 800c83e:	2b15      	cmp	r3, #21
 800c840:	d9ec      	bls.n	800c81c <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 800c842:	e7fe      	b.n	800c842 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 800c844:	4618      	mov	r0, r3
 800c846:	3714      	adds	r7, #20
 800c848:	46bd      	mov	sp, r7
 800c84a:	bc80      	pop	{r7}
 800c84c:	4770      	bx	lr
 800c84e:	bf00      	nop
 800c850:	080109d0 	.word	0x080109d0

0800c854 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 800c854:	b580      	push	{r7, lr}
 800c856:	b08a      	sub	sp, #40	; 0x28
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
 800c85c:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 800c85e:	4b35      	ldr	r3, [pc, #212]	; (800c934 <SUBGRF_GetCFO+0xe0>)
 800c860:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 800c862:	f640 0007 	movw	r0, #2055	; 0x807
 800c866:	f7ff fe69 	bl	800c53c <SUBGRF_ReadRegister>
 800c86a:	4603      	mov	r3, r0
 800c86c:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 800c86e:	7ffb      	ldrb	r3, [r7, #31]
 800c870:	08db      	lsrs	r3, r3, #3
 800c872:	b2db      	uxtb	r3, r3
 800c874:	f003 0303 	and.w	r3, r3, #3
 800c878:	3328      	adds	r3, #40	; 0x28
 800c87a:	443b      	add	r3, r7
 800c87c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800c880:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 800c882:	7ffb      	ldrb	r3, [r7, #31]
 800c884:	f003 0307 	and.w	r3, r3, #7
 800c888:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 800c88a:	7fba      	ldrb	r2, [r7, #30]
 800c88c:	7f7b      	ldrb	r3, [r7, #29]
 800c88e:	3b01      	subs	r3, #1
 800c890:	fa02 f303 	lsl.w	r3, r2, r3
 800c894:	461a      	mov	r2, r3
 800c896:	4b28      	ldr	r3, [pc, #160]	; (800c938 <SUBGRF_GetCFO+0xe4>)
 800c898:	fbb3 f3f2 	udiv	r3, r3, r2
 800c89c:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 800c89e:	69ba      	ldr	r2, [r7, #24]
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c8a6:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 800c8a8:	2301      	movs	r3, #1
 800c8aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 800c8ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c8b2:	697a      	ldr	r2, [r7, #20]
 800c8b4:	fb02 f303 	mul.w	r3, r2, r3
 800c8b8:	2b07      	cmp	r3, #7
 800c8ba:	d802      	bhi.n	800c8c2 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 800c8bc:	2302      	movs	r3, #2
 800c8be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 800c8c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c8c6:	697a      	ldr	r2, [r7, #20]
 800c8c8:	fb02 f303 	mul.w	r3, r2, r3
 800c8cc:	2b03      	cmp	r3, #3
 800c8ce:	d802      	bhi.n	800c8d6 <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 800c8d0:	2304      	movs	r3, #4
 800c8d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 800c8d6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c8da:	69bb      	ldr	r3, [r7, #24]
 800c8dc:	fb02 f303 	mul.w	r3, r2, r3
 800c8e0:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 800c8e2:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 800c8e6:	f7ff fe29 	bl	800c53c <SUBGRF_ReadRegister>
 800c8ea:	4603      	mov	r3, r0
 800c8ec:	021b      	lsls	r3, r3, #8
 800c8ee:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800c8f2:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 800c8f4:	f240 60b1 	movw	r0, #1713	; 0x6b1
 800c8f8:	f7ff fe20 	bl	800c53c <SUBGRF_ReadRegister>
 800c8fc:	4603      	mov	r3, r0
 800c8fe:	461a      	mov	r2, r3
 800c900:	6a3b      	ldr	r3, [r7, #32]
 800c902:	4313      	orrs	r3, r2
 800c904:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 800c906:	6a3b      	ldr	r3, [r7, #32]
 800c908:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d005      	beq.n	800c91c <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 800c910:	6a3b      	ldr	r3, [r7, #32]
 800c912:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800c916:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800c91a:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 800c91c:	693b      	ldr	r3, [r7, #16]
 800c91e:	095b      	lsrs	r3, r3, #5
 800c920:	6a3a      	ldr	r2, [r7, #32]
 800c922:	fb02 f303 	mul.w	r3, r2, r3
 800c926:	11da      	asrs	r2, r3, #7
 800c928:	683b      	ldr	r3, [r7, #0]
 800c92a:	601a      	str	r2, [r3, #0]
}
 800c92c:	bf00      	nop
 800c92e:	3728      	adds	r7, #40	; 0x28
 800c930:	46bd      	mov	sp, r7
 800c932:	bd80      	pop	{r7, pc}
 800c934:	0c0a0804 	.word	0x0c0a0804
 800c938:	01e84800 	.word	0x01e84800

0800c93c <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 800c93c:	b480      	push	{r7}
 800c93e:	b087      	sub	sp, #28
 800c940:	af00      	add	r7, sp, #0
 800c942:	4603      	mov	r3, r0
 800c944:	60b9      	str	r1, [r7, #8]
 800c946:	607a      	str	r2, [r7, #4]
 800c948:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 800c94a:	2300      	movs	r3, #0
 800c94c:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 800c94e:	f04f 33ff 	mov.w	r3, #4294967295
 800c952:	617b      	str	r3, [r7, #20]
#endif
  return status;
 800c954:	697b      	ldr	r3, [r7, #20]
}
 800c956:	4618      	mov	r0, r3
 800c958:	371c      	adds	r7, #28
 800c95a:	46bd      	mov	sp, r7
 800c95c:	bc80      	pop	{r7}
 800c95e:	4770      	bx	lr

0800c960 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 800c960:	b480      	push	{r7}
 800c962:	b087      	sub	sp, #28
 800c964:	af00      	add	r7, sp, #0
 800c966:	4603      	mov	r3, r0
 800c968:	60b9      	str	r1, [r7, #8]
 800c96a:	607a      	str	r2, [r7, #4]
 800c96c:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 800c96e:	2300      	movs	r3, #0
 800c970:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 800c972:	f04f 33ff 	mov.w	r3, #4294967295
 800c976:	617b      	str	r3, [r7, #20]
#endif
  return status;
 800c978:	697b      	ldr	r3, [r7, #20]
}
 800c97a:	4618      	mov	r0, r3
 800c97c:	371c      	adds	r7, #28
 800c97e:	46bd      	mov	sp, r7
 800c980:	bc80      	pop	{r7}
 800c982:	4770      	bx	lr

0800c984 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 800c984:	b480      	push	{r7}
 800c986:	b085      	sub	sp, #20
 800c988:	af00      	add	r7, sp, #0
 800c98a:	60f8      	str	r0, [r7, #12]
 800c98c:	60b9      	str	r1, [r7, #8]
 800c98e:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 800c990:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 800c994:	4618      	mov	r0, r3
 800c996:	3714      	adds	r7, #20
 800c998:	46bd      	mov	sp, r7
 800c99a:	bc80      	pop	{r7}
 800c99c:	4770      	bx	lr

0800c99e <RFW_DeInit>:

void RFW_DeInit( void)
{
 800c99e:	b480      	push	{r7}
 800c9a0:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 800c9a2:	bf00      	nop
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	bc80      	pop	{r7}
 800c9a8:	4770      	bx	lr

0800c9aa <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 800c9aa:	b480      	push	{r7}
 800c9ac:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 800c9ae:	2300      	movs	r3, #0
#endif
}
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	46bd      	mov	sp, r7
 800c9b4:	bc80      	pop	{r7}
 800c9b6:	4770      	bx	lr

0800c9b8 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 800c9b8:	b480      	push	{r7}
 800c9ba:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 800c9bc:	2300      	movs	r3, #0
#endif
}
 800c9be:	4618      	mov	r0, r3
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	bc80      	pop	{r7}
 800c9c4:	4770      	bx	lr

0800c9c6 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 800c9c6:	b480      	push	{r7}
 800c9c8:	b083      	sub	sp, #12
 800c9ca:	af00      	add	r7, sp, #0
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 800c9d0:	bf00      	nop
 800c9d2:	370c      	adds	r7, #12
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	bc80      	pop	{r7}
 800c9d8:	4770      	bx	lr

0800c9da <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 800c9da:	b480      	push	{r7}
 800c9dc:	b087      	sub	sp, #28
 800c9de:	af00      	add	r7, sp, #0
 800c9e0:	60f8      	str	r0, [r7, #12]
 800c9e2:	460b      	mov	r3, r1
 800c9e4:	607a      	str	r2, [r7, #4]
 800c9e6:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 800c9e8:	f04f 33ff 	mov.w	r3, #4294967295
 800c9ec:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;

    status= 0;
  }
#endif
  return status;
 800c9ee:	697b      	ldr	r3, [r7, #20]
}
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	371c      	adds	r7, #28
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	bc80      	pop	{r7}
 800c9f8:	4770      	bx	lr

0800c9fa <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 800c9fa:	b480      	push	{r7}
 800c9fc:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;

  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 800c9fe:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 800ca02:	4618      	mov	r0, r3
 800ca04:	46bd      	mov	sp, r7
 800ca06:	bc80      	pop	{r7}
 800ca08:	4770      	bx	lr

0800ca0a <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 800ca0a:	b480      	push	{r7}
 800ca0c:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_GPKTCTL1AR);
  SUBGRF_WriteRegister(SUBGHZ_GPKTCTL1AR, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_GRTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 800ca0e:	bf00      	nop
 800ca10:	46bd      	mov	sp, r7
 800ca12:	bc80      	pop	{r7}
 800ca14:	4770      	bx	lr

0800ca16 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 800ca16:	b480      	push	{r7}
 800ca18:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 800ca1a:	bf00      	nop
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bc80      	pop	{r7}
 800ca20:	4770      	bx	lr

0800ca22 <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 800ca22:	b480      	push	{r7}
 800ca24:	b083      	sub	sp, #12
 800ca26:	af00      	add	r7, sp, #0
 800ca28:	4603      	mov	r3, r0
 800ca2a:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 800ca2c:	bf00      	nop
 800ca2e:	370c      	adds	r7, #12
 800ca30:	46bd      	mov	sp, r7
 800ca32:	bc80      	pop	{r7}
 800ca34:	4770      	bx	lr

0800ca36 <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 800ca36:	b580      	push	{r7, lr}
 800ca38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 800ca3a:	f7f9 f866 	bl	8005b0a <SystemApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1_1 */
  SubghzApp_Init();
 800ca3e:	f000 f803 	bl	800ca48 <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 800ca42:	bf00      	nop
 800ca44:	bd80      	pop	{r7, pc}
	...

0800ca48 <SubghzApp_Init>:
/* USER CODE BEGIN PFP */
/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void)
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SubghzApp_Init_1 */

  /* USER CODE END SubghzApp_Init_1 */

  /* Radio initialization */
  RadioEvents.TxDone = OnTxDone;
 800ca4c:	4b0a      	ldr	r3, [pc, #40]	; (800ca78 <SubghzApp_Init+0x30>)
 800ca4e:	4a0b      	ldr	r2, [pc, #44]	; (800ca7c <SubghzApp_Init+0x34>)
 800ca50:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 800ca52:	4b09      	ldr	r3, [pc, #36]	; (800ca78 <SubghzApp_Init+0x30>)
 800ca54:	4a0a      	ldr	r2, [pc, #40]	; (800ca80 <SubghzApp_Init+0x38>)
 800ca56:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 800ca58:	4b07      	ldr	r3, [pc, #28]	; (800ca78 <SubghzApp_Init+0x30>)
 800ca5a:	4a0a      	ldr	r2, [pc, #40]	; (800ca84 <SubghzApp_Init+0x3c>)
 800ca5c:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 800ca5e:	4b06      	ldr	r3, [pc, #24]	; (800ca78 <SubghzApp_Init+0x30>)
 800ca60:	4a09      	ldr	r2, [pc, #36]	; (800ca88 <SubghzApp_Init+0x40>)
 800ca62:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 800ca64:	4b04      	ldr	r3, [pc, #16]	; (800ca78 <SubghzApp_Init+0x30>)
 800ca66:	4a09      	ldr	r2, [pc, #36]	; (800ca8c <SubghzApp_Init+0x44>)
 800ca68:	611a      	str	r2, [r3, #16]

  Radio.Init(&RadioEvents);
 800ca6a:	4b09      	ldr	r3, [pc, #36]	; (800ca90 <SubghzApp_Init+0x48>)
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	4802      	ldr	r0, [pc, #8]	; (800ca78 <SubghzApp_Init+0x30>)
 800ca70:	4798      	blx	r3

  /* USER CODE BEGIN SubghzApp_Init_2 */

  /* USER CODE END SubghzApp_Init_2 */
}
 800ca72:	bf00      	nop
 800ca74:	bd80      	pop	{r7, pc}
 800ca76:	bf00      	nop
 800ca78:	20000630 	.word	0x20000630
 800ca7c:	0800ca95 	.word	0x0800ca95
 800ca80:	0800caa1 	.word	0x0800caa1
 800ca84:	0800cac5 	.word	0x0800cac5
 800ca88:	0800cad1 	.word	0x0800cad1
 800ca8c:	0800cadd 	.word	0x0800cadd
 800ca90:	08010948 	.word	0x08010948

0800ca94 <OnTxDone>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void OnTxDone(void)
{
 800ca94:	b480      	push	{r7}
 800ca96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone */
  /* USER CODE END OnTxDone */
}
 800ca98:	bf00      	nop
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	bc80      	pop	{r7}
 800ca9e:	4770      	bx	lr

0800caa0 <OnRxDone>:

static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 800caa0:	b480      	push	{r7}
 800caa2:	b085      	sub	sp, #20
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	60f8      	str	r0, [r7, #12]
 800caa8:	4608      	mov	r0, r1
 800caaa:	4611      	mov	r1, r2
 800caac:	461a      	mov	r2, r3
 800caae:	4603      	mov	r3, r0
 800cab0:	817b      	strh	r3, [r7, #10]
 800cab2:	460b      	mov	r3, r1
 800cab4:	813b      	strh	r3, [r7, #8]
 800cab6:	4613      	mov	r3, r2
 800cab8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnRxDone */
  /* USER CODE END OnRxDone */
}
 800caba:	bf00      	nop
 800cabc:	3714      	adds	r7, #20
 800cabe:	46bd      	mov	sp, r7
 800cac0:	bc80      	pop	{r7}
 800cac2:	4770      	bx	lr

0800cac4 <OnTxTimeout>:

static void OnTxTimeout(void)
{
 800cac4:	b480      	push	{r7}
 800cac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout */
  /* USER CODE END OnTxTimeout */
}
 800cac8:	bf00      	nop
 800caca:	46bd      	mov	sp, r7
 800cacc:	bc80      	pop	{r7}
 800cace:	4770      	bx	lr

0800cad0 <OnRxTimeout>:

static void OnRxTimeout(void)
{
 800cad0:	b480      	push	{r7}
 800cad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout */
  /* USER CODE END OnRxTimeout */
}
 800cad4:	bf00      	nop
 800cad6:	46bd      	mov	sp, r7
 800cad8:	bc80      	pop	{r7}
 800cada:	4770      	bx	lr

0800cadc <OnRxError>:

static void OnRxError(void)
{
 800cadc:	b480      	push	{r7}
 800cade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError */
  /* USER CODE END OnRxError */
}
 800cae0:	bf00      	nop
 800cae2:	46bd      	mov	sp, r7
 800cae4:	bc80      	pop	{r7}
 800cae6:	4770      	bx	lr

0800cae8 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800cae8:	b480      	push	{r7}
 800caea:	b083      	sub	sp, #12
 800caec:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
#else
  /* 2/ Or implement RBI_Init here */
  int32_t retcode = 0;
 800caee:	2300      	movs	r3, #0
 800caf0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
 800caf2:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 800caf4:	4618      	mov	r0, r3
 800caf6:	370c      	adds	r7, #12
 800caf8:	46bd      	mov	sp, r7
 800cafa:	bc80      	pop	{r7}
 800cafc:	4770      	bx	lr

0800cafe <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800cafe:	b480      	push	{r7}
 800cb00:	b085      	sub	sp, #20
 800cb02:	af00      	add	r7, sp, #0
 800cb04:	4603      	mov	r3, r0
 800cb06:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#else
  /* 2/ Or implement RBI_ConfigRFSwitch here */
  int32_t retcode = 0;
 800cb08:	2300      	movs	r3, #0
 800cb0a:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
 800cb0c:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER */
}
 800cb0e:	4618      	mov	r0, r3
 800cb10:	3714      	adds	r7, #20
 800cb12:	46bd      	mov	sp, r7
 800cb14:	bc80      	pop	{r7}
 800cb16:	4770      	bx	lr

0800cb18 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800cb18:	b480      	push	{r7}
 800cb1a:	b083      	sub	sp, #12
 800cb1c:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
#else
  /* 2/ Or implement RBI_GetTxConfig here */
  int32_t retcode = RBI_CONF_RFO;
 800cb1e:	2300      	movs	r3, #0
 800cb20:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
 800cb22:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER */
}
 800cb24:	4618      	mov	r0, r3
 800cb26:	370c      	adds	r7, #12
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	bc80      	pop	{r7}
 800cb2c:	4770      	bx	lr

0800cb2e <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800cb2e:	b480      	push	{r7}
 800cb30:	b083      	sub	sp, #12
 800cb32:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
#else
  /* 2/ Or implement RBI_IsTCXO here */
  int32_t retcode = IS_TCXO_SUPPORTED;
 800cb34:	2300      	movs	r3, #0
 800cb36:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
 800cb38:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	370c      	adds	r7, #12
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	bc80      	pop	{r7}
 800cb42:	4770      	bx	lr

0800cb44 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800cb44:	b480      	push	{r7}
 800cb46:	b083      	sub	sp, #12
 800cb48:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
#else
  /* 2/ Or implement RBI_IsDCDC here */
  int32_t retcode = IS_DCDC_SUPPORTED;
 800cb4a:	2301      	movs	r3, #1
 800cb4c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
 800cb4e:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 800cb50:	4618      	mov	r0, r3
 800cb52:	370c      	adds	r7, #12
 800cb54:	46bd      	mov	sp, r7
 800cb56:	bc80      	pop	{r7}
 800cb58:	4770      	bx	lr

0800cb5a <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800cb5a:	b480      	push	{r7}
 800cb5c:	b085      	sub	sp, #20
 800cb5e:	af00      	add	r7, sp, #0
 800cb60:	4603      	mov	r3, r0
 800cb62:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
#else
  /* 2/ Or implement RBI_RBI_GetRFOMaxPowerConfig here */
  int32_t ret = 0;
 800cb64:	2300      	movs	r3, #0
 800cb66:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_GetRFOMaxPowerConfig_2 */
#warning user to provide its board code or to call his board driver functions
  if (Config == RBI_RFO_LP_MAXPOWER)
 800cb68:	79fb      	ldrb	r3, [r7, #7]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d102      	bne.n	800cb74 <RBI_GetRFOMaxPowerConfig+0x1a>
  {
    ret = 15; /*dBm*/
 800cb6e:	230f      	movs	r3, #15
 800cb70:	60fb      	str	r3, [r7, #12]
 800cb72:	e001      	b.n	800cb78 <RBI_GetRFOMaxPowerConfig+0x1e>
  }
  else
  {
    ret = 22; /*dBm*/
 800cb74:	2316      	movs	r3, #22
 800cb76:	60fb      	str	r3, [r7, #12]
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
 800cb78:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER  */
}
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	3714      	adds	r7, #20
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	bc80      	pop	{r7}
 800cb82:	4770      	bx	lr

0800cb84 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 800cb84:	b480      	push	{r7}
 800cb86:	b087      	sub	sp, #28
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	60f8      	str	r0, [r7, #12]
 800cb8c:	60b9      	str	r1, [r7, #8]
 800cb8e:	4613      	mov	r3, r2
 800cb90:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 800cb96:	68bb      	ldr	r3, [r7, #8]
 800cb98:	613b      	str	r3, [r7, #16]

  while( size-- )
 800cb9a:	e007      	b.n	800cbac <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 800cb9c:	693a      	ldr	r2, [r7, #16]
 800cb9e:	1c53      	adds	r3, r2, #1
 800cba0:	613b      	str	r3, [r7, #16]
 800cba2:	697b      	ldr	r3, [r7, #20]
 800cba4:	1c59      	adds	r1, r3, #1
 800cba6:	6179      	str	r1, [r7, #20]
 800cba8:	7812      	ldrb	r2, [r2, #0]
 800cbaa:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800cbac:	88fb      	ldrh	r3, [r7, #6]
 800cbae:	1e5a      	subs	r2, r3, #1
 800cbb0:	80fa      	strh	r2, [r7, #6]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d1f2      	bne.n	800cb9c <UTIL_MEM_cpy_8+0x18>
    }
}
 800cbb6:	bf00      	nop
 800cbb8:	bf00      	nop
 800cbba:	371c      	adds	r7, #28
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	bc80      	pop	{r7}
 800cbc0:	4770      	bx	lr

0800cbc2 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 800cbc2:	b480      	push	{r7}
 800cbc4:	b085      	sub	sp, #20
 800cbc6:	af00      	add	r7, sp, #0
 800cbc8:	6078      	str	r0, [r7, #4]
 800cbca:	460b      	mov	r3, r1
 800cbcc:	70fb      	strb	r3, [r7, #3]
 800cbce:	4613      	mov	r3, r2
 800cbd0:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	60fb      	str	r3, [r7, #12]
  while( size-- )
 800cbd6:	e004      	b.n	800cbe2 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	1c5a      	adds	r2, r3, #1
 800cbdc:	60fa      	str	r2, [r7, #12]
 800cbde:	78fa      	ldrb	r2, [r7, #3]
 800cbe0:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800cbe2:	883b      	ldrh	r3, [r7, #0]
 800cbe4:	1e5a      	subs	r2, r3, #1
 800cbe6:	803a      	strh	r2, [r7, #0]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d1f5      	bne.n	800cbd8 <UTIL_MEM_set_8+0x16>
  }
}
 800cbec:	bf00      	nop
 800cbee:	bf00      	nop
 800cbf0:	3714      	adds	r7, #20
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	bc80      	pop	{r7}
 800cbf6:	4770      	bx	lr

0800cbf8 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b084      	sub	sp, #16
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	60f8      	str	r0, [r7, #12]
 800cc00:	60b9      	str	r1, [r7, #8]
 800cc02:	603b      	str	r3, [r7, #0]
 800cc04:	4613      	mov	r3, r2
 800cc06:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d023      	beq.n	800cc56 <UTIL_TIMER_Create+0x5e>
 800cc0e:	683b      	ldr	r3, [r7, #0]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d020      	beq.n	800cc56 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	2200      	movs	r2, #0
 800cc18:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800cc1a:	4b11      	ldr	r3, [pc, #68]	; (800cc60 <UTIL_TIMER_Create+0x68>)
 800cc1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc1e:	68b8      	ldr	r0, [r7, #8]
 800cc20:	4798      	blx	r3
 800cc22:	4602      	mov	r2, r0
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	2200      	movs	r2, #0
 800cc32:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	2200      	movs	r2, #0
 800cc38:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	683a      	ldr	r2, [r7, #0]
 800cc3e:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	69ba      	ldr	r2, [r7, #24]
 800cc44:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	79fa      	ldrb	r2, [r7, #7]
 800cc4a:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	2200      	movs	r2, #0
 800cc50:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 800cc52:	2300      	movs	r3, #0
 800cc54:	e000      	b.n	800cc58 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 800cc56:	2301      	movs	r3, #1
  }
}
 800cc58:	4618      	mov	r0, r3
 800cc5a:	3710      	adds	r7, #16
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	bd80      	pop	{r7, pc}
 800cc60:	080108f4 	.word	0x080108f4

0800cc64 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 800cc64:	b580      	push	{r7, lr}
 800cc66:	b08a      	sub	sp, #40	; 0x28
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d056      	beq.n	800cd26 <UTIL_TIMER_Start+0xc2>
 800cc78:	6878      	ldr	r0, [r7, #4]
 800cc7a:	f000 f929 	bl	800ced0 <TimerExists>
 800cc7e:	4603      	mov	r3, r0
 800cc80:	f083 0301 	eor.w	r3, r3, #1
 800cc84:	b2db      	uxtb	r3, r3
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d04d      	beq.n	800cd26 <UTIL_TIMER_Start+0xc2>
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	7a5b      	ldrb	r3, [r3, #9]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d149      	bne.n	800cd26 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cc92:	f3ef 8310 	mrs	r3, PRIMASK
 800cc96:	613b      	str	r3, [r7, #16]
  return(result);
 800cc98:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800cc9a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800cc9c:	b672      	cpsid	i
}
 800cc9e:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	685b      	ldr	r3, [r3, #4]
 800cca4:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800cca6:	4b24      	ldr	r3, [pc, #144]	; (800cd38 <UTIL_TIMER_Start+0xd4>)
 800cca8:	6a1b      	ldr	r3, [r3, #32]
 800ccaa:	4798      	blx	r3
 800ccac:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 800ccae:	6a3a      	ldr	r2, [r7, #32]
 800ccb0:	69bb      	ldr	r3, [r7, #24]
 800ccb2:	429a      	cmp	r2, r3
 800ccb4:	d201      	bcs.n	800ccba <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 800ccb6:	69bb      	ldr	r3, [r7, #24]
 800ccb8:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	6a3a      	ldr	r2, [r7, #32]
 800ccbe:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	2201      	movs	r2, #1
 800ccca:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	2200      	movs	r2, #0
 800ccd0:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 800ccd2:	4b1a      	ldr	r3, [pc, #104]	; (800cd3c <UTIL_TIMER_Start+0xd8>)
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d106      	bne.n	800cce8 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 800ccda:	4b17      	ldr	r3, [pc, #92]	; (800cd38 <UTIL_TIMER_Start+0xd4>)
 800ccdc:	691b      	ldr	r3, [r3, #16]
 800ccde:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 800cce0:	6878      	ldr	r0, [r7, #4]
 800cce2:	f000 f96b 	bl	800cfbc <TimerInsertNewHeadTimer>
 800cce6:	e017      	b.n	800cd18 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800cce8:	4b13      	ldr	r3, [pc, #76]	; (800cd38 <UTIL_TIMER_Start+0xd4>)
 800ccea:	699b      	ldr	r3, [r3, #24]
 800ccec:	4798      	blx	r3
 800ccee:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	681a      	ldr	r2, [r3, #0]
 800ccf4:	697b      	ldr	r3, [r7, #20]
 800ccf6:	441a      	add	r2, r3
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681a      	ldr	r2, [r3, #0]
 800cd00:	4b0e      	ldr	r3, [pc, #56]	; (800cd3c <UTIL_TIMER_Start+0xd8>)
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	429a      	cmp	r2, r3
 800cd08:	d203      	bcs.n	800cd12 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 800cd0a:	6878      	ldr	r0, [r7, #4]
 800cd0c:	f000 f956 	bl	800cfbc <TimerInsertNewHeadTimer>
 800cd10:	e002      	b.n	800cd18 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 800cd12:	6878      	ldr	r0, [r7, #4]
 800cd14:	f000 f922 	bl	800cf5c <TimerInsertTimer>
 800cd18:	69fb      	ldr	r3, [r7, #28]
 800cd1a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	f383 8810 	msr	PRIMASK, r3
}
 800cd22:	bf00      	nop
  {
 800cd24:	e002      	b.n	800cd2c <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 800cd26:	2301      	movs	r3, #1
 800cd28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 800cd2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800cd30:	4618      	mov	r0, r3
 800cd32:	3728      	adds	r7, #40	; 0x28
 800cd34:	46bd      	mov	sp, r7
 800cd36:	bd80      	pop	{r7, pc}
 800cd38:	080108f4 	.word	0x080108f4
 800cd3c:	2000064c 	.word	0x2000064c

0800cd40 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b088      	sub	sp, #32
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800cd48:	2300      	movs	r3, #0
 800cd4a:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d05b      	beq.n	800ce0a <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cd52:	f3ef 8310 	mrs	r3, PRIMASK
 800cd56:	60fb      	str	r3, [r7, #12]
  return(result);
 800cd58:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800cd5a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800cd5c:	b672      	cpsid	i
}
 800cd5e:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800cd60:	4b2d      	ldr	r3, [pc, #180]	; (800ce18 <UTIL_TIMER_Stop+0xd8>)
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 800cd66:	4b2c      	ldr	r3, [pc, #176]	; (800ce18 <UTIL_TIMER_Stop+0xd8>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	2201      	movs	r2, #1
 800cd70:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 800cd72:	4b29      	ldr	r3, [pc, #164]	; (800ce18 <UTIL_TIMER_Stop+0xd8>)
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d041      	beq.n	800cdfe <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800cd80:	4b25      	ldr	r3, [pc, #148]	; (800ce18 <UTIL_TIMER_Stop+0xd8>)
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	687a      	ldr	r2, [r7, #4]
 800cd86:	429a      	cmp	r2, r3
 800cd88:	d134      	bne.n	800cdf4 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 800cd8a:	4b23      	ldr	r3, [pc, #140]	; (800ce18 <UTIL_TIMER_Stop+0xd8>)
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	2200      	movs	r2, #0
 800cd90:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 800cd92:	4b21      	ldr	r3, [pc, #132]	; (800ce18 <UTIL_TIMER_Stop+0xd8>)
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	695b      	ldr	r3, [r3, #20]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d00a      	beq.n	800cdb2 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 800cd9c:	4b1e      	ldr	r3, [pc, #120]	; (800ce18 <UTIL_TIMER_Stop+0xd8>)
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	695b      	ldr	r3, [r3, #20]
 800cda2:	4a1d      	ldr	r2, [pc, #116]	; (800ce18 <UTIL_TIMER_Stop+0xd8>)
 800cda4:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 800cda6:	4b1c      	ldr	r3, [pc, #112]	; (800ce18 <UTIL_TIMER_Stop+0xd8>)
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	4618      	mov	r0, r3
 800cdac:	f000 f8ac 	bl	800cf08 <TimerSetTimeout>
 800cdb0:	e023      	b.n	800cdfa <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 800cdb2:	4b1a      	ldr	r3, [pc, #104]	; (800ce1c <UTIL_TIMER_Stop+0xdc>)
 800cdb4:	68db      	ldr	r3, [r3, #12]
 800cdb6:	4798      	blx	r3
            TimerListHead = NULL;
 800cdb8:	4b17      	ldr	r3, [pc, #92]	; (800ce18 <UTIL_TIMER_Stop+0xd8>)
 800cdba:	2200      	movs	r2, #0
 800cdbc:	601a      	str	r2, [r3, #0]
 800cdbe:	e01c      	b.n	800cdfa <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 800cdc0:	697a      	ldr	r2, [r7, #20]
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	429a      	cmp	r2, r3
 800cdc6:	d110      	bne.n	800cdea <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 800cdc8:	697b      	ldr	r3, [r7, #20]
 800cdca:	695b      	ldr	r3, [r3, #20]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d006      	beq.n	800cdde <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 800cdd0:	697b      	ldr	r3, [r7, #20]
 800cdd2:	695b      	ldr	r3, [r3, #20]
 800cdd4:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800cdd6:	69bb      	ldr	r3, [r7, #24]
 800cdd8:	697a      	ldr	r2, [r7, #20]
 800cdda:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 800cddc:	e00d      	b.n	800cdfa <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 800cdde:	2300      	movs	r3, #0
 800cde0:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800cde2:	69bb      	ldr	r3, [r7, #24]
 800cde4:	697a      	ldr	r2, [r7, #20]
 800cde6:	615a      	str	r2, [r3, #20]
            break;
 800cde8:	e007      	b.n	800cdfa <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 800cdea:	697b      	ldr	r3, [r7, #20]
 800cdec:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 800cdee:	697b      	ldr	r3, [r7, #20]
 800cdf0:	695b      	ldr	r3, [r3, #20]
 800cdf2:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 800cdf4:	697b      	ldr	r3, [r7, #20]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d1e2      	bne.n	800cdc0 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	77fb      	strb	r3, [r7, #31]
 800cdfe:	693b      	ldr	r3, [r7, #16]
 800ce00:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ce02:	68bb      	ldr	r3, [r7, #8]
 800ce04:	f383 8810 	msr	PRIMASK, r3
}
 800ce08:	e001      	b.n	800ce0e <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 800ce0a:	2301      	movs	r3, #1
 800ce0c:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 800ce0e:	7ffb      	ldrb	r3, [r7, #31]
}
 800ce10:	4618      	mov	r0, r3
 800ce12:	3720      	adds	r7, #32
 800ce14:	46bd      	mov	sp, r7
 800ce16:	bd80      	pop	{r7, pc}
 800ce18:	2000064c 	.word	0x2000064c
 800ce1c:	080108f4 	.word	0x080108f4

0800ce20 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	b084      	sub	sp, #16
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	6078      	str	r0, [r7, #4]
 800ce28:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d102      	bne.n	800ce3a <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 800ce34:	2301      	movs	r3, #1
 800ce36:	73fb      	strb	r3, [r7, #15]
 800ce38:	e014      	b.n	800ce64 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800ce3a:	4b0d      	ldr	r3, [pc, #52]	; (800ce70 <UTIL_TIMER_SetPeriod+0x50>)
 800ce3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce3e:	6838      	ldr	r0, [r7, #0]
 800ce40:	4798      	blx	r3
 800ce42:	4602      	mov	r2, r0
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 800ce48:	6878      	ldr	r0, [r7, #4]
 800ce4a:	f000 f841 	bl	800ced0 <TimerExists>
 800ce4e:	4603      	mov	r3, r0
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d007      	beq.n	800ce64 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 800ce54:	6878      	ldr	r0, [r7, #4]
 800ce56:	f7ff ff73 	bl	800cd40 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800ce5a:	6878      	ldr	r0, [r7, #4]
 800ce5c:	f7ff ff02 	bl	800cc64 <UTIL_TIMER_Start>
 800ce60:	4603      	mov	r3, r0
 800ce62:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 800ce64:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce66:	4618      	mov	r0, r3
 800ce68:	3710      	adds	r7, #16
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	bd80      	pop	{r7, pc}
 800ce6e:	bf00      	nop
 800ce70:	080108f4 	.word	0x080108f4

0800ce74 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b082      	sub	sp, #8
 800ce78:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800ce7a:	4b06      	ldr	r3, [pc, #24]	; (800ce94 <UTIL_TIMER_GetCurrentTime+0x20>)
 800ce7c:	69db      	ldr	r3, [r3, #28]
 800ce7e:	4798      	blx	r3
 800ce80:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 800ce82:	4b04      	ldr	r3, [pc, #16]	; (800ce94 <UTIL_TIMER_GetCurrentTime+0x20>)
 800ce84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce86:	6878      	ldr	r0, [r7, #4]
 800ce88:	4798      	blx	r3
 800ce8a:	4603      	mov	r3, r0
}
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	3708      	adds	r7, #8
 800ce90:	46bd      	mov	sp, r7
 800ce92:	bd80      	pop	{r7, pc}
 800ce94:	080108f4 	.word	0x080108f4

0800ce98 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	b084      	sub	sp, #16
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800cea0:	4b0a      	ldr	r3, [pc, #40]	; (800cecc <UTIL_TIMER_GetElapsedTime+0x34>)
 800cea2:	69db      	ldr	r3, [r3, #28]
 800cea4:	4798      	blx	r3
 800cea6:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800cea8:	4b08      	ldr	r3, [pc, #32]	; (800cecc <UTIL_TIMER_GetElapsedTime+0x34>)
 800ceaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceac:	6878      	ldr	r0, [r7, #4]
 800ceae:	4798      	blx	r3
 800ceb0:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800ceb2:	4b06      	ldr	r3, [pc, #24]	; (800cecc <UTIL_TIMER_GetElapsedTime+0x34>)
 800ceb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ceb6:	68f9      	ldr	r1, [r7, #12]
 800ceb8:	68ba      	ldr	r2, [r7, #8]
 800ceba:	1a8a      	subs	r2, r1, r2
 800cebc:	4610      	mov	r0, r2
 800cebe:	4798      	blx	r3
 800cec0:	4603      	mov	r3, r0
}
 800cec2:	4618      	mov	r0, r3
 800cec4:	3710      	adds	r7, #16
 800cec6:	46bd      	mov	sp, r7
 800cec8:	bd80      	pop	{r7, pc}
 800ceca:	bf00      	nop
 800cecc:	080108f4 	.word	0x080108f4

0800ced0 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 800ced0:	b480      	push	{r7}
 800ced2:	b085      	sub	sp, #20
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800ced8:	4b0a      	ldr	r3, [pc, #40]	; (800cf04 <TimerExists+0x34>)
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 800cede:	e008      	b.n	800cef2 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 800cee0:	68fa      	ldr	r2, [r7, #12]
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	429a      	cmp	r2, r3
 800cee6:	d101      	bne.n	800ceec <TimerExists+0x1c>
    {
      return true;
 800cee8:	2301      	movs	r3, #1
 800ceea:	e006      	b.n	800cefa <TimerExists+0x2a>
    }
    cur = cur->Next;
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	695b      	ldr	r3, [r3, #20]
 800cef0:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d1f3      	bne.n	800cee0 <TimerExists+0x10>
  }
  return false;
 800cef8:	2300      	movs	r3, #0
}
 800cefa:	4618      	mov	r0, r3
 800cefc:	3714      	adds	r7, #20
 800cefe:	46bd      	mov	sp, r7
 800cf00:	bc80      	pop	{r7}
 800cf02:	4770      	bx	lr
 800cf04:	2000064c 	.word	0x2000064c

0800cf08 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800cf08:	b590      	push	{r4, r7, lr}
 800cf0a:	b085      	sub	sp, #20
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800cf10:	4b11      	ldr	r3, [pc, #68]	; (800cf58 <TimerSetTimeout+0x50>)
 800cf12:	6a1b      	ldr	r3, [r3, #32]
 800cf14:	4798      	blx	r3
 800cf16:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	2201      	movs	r2, #1
 800cf1c:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	681c      	ldr	r4, [r3, #0]
 800cf22:	4b0d      	ldr	r3, [pc, #52]	; (800cf58 <TimerSetTimeout+0x50>)
 800cf24:	699b      	ldr	r3, [r3, #24]
 800cf26:	4798      	blx	r3
 800cf28:	4602      	mov	r2, r0
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	4413      	add	r3, r2
 800cf2e:	429c      	cmp	r4, r3
 800cf30:	d207      	bcs.n	800cf42 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800cf32:	4b09      	ldr	r3, [pc, #36]	; (800cf58 <TimerSetTimeout+0x50>)
 800cf34:	699b      	ldr	r3, [r3, #24]
 800cf36:	4798      	blx	r3
 800cf38:	4602      	mov	r2, r0
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	441a      	add	r2, r3
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800cf42:	4b05      	ldr	r3, [pc, #20]	; (800cf58 <TimerSetTimeout+0x50>)
 800cf44:	689b      	ldr	r3, [r3, #8]
 800cf46:	687a      	ldr	r2, [r7, #4]
 800cf48:	6812      	ldr	r2, [r2, #0]
 800cf4a:	4610      	mov	r0, r2
 800cf4c:	4798      	blx	r3
}
 800cf4e:	bf00      	nop
 800cf50:	3714      	adds	r7, #20
 800cf52:	46bd      	mov	sp, r7
 800cf54:	bd90      	pop	{r4, r7, pc}
 800cf56:	bf00      	nop
 800cf58:	080108f4 	.word	0x080108f4

0800cf5c <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 800cf5c:	b480      	push	{r7}
 800cf5e:	b085      	sub	sp, #20
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800cf64:	4b14      	ldr	r3, [pc, #80]	; (800cfb8 <TimerInsertTimer+0x5c>)
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800cf6a:	4b13      	ldr	r3, [pc, #76]	; (800cfb8 <TimerInsertTimer+0x5c>)
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	695b      	ldr	r3, [r3, #20]
 800cf70:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 800cf72:	e012      	b.n	800cf9a <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	681a      	ldr	r2, [r3, #0]
 800cf78:	68bb      	ldr	r3, [r7, #8]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	429a      	cmp	r2, r3
 800cf7e:	d905      	bls.n	800cf8c <TimerInsertTimer+0x30>
    {
        cur = next;
 800cf80:	68bb      	ldr	r3, [r7, #8]
 800cf82:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 800cf84:	68bb      	ldr	r3, [r7, #8]
 800cf86:	695b      	ldr	r3, [r3, #20]
 800cf88:	60bb      	str	r3, [r7, #8]
 800cf8a:	e006      	b.n	800cf9a <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	687a      	ldr	r2, [r7, #4]
 800cf90:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	68ba      	ldr	r2, [r7, #8]
 800cf96:	615a      	str	r2, [r3, #20]
        return;
 800cf98:	e009      	b.n	800cfae <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	695b      	ldr	r3, [r3, #20]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d1e8      	bne.n	800cf74 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	687a      	ldr	r2, [r7, #4]
 800cfa6:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	2200      	movs	r2, #0
 800cfac:	615a      	str	r2, [r3, #20]
}
 800cfae:	3714      	adds	r7, #20
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	bc80      	pop	{r7}
 800cfb4:	4770      	bx	lr
 800cfb6:	bf00      	nop
 800cfb8:	2000064c 	.word	0x2000064c

0800cfbc <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b084      	sub	sp, #16
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800cfc4:	4b0b      	ldr	r3, [pc, #44]	; (800cff4 <TimerInsertNewHeadTimer+0x38>)
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d002      	beq.n	800cfd6 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	68fa      	ldr	r2, [r7, #12]
 800cfda:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 800cfdc:	4a05      	ldr	r2, [pc, #20]	; (800cff4 <TimerInsertNewHeadTimer+0x38>)
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800cfe2:	4b04      	ldr	r3, [pc, #16]	; (800cff4 <TimerInsertNewHeadTimer+0x38>)
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	f7ff ff8e 	bl	800cf08 <TimerSetTimeout>
}
 800cfec:	bf00      	nop
 800cfee:	3710      	adds	r7, #16
 800cff0:	46bd      	mov	sp, r7
 800cff2:	bd80      	pop	{r7, pc}
 800cff4:	2000064c 	.word	0x2000064c

0800cff8 <_ZdlPvj>:
 800cff8:	f000 b818 	b.w	800d02c <_ZdlPv>

0800cffc <_ZdaPv>:
 800cffc:	f000 b816 	b.w	800d02c <_ZdlPv>

0800d000 <_Znwj>:
 800d000:	2801      	cmp	r0, #1
 800d002:	bf38      	it	cc
 800d004:	2001      	movcc	r0, #1
 800d006:	b510      	push	{r4, lr}
 800d008:	4604      	mov	r4, r0
 800d00a:	4620      	mov	r0, r4
 800d00c:	f000 f888 	bl	800d120 <malloc>
 800d010:	b930      	cbnz	r0, 800d020 <_Znwj+0x20>
 800d012:	f000 f81f 	bl	800d054 <_ZSt15get_new_handlerv>
 800d016:	b908      	cbnz	r0, 800d01c <_Znwj+0x1c>
 800d018:	f000 f84a 	bl	800d0b0 <abort>
 800d01c:	4780      	blx	r0
 800d01e:	e7f4      	b.n	800d00a <_Znwj+0xa>
 800d020:	bd10      	pop	{r4, pc}

0800d022 <_Znaj>:
 800d022:	f7ff bfed 	b.w	800d000 <_Znwj>

0800d026 <__cxa_pure_virtual>:
 800d026:	b508      	push	{r3, lr}
 800d028:	f000 f80e 	bl	800d048 <_ZSt9terminatev>

0800d02c <_ZdlPv>:
 800d02c:	f000 b880 	b.w	800d130 <free>

0800d030 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800d030:	b508      	push	{r3, lr}
 800d032:	4780      	blx	r0
 800d034:	f000 f83c 	bl	800d0b0 <abort>

0800d038 <_ZSt13get_terminatev>:
 800d038:	4b02      	ldr	r3, [pc, #8]	; (800d044 <_ZSt13get_terminatev+0xc>)
 800d03a:	6818      	ldr	r0, [r3, #0]
 800d03c:	f3bf 8f5b 	dmb	ish
 800d040:	4770      	bx	lr
 800d042:	bf00      	nop
 800d044:	2000000c 	.word	0x2000000c

0800d048 <_ZSt9terminatev>:
 800d048:	b508      	push	{r3, lr}
 800d04a:	f7ff fff5 	bl	800d038 <_ZSt13get_terminatev>
 800d04e:	f7ff ffef 	bl	800d030 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800d054 <_ZSt15get_new_handlerv>:
 800d054:	4b02      	ldr	r3, [pc, #8]	; (800d060 <_ZSt15get_new_handlerv+0xc>)
 800d056:	6818      	ldr	r0, [r3, #0]
 800d058:	f3bf 8f5b 	dmb	ish
 800d05c:	4770      	bx	lr
 800d05e:	bf00      	nop
 800d060:	20000650 	.word	0x20000650

0800d064 <roundf>:
 800d064:	b508      	push	{r3, lr}
 800d066:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800d06a:	3b7f      	subs	r3, #127	; 0x7f
 800d06c:	2b16      	cmp	r3, #22
 800d06e:	4601      	mov	r1, r0
 800d070:	4602      	mov	r2, r0
 800d072:	dc14      	bgt.n	800d09e <roundf+0x3a>
 800d074:	2b00      	cmp	r3, #0
 800d076:	da07      	bge.n	800d088 <roundf+0x24>
 800d078:	3301      	adds	r3, #1
 800d07a:	f000 4100 	and.w	r1, r0, #2147483648	; 0x80000000
 800d07e:	d101      	bne.n	800d084 <roundf+0x20>
 800d080:	f041 517e 	orr.w	r1, r1, #1065353216	; 0x3f800000
 800d084:	4608      	mov	r0, r1
 800d086:	bd08      	pop	{r3, pc}
 800d088:	4808      	ldr	r0, [pc, #32]	; (800d0ac <roundf+0x48>)
 800d08a:	4118      	asrs	r0, r3
 800d08c:	4201      	tst	r1, r0
 800d08e:	d0f9      	beq.n	800d084 <roundf+0x20>
 800d090:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d094:	4119      	asrs	r1, r3
 800d096:	4411      	add	r1, r2
 800d098:	ea21 0100 	bic.w	r1, r1, r0
 800d09c:	e7f2      	b.n	800d084 <roundf+0x20>
 800d09e:	2b80      	cmp	r3, #128	; 0x80
 800d0a0:	d1f0      	bne.n	800d084 <roundf+0x20>
 800d0a2:	f7f3 fd91 	bl	8000bc8 <__addsf3>
 800d0a6:	4601      	mov	r1, r0
 800d0a8:	e7ec      	b.n	800d084 <roundf+0x20>
 800d0aa:	bf00      	nop
 800d0ac:	007fffff 	.word	0x007fffff

0800d0b0 <abort>:
 800d0b0:	b508      	push	{r3, lr}
 800d0b2:	2006      	movs	r0, #6
 800d0b4:	f000 f9dc 	bl	800d470 <raise>
 800d0b8:	2001      	movs	r0, #1
 800d0ba:	f7f8 fd4f 	bl	8005b5c <_exit>

0800d0be <atof>:
 800d0be:	2100      	movs	r1, #0
 800d0c0:	f001 b866 	b.w	800e190 <strtod>

0800d0c4 <atoi>:
 800d0c4:	220a      	movs	r2, #10
 800d0c6:	2100      	movs	r1, #0
 800d0c8:	f001 b8ea 	b.w	800e2a0 <strtol>

0800d0cc <__errno>:
 800d0cc:	4b01      	ldr	r3, [pc, #4]	; (800d0d4 <__errno+0x8>)
 800d0ce:	6818      	ldr	r0, [r3, #0]
 800d0d0:	4770      	bx	lr
 800d0d2:	bf00      	nop
 800d0d4:	20000010 	.word	0x20000010

0800d0d8 <__libc_init_array>:
 800d0d8:	b570      	push	{r4, r5, r6, lr}
 800d0da:	4d0d      	ldr	r5, [pc, #52]	; (800d110 <__libc_init_array+0x38>)
 800d0dc:	4c0d      	ldr	r4, [pc, #52]	; (800d114 <__libc_init_array+0x3c>)
 800d0de:	1b64      	subs	r4, r4, r5
 800d0e0:	10a4      	asrs	r4, r4, #2
 800d0e2:	2600      	movs	r6, #0
 800d0e4:	42a6      	cmp	r6, r4
 800d0e6:	d109      	bne.n	800d0fc <__libc_init_array+0x24>
 800d0e8:	4d0b      	ldr	r5, [pc, #44]	; (800d118 <__libc_init_array+0x40>)
 800d0ea:	4c0c      	ldr	r4, [pc, #48]	; (800d11c <__libc_init_array+0x44>)
 800d0ec:	f003 fa32 	bl	8010554 <_init>
 800d0f0:	1b64      	subs	r4, r4, r5
 800d0f2:	10a4      	asrs	r4, r4, #2
 800d0f4:	2600      	movs	r6, #0
 800d0f6:	42a6      	cmp	r6, r4
 800d0f8:	d105      	bne.n	800d106 <__libc_init_array+0x2e>
 800d0fa:	bd70      	pop	{r4, r5, r6, pc}
 800d0fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800d100:	4798      	blx	r3
 800d102:	3601      	adds	r6, #1
 800d104:	e7ee      	b.n	800d0e4 <__libc_init_array+0xc>
 800d106:	f855 3b04 	ldr.w	r3, [r5], #4
 800d10a:	4798      	blx	r3
 800d10c:	3601      	adds	r6, #1
 800d10e:	e7f2      	b.n	800d0f6 <__libc_init_array+0x1e>
 800d110:	08010f18 	.word	0x08010f18
 800d114:	08010f18 	.word	0x08010f18
 800d118:	08010f18 	.word	0x08010f18
 800d11c:	08010f28 	.word	0x08010f28

0800d120 <malloc>:
 800d120:	4b02      	ldr	r3, [pc, #8]	; (800d12c <malloc+0xc>)
 800d122:	4601      	mov	r1, r0
 800d124:	6818      	ldr	r0, [r3, #0]
 800d126:	f000 b88b 	b.w	800d240 <_malloc_r>
 800d12a:	bf00      	nop
 800d12c:	20000010 	.word	0x20000010

0800d130 <free>:
 800d130:	4b02      	ldr	r3, [pc, #8]	; (800d13c <free+0xc>)
 800d132:	4601      	mov	r1, r0
 800d134:	6818      	ldr	r0, [r3, #0]
 800d136:	f000 b819 	b.w	800d16c <_free_r>
 800d13a:	bf00      	nop
 800d13c:	20000010 	.word	0x20000010

0800d140 <memcpy>:
 800d140:	440a      	add	r2, r1
 800d142:	4291      	cmp	r1, r2
 800d144:	f100 33ff 	add.w	r3, r0, #4294967295
 800d148:	d100      	bne.n	800d14c <memcpy+0xc>
 800d14a:	4770      	bx	lr
 800d14c:	b510      	push	{r4, lr}
 800d14e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d152:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d156:	4291      	cmp	r1, r2
 800d158:	d1f9      	bne.n	800d14e <memcpy+0xe>
 800d15a:	bd10      	pop	{r4, pc}

0800d15c <memset>:
 800d15c:	4402      	add	r2, r0
 800d15e:	4603      	mov	r3, r0
 800d160:	4293      	cmp	r3, r2
 800d162:	d100      	bne.n	800d166 <memset+0xa>
 800d164:	4770      	bx	lr
 800d166:	f803 1b01 	strb.w	r1, [r3], #1
 800d16a:	e7f9      	b.n	800d160 <memset+0x4>

0800d16c <_free_r>:
 800d16c:	b538      	push	{r3, r4, r5, lr}
 800d16e:	4605      	mov	r5, r0
 800d170:	2900      	cmp	r1, #0
 800d172:	d041      	beq.n	800d1f8 <_free_r+0x8c>
 800d174:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d178:	1f0c      	subs	r4, r1, #4
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	bfb8      	it	lt
 800d17e:	18e4      	addlt	r4, r4, r3
 800d180:	f001 fce0 	bl	800eb44 <__malloc_lock>
 800d184:	4a1d      	ldr	r2, [pc, #116]	; (800d1fc <_free_r+0x90>)
 800d186:	6813      	ldr	r3, [r2, #0]
 800d188:	b933      	cbnz	r3, 800d198 <_free_r+0x2c>
 800d18a:	6063      	str	r3, [r4, #4]
 800d18c:	6014      	str	r4, [r2, #0]
 800d18e:	4628      	mov	r0, r5
 800d190:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d194:	f001 bcdc 	b.w	800eb50 <__malloc_unlock>
 800d198:	42a3      	cmp	r3, r4
 800d19a:	d908      	bls.n	800d1ae <_free_r+0x42>
 800d19c:	6820      	ldr	r0, [r4, #0]
 800d19e:	1821      	adds	r1, r4, r0
 800d1a0:	428b      	cmp	r3, r1
 800d1a2:	bf01      	itttt	eq
 800d1a4:	6819      	ldreq	r1, [r3, #0]
 800d1a6:	685b      	ldreq	r3, [r3, #4]
 800d1a8:	1809      	addeq	r1, r1, r0
 800d1aa:	6021      	streq	r1, [r4, #0]
 800d1ac:	e7ed      	b.n	800d18a <_free_r+0x1e>
 800d1ae:	461a      	mov	r2, r3
 800d1b0:	685b      	ldr	r3, [r3, #4]
 800d1b2:	b10b      	cbz	r3, 800d1b8 <_free_r+0x4c>
 800d1b4:	42a3      	cmp	r3, r4
 800d1b6:	d9fa      	bls.n	800d1ae <_free_r+0x42>
 800d1b8:	6811      	ldr	r1, [r2, #0]
 800d1ba:	1850      	adds	r0, r2, r1
 800d1bc:	42a0      	cmp	r0, r4
 800d1be:	d10b      	bne.n	800d1d8 <_free_r+0x6c>
 800d1c0:	6820      	ldr	r0, [r4, #0]
 800d1c2:	4401      	add	r1, r0
 800d1c4:	1850      	adds	r0, r2, r1
 800d1c6:	4283      	cmp	r3, r0
 800d1c8:	6011      	str	r1, [r2, #0]
 800d1ca:	d1e0      	bne.n	800d18e <_free_r+0x22>
 800d1cc:	6818      	ldr	r0, [r3, #0]
 800d1ce:	685b      	ldr	r3, [r3, #4]
 800d1d0:	6053      	str	r3, [r2, #4]
 800d1d2:	4401      	add	r1, r0
 800d1d4:	6011      	str	r1, [r2, #0]
 800d1d6:	e7da      	b.n	800d18e <_free_r+0x22>
 800d1d8:	d902      	bls.n	800d1e0 <_free_r+0x74>
 800d1da:	230c      	movs	r3, #12
 800d1dc:	602b      	str	r3, [r5, #0]
 800d1de:	e7d6      	b.n	800d18e <_free_r+0x22>
 800d1e0:	6820      	ldr	r0, [r4, #0]
 800d1e2:	1821      	adds	r1, r4, r0
 800d1e4:	428b      	cmp	r3, r1
 800d1e6:	bf04      	itt	eq
 800d1e8:	6819      	ldreq	r1, [r3, #0]
 800d1ea:	685b      	ldreq	r3, [r3, #4]
 800d1ec:	6063      	str	r3, [r4, #4]
 800d1ee:	bf04      	itt	eq
 800d1f0:	1809      	addeq	r1, r1, r0
 800d1f2:	6021      	streq	r1, [r4, #0]
 800d1f4:	6054      	str	r4, [r2, #4]
 800d1f6:	e7ca      	b.n	800d18e <_free_r+0x22>
 800d1f8:	bd38      	pop	{r3, r4, r5, pc}
 800d1fa:	bf00      	nop
 800d1fc:	20000654 	.word	0x20000654

0800d200 <sbrk_aligned>:
 800d200:	b570      	push	{r4, r5, r6, lr}
 800d202:	4e0e      	ldr	r6, [pc, #56]	; (800d23c <sbrk_aligned+0x3c>)
 800d204:	460c      	mov	r4, r1
 800d206:	6831      	ldr	r1, [r6, #0]
 800d208:	4605      	mov	r5, r0
 800d20a:	b911      	cbnz	r1, 800d212 <sbrk_aligned+0x12>
 800d20c:	f000 f8f8 	bl	800d400 <_sbrk_r>
 800d210:	6030      	str	r0, [r6, #0]
 800d212:	4621      	mov	r1, r4
 800d214:	4628      	mov	r0, r5
 800d216:	f000 f8f3 	bl	800d400 <_sbrk_r>
 800d21a:	1c43      	adds	r3, r0, #1
 800d21c:	d00a      	beq.n	800d234 <sbrk_aligned+0x34>
 800d21e:	1cc4      	adds	r4, r0, #3
 800d220:	f024 0403 	bic.w	r4, r4, #3
 800d224:	42a0      	cmp	r0, r4
 800d226:	d007      	beq.n	800d238 <sbrk_aligned+0x38>
 800d228:	1a21      	subs	r1, r4, r0
 800d22a:	4628      	mov	r0, r5
 800d22c:	f000 f8e8 	bl	800d400 <_sbrk_r>
 800d230:	3001      	adds	r0, #1
 800d232:	d101      	bne.n	800d238 <sbrk_aligned+0x38>
 800d234:	f04f 34ff 	mov.w	r4, #4294967295
 800d238:	4620      	mov	r0, r4
 800d23a:	bd70      	pop	{r4, r5, r6, pc}
 800d23c:	20000658 	.word	0x20000658

0800d240 <_malloc_r>:
 800d240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d244:	1ccd      	adds	r5, r1, #3
 800d246:	f025 0503 	bic.w	r5, r5, #3
 800d24a:	3508      	adds	r5, #8
 800d24c:	2d0c      	cmp	r5, #12
 800d24e:	bf38      	it	cc
 800d250:	250c      	movcc	r5, #12
 800d252:	2d00      	cmp	r5, #0
 800d254:	4607      	mov	r7, r0
 800d256:	db01      	blt.n	800d25c <_malloc_r+0x1c>
 800d258:	42a9      	cmp	r1, r5
 800d25a:	d905      	bls.n	800d268 <_malloc_r+0x28>
 800d25c:	230c      	movs	r3, #12
 800d25e:	603b      	str	r3, [r7, #0]
 800d260:	2600      	movs	r6, #0
 800d262:	4630      	mov	r0, r6
 800d264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d268:	4e2e      	ldr	r6, [pc, #184]	; (800d324 <_malloc_r+0xe4>)
 800d26a:	f001 fc6b 	bl	800eb44 <__malloc_lock>
 800d26e:	6833      	ldr	r3, [r6, #0]
 800d270:	461c      	mov	r4, r3
 800d272:	bb34      	cbnz	r4, 800d2c2 <_malloc_r+0x82>
 800d274:	4629      	mov	r1, r5
 800d276:	4638      	mov	r0, r7
 800d278:	f7ff ffc2 	bl	800d200 <sbrk_aligned>
 800d27c:	1c43      	adds	r3, r0, #1
 800d27e:	4604      	mov	r4, r0
 800d280:	d14d      	bne.n	800d31e <_malloc_r+0xde>
 800d282:	6834      	ldr	r4, [r6, #0]
 800d284:	4626      	mov	r6, r4
 800d286:	2e00      	cmp	r6, #0
 800d288:	d140      	bne.n	800d30c <_malloc_r+0xcc>
 800d28a:	6823      	ldr	r3, [r4, #0]
 800d28c:	4631      	mov	r1, r6
 800d28e:	4638      	mov	r0, r7
 800d290:	eb04 0803 	add.w	r8, r4, r3
 800d294:	f000 f8b4 	bl	800d400 <_sbrk_r>
 800d298:	4580      	cmp	r8, r0
 800d29a:	d13a      	bne.n	800d312 <_malloc_r+0xd2>
 800d29c:	6821      	ldr	r1, [r4, #0]
 800d29e:	3503      	adds	r5, #3
 800d2a0:	1a6d      	subs	r5, r5, r1
 800d2a2:	f025 0503 	bic.w	r5, r5, #3
 800d2a6:	3508      	adds	r5, #8
 800d2a8:	2d0c      	cmp	r5, #12
 800d2aa:	bf38      	it	cc
 800d2ac:	250c      	movcc	r5, #12
 800d2ae:	4629      	mov	r1, r5
 800d2b0:	4638      	mov	r0, r7
 800d2b2:	f7ff ffa5 	bl	800d200 <sbrk_aligned>
 800d2b6:	3001      	adds	r0, #1
 800d2b8:	d02b      	beq.n	800d312 <_malloc_r+0xd2>
 800d2ba:	6823      	ldr	r3, [r4, #0]
 800d2bc:	442b      	add	r3, r5
 800d2be:	6023      	str	r3, [r4, #0]
 800d2c0:	e00e      	b.n	800d2e0 <_malloc_r+0xa0>
 800d2c2:	6822      	ldr	r2, [r4, #0]
 800d2c4:	1b52      	subs	r2, r2, r5
 800d2c6:	d41e      	bmi.n	800d306 <_malloc_r+0xc6>
 800d2c8:	2a0b      	cmp	r2, #11
 800d2ca:	d916      	bls.n	800d2fa <_malloc_r+0xba>
 800d2cc:	1961      	adds	r1, r4, r5
 800d2ce:	42a3      	cmp	r3, r4
 800d2d0:	6025      	str	r5, [r4, #0]
 800d2d2:	bf18      	it	ne
 800d2d4:	6059      	strne	r1, [r3, #4]
 800d2d6:	6863      	ldr	r3, [r4, #4]
 800d2d8:	bf08      	it	eq
 800d2da:	6031      	streq	r1, [r6, #0]
 800d2dc:	5162      	str	r2, [r4, r5]
 800d2de:	604b      	str	r3, [r1, #4]
 800d2e0:	4638      	mov	r0, r7
 800d2e2:	f104 060b 	add.w	r6, r4, #11
 800d2e6:	f001 fc33 	bl	800eb50 <__malloc_unlock>
 800d2ea:	f026 0607 	bic.w	r6, r6, #7
 800d2ee:	1d23      	adds	r3, r4, #4
 800d2f0:	1af2      	subs	r2, r6, r3
 800d2f2:	d0b6      	beq.n	800d262 <_malloc_r+0x22>
 800d2f4:	1b9b      	subs	r3, r3, r6
 800d2f6:	50a3      	str	r3, [r4, r2]
 800d2f8:	e7b3      	b.n	800d262 <_malloc_r+0x22>
 800d2fa:	6862      	ldr	r2, [r4, #4]
 800d2fc:	42a3      	cmp	r3, r4
 800d2fe:	bf0c      	ite	eq
 800d300:	6032      	streq	r2, [r6, #0]
 800d302:	605a      	strne	r2, [r3, #4]
 800d304:	e7ec      	b.n	800d2e0 <_malloc_r+0xa0>
 800d306:	4623      	mov	r3, r4
 800d308:	6864      	ldr	r4, [r4, #4]
 800d30a:	e7b2      	b.n	800d272 <_malloc_r+0x32>
 800d30c:	4634      	mov	r4, r6
 800d30e:	6876      	ldr	r6, [r6, #4]
 800d310:	e7b9      	b.n	800d286 <_malloc_r+0x46>
 800d312:	230c      	movs	r3, #12
 800d314:	603b      	str	r3, [r7, #0]
 800d316:	4638      	mov	r0, r7
 800d318:	f001 fc1a 	bl	800eb50 <__malloc_unlock>
 800d31c:	e7a1      	b.n	800d262 <_malloc_r+0x22>
 800d31e:	6025      	str	r5, [r4, #0]
 800d320:	e7de      	b.n	800d2e0 <_malloc_r+0xa0>
 800d322:	bf00      	nop
 800d324:	20000654 	.word	0x20000654

0800d328 <srand>:
 800d328:	b538      	push	{r3, r4, r5, lr}
 800d32a:	4b10      	ldr	r3, [pc, #64]	; (800d36c <srand+0x44>)
 800d32c:	681d      	ldr	r5, [r3, #0]
 800d32e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800d330:	4604      	mov	r4, r0
 800d332:	b9b3      	cbnz	r3, 800d362 <srand+0x3a>
 800d334:	2018      	movs	r0, #24
 800d336:	f7ff fef3 	bl	800d120 <malloc>
 800d33a:	4602      	mov	r2, r0
 800d33c:	63a8      	str	r0, [r5, #56]	; 0x38
 800d33e:	b920      	cbnz	r0, 800d34a <srand+0x22>
 800d340:	4b0b      	ldr	r3, [pc, #44]	; (800d370 <srand+0x48>)
 800d342:	480c      	ldr	r0, [pc, #48]	; (800d374 <srand+0x4c>)
 800d344:	2142      	movs	r1, #66	; 0x42
 800d346:	f001 f855 	bl	800e3f4 <__assert_func>
 800d34a:	490b      	ldr	r1, [pc, #44]	; (800d378 <srand+0x50>)
 800d34c:	4b0b      	ldr	r3, [pc, #44]	; (800d37c <srand+0x54>)
 800d34e:	e9c0 1300 	strd	r1, r3, [r0]
 800d352:	4b0b      	ldr	r3, [pc, #44]	; (800d380 <srand+0x58>)
 800d354:	6083      	str	r3, [r0, #8]
 800d356:	230b      	movs	r3, #11
 800d358:	8183      	strh	r3, [r0, #12]
 800d35a:	2100      	movs	r1, #0
 800d35c:	2001      	movs	r0, #1
 800d35e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800d362:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800d364:	2200      	movs	r2, #0
 800d366:	611c      	str	r4, [r3, #16]
 800d368:	615a      	str	r2, [r3, #20]
 800d36a:	bd38      	pop	{r3, r4, r5, pc}
 800d36c:	20000010 	.word	0x20000010
 800d370:	08010a84 	.word	0x08010a84
 800d374:	08010a9b 	.word	0x08010a9b
 800d378:	abcd330e 	.word	0xabcd330e
 800d37c:	e66d1234 	.word	0xe66d1234
 800d380:	0005deec 	.word	0x0005deec

0800d384 <rand>:
 800d384:	4b16      	ldr	r3, [pc, #88]	; (800d3e0 <rand+0x5c>)
 800d386:	b510      	push	{r4, lr}
 800d388:	681c      	ldr	r4, [r3, #0]
 800d38a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d38c:	b9b3      	cbnz	r3, 800d3bc <rand+0x38>
 800d38e:	2018      	movs	r0, #24
 800d390:	f7ff fec6 	bl	800d120 <malloc>
 800d394:	4602      	mov	r2, r0
 800d396:	63a0      	str	r0, [r4, #56]	; 0x38
 800d398:	b920      	cbnz	r0, 800d3a4 <rand+0x20>
 800d39a:	4b12      	ldr	r3, [pc, #72]	; (800d3e4 <rand+0x60>)
 800d39c:	4812      	ldr	r0, [pc, #72]	; (800d3e8 <rand+0x64>)
 800d39e:	214e      	movs	r1, #78	; 0x4e
 800d3a0:	f001 f828 	bl	800e3f4 <__assert_func>
 800d3a4:	4911      	ldr	r1, [pc, #68]	; (800d3ec <rand+0x68>)
 800d3a6:	4b12      	ldr	r3, [pc, #72]	; (800d3f0 <rand+0x6c>)
 800d3a8:	e9c0 1300 	strd	r1, r3, [r0]
 800d3ac:	4b11      	ldr	r3, [pc, #68]	; (800d3f4 <rand+0x70>)
 800d3ae:	6083      	str	r3, [r0, #8]
 800d3b0:	230b      	movs	r3, #11
 800d3b2:	8183      	strh	r3, [r0, #12]
 800d3b4:	2100      	movs	r1, #0
 800d3b6:	2001      	movs	r0, #1
 800d3b8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800d3bc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800d3be:	4a0e      	ldr	r2, [pc, #56]	; (800d3f8 <rand+0x74>)
 800d3c0:	6920      	ldr	r0, [r4, #16]
 800d3c2:	6963      	ldr	r3, [r4, #20]
 800d3c4:	490d      	ldr	r1, [pc, #52]	; (800d3fc <rand+0x78>)
 800d3c6:	4342      	muls	r2, r0
 800d3c8:	fb01 2203 	mla	r2, r1, r3, r2
 800d3cc:	fba0 0101 	umull	r0, r1, r0, r1
 800d3d0:	1c43      	adds	r3, r0, #1
 800d3d2:	eb42 0001 	adc.w	r0, r2, r1
 800d3d6:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800d3da:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800d3de:	bd10      	pop	{r4, pc}
 800d3e0:	20000010 	.word	0x20000010
 800d3e4:	08010a84 	.word	0x08010a84
 800d3e8:	08010a9b 	.word	0x08010a9b
 800d3ec:	abcd330e 	.word	0xabcd330e
 800d3f0:	e66d1234 	.word	0xe66d1234
 800d3f4:	0005deec 	.word	0x0005deec
 800d3f8:	5851f42d 	.word	0x5851f42d
 800d3fc:	4c957f2d 	.word	0x4c957f2d

0800d400 <_sbrk_r>:
 800d400:	b538      	push	{r3, r4, r5, lr}
 800d402:	4d06      	ldr	r5, [pc, #24]	; (800d41c <_sbrk_r+0x1c>)
 800d404:	2300      	movs	r3, #0
 800d406:	4604      	mov	r4, r0
 800d408:	4608      	mov	r0, r1
 800d40a:	602b      	str	r3, [r5, #0]
 800d40c:	f7f8 fc1a 	bl	8005c44 <_sbrk>
 800d410:	1c43      	adds	r3, r0, #1
 800d412:	d102      	bne.n	800d41a <_sbrk_r+0x1a>
 800d414:	682b      	ldr	r3, [r5, #0]
 800d416:	b103      	cbz	r3, 800d41a <_sbrk_r+0x1a>
 800d418:	6023      	str	r3, [r4, #0]
 800d41a:	bd38      	pop	{r3, r4, r5, pc}
 800d41c:	2000065c 	.word	0x2000065c

0800d420 <_raise_r>:
 800d420:	291f      	cmp	r1, #31
 800d422:	b538      	push	{r3, r4, r5, lr}
 800d424:	4604      	mov	r4, r0
 800d426:	460d      	mov	r5, r1
 800d428:	d904      	bls.n	800d434 <_raise_r+0x14>
 800d42a:	2316      	movs	r3, #22
 800d42c:	6003      	str	r3, [r0, #0]
 800d42e:	f04f 30ff 	mov.w	r0, #4294967295
 800d432:	bd38      	pop	{r3, r4, r5, pc}
 800d434:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d436:	b112      	cbz	r2, 800d43e <_raise_r+0x1e>
 800d438:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d43c:	b94b      	cbnz	r3, 800d452 <_raise_r+0x32>
 800d43e:	4620      	mov	r0, r4
 800d440:	f000 f830 	bl	800d4a4 <_getpid_r>
 800d444:	462a      	mov	r2, r5
 800d446:	4601      	mov	r1, r0
 800d448:	4620      	mov	r0, r4
 800d44a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d44e:	f000 b817 	b.w	800d480 <_kill_r>
 800d452:	2b01      	cmp	r3, #1
 800d454:	d00a      	beq.n	800d46c <_raise_r+0x4c>
 800d456:	1c59      	adds	r1, r3, #1
 800d458:	d103      	bne.n	800d462 <_raise_r+0x42>
 800d45a:	2316      	movs	r3, #22
 800d45c:	6003      	str	r3, [r0, #0]
 800d45e:	2001      	movs	r0, #1
 800d460:	e7e7      	b.n	800d432 <_raise_r+0x12>
 800d462:	2400      	movs	r4, #0
 800d464:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d468:	4628      	mov	r0, r5
 800d46a:	4798      	blx	r3
 800d46c:	2000      	movs	r0, #0
 800d46e:	e7e0      	b.n	800d432 <_raise_r+0x12>

0800d470 <raise>:
 800d470:	4b02      	ldr	r3, [pc, #8]	; (800d47c <raise+0xc>)
 800d472:	4601      	mov	r1, r0
 800d474:	6818      	ldr	r0, [r3, #0]
 800d476:	f7ff bfd3 	b.w	800d420 <_raise_r>
 800d47a:	bf00      	nop
 800d47c:	20000010 	.word	0x20000010

0800d480 <_kill_r>:
 800d480:	b538      	push	{r3, r4, r5, lr}
 800d482:	4d07      	ldr	r5, [pc, #28]	; (800d4a0 <_kill_r+0x20>)
 800d484:	2300      	movs	r3, #0
 800d486:	4604      	mov	r4, r0
 800d488:	4608      	mov	r0, r1
 800d48a:	4611      	mov	r1, r2
 800d48c:	602b      	str	r3, [r5, #0]
 800d48e:	f7f8 fb55 	bl	8005b3c <_kill>
 800d492:	1c43      	adds	r3, r0, #1
 800d494:	d102      	bne.n	800d49c <_kill_r+0x1c>
 800d496:	682b      	ldr	r3, [r5, #0]
 800d498:	b103      	cbz	r3, 800d49c <_kill_r+0x1c>
 800d49a:	6023      	str	r3, [r4, #0]
 800d49c:	bd38      	pop	{r3, r4, r5, pc}
 800d49e:	bf00      	nop
 800d4a0:	2000065c 	.word	0x2000065c

0800d4a4 <_getpid_r>:
 800d4a4:	f7f8 bb43 	b.w	8005b2e <_getpid>

0800d4a8 <sniprintf>:
 800d4a8:	b40c      	push	{r2, r3}
 800d4aa:	b530      	push	{r4, r5, lr}
 800d4ac:	4b17      	ldr	r3, [pc, #92]	; (800d50c <sniprintf+0x64>)
 800d4ae:	1e0c      	subs	r4, r1, #0
 800d4b0:	681d      	ldr	r5, [r3, #0]
 800d4b2:	b09d      	sub	sp, #116	; 0x74
 800d4b4:	da08      	bge.n	800d4c8 <sniprintf+0x20>
 800d4b6:	238b      	movs	r3, #139	; 0x8b
 800d4b8:	602b      	str	r3, [r5, #0]
 800d4ba:	f04f 30ff 	mov.w	r0, #4294967295
 800d4be:	b01d      	add	sp, #116	; 0x74
 800d4c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d4c4:	b002      	add	sp, #8
 800d4c6:	4770      	bx	lr
 800d4c8:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d4cc:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d4d0:	bf14      	ite	ne
 800d4d2:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d4d6:	4623      	moveq	r3, r4
 800d4d8:	9304      	str	r3, [sp, #16]
 800d4da:	9307      	str	r3, [sp, #28]
 800d4dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d4e0:	9002      	str	r0, [sp, #8]
 800d4e2:	9006      	str	r0, [sp, #24]
 800d4e4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d4e8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d4ea:	ab21      	add	r3, sp, #132	; 0x84
 800d4ec:	a902      	add	r1, sp, #8
 800d4ee:	4628      	mov	r0, r5
 800d4f0:	9301      	str	r3, [sp, #4]
 800d4f2:	f002 f857 	bl	800f5a4 <_svfiprintf_r>
 800d4f6:	1c43      	adds	r3, r0, #1
 800d4f8:	bfbc      	itt	lt
 800d4fa:	238b      	movlt	r3, #139	; 0x8b
 800d4fc:	602b      	strlt	r3, [r5, #0]
 800d4fe:	2c00      	cmp	r4, #0
 800d500:	d0dd      	beq.n	800d4be <sniprintf+0x16>
 800d502:	9b02      	ldr	r3, [sp, #8]
 800d504:	2200      	movs	r2, #0
 800d506:	701a      	strb	r2, [r3, #0]
 800d508:	e7d9      	b.n	800d4be <sniprintf+0x16>
 800d50a:	bf00      	nop
 800d50c:	20000010 	.word	0x20000010

0800d510 <strchr>:
 800d510:	b2c9      	uxtb	r1, r1
 800d512:	4603      	mov	r3, r0
 800d514:	4618      	mov	r0, r3
 800d516:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d51a:	b112      	cbz	r2, 800d522 <strchr+0x12>
 800d51c:	428a      	cmp	r2, r1
 800d51e:	d1f9      	bne.n	800d514 <strchr+0x4>
 800d520:	4770      	bx	lr
 800d522:	2900      	cmp	r1, #0
 800d524:	bf18      	it	ne
 800d526:	2000      	movne	r0, #0
 800d528:	4770      	bx	lr

0800d52a <strncmp>:
 800d52a:	b510      	push	{r4, lr}
 800d52c:	4603      	mov	r3, r0
 800d52e:	b172      	cbz	r2, 800d54e <strncmp+0x24>
 800d530:	3901      	subs	r1, #1
 800d532:	1884      	adds	r4, r0, r2
 800d534:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d538:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d53c:	4290      	cmp	r0, r2
 800d53e:	d101      	bne.n	800d544 <strncmp+0x1a>
 800d540:	42a3      	cmp	r3, r4
 800d542:	d101      	bne.n	800d548 <strncmp+0x1e>
 800d544:	1a80      	subs	r0, r0, r2
 800d546:	bd10      	pop	{r4, pc}
 800d548:	2800      	cmp	r0, #0
 800d54a:	d1f3      	bne.n	800d534 <strncmp+0xa>
 800d54c:	e7fa      	b.n	800d544 <strncmp+0x1a>
 800d54e:	4610      	mov	r0, r2
 800d550:	e7f9      	b.n	800d546 <strncmp+0x1c>

0800d552 <strstr>:
 800d552:	780a      	ldrb	r2, [r1, #0]
 800d554:	b570      	push	{r4, r5, r6, lr}
 800d556:	b96a      	cbnz	r2, 800d574 <strstr+0x22>
 800d558:	bd70      	pop	{r4, r5, r6, pc}
 800d55a:	429a      	cmp	r2, r3
 800d55c:	d109      	bne.n	800d572 <strstr+0x20>
 800d55e:	460c      	mov	r4, r1
 800d560:	4605      	mov	r5, r0
 800d562:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800d566:	2b00      	cmp	r3, #0
 800d568:	d0f6      	beq.n	800d558 <strstr+0x6>
 800d56a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800d56e:	429e      	cmp	r6, r3
 800d570:	d0f7      	beq.n	800d562 <strstr+0x10>
 800d572:	3001      	adds	r0, #1
 800d574:	7803      	ldrb	r3, [r0, #0]
 800d576:	2b00      	cmp	r3, #0
 800d578:	d1ef      	bne.n	800d55a <strstr+0x8>
 800d57a:	4618      	mov	r0, r3
 800d57c:	e7ec      	b.n	800d558 <strstr+0x6>

0800d57e <sulp>:
 800d57e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d582:	460f      	mov	r7, r1
 800d584:	4690      	mov	r8, r2
 800d586:	f001 fe55 	bl	800f234 <__ulp>
 800d58a:	4604      	mov	r4, r0
 800d58c:	460d      	mov	r5, r1
 800d58e:	f1b8 0f00 	cmp.w	r8, #0
 800d592:	d011      	beq.n	800d5b8 <sulp+0x3a>
 800d594:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800d598:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	dd0b      	ble.n	800d5b8 <sulp+0x3a>
 800d5a0:	051b      	lsls	r3, r3, #20
 800d5a2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800d5a6:	2400      	movs	r4, #0
 800d5a8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800d5ac:	4622      	mov	r2, r4
 800d5ae:	462b      	mov	r3, r5
 800d5b0:	f7f2 fffa 	bl	80005a8 <__aeabi_dmul>
 800d5b4:	4604      	mov	r4, r0
 800d5b6:	460d      	mov	r5, r1
 800d5b8:	4620      	mov	r0, r4
 800d5ba:	4629      	mov	r1, r5
 800d5bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d5c0 <_strtod_l>:
 800d5c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5c4:	b09f      	sub	sp, #124	; 0x7c
 800d5c6:	469b      	mov	fp, r3
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	931a      	str	r3, [sp, #104]	; 0x68
 800d5cc:	4b9e      	ldr	r3, [pc, #632]	; (800d848 <_strtod_l+0x288>)
 800d5ce:	9215      	str	r2, [sp, #84]	; 0x54
 800d5d0:	681f      	ldr	r7, [r3, #0]
 800d5d2:	4682      	mov	sl, r0
 800d5d4:	4638      	mov	r0, r7
 800d5d6:	460e      	mov	r6, r1
 800d5d8:	f7f2 fdd2 	bl	8000180 <strlen>
 800d5dc:	f04f 0800 	mov.w	r8, #0
 800d5e0:	4604      	mov	r4, r0
 800d5e2:	f04f 0900 	mov.w	r9, #0
 800d5e6:	9619      	str	r6, [sp, #100]	; 0x64
 800d5e8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d5ea:	781a      	ldrb	r2, [r3, #0]
 800d5ec:	2a2b      	cmp	r2, #43	; 0x2b
 800d5ee:	d04c      	beq.n	800d68a <_strtod_l+0xca>
 800d5f0:	d83a      	bhi.n	800d668 <_strtod_l+0xa8>
 800d5f2:	2a0d      	cmp	r2, #13
 800d5f4:	d833      	bhi.n	800d65e <_strtod_l+0x9e>
 800d5f6:	2a08      	cmp	r2, #8
 800d5f8:	d833      	bhi.n	800d662 <_strtod_l+0xa2>
 800d5fa:	2a00      	cmp	r2, #0
 800d5fc:	d03d      	beq.n	800d67a <_strtod_l+0xba>
 800d5fe:	2300      	movs	r3, #0
 800d600:	930a      	str	r3, [sp, #40]	; 0x28
 800d602:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800d604:	782b      	ldrb	r3, [r5, #0]
 800d606:	2b30      	cmp	r3, #48	; 0x30
 800d608:	f040 80aa 	bne.w	800d760 <_strtod_l+0x1a0>
 800d60c:	786b      	ldrb	r3, [r5, #1]
 800d60e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d612:	2b58      	cmp	r3, #88	; 0x58
 800d614:	d166      	bne.n	800d6e4 <_strtod_l+0x124>
 800d616:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d618:	9301      	str	r3, [sp, #4]
 800d61a:	ab1a      	add	r3, sp, #104	; 0x68
 800d61c:	9300      	str	r3, [sp, #0]
 800d61e:	4a8b      	ldr	r2, [pc, #556]	; (800d84c <_strtod_l+0x28c>)
 800d620:	f8cd b008 	str.w	fp, [sp, #8]
 800d624:	ab1b      	add	r3, sp, #108	; 0x6c
 800d626:	a919      	add	r1, sp, #100	; 0x64
 800d628:	4650      	mov	r0, sl
 800d62a:	f000 ff7b 	bl	800e524 <__gethex>
 800d62e:	f010 0607 	ands.w	r6, r0, #7
 800d632:	4604      	mov	r4, r0
 800d634:	d005      	beq.n	800d642 <_strtod_l+0x82>
 800d636:	2e06      	cmp	r6, #6
 800d638:	d129      	bne.n	800d68e <_strtod_l+0xce>
 800d63a:	3501      	adds	r5, #1
 800d63c:	2300      	movs	r3, #0
 800d63e:	9519      	str	r5, [sp, #100]	; 0x64
 800d640:	930a      	str	r3, [sp, #40]	; 0x28
 800d642:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d644:	2b00      	cmp	r3, #0
 800d646:	f040 858a 	bne.w	800e15e <_strtod_l+0xb9e>
 800d64a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d64c:	b1d3      	cbz	r3, 800d684 <_strtod_l+0xc4>
 800d64e:	4642      	mov	r2, r8
 800d650:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d654:	4610      	mov	r0, r2
 800d656:	4619      	mov	r1, r3
 800d658:	b01f      	add	sp, #124	; 0x7c
 800d65a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d65e:	2a20      	cmp	r2, #32
 800d660:	d1cd      	bne.n	800d5fe <_strtod_l+0x3e>
 800d662:	3301      	adds	r3, #1
 800d664:	9319      	str	r3, [sp, #100]	; 0x64
 800d666:	e7bf      	b.n	800d5e8 <_strtod_l+0x28>
 800d668:	2a2d      	cmp	r2, #45	; 0x2d
 800d66a:	d1c8      	bne.n	800d5fe <_strtod_l+0x3e>
 800d66c:	2201      	movs	r2, #1
 800d66e:	920a      	str	r2, [sp, #40]	; 0x28
 800d670:	1c5a      	adds	r2, r3, #1
 800d672:	9219      	str	r2, [sp, #100]	; 0x64
 800d674:	785b      	ldrb	r3, [r3, #1]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d1c3      	bne.n	800d602 <_strtod_l+0x42>
 800d67a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d67c:	9619      	str	r6, [sp, #100]	; 0x64
 800d67e:	2b00      	cmp	r3, #0
 800d680:	f040 856b 	bne.w	800e15a <_strtod_l+0xb9a>
 800d684:	4642      	mov	r2, r8
 800d686:	464b      	mov	r3, r9
 800d688:	e7e4      	b.n	800d654 <_strtod_l+0x94>
 800d68a:	2200      	movs	r2, #0
 800d68c:	e7ef      	b.n	800d66e <_strtod_l+0xae>
 800d68e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d690:	b13a      	cbz	r2, 800d6a2 <_strtod_l+0xe2>
 800d692:	2135      	movs	r1, #53	; 0x35
 800d694:	a81c      	add	r0, sp, #112	; 0x70
 800d696:	f001 fed1 	bl	800f43c <__copybits>
 800d69a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800d69c:	4650      	mov	r0, sl
 800d69e:	f001 fa9d 	bl	800ebdc <_Bfree>
 800d6a2:	3e01      	subs	r6, #1
 800d6a4:	2e04      	cmp	r6, #4
 800d6a6:	d806      	bhi.n	800d6b6 <_strtod_l+0xf6>
 800d6a8:	e8df f006 	tbb	[pc, r6]
 800d6ac:	1714030a 	.word	0x1714030a
 800d6b0:	0a          	.byte	0x0a
 800d6b1:	00          	.byte	0x00
 800d6b2:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800d6b6:	0721      	lsls	r1, r4, #28
 800d6b8:	d5c3      	bpl.n	800d642 <_strtod_l+0x82>
 800d6ba:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800d6be:	e7c0      	b.n	800d642 <_strtod_l+0x82>
 800d6c0:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800d6c4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800d6c6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d6ca:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d6ce:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800d6d2:	e7f0      	b.n	800d6b6 <_strtod_l+0xf6>
 800d6d4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800d850 <_strtod_l+0x290>
 800d6d8:	e7ed      	b.n	800d6b6 <_strtod_l+0xf6>
 800d6da:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800d6de:	f04f 38ff 	mov.w	r8, #4294967295
 800d6e2:	e7e8      	b.n	800d6b6 <_strtod_l+0xf6>
 800d6e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d6e6:	1c5a      	adds	r2, r3, #1
 800d6e8:	9219      	str	r2, [sp, #100]	; 0x64
 800d6ea:	785b      	ldrb	r3, [r3, #1]
 800d6ec:	2b30      	cmp	r3, #48	; 0x30
 800d6ee:	d0f9      	beq.n	800d6e4 <_strtod_l+0x124>
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d0a6      	beq.n	800d642 <_strtod_l+0x82>
 800d6f4:	2301      	movs	r3, #1
 800d6f6:	9307      	str	r3, [sp, #28]
 800d6f8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d6fa:	9308      	str	r3, [sp, #32]
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800d702:	469b      	mov	fp, r3
 800d704:	220a      	movs	r2, #10
 800d706:	9819      	ldr	r0, [sp, #100]	; 0x64
 800d708:	7805      	ldrb	r5, [r0, #0]
 800d70a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800d70e:	b2d9      	uxtb	r1, r3
 800d710:	2909      	cmp	r1, #9
 800d712:	d927      	bls.n	800d764 <_strtod_l+0x1a4>
 800d714:	4622      	mov	r2, r4
 800d716:	4639      	mov	r1, r7
 800d718:	f7ff ff07 	bl	800d52a <strncmp>
 800d71c:	2800      	cmp	r0, #0
 800d71e:	d033      	beq.n	800d788 <_strtod_l+0x1c8>
 800d720:	2000      	movs	r0, #0
 800d722:	462a      	mov	r2, r5
 800d724:	465c      	mov	r4, fp
 800d726:	9004      	str	r0, [sp, #16]
 800d728:	4603      	mov	r3, r0
 800d72a:	2a65      	cmp	r2, #101	; 0x65
 800d72c:	d001      	beq.n	800d732 <_strtod_l+0x172>
 800d72e:	2a45      	cmp	r2, #69	; 0x45
 800d730:	d114      	bne.n	800d75c <_strtod_l+0x19c>
 800d732:	b91c      	cbnz	r4, 800d73c <_strtod_l+0x17c>
 800d734:	9a07      	ldr	r2, [sp, #28]
 800d736:	4302      	orrs	r2, r0
 800d738:	d09f      	beq.n	800d67a <_strtod_l+0xba>
 800d73a:	2400      	movs	r4, #0
 800d73c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800d73e:	1c72      	adds	r2, r6, #1
 800d740:	9219      	str	r2, [sp, #100]	; 0x64
 800d742:	7872      	ldrb	r2, [r6, #1]
 800d744:	2a2b      	cmp	r2, #43	; 0x2b
 800d746:	d079      	beq.n	800d83c <_strtod_l+0x27c>
 800d748:	2a2d      	cmp	r2, #45	; 0x2d
 800d74a:	f000 8083 	beq.w	800d854 <_strtod_l+0x294>
 800d74e:	2700      	movs	r7, #0
 800d750:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800d754:	2909      	cmp	r1, #9
 800d756:	f240 8083 	bls.w	800d860 <_strtod_l+0x2a0>
 800d75a:	9619      	str	r6, [sp, #100]	; 0x64
 800d75c:	2500      	movs	r5, #0
 800d75e:	e09f      	b.n	800d8a0 <_strtod_l+0x2e0>
 800d760:	2300      	movs	r3, #0
 800d762:	e7c8      	b.n	800d6f6 <_strtod_l+0x136>
 800d764:	f1bb 0f08 	cmp.w	fp, #8
 800d768:	bfd5      	itete	le
 800d76a:	9906      	ldrle	r1, [sp, #24]
 800d76c:	9905      	ldrgt	r1, [sp, #20]
 800d76e:	fb02 3301 	mlale	r3, r2, r1, r3
 800d772:	fb02 3301 	mlagt	r3, r2, r1, r3
 800d776:	f100 0001 	add.w	r0, r0, #1
 800d77a:	bfd4      	ite	le
 800d77c:	9306      	strle	r3, [sp, #24]
 800d77e:	9305      	strgt	r3, [sp, #20]
 800d780:	f10b 0b01 	add.w	fp, fp, #1
 800d784:	9019      	str	r0, [sp, #100]	; 0x64
 800d786:	e7be      	b.n	800d706 <_strtod_l+0x146>
 800d788:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d78a:	191a      	adds	r2, r3, r4
 800d78c:	9219      	str	r2, [sp, #100]	; 0x64
 800d78e:	5d1a      	ldrb	r2, [r3, r4]
 800d790:	f1bb 0f00 	cmp.w	fp, #0
 800d794:	d036      	beq.n	800d804 <_strtod_l+0x244>
 800d796:	9004      	str	r0, [sp, #16]
 800d798:	465c      	mov	r4, fp
 800d79a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800d79e:	2b09      	cmp	r3, #9
 800d7a0:	d912      	bls.n	800d7c8 <_strtod_l+0x208>
 800d7a2:	2301      	movs	r3, #1
 800d7a4:	e7c1      	b.n	800d72a <_strtod_l+0x16a>
 800d7a6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d7a8:	1c5a      	adds	r2, r3, #1
 800d7aa:	9219      	str	r2, [sp, #100]	; 0x64
 800d7ac:	785a      	ldrb	r2, [r3, #1]
 800d7ae:	3001      	adds	r0, #1
 800d7b0:	2a30      	cmp	r2, #48	; 0x30
 800d7b2:	d0f8      	beq.n	800d7a6 <_strtod_l+0x1e6>
 800d7b4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800d7b8:	2b08      	cmp	r3, #8
 800d7ba:	f200 84d5 	bhi.w	800e168 <_strtod_l+0xba8>
 800d7be:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d7c0:	9004      	str	r0, [sp, #16]
 800d7c2:	2000      	movs	r0, #0
 800d7c4:	9308      	str	r3, [sp, #32]
 800d7c6:	4604      	mov	r4, r0
 800d7c8:	3a30      	subs	r2, #48	; 0x30
 800d7ca:	f100 0301 	add.w	r3, r0, #1
 800d7ce:	d013      	beq.n	800d7f8 <_strtod_l+0x238>
 800d7d0:	9904      	ldr	r1, [sp, #16]
 800d7d2:	4419      	add	r1, r3
 800d7d4:	9104      	str	r1, [sp, #16]
 800d7d6:	4623      	mov	r3, r4
 800d7d8:	1905      	adds	r5, r0, r4
 800d7da:	210a      	movs	r1, #10
 800d7dc:	42ab      	cmp	r3, r5
 800d7de:	d113      	bne.n	800d808 <_strtod_l+0x248>
 800d7e0:	1823      	adds	r3, r4, r0
 800d7e2:	2b08      	cmp	r3, #8
 800d7e4:	f104 0401 	add.w	r4, r4, #1
 800d7e8:	4404      	add	r4, r0
 800d7ea:	dc1b      	bgt.n	800d824 <_strtod_l+0x264>
 800d7ec:	9906      	ldr	r1, [sp, #24]
 800d7ee:	230a      	movs	r3, #10
 800d7f0:	fb03 2301 	mla	r3, r3, r1, r2
 800d7f4:	9306      	str	r3, [sp, #24]
 800d7f6:	2300      	movs	r3, #0
 800d7f8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d7fa:	1c51      	adds	r1, r2, #1
 800d7fc:	9119      	str	r1, [sp, #100]	; 0x64
 800d7fe:	7852      	ldrb	r2, [r2, #1]
 800d800:	4618      	mov	r0, r3
 800d802:	e7ca      	b.n	800d79a <_strtod_l+0x1da>
 800d804:	4658      	mov	r0, fp
 800d806:	e7d3      	b.n	800d7b0 <_strtod_l+0x1f0>
 800d808:	2b08      	cmp	r3, #8
 800d80a:	dc04      	bgt.n	800d816 <_strtod_l+0x256>
 800d80c:	9f06      	ldr	r7, [sp, #24]
 800d80e:	434f      	muls	r7, r1
 800d810:	9706      	str	r7, [sp, #24]
 800d812:	3301      	adds	r3, #1
 800d814:	e7e2      	b.n	800d7dc <_strtod_l+0x21c>
 800d816:	1c5f      	adds	r7, r3, #1
 800d818:	2f10      	cmp	r7, #16
 800d81a:	bfde      	ittt	le
 800d81c:	9f05      	ldrle	r7, [sp, #20]
 800d81e:	434f      	mulle	r7, r1
 800d820:	9705      	strle	r7, [sp, #20]
 800d822:	e7f6      	b.n	800d812 <_strtod_l+0x252>
 800d824:	2c10      	cmp	r4, #16
 800d826:	bfdf      	itttt	le
 800d828:	9905      	ldrle	r1, [sp, #20]
 800d82a:	230a      	movle	r3, #10
 800d82c:	fb03 2301 	mlale	r3, r3, r1, r2
 800d830:	9305      	strle	r3, [sp, #20]
 800d832:	e7e0      	b.n	800d7f6 <_strtod_l+0x236>
 800d834:	2300      	movs	r3, #0
 800d836:	9304      	str	r3, [sp, #16]
 800d838:	2301      	movs	r3, #1
 800d83a:	e77b      	b.n	800d734 <_strtod_l+0x174>
 800d83c:	2700      	movs	r7, #0
 800d83e:	1cb2      	adds	r2, r6, #2
 800d840:	9219      	str	r2, [sp, #100]	; 0x64
 800d842:	78b2      	ldrb	r2, [r6, #2]
 800d844:	e784      	b.n	800d750 <_strtod_l+0x190>
 800d846:	bf00      	nop
 800d848:	08010d0c 	.word	0x08010d0c
 800d84c:	08010b04 	.word	0x08010b04
 800d850:	7ff00000 	.word	0x7ff00000
 800d854:	2701      	movs	r7, #1
 800d856:	e7f2      	b.n	800d83e <_strtod_l+0x27e>
 800d858:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d85a:	1c51      	adds	r1, r2, #1
 800d85c:	9119      	str	r1, [sp, #100]	; 0x64
 800d85e:	7852      	ldrb	r2, [r2, #1]
 800d860:	2a30      	cmp	r2, #48	; 0x30
 800d862:	d0f9      	beq.n	800d858 <_strtod_l+0x298>
 800d864:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800d868:	2908      	cmp	r1, #8
 800d86a:	f63f af77 	bhi.w	800d75c <_strtod_l+0x19c>
 800d86e:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800d872:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d874:	9209      	str	r2, [sp, #36]	; 0x24
 800d876:	f04f 0e0a 	mov.w	lr, #10
 800d87a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d87c:	1c51      	adds	r1, r2, #1
 800d87e:	9119      	str	r1, [sp, #100]	; 0x64
 800d880:	7852      	ldrb	r2, [r2, #1]
 800d882:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800d886:	2d09      	cmp	r5, #9
 800d888:	d935      	bls.n	800d8f6 <_strtod_l+0x336>
 800d88a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800d88c:	1b49      	subs	r1, r1, r5
 800d88e:	2908      	cmp	r1, #8
 800d890:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800d894:	dc02      	bgt.n	800d89c <_strtod_l+0x2dc>
 800d896:	4565      	cmp	r5, ip
 800d898:	bfa8      	it	ge
 800d89a:	4665      	movge	r5, ip
 800d89c:	b107      	cbz	r7, 800d8a0 <_strtod_l+0x2e0>
 800d89e:	426d      	negs	r5, r5
 800d8a0:	2c00      	cmp	r4, #0
 800d8a2:	d14c      	bne.n	800d93e <_strtod_l+0x37e>
 800d8a4:	9907      	ldr	r1, [sp, #28]
 800d8a6:	4301      	orrs	r1, r0
 800d8a8:	f47f aecb 	bne.w	800d642 <_strtod_l+0x82>
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	f47f aee4 	bne.w	800d67a <_strtod_l+0xba>
 800d8b2:	2a69      	cmp	r2, #105	; 0x69
 800d8b4:	d026      	beq.n	800d904 <_strtod_l+0x344>
 800d8b6:	dc23      	bgt.n	800d900 <_strtod_l+0x340>
 800d8b8:	2a49      	cmp	r2, #73	; 0x49
 800d8ba:	d023      	beq.n	800d904 <_strtod_l+0x344>
 800d8bc:	2a4e      	cmp	r2, #78	; 0x4e
 800d8be:	f47f aedc 	bne.w	800d67a <_strtod_l+0xba>
 800d8c2:	499d      	ldr	r1, [pc, #628]	; (800db38 <_strtod_l+0x578>)
 800d8c4:	a819      	add	r0, sp, #100	; 0x64
 800d8c6:	f001 f87b 	bl	800e9c0 <__match>
 800d8ca:	2800      	cmp	r0, #0
 800d8cc:	f43f aed5 	beq.w	800d67a <_strtod_l+0xba>
 800d8d0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d8d2:	781b      	ldrb	r3, [r3, #0]
 800d8d4:	2b28      	cmp	r3, #40	; 0x28
 800d8d6:	d12c      	bne.n	800d932 <_strtod_l+0x372>
 800d8d8:	4998      	ldr	r1, [pc, #608]	; (800db3c <_strtod_l+0x57c>)
 800d8da:	aa1c      	add	r2, sp, #112	; 0x70
 800d8dc:	a819      	add	r0, sp, #100	; 0x64
 800d8de:	f001 f883 	bl	800e9e8 <__hexnan>
 800d8e2:	2805      	cmp	r0, #5
 800d8e4:	d125      	bne.n	800d932 <_strtod_l+0x372>
 800d8e6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d8e8:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800d8ec:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800d8f0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800d8f4:	e6a5      	b.n	800d642 <_strtod_l+0x82>
 800d8f6:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800d8fa:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800d8fe:	e7bc      	b.n	800d87a <_strtod_l+0x2ba>
 800d900:	2a6e      	cmp	r2, #110	; 0x6e
 800d902:	e7dc      	b.n	800d8be <_strtod_l+0x2fe>
 800d904:	498e      	ldr	r1, [pc, #568]	; (800db40 <_strtod_l+0x580>)
 800d906:	a819      	add	r0, sp, #100	; 0x64
 800d908:	f001 f85a 	bl	800e9c0 <__match>
 800d90c:	2800      	cmp	r0, #0
 800d90e:	f43f aeb4 	beq.w	800d67a <_strtod_l+0xba>
 800d912:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d914:	498b      	ldr	r1, [pc, #556]	; (800db44 <_strtod_l+0x584>)
 800d916:	3b01      	subs	r3, #1
 800d918:	a819      	add	r0, sp, #100	; 0x64
 800d91a:	9319      	str	r3, [sp, #100]	; 0x64
 800d91c:	f001 f850 	bl	800e9c0 <__match>
 800d920:	b910      	cbnz	r0, 800d928 <_strtod_l+0x368>
 800d922:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d924:	3301      	adds	r3, #1
 800d926:	9319      	str	r3, [sp, #100]	; 0x64
 800d928:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800db48 <_strtod_l+0x588>
 800d92c:	f04f 0800 	mov.w	r8, #0
 800d930:	e687      	b.n	800d642 <_strtod_l+0x82>
 800d932:	4886      	ldr	r0, [pc, #536]	; (800db4c <_strtod_l+0x58c>)
 800d934:	f002 fa22 	bl	800fd7c <nan>
 800d938:	4680      	mov	r8, r0
 800d93a:	4689      	mov	r9, r1
 800d93c:	e681      	b.n	800d642 <_strtod_l+0x82>
 800d93e:	9b04      	ldr	r3, [sp, #16]
 800d940:	9806      	ldr	r0, [sp, #24]
 800d942:	1aeb      	subs	r3, r5, r3
 800d944:	f1bb 0f00 	cmp.w	fp, #0
 800d948:	bf08      	it	eq
 800d94a:	46a3      	moveq	fp, r4
 800d94c:	2c10      	cmp	r4, #16
 800d94e:	9307      	str	r3, [sp, #28]
 800d950:	4626      	mov	r6, r4
 800d952:	bfa8      	it	ge
 800d954:	2610      	movge	r6, #16
 800d956:	f7f2 fdad 	bl	80004b4 <__aeabi_ui2d>
 800d95a:	2c09      	cmp	r4, #9
 800d95c:	4680      	mov	r8, r0
 800d95e:	4689      	mov	r9, r1
 800d960:	dd13      	ble.n	800d98a <_strtod_l+0x3ca>
 800d962:	4b7b      	ldr	r3, [pc, #492]	; (800db50 <_strtod_l+0x590>)
 800d964:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d968:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d96c:	f7f2 fe1c 	bl	80005a8 <__aeabi_dmul>
 800d970:	4680      	mov	r8, r0
 800d972:	9805      	ldr	r0, [sp, #20]
 800d974:	4689      	mov	r9, r1
 800d976:	f7f2 fd9d 	bl	80004b4 <__aeabi_ui2d>
 800d97a:	4602      	mov	r2, r0
 800d97c:	460b      	mov	r3, r1
 800d97e:	4640      	mov	r0, r8
 800d980:	4649      	mov	r1, r9
 800d982:	f7f2 fc5b 	bl	800023c <__adddf3>
 800d986:	4680      	mov	r8, r0
 800d988:	4689      	mov	r9, r1
 800d98a:	2c0f      	cmp	r4, #15
 800d98c:	dc36      	bgt.n	800d9fc <_strtod_l+0x43c>
 800d98e:	9b07      	ldr	r3, [sp, #28]
 800d990:	2b00      	cmp	r3, #0
 800d992:	f43f ae56 	beq.w	800d642 <_strtod_l+0x82>
 800d996:	dd22      	ble.n	800d9de <_strtod_l+0x41e>
 800d998:	2b16      	cmp	r3, #22
 800d99a:	dc09      	bgt.n	800d9b0 <_strtod_l+0x3f0>
 800d99c:	496c      	ldr	r1, [pc, #432]	; (800db50 <_strtod_l+0x590>)
 800d99e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d9a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d9a6:	4642      	mov	r2, r8
 800d9a8:	464b      	mov	r3, r9
 800d9aa:	f7f2 fdfd 	bl	80005a8 <__aeabi_dmul>
 800d9ae:	e7c3      	b.n	800d938 <_strtod_l+0x378>
 800d9b0:	9a07      	ldr	r2, [sp, #28]
 800d9b2:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800d9b6:	4293      	cmp	r3, r2
 800d9b8:	db20      	blt.n	800d9fc <_strtod_l+0x43c>
 800d9ba:	4d65      	ldr	r5, [pc, #404]	; (800db50 <_strtod_l+0x590>)
 800d9bc:	f1c4 040f 	rsb	r4, r4, #15
 800d9c0:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800d9c4:	4642      	mov	r2, r8
 800d9c6:	464b      	mov	r3, r9
 800d9c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d9cc:	f7f2 fdec 	bl	80005a8 <__aeabi_dmul>
 800d9d0:	9b07      	ldr	r3, [sp, #28]
 800d9d2:	1b1c      	subs	r4, r3, r4
 800d9d4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800d9d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d9dc:	e7e5      	b.n	800d9aa <_strtod_l+0x3ea>
 800d9de:	9b07      	ldr	r3, [sp, #28]
 800d9e0:	3316      	adds	r3, #22
 800d9e2:	db0b      	blt.n	800d9fc <_strtod_l+0x43c>
 800d9e4:	9b04      	ldr	r3, [sp, #16]
 800d9e6:	1b5d      	subs	r5, r3, r5
 800d9e8:	4b59      	ldr	r3, [pc, #356]	; (800db50 <_strtod_l+0x590>)
 800d9ea:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800d9ee:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d9f2:	4640      	mov	r0, r8
 800d9f4:	4649      	mov	r1, r9
 800d9f6:	f7f2 ff01 	bl	80007fc <__aeabi_ddiv>
 800d9fa:	e79d      	b.n	800d938 <_strtod_l+0x378>
 800d9fc:	9b07      	ldr	r3, [sp, #28]
 800d9fe:	1ba6      	subs	r6, r4, r6
 800da00:	441e      	add	r6, r3
 800da02:	2e00      	cmp	r6, #0
 800da04:	dd74      	ble.n	800daf0 <_strtod_l+0x530>
 800da06:	f016 030f 	ands.w	r3, r6, #15
 800da0a:	d00a      	beq.n	800da22 <_strtod_l+0x462>
 800da0c:	4950      	ldr	r1, [pc, #320]	; (800db50 <_strtod_l+0x590>)
 800da0e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800da12:	4642      	mov	r2, r8
 800da14:	464b      	mov	r3, r9
 800da16:	e9d1 0100 	ldrd	r0, r1, [r1]
 800da1a:	f7f2 fdc5 	bl	80005a8 <__aeabi_dmul>
 800da1e:	4680      	mov	r8, r0
 800da20:	4689      	mov	r9, r1
 800da22:	f036 060f 	bics.w	r6, r6, #15
 800da26:	d052      	beq.n	800dace <_strtod_l+0x50e>
 800da28:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800da2c:	dd27      	ble.n	800da7e <_strtod_l+0x4be>
 800da2e:	f04f 0b00 	mov.w	fp, #0
 800da32:	f8cd b010 	str.w	fp, [sp, #16]
 800da36:	f8cd b020 	str.w	fp, [sp, #32]
 800da3a:	f8cd b018 	str.w	fp, [sp, #24]
 800da3e:	2322      	movs	r3, #34	; 0x22
 800da40:	f8df 9104 	ldr.w	r9, [pc, #260]	; 800db48 <_strtod_l+0x588>
 800da44:	f8ca 3000 	str.w	r3, [sl]
 800da48:	f04f 0800 	mov.w	r8, #0
 800da4c:	9b08      	ldr	r3, [sp, #32]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	f43f adf7 	beq.w	800d642 <_strtod_l+0x82>
 800da54:	991a      	ldr	r1, [sp, #104]	; 0x68
 800da56:	4650      	mov	r0, sl
 800da58:	f001 f8c0 	bl	800ebdc <_Bfree>
 800da5c:	9906      	ldr	r1, [sp, #24]
 800da5e:	4650      	mov	r0, sl
 800da60:	f001 f8bc 	bl	800ebdc <_Bfree>
 800da64:	9904      	ldr	r1, [sp, #16]
 800da66:	4650      	mov	r0, sl
 800da68:	f001 f8b8 	bl	800ebdc <_Bfree>
 800da6c:	9908      	ldr	r1, [sp, #32]
 800da6e:	4650      	mov	r0, sl
 800da70:	f001 f8b4 	bl	800ebdc <_Bfree>
 800da74:	4659      	mov	r1, fp
 800da76:	4650      	mov	r0, sl
 800da78:	f001 f8b0 	bl	800ebdc <_Bfree>
 800da7c:	e5e1      	b.n	800d642 <_strtod_l+0x82>
 800da7e:	4b35      	ldr	r3, [pc, #212]	; (800db54 <_strtod_l+0x594>)
 800da80:	9305      	str	r3, [sp, #20]
 800da82:	2300      	movs	r3, #0
 800da84:	1136      	asrs	r6, r6, #4
 800da86:	4640      	mov	r0, r8
 800da88:	4649      	mov	r1, r9
 800da8a:	461f      	mov	r7, r3
 800da8c:	2e01      	cmp	r6, #1
 800da8e:	dc21      	bgt.n	800dad4 <_strtod_l+0x514>
 800da90:	b10b      	cbz	r3, 800da96 <_strtod_l+0x4d6>
 800da92:	4680      	mov	r8, r0
 800da94:	4689      	mov	r9, r1
 800da96:	4b2f      	ldr	r3, [pc, #188]	; (800db54 <_strtod_l+0x594>)
 800da98:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800da9c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800daa0:	4642      	mov	r2, r8
 800daa2:	464b      	mov	r3, r9
 800daa4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800daa8:	f7f2 fd7e 	bl	80005a8 <__aeabi_dmul>
 800daac:	4b26      	ldr	r3, [pc, #152]	; (800db48 <_strtod_l+0x588>)
 800daae:	460a      	mov	r2, r1
 800dab0:	400b      	ands	r3, r1
 800dab2:	4929      	ldr	r1, [pc, #164]	; (800db58 <_strtod_l+0x598>)
 800dab4:	428b      	cmp	r3, r1
 800dab6:	4680      	mov	r8, r0
 800dab8:	d8b9      	bhi.n	800da2e <_strtod_l+0x46e>
 800daba:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800dabe:	428b      	cmp	r3, r1
 800dac0:	bf86      	itte	hi
 800dac2:	f8df 9098 	ldrhi.w	r9, [pc, #152]	; 800db5c <_strtod_l+0x59c>
 800dac6:	f04f 38ff 	movhi.w	r8, #4294967295
 800daca:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800dace:	2300      	movs	r3, #0
 800dad0:	9305      	str	r3, [sp, #20]
 800dad2:	e07f      	b.n	800dbd4 <_strtod_l+0x614>
 800dad4:	07f2      	lsls	r2, r6, #31
 800dad6:	d505      	bpl.n	800dae4 <_strtod_l+0x524>
 800dad8:	9b05      	ldr	r3, [sp, #20]
 800dada:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dade:	f7f2 fd63 	bl	80005a8 <__aeabi_dmul>
 800dae2:	2301      	movs	r3, #1
 800dae4:	9a05      	ldr	r2, [sp, #20]
 800dae6:	3208      	adds	r2, #8
 800dae8:	3701      	adds	r7, #1
 800daea:	1076      	asrs	r6, r6, #1
 800daec:	9205      	str	r2, [sp, #20]
 800daee:	e7cd      	b.n	800da8c <_strtod_l+0x4cc>
 800daf0:	d0ed      	beq.n	800dace <_strtod_l+0x50e>
 800daf2:	4276      	negs	r6, r6
 800daf4:	f016 020f 	ands.w	r2, r6, #15
 800daf8:	d00a      	beq.n	800db10 <_strtod_l+0x550>
 800dafa:	4b15      	ldr	r3, [pc, #84]	; (800db50 <_strtod_l+0x590>)
 800dafc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800db00:	4640      	mov	r0, r8
 800db02:	4649      	mov	r1, r9
 800db04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db08:	f7f2 fe78 	bl	80007fc <__aeabi_ddiv>
 800db0c:	4680      	mov	r8, r0
 800db0e:	4689      	mov	r9, r1
 800db10:	1136      	asrs	r6, r6, #4
 800db12:	d0dc      	beq.n	800dace <_strtod_l+0x50e>
 800db14:	2e1f      	cmp	r6, #31
 800db16:	dd23      	ble.n	800db60 <_strtod_l+0x5a0>
 800db18:	f04f 0b00 	mov.w	fp, #0
 800db1c:	f8cd b010 	str.w	fp, [sp, #16]
 800db20:	f8cd b020 	str.w	fp, [sp, #32]
 800db24:	f8cd b018 	str.w	fp, [sp, #24]
 800db28:	2322      	movs	r3, #34	; 0x22
 800db2a:	f04f 0800 	mov.w	r8, #0
 800db2e:	f04f 0900 	mov.w	r9, #0
 800db32:	f8ca 3000 	str.w	r3, [sl]
 800db36:	e789      	b.n	800da4c <_strtod_l+0x48c>
 800db38:	08010aff 	.word	0x08010aff
 800db3c:	08010b18 	.word	0x08010b18
 800db40:	08010af6 	.word	0x08010af6
 800db44:	08010af9 	.word	0x08010af9
 800db48:	7ff00000 	.word	0x7ff00000
 800db4c:	08010b93 	.word	0x08010b93
 800db50:	08010da8 	.word	0x08010da8
 800db54:	08010d80 	.word	0x08010d80
 800db58:	7ca00000 	.word	0x7ca00000
 800db5c:	7fefffff 	.word	0x7fefffff
 800db60:	f016 0310 	ands.w	r3, r6, #16
 800db64:	bf18      	it	ne
 800db66:	236a      	movne	r3, #106	; 0x6a
 800db68:	4fb1      	ldr	r7, [pc, #708]	; (800de30 <_strtod_l+0x870>)
 800db6a:	9305      	str	r3, [sp, #20]
 800db6c:	4640      	mov	r0, r8
 800db6e:	4649      	mov	r1, r9
 800db70:	2300      	movs	r3, #0
 800db72:	07f2      	lsls	r2, r6, #31
 800db74:	d504      	bpl.n	800db80 <_strtod_l+0x5c0>
 800db76:	e9d7 2300 	ldrd	r2, r3, [r7]
 800db7a:	f7f2 fd15 	bl	80005a8 <__aeabi_dmul>
 800db7e:	2301      	movs	r3, #1
 800db80:	1076      	asrs	r6, r6, #1
 800db82:	f107 0708 	add.w	r7, r7, #8
 800db86:	d1f4      	bne.n	800db72 <_strtod_l+0x5b2>
 800db88:	b10b      	cbz	r3, 800db8e <_strtod_l+0x5ce>
 800db8a:	4680      	mov	r8, r0
 800db8c:	4689      	mov	r9, r1
 800db8e:	9b05      	ldr	r3, [sp, #20]
 800db90:	b1c3      	cbz	r3, 800dbc4 <_strtod_l+0x604>
 800db92:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800db96:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	4649      	mov	r1, r9
 800db9e:	dd11      	ble.n	800dbc4 <_strtod_l+0x604>
 800dba0:	2b1f      	cmp	r3, #31
 800dba2:	f340 8124 	ble.w	800ddee <_strtod_l+0x82e>
 800dba6:	2b34      	cmp	r3, #52	; 0x34
 800dba8:	bfde      	ittt	le
 800dbaa:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800dbae:	f04f 33ff 	movle.w	r3, #4294967295
 800dbb2:	fa03 f202 	lslle.w	r2, r3, r2
 800dbb6:	f04f 0800 	mov.w	r8, #0
 800dbba:	bfcc      	ite	gt
 800dbbc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800dbc0:	ea02 0901 	andle.w	r9, r2, r1
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	2300      	movs	r3, #0
 800dbc8:	4640      	mov	r0, r8
 800dbca:	4649      	mov	r1, r9
 800dbcc:	f7f2 ff54 	bl	8000a78 <__aeabi_dcmpeq>
 800dbd0:	2800      	cmp	r0, #0
 800dbd2:	d1a1      	bne.n	800db18 <_strtod_l+0x558>
 800dbd4:	9b06      	ldr	r3, [sp, #24]
 800dbd6:	9300      	str	r3, [sp, #0]
 800dbd8:	9908      	ldr	r1, [sp, #32]
 800dbda:	4623      	mov	r3, r4
 800dbdc:	465a      	mov	r2, fp
 800dbde:	4650      	mov	r0, sl
 800dbe0:	f001 f864 	bl	800ecac <__s2b>
 800dbe4:	9008      	str	r0, [sp, #32]
 800dbe6:	2800      	cmp	r0, #0
 800dbe8:	f43f af21 	beq.w	800da2e <_strtod_l+0x46e>
 800dbec:	9b04      	ldr	r3, [sp, #16]
 800dbee:	1b5d      	subs	r5, r3, r5
 800dbf0:	9b07      	ldr	r3, [sp, #28]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	bfb4      	ite	lt
 800dbf6:	462b      	movlt	r3, r5
 800dbf8:	2300      	movge	r3, #0
 800dbfa:	930e      	str	r3, [sp, #56]	; 0x38
 800dbfc:	9b07      	ldr	r3, [sp, #28]
 800dbfe:	f04f 0b00 	mov.w	fp, #0
 800dc02:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800dc06:	9314      	str	r3, [sp, #80]	; 0x50
 800dc08:	f8cd b010 	str.w	fp, [sp, #16]
 800dc0c:	9b08      	ldr	r3, [sp, #32]
 800dc0e:	4650      	mov	r0, sl
 800dc10:	6859      	ldr	r1, [r3, #4]
 800dc12:	f000 ffa3 	bl	800eb5c <_Balloc>
 800dc16:	9006      	str	r0, [sp, #24]
 800dc18:	2800      	cmp	r0, #0
 800dc1a:	f43f af10 	beq.w	800da3e <_strtod_l+0x47e>
 800dc1e:	9b08      	ldr	r3, [sp, #32]
 800dc20:	691a      	ldr	r2, [r3, #16]
 800dc22:	3202      	adds	r2, #2
 800dc24:	f103 010c 	add.w	r1, r3, #12
 800dc28:	0092      	lsls	r2, r2, #2
 800dc2a:	300c      	adds	r0, #12
 800dc2c:	f7ff fa88 	bl	800d140 <memcpy>
 800dc30:	ab1c      	add	r3, sp, #112	; 0x70
 800dc32:	9301      	str	r3, [sp, #4]
 800dc34:	ab1b      	add	r3, sp, #108	; 0x6c
 800dc36:	9300      	str	r3, [sp, #0]
 800dc38:	4642      	mov	r2, r8
 800dc3a:	464b      	mov	r3, r9
 800dc3c:	4650      	mov	r0, sl
 800dc3e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800dc42:	f001 fb71 	bl	800f328 <__d2b>
 800dc46:	901a      	str	r0, [sp, #104]	; 0x68
 800dc48:	2800      	cmp	r0, #0
 800dc4a:	f43f aef8 	beq.w	800da3e <_strtod_l+0x47e>
 800dc4e:	2101      	movs	r1, #1
 800dc50:	4650      	mov	r0, sl
 800dc52:	f001 f8c3 	bl	800eddc <__i2b>
 800dc56:	9004      	str	r0, [sp, #16]
 800dc58:	4603      	mov	r3, r0
 800dc5a:	2800      	cmp	r0, #0
 800dc5c:	f43f aeef 	beq.w	800da3e <_strtod_l+0x47e>
 800dc60:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800dc62:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800dc64:	2d00      	cmp	r5, #0
 800dc66:	bfab      	itete	ge
 800dc68:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800dc6a:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800dc6c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800dc6e:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800dc70:	bfac      	ite	ge
 800dc72:	18ee      	addge	r6, r5, r3
 800dc74:	1b5c      	sublt	r4, r3, r5
 800dc76:	9b05      	ldr	r3, [sp, #20]
 800dc78:	1aed      	subs	r5, r5, r3
 800dc7a:	4415      	add	r5, r2
 800dc7c:	4b6d      	ldr	r3, [pc, #436]	; (800de34 <_strtod_l+0x874>)
 800dc7e:	3d01      	subs	r5, #1
 800dc80:	429d      	cmp	r5, r3
 800dc82:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800dc86:	f280 80c4 	bge.w	800de12 <_strtod_l+0x852>
 800dc8a:	1b5b      	subs	r3, r3, r5
 800dc8c:	2b1f      	cmp	r3, #31
 800dc8e:	eba2 0203 	sub.w	r2, r2, r3
 800dc92:	f04f 0701 	mov.w	r7, #1
 800dc96:	f300 80b1 	bgt.w	800ddfc <_strtod_l+0x83c>
 800dc9a:	fa07 f303 	lsl.w	r3, r7, r3
 800dc9e:	930f      	str	r3, [sp, #60]	; 0x3c
 800dca0:	2500      	movs	r5, #0
 800dca2:	18b7      	adds	r7, r6, r2
 800dca4:	9b05      	ldr	r3, [sp, #20]
 800dca6:	42be      	cmp	r6, r7
 800dca8:	4414      	add	r4, r2
 800dcaa:	441c      	add	r4, r3
 800dcac:	4633      	mov	r3, r6
 800dcae:	bfa8      	it	ge
 800dcb0:	463b      	movge	r3, r7
 800dcb2:	42a3      	cmp	r3, r4
 800dcb4:	bfa8      	it	ge
 800dcb6:	4623      	movge	r3, r4
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	bfc2      	ittt	gt
 800dcbc:	1aff      	subgt	r7, r7, r3
 800dcbe:	1ae4      	subgt	r4, r4, r3
 800dcc0:	1af6      	subgt	r6, r6, r3
 800dcc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	dd17      	ble.n	800dcf8 <_strtod_l+0x738>
 800dcc8:	9904      	ldr	r1, [sp, #16]
 800dcca:	461a      	mov	r2, r3
 800dccc:	4650      	mov	r0, sl
 800dcce:	f001 f943 	bl	800ef58 <__pow5mult>
 800dcd2:	9004      	str	r0, [sp, #16]
 800dcd4:	2800      	cmp	r0, #0
 800dcd6:	f43f aeb2 	beq.w	800da3e <_strtod_l+0x47e>
 800dcda:	4601      	mov	r1, r0
 800dcdc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800dcde:	4650      	mov	r0, sl
 800dce0:	f001 f892 	bl	800ee08 <__multiply>
 800dce4:	9009      	str	r0, [sp, #36]	; 0x24
 800dce6:	2800      	cmp	r0, #0
 800dce8:	f43f aea9 	beq.w	800da3e <_strtod_l+0x47e>
 800dcec:	991a      	ldr	r1, [sp, #104]	; 0x68
 800dcee:	4650      	mov	r0, sl
 800dcf0:	f000 ff74 	bl	800ebdc <_Bfree>
 800dcf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dcf6:	931a      	str	r3, [sp, #104]	; 0x68
 800dcf8:	2f00      	cmp	r7, #0
 800dcfa:	f300 808e 	bgt.w	800de1a <_strtod_l+0x85a>
 800dcfe:	9b07      	ldr	r3, [sp, #28]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	dd08      	ble.n	800dd16 <_strtod_l+0x756>
 800dd04:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800dd06:	9906      	ldr	r1, [sp, #24]
 800dd08:	4650      	mov	r0, sl
 800dd0a:	f001 f925 	bl	800ef58 <__pow5mult>
 800dd0e:	9006      	str	r0, [sp, #24]
 800dd10:	2800      	cmp	r0, #0
 800dd12:	f43f ae94 	beq.w	800da3e <_strtod_l+0x47e>
 800dd16:	2c00      	cmp	r4, #0
 800dd18:	dd08      	ble.n	800dd2c <_strtod_l+0x76c>
 800dd1a:	9906      	ldr	r1, [sp, #24]
 800dd1c:	4622      	mov	r2, r4
 800dd1e:	4650      	mov	r0, sl
 800dd20:	f001 f974 	bl	800f00c <__lshift>
 800dd24:	9006      	str	r0, [sp, #24]
 800dd26:	2800      	cmp	r0, #0
 800dd28:	f43f ae89 	beq.w	800da3e <_strtod_l+0x47e>
 800dd2c:	2e00      	cmp	r6, #0
 800dd2e:	dd08      	ble.n	800dd42 <_strtod_l+0x782>
 800dd30:	9904      	ldr	r1, [sp, #16]
 800dd32:	4632      	mov	r2, r6
 800dd34:	4650      	mov	r0, sl
 800dd36:	f001 f969 	bl	800f00c <__lshift>
 800dd3a:	9004      	str	r0, [sp, #16]
 800dd3c:	2800      	cmp	r0, #0
 800dd3e:	f43f ae7e 	beq.w	800da3e <_strtod_l+0x47e>
 800dd42:	9a06      	ldr	r2, [sp, #24]
 800dd44:	991a      	ldr	r1, [sp, #104]	; 0x68
 800dd46:	4650      	mov	r0, sl
 800dd48:	f001 f9ec 	bl	800f124 <__mdiff>
 800dd4c:	4683      	mov	fp, r0
 800dd4e:	2800      	cmp	r0, #0
 800dd50:	f43f ae75 	beq.w	800da3e <_strtod_l+0x47e>
 800dd54:	2400      	movs	r4, #0
 800dd56:	68c3      	ldr	r3, [r0, #12]
 800dd58:	9904      	ldr	r1, [sp, #16]
 800dd5a:	60c4      	str	r4, [r0, #12]
 800dd5c:	930b      	str	r3, [sp, #44]	; 0x2c
 800dd5e:	f001 f9c5 	bl	800f0ec <__mcmp>
 800dd62:	42a0      	cmp	r0, r4
 800dd64:	da6c      	bge.n	800de40 <_strtod_l+0x880>
 800dd66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dd68:	ea53 0308 	orrs.w	r3, r3, r8
 800dd6c:	f040 8092 	bne.w	800de94 <_strtod_l+0x8d4>
 800dd70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	f040 808d 	bne.w	800de94 <_strtod_l+0x8d4>
 800dd7a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800dd7e:	0d1b      	lsrs	r3, r3, #20
 800dd80:	051b      	lsls	r3, r3, #20
 800dd82:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800dd86:	f240 8085 	bls.w	800de94 <_strtod_l+0x8d4>
 800dd8a:	f8db 3014 	ldr.w	r3, [fp, #20]
 800dd8e:	b91b      	cbnz	r3, 800dd98 <_strtod_l+0x7d8>
 800dd90:	f8db 3010 	ldr.w	r3, [fp, #16]
 800dd94:	2b01      	cmp	r3, #1
 800dd96:	dd7d      	ble.n	800de94 <_strtod_l+0x8d4>
 800dd98:	4659      	mov	r1, fp
 800dd9a:	2201      	movs	r2, #1
 800dd9c:	4650      	mov	r0, sl
 800dd9e:	f001 f935 	bl	800f00c <__lshift>
 800dda2:	9904      	ldr	r1, [sp, #16]
 800dda4:	4683      	mov	fp, r0
 800dda6:	f001 f9a1 	bl	800f0ec <__mcmp>
 800ddaa:	2800      	cmp	r0, #0
 800ddac:	dd72      	ble.n	800de94 <_strtod_l+0x8d4>
 800ddae:	9905      	ldr	r1, [sp, #20]
 800ddb0:	4a21      	ldr	r2, [pc, #132]	; (800de38 <_strtod_l+0x878>)
 800ddb2:	464b      	mov	r3, r9
 800ddb4:	2900      	cmp	r1, #0
 800ddb6:	f000 808d 	beq.w	800ded4 <_strtod_l+0x914>
 800ddba:	ea02 0109 	and.w	r1, r2, r9
 800ddbe:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ddc2:	f300 8087 	bgt.w	800ded4 <_strtod_l+0x914>
 800ddc6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ddca:	f77f aead 	ble.w	800db28 <_strtod_l+0x568>
 800ddce:	4b1b      	ldr	r3, [pc, #108]	; (800de3c <_strtod_l+0x87c>)
 800ddd0:	4640      	mov	r0, r8
 800ddd2:	4649      	mov	r1, r9
 800ddd4:	2200      	movs	r2, #0
 800ddd6:	f7f2 fbe7 	bl	80005a8 <__aeabi_dmul>
 800ddda:	460b      	mov	r3, r1
 800dddc:	4303      	orrs	r3, r0
 800ddde:	bf08      	it	eq
 800dde0:	2322      	moveq	r3, #34	; 0x22
 800dde2:	4680      	mov	r8, r0
 800dde4:	4689      	mov	r9, r1
 800dde6:	bf08      	it	eq
 800dde8:	f8ca 3000 	streq.w	r3, [sl]
 800ddec:	e632      	b.n	800da54 <_strtod_l+0x494>
 800ddee:	f04f 32ff 	mov.w	r2, #4294967295
 800ddf2:	fa02 f303 	lsl.w	r3, r2, r3
 800ddf6:	ea03 0808 	and.w	r8, r3, r8
 800ddfa:	e6e3      	b.n	800dbc4 <_strtod_l+0x604>
 800ddfc:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800de00:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800de04:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800de08:	35e2      	adds	r5, #226	; 0xe2
 800de0a:	fa07 f505 	lsl.w	r5, r7, r5
 800de0e:	970f      	str	r7, [sp, #60]	; 0x3c
 800de10:	e747      	b.n	800dca2 <_strtod_l+0x6e2>
 800de12:	2301      	movs	r3, #1
 800de14:	2500      	movs	r5, #0
 800de16:	930f      	str	r3, [sp, #60]	; 0x3c
 800de18:	e743      	b.n	800dca2 <_strtod_l+0x6e2>
 800de1a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800de1c:	463a      	mov	r2, r7
 800de1e:	4650      	mov	r0, sl
 800de20:	f001 f8f4 	bl	800f00c <__lshift>
 800de24:	901a      	str	r0, [sp, #104]	; 0x68
 800de26:	2800      	cmp	r0, #0
 800de28:	f47f af69 	bne.w	800dcfe <_strtod_l+0x73e>
 800de2c:	e607      	b.n	800da3e <_strtod_l+0x47e>
 800de2e:	bf00      	nop
 800de30:	08010b30 	.word	0x08010b30
 800de34:	fffffc02 	.word	0xfffffc02
 800de38:	7ff00000 	.word	0x7ff00000
 800de3c:	39500000 	.word	0x39500000
 800de40:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800de44:	d165      	bne.n	800df12 <_strtod_l+0x952>
 800de46:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800de48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800de4c:	b35a      	cbz	r2, 800dea6 <_strtod_l+0x8e6>
 800de4e:	4a9a      	ldr	r2, [pc, #616]	; (800e0b8 <_strtod_l+0xaf8>)
 800de50:	4293      	cmp	r3, r2
 800de52:	d12b      	bne.n	800deac <_strtod_l+0x8ec>
 800de54:	9b05      	ldr	r3, [sp, #20]
 800de56:	4641      	mov	r1, r8
 800de58:	b303      	cbz	r3, 800de9c <_strtod_l+0x8dc>
 800de5a:	4b98      	ldr	r3, [pc, #608]	; (800e0bc <_strtod_l+0xafc>)
 800de5c:	464a      	mov	r2, r9
 800de5e:	4013      	ands	r3, r2
 800de60:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800de64:	f04f 32ff 	mov.w	r2, #4294967295
 800de68:	d81b      	bhi.n	800dea2 <_strtod_l+0x8e2>
 800de6a:	0d1b      	lsrs	r3, r3, #20
 800de6c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800de70:	fa02 f303 	lsl.w	r3, r2, r3
 800de74:	4299      	cmp	r1, r3
 800de76:	d119      	bne.n	800deac <_strtod_l+0x8ec>
 800de78:	4b91      	ldr	r3, [pc, #580]	; (800e0c0 <_strtod_l+0xb00>)
 800de7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de7c:	429a      	cmp	r2, r3
 800de7e:	d102      	bne.n	800de86 <_strtod_l+0x8c6>
 800de80:	3101      	adds	r1, #1
 800de82:	f43f addc 	beq.w	800da3e <_strtod_l+0x47e>
 800de86:	4b8d      	ldr	r3, [pc, #564]	; (800e0bc <_strtod_l+0xafc>)
 800de88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de8a:	401a      	ands	r2, r3
 800de8c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800de90:	f04f 0800 	mov.w	r8, #0
 800de94:	9b05      	ldr	r3, [sp, #20]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d199      	bne.n	800ddce <_strtod_l+0x80e>
 800de9a:	e5db      	b.n	800da54 <_strtod_l+0x494>
 800de9c:	f04f 33ff 	mov.w	r3, #4294967295
 800dea0:	e7e8      	b.n	800de74 <_strtod_l+0x8b4>
 800dea2:	4613      	mov	r3, r2
 800dea4:	e7e6      	b.n	800de74 <_strtod_l+0x8b4>
 800dea6:	ea53 0308 	orrs.w	r3, r3, r8
 800deaa:	d080      	beq.n	800ddae <_strtod_l+0x7ee>
 800deac:	b1e5      	cbz	r5, 800dee8 <_strtod_l+0x928>
 800deae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800deb0:	421d      	tst	r5, r3
 800deb2:	d0ef      	beq.n	800de94 <_strtod_l+0x8d4>
 800deb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800deb6:	9a05      	ldr	r2, [sp, #20]
 800deb8:	4640      	mov	r0, r8
 800deba:	4649      	mov	r1, r9
 800debc:	b1c3      	cbz	r3, 800def0 <_strtod_l+0x930>
 800debe:	f7ff fb5e 	bl	800d57e <sulp>
 800dec2:	4602      	mov	r2, r0
 800dec4:	460b      	mov	r3, r1
 800dec6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800deca:	f7f2 f9b7 	bl	800023c <__adddf3>
 800dece:	4680      	mov	r8, r0
 800ded0:	4689      	mov	r9, r1
 800ded2:	e7df      	b.n	800de94 <_strtod_l+0x8d4>
 800ded4:	4013      	ands	r3, r2
 800ded6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800deda:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800dede:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800dee2:	f04f 38ff 	mov.w	r8, #4294967295
 800dee6:	e7d5      	b.n	800de94 <_strtod_l+0x8d4>
 800dee8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800deea:	ea13 0f08 	tst.w	r3, r8
 800deee:	e7e0      	b.n	800deb2 <_strtod_l+0x8f2>
 800def0:	f7ff fb45 	bl	800d57e <sulp>
 800def4:	4602      	mov	r2, r0
 800def6:	460b      	mov	r3, r1
 800def8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800defc:	f7f2 f99c 	bl	8000238 <__aeabi_dsub>
 800df00:	2200      	movs	r2, #0
 800df02:	2300      	movs	r3, #0
 800df04:	4680      	mov	r8, r0
 800df06:	4689      	mov	r9, r1
 800df08:	f7f2 fdb6 	bl	8000a78 <__aeabi_dcmpeq>
 800df0c:	2800      	cmp	r0, #0
 800df0e:	d0c1      	beq.n	800de94 <_strtod_l+0x8d4>
 800df10:	e60a      	b.n	800db28 <_strtod_l+0x568>
 800df12:	9904      	ldr	r1, [sp, #16]
 800df14:	4658      	mov	r0, fp
 800df16:	f001 fa63 	bl	800f3e0 <__ratio>
 800df1a:	2200      	movs	r2, #0
 800df1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800df20:	4606      	mov	r6, r0
 800df22:	460f      	mov	r7, r1
 800df24:	f7f2 fdbc 	bl	8000aa0 <__aeabi_dcmple>
 800df28:	2800      	cmp	r0, #0
 800df2a:	d070      	beq.n	800e00e <_strtod_l+0xa4e>
 800df2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d042      	beq.n	800dfb8 <_strtod_l+0x9f8>
 800df32:	4f64      	ldr	r7, [pc, #400]	; (800e0c4 <_strtod_l+0xb04>)
 800df34:	2600      	movs	r6, #0
 800df36:	4d63      	ldr	r5, [pc, #396]	; (800e0c4 <_strtod_l+0xb04>)
 800df38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df3a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800df3e:	0d1b      	lsrs	r3, r3, #20
 800df40:	051b      	lsls	r3, r3, #20
 800df42:	930f      	str	r3, [sp, #60]	; 0x3c
 800df44:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800df46:	4b60      	ldr	r3, [pc, #384]	; (800e0c8 <_strtod_l+0xb08>)
 800df48:	429a      	cmp	r2, r3
 800df4a:	f040 80c5 	bne.w	800e0d8 <_strtod_l+0xb18>
 800df4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df50:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800df54:	4640      	mov	r0, r8
 800df56:	4649      	mov	r1, r9
 800df58:	f001 f96c 	bl	800f234 <__ulp>
 800df5c:	4602      	mov	r2, r0
 800df5e:	460b      	mov	r3, r1
 800df60:	4630      	mov	r0, r6
 800df62:	4639      	mov	r1, r7
 800df64:	f7f2 fb20 	bl	80005a8 <__aeabi_dmul>
 800df68:	4642      	mov	r2, r8
 800df6a:	464b      	mov	r3, r9
 800df6c:	f7f2 f966 	bl	800023c <__adddf3>
 800df70:	460b      	mov	r3, r1
 800df72:	4952      	ldr	r1, [pc, #328]	; (800e0bc <_strtod_l+0xafc>)
 800df74:	4a55      	ldr	r2, [pc, #340]	; (800e0cc <_strtod_l+0xb0c>)
 800df76:	4019      	ands	r1, r3
 800df78:	4291      	cmp	r1, r2
 800df7a:	4680      	mov	r8, r0
 800df7c:	d95d      	bls.n	800e03a <_strtod_l+0xa7a>
 800df7e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800df80:	4b4f      	ldr	r3, [pc, #316]	; (800e0c0 <_strtod_l+0xb00>)
 800df82:	429a      	cmp	r2, r3
 800df84:	d103      	bne.n	800df8e <_strtod_l+0x9ce>
 800df86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800df88:	3301      	adds	r3, #1
 800df8a:	f43f ad58 	beq.w	800da3e <_strtod_l+0x47e>
 800df8e:	f8df 9130 	ldr.w	r9, [pc, #304]	; 800e0c0 <_strtod_l+0xb00>
 800df92:	f04f 38ff 	mov.w	r8, #4294967295
 800df96:	991a      	ldr	r1, [sp, #104]	; 0x68
 800df98:	4650      	mov	r0, sl
 800df9a:	f000 fe1f 	bl	800ebdc <_Bfree>
 800df9e:	9906      	ldr	r1, [sp, #24]
 800dfa0:	4650      	mov	r0, sl
 800dfa2:	f000 fe1b 	bl	800ebdc <_Bfree>
 800dfa6:	9904      	ldr	r1, [sp, #16]
 800dfa8:	4650      	mov	r0, sl
 800dfaa:	f000 fe17 	bl	800ebdc <_Bfree>
 800dfae:	4659      	mov	r1, fp
 800dfb0:	4650      	mov	r0, sl
 800dfb2:	f000 fe13 	bl	800ebdc <_Bfree>
 800dfb6:	e629      	b.n	800dc0c <_strtod_l+0x64c>
 800dfb8:	f1b8 0f00 	cmp.w	r8, #0
 800dfbc:	d119      	bne.n	800dff2 <_strtod_l+0xa32>
 800dfbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dfc4:	b9e3      	cbnz	r3, 800e000 <_strtod_l+0xa40>
 800dfc6:	4b3f      	ldr	r3, [pc, #252]	; (800e0c4 <_strtod_l+0xb04>)
 800dfc8:	2200      	movs	r2, #0
 800dfca:	4630      	mov	r0, r6
 800dfcc:	4639      	mov	r1, r7
 800dfce:	f7f2 fd5d 	bl	8000a8c <__aeabi_dcmplt>
 800dfd2:	b9c8      	cbnz	r0, 800e008 <_strtod_l+0xa48>
 800dfd4:	4b3e      	ldr	r3, [pc, #248]	; (800e0d0 <_strtod_l+0xb10>)
 800dfd6:	2200      	movs	r2, #0
 800dfd8:	4630      	mov	r0, r6
 800dfda:	4639      	mov	r1, r7
 800dfdc:	f7f2 fae4 	bl	80005a8 <__aeabi_dmul>
 800dfe0:	4604      	mov	r4, r0
 800dfe2:	460d      	mov	r5, r1
 800dfe4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800dfe8:	9416      	str	r4, [sp, #88]	; 0x58
 800dfea:	9317      	str	r3, [sp, #92]	; 0x5c
 800dfec:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800dff0:	e7a2      	b.n	800df38 <_strtod_l+0x978>
 800dff2:	f1b8 0f01 	cmp.w	r8, #1
 800dff6:	d103      	bne.n	800e000 <_strtod_l+0xa40>
 800dff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	f43f ad94 	beq.w	800db28 <_strtod_l+0x568>
 800e000:	4f34      	ldr	r7, [pc, #208]	; (800e0d4 <_strtod_l+0xb14>)
 800e002:	2600      	movs	r6, #0
 800e004:	2400      	movs	r4, #0
 800e006:	e796      	b.n	800df36 <_strtod_l+0x976>
 800e008:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800e00a:	4d31      	ldr	r5, [pc, #196]	; (800e0d0 <_strtod_l+0xb10>)
 800e00c:	e7ea      	b.n	800dfe4 <_strtod_l+0xa24>
 800e00e:	4b30      	ldr	r3, [pc, #192]	; (800e0d0 <_strtod_l+0xb10>)
 800e010:	2200      	movs	r2, #0
 800e012:	4630      	mov	r0, r6
 800e014:	4639      	mov	r1, r7
 800e016:	f7f2 fac7 	bl	80005a8 <__aeabi_dmul>
 800e01a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e01c:	4604      	mov	r4, r0
 800e01e:	460d      	mov	r5, r1
 800e020:	b933      	cbnz	r3, 800e030 <_strtod_l+0xa70>
 800e022:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e026:	9010      	str	r0, [sp, #64]	; 0x40
 800e028:	9311      	str	r3, [sp, #68]	; 0x44
 800e02a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800e02e:	e783      	b.n	800df38 <_strtod_l+0x978>
 800e030:	4602      	mov	r2, r0
 800e032:	460b      	mov	r3, r1
 800e034:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800e038:	e7f7      	b.n	800e02a <_strtod_l+0xa6a>
 800e03a:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800e03e:	9b05      	ldr	r3, [sp, #20]
 800e040:	2b00      	cmp	r3, #0
 800e042:	d1a8      	bne.n	800df96 <_strtod_l+0x9d6>
 800e044:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e048:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e04a:	0d1b      	lsrs	r3, r3, #20
 800e04c:	051b      	lsls	r3, r3, #20
 800e04e:	429a      	cmp	r2, r3
 800e050:	d1a1      	bne.n	800df96 <_strtod_l+0x9d6>
 800e052:	4620      	mov	r0, r4
 800e054:	4629      	mov	r1, r5
 800e056:	f7f3 f8d9 	bl	800120c <__aeabi_d2lz>
 800e05a:	f7f2 fa77 	bl	800054c <__aeabi_l2d>
 800e05e:	4602      	mov	r2, r0
 800e060:	460b      	mov	r3, r1
 800e062:	4620      	mov	r0, r4
 800e064:	4629      	mov	r1, r5
 800e066:	f7f2 f8e7 	bl	8000238 <__aeabi_dsub>
 800e06a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e06c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e070:	ea43 0308 	orr.w	r3, r3, r8
 800e074:	4313      	orrs	r3, r2
 800e076:	4604      	mov	r4, r0
 800e078:	460d      	mov	r5, r1
 800e07a:	d068      	beq.n	800e14e <_strtod_l+0xb8e>
 800e07c:	a30a      	add	r3, pc, #40	; (adr r3, 800e0a8 <_strtod_l+0xae8>)
 800e07e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e082:	f7f2 fd03 	bl	8000a8c <__aeabi_dcmplt>
 800e086:	2800      	cmp	r0, #0
 800e088:	f47f ace4 	bne.w	800da54 <_strtod_l+0x494>
 800e08c:	a308      	add	r3, pc, #32	; (adr r3, 800e0b0 <_strtod_l+0xaf0>)
 800e08e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e092:	4620      	mov	r0, r4
 800e094:	4629      	mov	r1, r5
 800e096:	f7f2 fd17 	bl	8000ac8 <__aeabi_dcmpgt>
 800e09a:	2800      	cmp	r0, #0
 800e09c:	f43f af7b 	beq.w	800df96 <_strtod_l+0x9d6>
 800e0a0:	e4d8      	b.n	800da54 <_strtod_l+0x494>
 800e0a2:	bf00      	nop
 800e0a4:	f3af 8000 	nop.w
 800e0a8:	94a03595 	.word	0x94a03595
 800e0ac:	3fdfffff 	.word	0x3fdfffff
 800e0b0:	35afe535 	.word	0x35afe535
 800e0b4:	3fe00000 	.word	0x3fe00000
 800e0b8:	000fffff 	.word	0x000fffff
 800e0bc:	7ff00000 	.word	0x7ff00000
 800e0c0:	7fefffff 	.word	0x7fefffff
 800e0c4:	3ff00000 	.word	0x3ff00000
 800e0c8:	7fe00000 	.word	0x7fe00000
 800e0cc:	7c9fffff 	.word	0x7c9fffff
 800e0d0:	3fe00000 	.word	0x3fe00000
 800e0d4:	bff00000 	.word	0xbff00000
 800e0d8:	9b05      	ldr	r3, [sp, #20]
 800e0da:	b313      	cbz	r3, 800e122 <_strtod_l+0xb62>
 800e0dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e0de:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e0e2:	d81e      	bhi.n	800e122 <_strtod_l+0xb62>
 800e0e4:	a326      	add	r3, pc, #152	; (adr r3, 800e180 <_strtod_l+0xbc0>)
 800e0e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0ea:	4620      	mov	r0, r4
 800e0ec:	4629      	mov	r1, r5
 800e0ee:	f7f2 fcd7 	bl	8000aa0 <__aeabi_dcmple>
 800e0f2:	b190      	cbz	r0, 800e11a <_strtod_l+0xb5a>
 800e0f4:	4629      	mov	r1, r5
 800e0f6:	4620      	mov	r0, r4
 800e0f8:	f7f2 fcf0 	bl	8000adc <__aeabi_d2uiz>
 800e0fc:	2801      	cmp	r0, #1
 800e0fe:	bf38      	it	cc
 800e100:	2001      	movcc	r0, #1
 800e102:	f7f2 f9d7 	bl	80004b4 <__aeabi_ui2d>
 800e106:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e108:	4604      	mov	r4, r0
 800e10a:	460d      	mov	r5, r1
 800e10c:	b9d3      	cbnz	r3, 800e144 <_strtod_l+0xb84>
 800e10e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e112:	9012      	str	r0, [sp, #72]	; 0x48
 800e114:	9313      	str	r3, [sp, #76]	; 0x4c
 800e116:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800e11a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e11c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800e120:	1a9f      	subs	r7, r3, r2
 800e122:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e126:	f001 f885 	bl	800f234 <__ulp>
 800e12a:	4602      	mov	r2, r0
 800e12c:	460b      	mov	r3, r1
 800e12e:	4630      	mov	r0, r6
 800e130:	4639      	mov	r1, r7
 800e132:	f7f2 fa39 	bl	80005a8 <__aeabi_dmul>
 800e136:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e13a:	f7f2 f87f 	bl	800023c <__adddf3>
 800e13e:	4680      	mov	r8, r0
 800e140:	4689      	mov	r9, r1
 800e142:	e77c      	b.n	800e03e <_strtod_l+0xa7e>
 800e144:	4602      	mov	r2, r0
 800e146:	460b      	mov	r3, r1
 800e148:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800e14c:	e7e3      	b.n	800e116 <_strtod_l+0xb56>
 800e14e:	a30e      	add	r3, pc, #56	; (adr r3, 800e188 <_strtod_l+0xbc8>)
 800e150:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e154:	f7f2 fc9a 	bl	8000a8c <__aeabi_dcmplt>
 800e158:	e79f      	b.n	800e09a <_strtod_l+0xada>
 800e15a:	2300      	movs	r3, #0
 800e15c:	930a      	str	r3, [sp, #40]	; 0x28
 800e15e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e160:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e162:	6013      	str	r3, [r2, #0]
 800e164:	f7ff ba71 	b.w	800d64a <_strtod_l+0x8a>
 800e168:	2a65      	cmp	r2, #101	; 0x65
 800e16a:	f43f ab63 	beq.w	800d834 <_strtod_l+0x274>
 800e16e:	2a45      	cmp	r2, #69	; 0x45
 800e170:	f43f ab60 	beq.w	800d834 <_strtod_l+0x274>
 800e174:	2301      	movs	r3, #1
 800e176:	f7ff bb95 	b.w	800d8a4 <_strtod_l+0x2e4>
 800e17a:	bf00      	nop
 800e17c:	f3af 8000 	nop.w
 800e180:	ffc00000 	.word	0xffc00000
 800e184:	41dfffff 	.word	0x41dfffff
 800e188:	94a03595 	.word	0x94a03595
 800e18c:	3fcfffff 	.word	0x3fcfffff

0800e190 <strtod>:
 800e190:	460a      	mov	r2, r1
 800e192:	4601      	mov	r1, r0
 800e194:	4802      	ldr	r0, [pc, #8]	; (800e1a0 <strtod+0x10>)
 800e196:	4b03      	ldr	r3, [pc, #12]	; (800e1a4 <strtod+0x14>)
 800e198:	6800      	ldr	r0, [r0, #0]
 800e19a:	f7ff ba11 	b.w	800d5c0 <_strtod_l>
 800e19e:	bf00      	nop
 800e1a0:	20000010 	.word	0x20000010
 800e1a4:	20000078 	.word	0x20000078

0800e1a8 <_strtol_l.constprop.0>:
 800e1a8:	2b01      	cmp	r3, #1
 800e1aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e1ae:	4680      	mov	r8, r0
 800e1b0:	d001      	beq.n	800e1b6 <_strtol_l.constprop.0+0xe>
 800e1b2:	2b24      	cmp	r3, #36	; 0x24
 800e1b4:	d906      	bls.n	800e1c4 <_strtol_l.constprop.0+0x1c>
 800e1b6:	f7fe ff89 	bl	800d0cc <__errno>
 800e1ba:	2316      	movs	r3, #22
 800e1bc:	6003      	str	r3, [r0, #0]
 800e1be:	2000      	movs	r0, #0
 800e1c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1c4:	4f35      	ldr	r7, [pc, #212]	; (800e29c <_strtol_l.constprop.0+0xf4>)
 800e1c6:	460d      	mov	r5, r1
 800e1c8:	4628      	mov	r0, r5
 800e1ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e1ce:	5de6      	ldrb	r6, [r4, r7]
 800e1d0:	f016 0608 	ands.w	r6, r6, #8
 800e1d4:	d1f8      	bne.n	800e1c8 <_strtol_l.constprop.0+0x20>
 800e1d6:	2c2d      	cmp	r4, #45	; 0x2d
 800e1d8:	d12f      	bne.n	800e23a <_strtol_l.constprop.0+0x92>
 800e1da:	782c      	ldrb	r4, [r5, #0]
 800e1dc:	2601      	movs	r6, #1
 800e1de:	1c85      	adds	r5, r0, #2
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d057      	beq.n	800e294 <_strtol_l.constprop.0+0xec>
 800e1e4:	2b10      	cmp	r3, #16
 800e1e6:	d109      	bne.n	800e1fc <_strtol_l.constprop.0+0x54>
 800e1e8:	2c30      	cmp	r4, #48	; 0x30
 800e1ea:	d107      	bne.n	800e1fc <_strtol_l.constprop.0+0x54>
 800e1ec:	7828      	ldrb	r0, [r5, #0]
 800e1ee:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800e1f2:	2858      	cmp	r0, #88	; 0x58
 800e1f4:	d149      	bne.n	800e28a <_strtol_l.constprop.0+0xe2>
 800e1f6:	786c      	ldrb	r4, [r5, #1]
 800e1f8:	2310      	movs	r3, #16
 800e1fa:	3502      	adds	r5, #2
 800e1fc:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800e200:	f10e 3eff 	add.w	lr, lr, #4294967295
 800e204:	2700      	movs	r7, #0
 800e206:	fbbe f9f3 	udiv	r9, lr, r3
 800e20a:	4638      	mov	r0, r7
 800e20c:	fb03 ea19 	mls	sl, r3, r9, lr
 800e210:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800e214:	f1bc 0f09 	cmp.w	ip, #9
 800e218:	d814      	bhi.n	800e244 <_strtol_l.constprop.0+0x9c>
 800e21a:	4664      	mov	r4, ip
 800e21c:	42a3      	cmp	r3, r4
 800e21e:	dd22      	ble.n	800e266 <_strtol_l.constprop.0+0xbe>
 800e220:	2f00      	cmp	r7, #0
 800e222:	db1d      	blt.n	800e260 <_strtol_l.constprop.0+0xb8>
 800e224:	4581      	cmp	r9, r0
 800e226:	d31b      	bcc.n	800e260 <_strtol_l.constprop.0+0xb8>
 800e228:	d101      	bne.n	800e22e <_strtol_l.constprop.0+0x86>
 800e22a:	45a2      	cmp	sl, r4
 800e22c:	db18      	blt.n	800e260 <_strtol_l.constprop.0+0xb8>
 800e22e:	fb00 4003 	mla	r0, r0, r3, r4
 800e232:	2701      	movs	r7, #1
 800e234:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e238:	e7ea      	b.n	800e210 <_strtol_l.constprop.0+0x68>
 800e23a:	2c2b      	cmp	r4, #43	; 0x2b
 800e23c:	bf04      	itt	eq
 800e23e:	782c      	ldrbeq	r4, [r5, #0]
 800e240:	1c85      	addeq	r5, r0, #2
 800e242:	e7cd      	b.n	800e1e0 <_strtol_l.constprop.0+0x38>
 800e244:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800e248:	f1bc 0f19 	cmp.w	ip, #25
 800e24c:	d801      	bhi.n	800e252 <_strtol_l.constprop.0+0xaa>
 800e24e:	3c37      	subs	r4, #55	; 0x37
 800e250:	e7e4      	b.n	800e21c <_strtol_l.constprop.0+0x74>
 800e252:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800e256:	f1bc 0f19 	cmp.w	ip, #25
 800e25a:	d804      	bhi.n	800e266 <_strtol_l.constprop.0+0xbe>
 800e25c:	3c57      	subs	r4, #87	; 0x57
 800e25e:	e7dd      	b.n	800e21c <_strtol_l.constprop.0+0x74>
 800e260:	f04f 37ff 	mov.w	r7, #4294967295
 800e264:	e7e6      	b.n	800e234 <_strtol_l.constprop.0+0x8c>
 800e266:	2f00      	cmp	r7, #0
 800e268:	da07      	bge.n	800e27a <_strtol_l.constprop.0+0xd2>
 800e26a:	2322      	movs	r3, #34	; 0x22
 800e26c:	f8c8 3000 	str.w	r3, [r8]
 800e270:	4670      	mov	r0, lr
 800e272:	2a00      	cmp	r2, #0
 800e274:	d0a4      	beq.n	800e1c0 <_strtol_l.constprop.0+0x18>
 800e276:	1e69      	subs	r1, r5, #1
 800e278:	e005      	b.n	800e286 <_strtol_l.constprop.0+0xde>
 800e27a:	b106      	cbz	r6, 800e27e <_strtol_l.constprop.0+0xd6>
 800e27c:	4240      	negs	r0, r0
 800e27e:	2a00      	cmp	r2, #0
 800e280:	d09e      	beq.n	800e1c0 <_strtol_l.constprop.0+0x18>
 800e282:	2f00      	cmp	r7, #0
 800e284:	d1f7      	bne.n	800e276 <_strtol_l.constprop.0+0xce>
 800e286:	6011      	str	r1, [r2, #0]
 800e288:	e79a      	b.n	800e1c0 <_strtol_l.constprop.0+0x18>
 800e28a:	2430      	movs	r4, #48	; 0x30
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d1b5      	bne.n	800e1fc <_strtol_l.constprop.0+0x54>
 800e290:	2308      	movs	r3, #8
 800e292:	e7b3      	b.n	800e1fc <_strtol_l.constprop.0+0x54>
 800e294:	2c30      	cmp	r4, #48	; 0x30
 800e296:	d0a9      	beq.n	800e1ec <_strtol_l.constprop.0+0x44>
 800e298:	230a      	movs	r3, #10
 800e29a:	e7af      	b.n	800e1fc <_strtol_l.constprop.0+0x54>
 800e29c:	08010b95 	.word	0x08010b95

0800e2a0 <strtol>:
 800e2a0:	4613      	mov	r3, r2
 800e2a2:	460a      	mov	r2, r1
 800e2a4:	4601      	mov	r1, r0
 800e2a6:	4802      	ldr	r0, [pc, #8]	; (800e2b0 <strtol+0x10>)
 800e2a8:	6800      	ldr	r0, [r0, #0]
 800e2aa:	f7ff bf7d 	b.w	800e1a8 <_strtol_l.constprop.0>
 800e2ae:	bf00      	nop
 800e2b0:	20000010 	.word	0x20000010

0800e2b4 <_strtoll_l.constprop.0>:
 800e2b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2b8:	b085      	sub	sp, #20
 800e2ba:	4688      	mov	r8, r1
 800e2bc:	9201      	str	r2, [sp, #4]
 800e2be:	4a47      	ldr	r2, [pc, #284]	; (800e3dc <_strtoll_l.constprop.0+0x128>)
 800e2c0:	9003      	str	r0, [sp, #12]
 800e2c2:	461e      	mov	r6, r3
 800e2c4:	460d      	mov	r5, r1
 800e2c6:	462b      	mov	r3, r5
 800e2c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e2cc:	5ca7      	ldrb	r7, [r4, r2]
 800e2ce:	f017 0708 	ands.w	r7, r7, #8
 800e2d2:	d1f8      	bne.n	800e2c6 <_strtoll_l.constprop.0+0x12>
 800e2d4:	2c2d      	cmp	r4, #45	; 0x2d
 800e2d6:	d147      	bne.n	800e368 <_strtoll_l.constprop.0+0xb4>
 800e2d8:	782c      	ldrb	r4, [r5, #0]
 800e2da:	2701      	movs	r7, #1
 800e2dc:	1c9d      	adds	r5, r3, #2
 800e2de:	2e00      	cmp	r6, #0
 800e2e0:	d077      	beq.n	800e3d2 <_strtoll_l.constprop.0+0x11e>
 800e2e2:	2e10      	cmp	r6, #16
 800e2e4:	d109      	bne.n	800e2fa <_strtoll_l.constprop.0+0x46>
 800e2e6:	2c30      	cmp	r4, #48	; 0x30
 800e2e8:	d107      	bne.n	800e2fa <_strtoll_l.constprop.0+0x46>
 800e2ea:	782b      	ldrb	r3, [r5, #0]
 800e2ec:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e2f0:	2b58      	cmp	r3, #88	; 0x58
 800e2f2:	d169      	bne.n	800e3c8 <_strtoll_l.constprop.0+0x114>
 800e2f4:	786c      	ldrb	r4, [r5, #1]
 800e2f6:	2610      	movs	r6, #16
 800e2f8:	3502      	adds	r5, #2
 800e2fa:	f107 4a00 	add.w	sl, r7, #2147483648	; 0x80000000
 800e2fe:	f107 3bff 	add.w	fp, r7, #4294967295
 800e302:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e306:	ea4f 79e6 	mov.w	r9, r6, asr #31
 800e30a:	4632      	mov	r2, r6
 800e30c:	464b      	mov	r3, r9
 800e30e:	4658      	mov	r0, fp
 800e310:	4651      	mov	r1, sl
 800e312:	f7f2 ff63 	bl	80011dc <__aeabi_uldivmod>
 800e316:	2300      	movs	r3, #0
 800e318:	468c      	mov	ip, r1
 800e31a:	9202      	str	r2, [sp, #8]
 800e31c:	4619      	mov	r1, r3
 800e31e:	4602      	mov	r2, r0
 800e320:	4618      	mov	r0, r3
 800e322:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800e326:	f1be 0f09 	cmp.w	lr, #9
 800e32a:	d822      	bhi.n	800e372 <_strtoll_l.constprop.0+0xbe>
 800e32c:	4674      	mov	r4, lr
 800e32e:	42a6      	cmp	r6, r4
 800e330:	dd30      	ble.n	800e394 <_strtoll_l.constprop.0+0xe0>
 800e332:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e336:	d014      	beq.n	800e362 <_strtoll_l.constprop.0+0xae>
 800e338:	4282      	cmp	r2, r0
 800e33a:	eb7c 0301 	sbcs.w	r3, ip, r1
 800e33e:	d326      	bcc.n	800e38e <_strtoll_l.constprop.0+0xda>
 800e340:	458c      	cmp	ip, r1
 800e342:	bf08      	it	eq
 800e344:	4282      	cmpeq	r2, r0
 800e346:	d102      	bne.n	800e34e <_strtoll_l.constprop.0+0x9a>
 800e348:	9b02      	ldr	r3, [sp, #8]
 800e34a:	42a3      	cmp	r3, r4
 800e34c:	db1f      	blt.n	800e38e <_strtoll_l.constprop.0+0xda>
 800e34e:	4371      	muls	r1, r6
 800e350:	fb00 1109 	mla	r1, r0, r9, r1
 800e354:	fba6 0300 	umull	r0, r3, r6, r0
 800e358:	4419      	add	r1, r3
 800e35a:	1820      	adds	r0, r4, r0
 800e35c:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800e360:	2301      	movs	r3, #1
 800e362:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e366:	e7dc      	b.n	800e322 <_strtoll_l.constprop.0+0x6e>
 800e368:	2c2b      	cmp	r4, #43	; 0x2b
 800e36a:	bf04      	itt	eq
 800e36c:	782c      	ldrbeq	r4, [r5, #0]
 800e36e:	1c9d      	addeq	r5, r3, #2
 800e370:	e7b5      	b.n	800e2de <_strtoll_l.constprop.0+0x2a>
 800e372:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800e376:	f1be 0f19 	cmp.w	lr, #25
 800e37a:	d801      	bhi.n	800e380 <_strtoll_l.constprop.0+0xcc>
 800e37c:	3c37      	subs	r4, #55	; 0x37
 800e37e:	e7d6      	b.n	800e32e <_strtoll_l.constprop.0+0x7a>
 800e380:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800e384:	f1be 0f19 	cmp.w	lr, #25
 800e388:	d804      	bhi.n	800e394 <_strtoll_l.constprop.0+0xe0>
 800e38a:	3c57      	subs	r4, #87	; 0x57
 800e38c:	e7cf      	b.n	800e32e <_strtoll_l.constprop.0+0x7a>
 800e38e:	f04f 33ff 	mov.w	r3, #4294967295
 800e392:	e7e6      	b.n	800e362 <_strtoll_l.constprop.0+0xae>
 800e394:	1c5a      	adds	r2, r3, #1
 800e396:	d109      	bne.n	800e3ac <_strtoll_l.constprop.0+0xf8>
 800e398:	9a03      	ldr	r2, [sp, #12]
 800e39a:	2322      	movs	r3, #34	; 0x22
 800e39c:	6013      	str	r3, [r2, #0]
 800e39e:	9b01      	ldr	r3, [sp, #4]
 800e3a0:	4658      	mov	r0, fp
 800e3a2:	4651      	mov	r1, sl
 800e3a4:	b953      	cbnz	r3, 800e3bc <_strtoll_l.constprop.0+0x108>
 800e3a6:	b005      	add	sp, #20
 800e3a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3ac:	b117      	cbz	r7, 800e3b4 <_strtoll_l.constprop.0+0x100>
 800e3ae:	4240      	negs	r0, r0
 800e3b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800e3b4:	9a01      	ldr	r2, [sp, #4]
 800e3b6:	2a00      	cmp	r2, #0
 800e3b8:	d0f5      	beq.n	800e3a6 <_strtoll_l.constprop.0+0xf2>
 800e3ba:	b10b      	cbz	r3, 800e3c0 <_strtoll_l.constprop.0+0x10c>
 800e3bc:	f105 38ff 	add.w	r8, r5, #4294967295
 800e3c0:	9b01      	ldr	r3, [sp, #4]
 800e3c2:	f8c3 8000 	str.w	r8, [r3]
 800e3c6:	e7ee      	b.n	800e3a6 <_strtoll_l.constprop.0+0xf2>
 800e3c8:	2430      	movs	r4, #48	; 0x30
 800e3ca:	2e00      	cmp	r6, #0
 800e3cc:	d195      	bne.n	800e2fa <_strtoll_l.constprop.0+0x46>
 800e3ce:	2608      	movs	r6, #8
 800e3d0:	e793      	b.n	800e2fa <_strtoll_l.constprop.0+0x46>
 800e3d2:	2c30      	cmp	r4, #48	; 0x30
 800e3d4:	d089      	beq.n	800e2ea <_strtoll_l.constprop.0+0x36>
 800e3d6:	260a      	movs	r6, #10
 800e3d8:	e78f      	b.n	800e2fa <_strtoll_l.constprop.0+0x46>
 800e3da:	bf00      	nop
 800e3dc:	08010b95 	.word	0x08010b95

0800e3e0 <strtoll>:
 800e3e0:	4613      	mov	r3, r2
 800e3e2:	460a      	mov	r2, r1
 800e3e4:	4601      	mov	r1, r0
 800e3e6:	4802      	ldr	r0, [pc, #8]	; (800e3f0 <strtoll+0x10>)
 800e3e8:	6800      	ldr	r0, [r0, #0]
 800e3ea:	f7ff bf63 	b.w	800e2b4 <_strtoll_l.constprop.0>
 800e3ee:	bf00      	nop
 800e3f0:	20000010 	.word	0x20000010

0800e3f4 <__assert_func>:
 800e3f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e3f6:	4614      	mov	r4, r2
 800e3f8:	461a      	mov	r2, r3
 800e3fa:	4b09      	ldr	r3, [pc, #36]	; (800e420 <__assert_func+0x2c>)
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	4605      	mov	r5, r0
 800e400:	68d8      	ldr	r0, [r3, #12]
 800e402:	b14c      	cbz	r4, 800e418 <__assert_func+0x24>
 800e404:	4b07      	ldr	r3, [pc, #28]	; (800e424 <__assert_func+0x30>)
 800e406:	9100      	str	r1, [sp, #0]
 800e408:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e40c:	4906      	ldr	r1, [pc, #24]	; (800e428 <__assert_func+0x34>)
 800e40e:	462b      	mov	r3, r5
 800e410:	f000 f80e 	bl	800e430 <fiprintf>
 800e414:	f7fe fe4c 	bl	800d0b0 <abort>
 800e418:	4b04      	ldr	r3, [pc, #16]	; (800e42c <__assert_func+0x38>)
 800e41a:	461c      	mov	r4, r3
 800e41c:	e7f3      	b.n	800e406 <__assert_func+0x12>
 800e41e:	bf00      	nop
 800e420:	20000010 	.word	0x20000010
 800e424:	08010b58 	.word	0x08010b58
 800e428:	08010b65 	.word	0x08010b65
 800e42c:	08010b93 	.word	0x08010b93

0800e430 <fiprintf>:
 800e430:	b40e      	push	{r1, r2, r3}
 800e432:	b503      	push	{r0, r1, lr}
 800e434:	4601      	mov	r1, r0
 800e436:	ab03      	add	r3, sp, #12
 800e438:	4805      	ldr	r0, [pc, #20]	; (800e450 <fiprintf+0x20>)
 800e43a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e43e:	6800      	ldr	r0, [r0, #0]
 800e440:	9301      	str	r3, [sp, #4]
 800e442:	f001 f9d7 	bl	800f7f4 <_vfiprintf_r>
 800e446:	b002      	add	sp, #8
 800e448:	f85d eb04 	ldr.w	lr, [sp], #4
 800e44c:	b003      	add	sp, #12
 800e44e:	4770      	bx	lr
 800e450:	20000010 	.word	0x20000010

0800e454 <rshift>:
 800e454:	6903      	ldr	r3, [r0, #16]
 800e456:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e45a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e45e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e462:	f100 0414 	add.w	r4, r0, #20
 800e466:	dd45      	ble.n	800e4f4 <rshift+0xa0>
 800e468:	f011 011f 	ands.w	r1, r1, #31
 800e46c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e470:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e474:	d10c      	bne.n	800e490 <rshift+0x3c>
 800e476:	f100 0710 	add.w	r7, r0, #16
 800e47a:	4629      	mov	r1, r5
 800e47c:	42b1      	cmp	r1, r6
 800e47e:	d334      	bcc.n	800e4ea <rshift+0x96>
 800e480:	1a9b      	subs	r3, r3, r2
 800e482:	009b      	lsls	r3, r3, #2
 800e484:	1eea      	subs	r2, r5, #3
 800e486:	4296      	cmp	r6, r2
 800e488:	bf38      	it	cc
 800e48a:	2300      	movcc	r3, #0
 800e48c:	4423      	add	r3, r4
 800e48e:	e015      	b.n	800e4bc <rshift+0x68>
 800e490:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e494:	f1c1 0820 	rsb	r8, r1, #32
 800e498:	40cf      	lsrs	r7, r1
 800e49a:	f105 0e04 	add.w	lr, r5, #4
 800e49e:	46a1      	mov	r9, r4
 800e4a0:	4576      	cmp	r6, lr
 800e4a2:	46f4      	mov	ip, lr
 800e4a4:	d815      	bhi.n	800e4d2 <rshift+0x7e>
 800e4a6:	1a9a      	subs	r2, r3, r2
 800e4a8:	0092      	lsls	r2, r2, #2
 800e4aa:	3a04      	subs	r2, #4
 800e4ac:	3501      	adds	r5, #1
 800e4ae:	42ae      	cmp	r6, r5
 800e4b0:	bf38      	it	cc
 800e4b2:	2200      	movcc	r2, #0
 800e4b4:	18a3      	adds	r3, r4, r2
 800e4b6:	50a7      	str	r7, [r4, r2]
 800e4b8:	b107      	cbz	r7, 800e4bc <rshift+0x68>
 800e4ba:	3304      	adds	r3, #4
 800e4bc:	1b1a      	subs	r2, r3, r4
 800e4be:	42a3      	cmp	r3, r4
 800e4c0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e4c4:	bf08      	it	eq
 800e4c6:	2300      	moveq	r3, #0
 800e4c8:	6102      	str	r2, [r0, #16]
 800e4ca:	bf08      	it	eq
 800e4cc:	6143      	streq	r3, [r0, #20]
 800e4ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e4d2:	f8dc c000 	ldr.w	ip, [ip]
 800e4d6:	fa0c fc08 	lsl.w	ip, ip, r8
 800e4da:	ea4c 0707 	orr.w	r7, ip, r7
 800e4de:	f849 7b04 	str.w	r7, [r9], #4
 800e4e2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e4e6:	40cf      	lsrs	r7, r1
 800e4e8:	e7da      	b.n	800e4a0 <rshift+0x4c>
 800e4ea:	f851 cb04 	ldr.w	ip, [r1], #4
 800e4ee:	f847 cf04 	str.w	ip, [r7, #4]!
 800e4f2:	e7c3      	b.n	800e47c <rshift+0x28>
 800e4f4:	4623      	mov	r3, r4
 800e4f6:	e7e1      	b.n	800e4bc <rshift+0x68>

0800e4f8 <__hexdig_fun>:
 800e4f8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e4fc:	2b09      	cmp	r3, #9
 800e4fe:	d802      	bhi.n	800e506 <__hexdig_fun+0xe>
 800e500:	3820      	subs	r0, #32
 800e502:	b2c0      	uxtb	r0, r0
 800e504:	4770      	bx	lr
 800e506:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e50a:	2b05      	cmp	r3, #5
 800e50c:	d801      	bhi.n	800e512 <__hexdig_fun+0x1a>
 800e50e:	3847      	subs	r0, #71	; 0x47
 800e510:	e7f7      	b.n	800e502 <__hexdig_fun+0xa>
 800e512:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e516:	2b05      	cmp	r3, #5
 800e518:	d801      	bhi.n	800e51e <__hexdig_fun+0x26>
 800e51a:	3827      	subs	r0, #39	; 0x27
 800e51c:	e7f1      	b.n	800e502 <__hexdig_fun+0xa>
 800e51e:	2000      	movs	r0, #0
 800e520:	4770      	bx	lr
	...

0800e524 <__gethex>:
 800e524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e528:	b08b      	sub	sp, #44	; 0x2c
 800e52a:	468b      	mov	fp, r1
 800e52c:	9305      	str	r3, [sp, #20]
 800e52e:	4bb2      	ldr	r3, [pc, #712]	; (800e7f8 <__gethex+0x2d4>)
 800e530:	9002      	str	r0, [sp, #8]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	9303      	str	r3, [sp, #12]
 800e536:	4618      	mov	r0, r3
 800e538:	4690      	mov	r8, r2
 800e53a:	f7f1 fe21 	bl	8000180 <strlen>
 800e53e:	9b03      	ldr	r3, [sp, #12]
 800e540:	f8db 2000 	ldr.w	r2, [fp]
 800e544:	4403      	add	r3, r0
 800e546:	4682      	mov	sl, r0
 800e548:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800e54c:	9306      	str	r3, [sp, #24]
 800e54e:	1c93      	adds	r3, r2, #2
 800e550:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800e554:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e558:	32fe      	adds	r2, #254	; 0xfe
 800e55a:	18d1      	adds	r1, r2, r3
 800e55c:	461f      	mov	r7, r3
 800e55e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e562:	9101      	str	r1, [sp, #4]
 800e564:	2830      	cmp	r0, #48	; 0x30
 800e566:	d0f8      	beq.n	800e55a <__gethex+0x36>
 800e568:	f7ff ffc6 	bl	800e4f8 <__hexdig_fun>
 800e56c:	4604      	mov	r4, r0
 800e56e:	2800      	cmp	r0, #0
 800e570:	d13a      	bne.n	800e5e8 <__gethex+0xc4>
 800e572:	9903      	ldr	r1, [sp, #12]
 800e574:	4652      	mov	r2, sl
 800e576:	4638      	mov	r0, r7
 800e578:	f7fe ffd7 	bl	800d52a <strncmp>
 800e57c:	4605      	mov	r5, r0
 800e57e:	2800      	cmp	r0, #0
 800e580:	d166      	bne.n	800e650 <__gethex+0x12c>
 800e582:	f817 000a 	ldrb.w	r0, [r7, sl]
 800e586:	eb07 060a 	add.w	r6, r7, sl
 800e58a:	f7ff ffb5 	bl	800e4f8 <__hexdig_fun>
 800e58e:	2800      	cmp	r0, #0
 800e590:	d060      	beq.n	800e654 <__gethex+0x130>
 800e592:	4633      	mov	r3, r6
 800e594:	7818      	ldrb	r0, [r3, #0]
 800e596:	2830      	cmp	r0, #48	; 0x30
 800e598:	461f      	mov	r7, r3
 800e59a:	f103 0301 	add.w	r3, r3, #1
 800e59e:	d0f9      	beq.n	800e594 <__gethex+0x70>
 800e5a0:	f7ff ffaa 	bl	800e4f8 <__hexdig_fun>
 800e5a4:	2301      	movs	r3, #1
 800e5a6:	fab0 f480 	clz	r4, r0
 800e5aa:	0964      	lsrs	r4, r4, #5
 800e5ac:	4635      	mov	r5, r6
 800e5ae:	9301      	str	r3, [sp, #4]
 800e5b0:	463a      	mov	r2, r7
 800e5b2:	4616      	mov	r6, r2
 800e5b4:	3201      	adds	r2, #1
 800e5b6:	7830      	ldrb	r0, [r6, #0]
 800e5b8:	f7ff ff9e 	bl	800e4f8 <__hexdig_fun>
 800e5bc:	2800      	cmp	r0, #0
 800e5be:	d1f8      	bne.n	800e5b2 <__gethex+0x8e>
 800e5c0:	9903      	ldr	r1, [sp, #12]
 800e5c2:	4652      	mov	r2, sl
 800e5c4:	4630      	mov	r0, r6
 800e5c6:	f7fe ffb0 	bl	800d52a <strncmp>
 800e5ca:	b980      	cbnz	r0, 800e5ee <__gethex+0xca>
 800e5cc:	b94d      	cbnz	r5, 800e5e2 <__gethex+0xbe>
 800e5ce:	eb06 050a 	add.w	r5, r6, sl
 800e5d2:	462a      	mov	r2, r5
 800e5d4:	4616      	mov	r6, r2
 800e5d6:	3201      	adds	r2, #1
 800e5d8:	7830      	ldrb	r0, [r6, #0]
 800e5da:	f7ff ff8d 	bl	800e4f8 <__hexdig_fun>
 800e5de:	2800      	cmp	r0, #0
 800e5e0:	d1f8      	bne.n	800e5d4 <__gethex+0xb0>
 800e5e2:	1bad      	subs	r5, r5, r6
 800e5e4:	00ad      	lsls	r5, r5, #2
 800e5e6:	e004      	b.n	800e5f2 <__gethex+0xce>
 800e5e8:	2400      	movs	r4, #0
 800e5ea:	4625      	mov	r5, r4
 800e5ec:	e7e0      	b.n	800e5b0 <__gethex+0x8c>
 800e5ee:	2d00      	cmp	r5, #0
 800e5f0:	d1f7      	bne.n	800e5e2 <__gethex+0xbe>
 800e5f2:	7833      	ldrb	r3, [r6, #0]
 800e5f4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e5f8:	2b50      	cmp	r3, #80	; 0x50
 800e5fa:	d139      	bne.n	800e670 <__gethex+0x14c>
 800e5fc:	7873      	ldrb	r3, [r6, #1]
 800e5fe:	2b2b      	cmp	r3, #43	; 0x2b
 800e600:	d02a      	beq.n	800e658 <__gethex+0x134>
 800e602:	2b2d      	cmp	r3, #45	; 0x2d
 800e604:	d02c      	beq.n	800e660 <__gethex+0x13c>
 800e606:	1c71      	adds	r1, r6, #1
 800e608:	f04f 0900 	mov.w	r9, #0
 800e60c:	7808      	ldrb	r0, [r1, #0]
 800e60e:	f7ff ff73 	bl	800e4f8 <__hexdig_fun>
 800e612:	1e43      	subs	r3, r0, #1
 800e614:	b2db      	uxtb	r3, r3
 800e616:	2b18      	cmp	r3, #24
 800e618:	d82a      	bhi.n	800e670 <__gethex+0x14c>
 800e61a:	f1a0 0210 	sub.w	r2, r0, #16
 800e61e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e622:	f7ff ff69 	bl	800e4f8 <__hexdig_fun>
 800e626:	1e43      	subs	r3, r0, #1
 800e628:	b2db      	uxtb	r3, r3
 800e62a:	2b18      	cmp	r3, #24
 800e62c:	d91b      	bls.n	800e666 <__gethex+0x142>
 800e62e:	f1b9 0f00 	cmp.w	r9, #0
 800e632:	d000      	beq.n	800e636 <__gethex+0x112>
 800e634:	4252      	negs	r2, r2
 800e636:	4415      	add	r5, r2
 800e638:	f8cb 1000 	str.w	r1, [fp]
 800e63c:	b1d4      	cbz	r4, 800e674 <__gethex+0x150>
 800e63e:	9b01      	ldr	r3, [sp, #4]
 800e640:	2b00      	cmp	r3, #0
 800e642:	bf14      	ite	ne
 800e644:	2700      	movne	r7, #0
 800e646:	2706      	moveq	r7, #6
 800e648:	4638      	mov	r0, r7
 800e64a:	b00b      	add	sp, #44	; 0x2c
 800e64c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e650:	463e      	mov	r6, r7
 800e652:	4625      	mov	r5, r4
 800e654:	2401      	movs	r4, #1
 800e656:	e7cc      	b.n	800e5f2 <__gethex+0xce>
 800e658:	f04f 0900 	mov.w	r9, #0
 800e65c:	1cb1      	adds	r1, r6, #2
 800e65e:	e7d5      	b.n	800e60c <__gethex+0xe8>
 800e660:	f04f 0901 	mov.w	r9, #1
 800e664:	e7fa      	b.n	800e65c <__gethex+0x138>
 800e666:	230a      	movs	r3, #10
 800e668:	fb03 0202 	mla	r2, r3, r2, r0
 800e66c:	3a10      	subs	r2, #16
 800e66e:	e7d6      	b.n	800e61e <__gethex+0xfa>
 800e670:	4631      	mov	r1, r6
 800e672:	e7e1      	b.n	800e638 <__gethex+0x114>
 800e674:	1bf3      	subs	r3, r6, r7
 800e676:	3b01      	subs	r3, #1
 800e678:	4621      	mov	r1, r4
 800e67a:	2b07      	cmp	r3, #7
 800e67c:	dc0a      	bgt.n	800e694 <__gethex+0x170>
 800e67e:	9802      	ldr	r0, [sp, #8]
 800e680:	f000 fa6c 	bl	800eb5c <_Balloc>
 800e684:	4604      	mov	r4, r0
 800e686:	b940      	cbnz	r0, 800e69a <__gethex+0x176>
 800e688:	4b5c      	ldr	r3, [pc, #368]	; (800e7fc <__gethex+0x2d8>)
 800e68a:	4602      	mov	r2, r0
 800e68c:	21de      	movs	r1, #222	; 0xde
 800e68e:	485c      	ldr	r0, [pc, #368]	; (800e800 <__gethex+0x2dc>)
 800e690:	f7ff feb0 	bl	800e3f4 <__assert_func>
 800e694:	3101      	adds	r1, #1
 800e696:	105b      	asrs	r3, r3, #1
 800e698:	e7ef      	b.n	800e67a <__gethex+0x156>
 800e69a:	f100 0914 	add.w	r9, r0, #20
 800e69e:	f04f 0b00 	mov.w	fp, #0
 800e6a2:	f1ca 0301 	rsb	r3, sl, #1
 800e6a6:	f8cd 9010 	str.w	r9, [sp, #16]
 800e6aa:	f8cd b004 	str.w	fp, [sp, #4]
 800e6ae:	9308      	str	r3, [sp, #32]
 800e6b0:	42b7      	cmp	r7, r6
 800e6b2:	d33f      	bcc.n	800e734 <__gethex+0x210>
 800e6b4:	9f04      	ldr	r7, [sp, #16]
 800e6b6:	9b01      	ldr	r3, [sp, #4]
 800e6b8:	f847 3b04 	str.w	r3, [r7], #4
 800e6bc:	eba7 0709 	sub.w	r7, r7, r9
 800e6c0:	10bf      	asrs	r7, r7, #2
 800e6c2:	6127      	str	r7, [r4, #16]
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	f000 fb3b 	bl	800ed40 <__hi0bits>
 800e6ca:	017f      	lsls	r7, r7, #5
 800e6cc:	f8d8 6000 	ldr.w	r6, [r8]
 800e6d0:	1a3f      	subs	r7, r7, r0
 800e6d2:	42b7      	cmp	r7, r6
 800e6d4:	dd62      	ble.n	800e79c <__gethex+0x278>
 800e6d6:	1bbf      	subs	r7, r7, r6
 800e6d8:	4639      	mov	r1, r7
 800e6da:	4620      	mov	r0, r4
 800e6dc:	f000 fed1 	bl	800f482 <__any_on>
 800e6e0:	4682      	mov	sl, r0
 800e6e2:	b1a8      	cbz	r0, 800e710 <__gethex+0x1ec>
 800e6e4:	1e7b      	subs	r3, r7, #1
 800e6e6:	1159      	asrs	r1, r3, #5
 800e6e8:	f003 021f 	and.w	r2, r3, #31
 800e6ec:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800e6f0:	f04f 0a01 	mov.w	sl, #1
 800e6f4:	fa0a f202 	lsl.w	r2, sl, r2
 800e6f8:	420a      	tst	r2, r1
 800e6fa:	d009      	beq.n	800e710 <__gethex+0x1ec>
 800e6fc:	4553      	cmp	r3, sl
 800e6fe:	dd05      	ble.n	800e70c <__gethex+0x1e8>
 800e700:	1eb9      	subs	r1, r7, #2
 800e702:	4620      	mov	r0, r4
 800e704:	f000 febd 	bl	800f482 <__any_on>
 800e708:	2800      	cmp	r0, #0
 800e70a:	d144      	bne.n	800e796 <__gethex+0x272>
 800e70c:	f04f 0a02 	mov.w	sl, #2
 800e710:	4639      	mov	r1, r7
 800e712:	4620      	mov	r0, r4
 800e714:	f7ff fe9e 	bl	800e454 <rshift>
 800e718:	443d      	add	r5, r7
 800e71a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e71e:	42ab      	cmp	r3, r5
 800e720:	da4a      	bge.n	800e7b8 <__gethex+0x294>
 800e722:	9802      	ldr	r0, [sp, #8]
 800e724:	4621      	mov	r1, r4
 800e726:	f000 fa59 	bl	800ebdc <_Bfree>
 800e72a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e72c:	2300      	movs	r3, #0
 800e72e:	6013      	str	r3, [r2, #0]
 800e730:	27a3      	movs	r7, #163	; 0xa3
 800e732:	e789      	b.n	800e648 <__gethex+0x124>
 800e734:	1e73      	subs	r3, r6, #1
 800e736:	9a06      	ldr	r2, [sp, #24]
 800e738:	9307      	str	r3, [sp, #28]
 800e73a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e73e:	4293      	cmp	r3, r2
 800e740:	d019      	beq.n	800e776 <__gethex+0x252>
 800e742:	f1bb 0f20 	cmp.w	fp, #32
 800e746:	d107      	bne.n	800e758 <__gethex+0x234>
 800e748:	9b04      	ldr	r3, [sp, #16]
 800e74a:	9a01      	ldr	r2, [sp, #4]
 800e74c:	f843 2b04 	str.w	r2, [r3], #4
 800e750:	9304      	str	r3, [sp, #16]
 800e752:	2300      	movs	r3, #0
 800e754:	9301      	str	r3, [sp, #4]
 800e756:	469b      	mov	fp, r3
 800e758:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800e75c:	f7ff fecc 	bl	800e4f8 <__hexdig_fun>
 800e760:	9b01      	ldr	r3, [sp, #4]
 800e762:	f000 000f 	and.w	r0, r0, #15
 800e766:	fa00 f00b 	lsl.w	r0, r0, fp
 800e76a:	4303      	orrs	r3, r0
 800e76c:	9301      	str	r3, [sp, #4]
 800e76e:	f10b 0b04 	add.w	fp, fp, #4
 800e772:	9b07      	ldr	r3, [sp, #28]
 800e774:	e00d      	b.n	800e792 <__gethex+0x26e>
 800e776:	9a08      	ldr	r2, [sp, #32]
 800e778:	1e73      	subs	r3, r6, #1
 800e77a:	4413      	add	r3, r2
 800e77c:	42bb      	cmp	r3, r7
 800e77e:	d3e0      	bcc.n	800e742 <__gethex+0x21e>
 800e780:	4618      	mov	r0, r3
 800e782:	9903      	ldr	r1, [sp, #12]
 800e784:	9309      	str	r3, [sp, #36]	; 0x24
 800e786:	4652      	mov	r2, sl
 800e788:	f7fe fecf 	bl	800d52a <strncmp>
 800e78c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e78e:	2800      	cmp	r0, #0
 800e790:	d1d7      	bne.n	800e742 <__gethex+0x21e>
 800e792:	461e      	mov	r6, r3
 800e794:	e78c      	b.n	800e6b0 <__gethex+0x18c>
 800e796:	f04f 0a03 	mov.w	sl, #3
 800e79a:	e7b9      	b.n	800e710 <__gethex+0x1ec>
 800e79c:	da09      	bge.n	800e7b2 <__gethex+0x28e>
 800e79e:	1bf7      	subs	r7, r6, r7
 800e7a0:	4621      	mov	r1, r4
 800e7a2:	9802      	ldr	r0, [sp, #8]
 800e7a4:	463a      	mov	r2, r7
 800e7a6:	f000 fc31 	bl	800f00c <__lshift>
 800e7aa:	1bed      	subs	r5, r5, r7
 800e7ac:	4604      	mov	r4, r0
 800e7ae:	f100 0914 	add.w	r9, r0, #20
 800e7b2:	f04f 0a00 	mov.w	sl, #0
 800e7b6:	e7b0      	b.n	800e71a <__gethex+0x1f6>
 800e7b8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e7bc:	42a8      	cmp	r0, r5
 800e7be:	dd71      	ble.n	800e8a4 <__gethex+0x380>
 800e7c0:	1b45      	subs	r5, r0, r5
 800e7c2:	42ae      	cmp	r6, r5
 800e7c4:	dc35      	bgt.n	800e832 <__gethex+0x30e>
 800e7c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e7ca:	2b02      	cmp	r3, #2
 800e7cc:	d029      	beq.n	800e822 <__gethex+0x2fe>
 800e7ce:	2b03      	cmp	r3, #3
 800e7d0:	d02b      	beq.n	800e82a <__gethex+0x306>
 800e7d2:	2b01      	cmp	r3, #1
 800e7d4:	d11c      	bne.n	800e810 <__gethex+0x2ec>
 800e7d6:	42ae      	cmp	r6, r5
 800e7d8:	d11a      	bne.n	800e810 <__gethex+0x2ec>
 800e7da:	2e01      	cmp	r6, #1
 800e7dc:	d112      	bne.n	800e804 <__gethex+0x2e0>
 800e7de:	9a05      	ldr	r2, [sp, #20]
 800e7e0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e7e4:	6013      	str	r3, [r2, #0]
 800e7e6:	2301      	movs	r3, #1
 800e7e8:	6123      	str	r3, [r4, #16]
 800e7ea:	f8c9 3000 	str.w	r3, [r9]
 800e7ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e7f0:	2762      	movs	r7, #98	; 0x62
 800e7f2:	601c      	str	r4, [r3, #0]
 800e7f4:	e728      	b.n	800e648 <__gethex+0x124>
 800e7f6:	bf00      	nop
 800e7f8:	08010d0c 	.word	0x08010d0c
 800e7fc:	08010c95 	.word	0x08010c95
 800e800:	08010ca6 	.word	0x08010ca6
 800e804:	1e71      	subs	r1, r6, #1
 800e806:	4620      	mov	r0, r4
 800e808:	f000 fe3b 	bl	800f482 <__any_on>
 800e80c:	2800      	cmp	r0, #0
 800e80e:	d1e6      	bne.n	800e7de <__gethex+0x2ba>
 800e810:	9802      	ldr	r0, [sp, #8]
 800e812:	4621      	mov	r1, r4
 800e814:	f000 f9e2 	bl	800ebdc <_Bfree>
 800e818:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e81a:	2300      	movs	r3, #0
 800e81c:	6013      	str	r3, [r2, #0]
 800e81e:	2750      	movs	r7, #80	; 0x50
 800e820:	e712      	b.n	800e648 <__gethex+0x124>
 800e822:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e824:	2b00      	cmp	r3, #0
 800e826:	d1f3      	bne.n	800e810 <__gethex+0x2ec>
 800e828:	e7d9      	b.n	800e7de <__gethex+0x2ba>
 800e82a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d1d6      	bne.n	800e7de <__gethex+0x2ba>
 800e830:	e7ee      	b.n	800e810 <__gethex+0x2ec>
 800e832:	1e6f      	subs	r7, r5, #1
 800e834:	f1ba 0f00 	cmp.w	sl, #0
 800e838:	d131      	bne.n	800e89e <__gethex+0x37a>
 800e83a:	b127      	cbz	r7, 800e846 <__gethex+0x322>
 800e83c:	4639      	mov	r1, r7
 800e83e:	4620      	mov	r0, r4
 800e840:	f000 fe1f 	bl	800f482 <__any_on>
 800e844:	4682      	mov	sl, r0
 800e846:	117b      	asrs	r3, r7, #5
 800e848:	2101      	movs	r1, #1
 800e84a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800e84e:	f007 071f 	and.w	r7, r7, #31
 800e852:	fa01 f707 	lsl.w	r7, r1, r7
 800e856:	421f      	tst	r7, r3
 800e858:	4629      	mov	r1, r5
 800e85a:	4620      	mov	r0, r4
 800e85c:	bf18      	it	ne
 800e85e:	f04a 0a02 	orrne.w	sl, sl, #2
 800e862:	1b76      	subs	r6, r6, r5
 800e864:	f7ff fdf6 	bl	800e454 <rshift>
 800e868:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e86c:	2702      	movs	r7, #2
 800e86e:	f1ba 0f00 	cmp.w	sl, #0
 800e872:	d048      	beq.n	800e906 <__gethex+0x3e2>
 800e874:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e878:	2b02      	cmp	r3, #2
 800e87a:	d015      	beq.n	800e8a8 <__gethex+0x384>
 800e87c:	2b03      	cmp	r3, #3
 800e87e:	d017      	beq.n	800e8b0 <__gethex+0x38c>
 800e880:	2b01      	cmp	r3, #1
 800e882:	d109      	bne.n	800e898 <__gethex+0x374>
 800e884:	f01a 0f02 	tst.w	sl, #2
 800e888:	d006      	beq.n	800e898 <__gethex+0x374>
 800e88a:	f8d9 0000 	ldr.w	r0, [r9]
 800e88e:	ea4a 0a00 	orr.w	sl, sl, r0
 800e892:	f01a 0f01 	tst.w	sl, #1
 800e896:	d10e      	bne.n	800e8b6 <__gethex+0x392>
 800e898:	f047 0710 	orr.w	r7, r7, #16
 800e89c:	e033      	b.n	800e906 <__gethex+0x3e2>
 800e89e:	f04f 0a01 	mov.w	sl, #1
 800e8a2:	e7d0      	b.n	800e846 <__gethex+0x322>
 800e8a4:	2701      	movs	r7, #1
 800e8a6:	e7e2      	b.n	800e86e <__gethex+0x34a>
 800e8a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e8aa:	f1c3 0301 	rsb	r3, r3, #1
 800e8ae:	9315      	str	r3, [sp, #84]	; 0x54
 800e8b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d0f0      	beq.n	800e898 <__gethex+0x374>
 800e8b6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e8ba:	f104 0314 	add.w	r3, r4, #20
 800e8be:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e8c2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e8c6:	f04f 0c00 	mov.w	ip, #0
 800e8ca:	4618      	mov	r0, r3
 800e8cc:	f853 2b04 	ldr.w	r2, [r3], #4
 800e8d0:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e8d4:	d01c      	beq.n	800e910 <__gethex+0x3ec>
 800e8d6:	3201      	adds	r2, #1
 800e8d8:	6002      	str	r2, [r0, #0]
 800e8da:	2f02      	cmp	r7, #2
 800e8dc:	f104 0314 	add.w	r3, r4, #20
 800e8e0:	d13d      	bne.n	800e95e <__gethex+0x43a>
 800e8e2:	f8d8 2000 	ldr.w	r2, [r8]
 800e8e6:	3a01      	subs	r2, #1
 800e8e8:	42b2      	cmp	r2, r6
 800e8ea:	d10a      	bne.n	800e902 <__gethex+0x3de>
 800e8ec:	1171      	asrs	r1, r6, #5
 800e8ee:	2201      	movs	r2, #1
 800e8f0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e8f4:	f006 061f 	and.w	r6, r6, #31
 800e8f8:	fa02 f606 	lsl.w	r6, r2, r6
 800e8fc:	421e      	tst	r6, r3
 800e8fe:	bf18      	it	ne
 800e900:	4617      	movne	r7, r2
 800e902:	f047 0720 	orr.w	r7, r7, #32
 800e906:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e908:	601c      	str	r4, [r3, #0]
 800e90a:	9b05      	ldr	r3, [sp, #20]
 800e90c:	601d      	str	r5, [r3, #0]
 800e90e:	e69b      	b.n	800e648 <__gethex+0x124>
 800e910:	4299      	cmp	r1, r3
 800e912:	f843 cc04 	str.w	ip, [r3, #-4]
 800e916:	d8d8      	bhi.n	800e8ca <__gethex+0x3a6>
 800e918:	68a3      	ldr	r3, [r4, #8]
 800e91a:	459b      	cmp	fp, r3
 800e91c:	db17      	blt.n	800e94e <__gethex+0x42a>
 800e91e:	6861      	ldr	r1, [r4, #4]
 800e920:	9802      	ldr	r0, [sp, #8]
 800e922:	3101      	adds	r1, #1
 800e924:	f000 f91a 	bl	800eb5c <_Balloc>
 800e928:	4681      	mov	r9, r0
 800e92a:	b918      	cbnz	r0, 800e934 <__gethex+0x410>
 800e92c:	4b1a      	ldr	r3, [pc, #104]	; (800e998 <__gethex+0x474>)
 800e92e:	4602      	mov	r2, r0
 800e930:	2184      	movs	r1, #132	; 0x84
 800e932:	e6ac      	b.n	800e68e <__gethex+0x16a>
 800e934:	6922      	ldr	r2, [r4, #16]
 800e936:	3202      	adds	r2, #2
 800e938:	f104 010c 	add.w	r1, r4, #12
 800e93c:	0092      	lsls	r2, r2, #2
 800e93e:	300c      	adds	r0, #12
 800e940:	f7fe fbfe 	bl	800d140 <memcpy>
 800e944:	4621      	mov	r1, r4
 800e946:	9802      	ldr	r0, [sp, #8]
 800e948:	f000 f948 	bl	800ebdc <_Bfree>
 800e94c:	464c      	mov	r4, r9
 800e94e:	6923      	ldr	r3, [r4, #16]
 800e950:	1c5a      	adds	r2, r3, #1
 800e952:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e956:	6122      	str	r2, [r4, #16]
 800e958:	2201      	movs	r2, #1
 800e95a:	615a      	str	r2, [r3, #20]
 800e95c:	e7bd      	b.n	800e8da <__gethex+0x3b6>
 800e95e:	6922      	ldr	r2, [r4, #16]
 800e960:	455a      	cmp	r2, fp
 800e962:	dd0b      	ble.n	800e97c <__gethex+0x458>
 800e964:	2101      	movs	r1, #1
 800e966:	4620      	mov	r0, r4
 800e968:	f7ff fd74 	bl	800e454 <rshift>
 800e96c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e970:	3501      	adds	r5, #1
 800e972:	42ab      	cmp	r3, r5
 800e974:	f6ff aed5 	blt.w	800e722 <__gethex+0x1fe>
 800e978:	2701      	movs	r7, #1
 800e97a:	e7c2      	b.n	800e902 <__gethex+0x3de>
 800e97c:	f016 061f 	ands.w	r6, r6, #31
 800e980:	d0fa      	beq.n	800e978 <__gethex+0x454>
 800e982:	4453      	add	r3, sl
 800e984:	f1c6 0620 	rsb	r6, r6, #32
 800e988:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e98c:	f000 f9d8 	bl	800ed40 <__hi0bits>
 800e990:	42b0      	cmp	r0, r6
 800e992:	dbe7      	blt.n	800e964 <__gethex+0x440>
 800e994:	e7f0      	b.n	800e978 <__gethex+0x454>
 800e996:	bf00      	nop
 800e998:	08010c95 	.word	0x08010c95

0800e99c <L_shift>:
 800e99c:	f1c2 0208 	rsb	r2, r2, #8
 800e9a0:	0092      	lsls	r2, r2, #2
 800e9a2:	b570      	push	{r4, r5, r6, lr}
 800e9a4:	f1c2 0620 	rsb	r6, r2, #32
 800e9a8:	6843      	ldr	r3, [r0, #4]
 800e9aa:	6804      	ldr	r4, [r0, #0]
 800e9ac:	fa03 f506 	lsl.w	r5, r3, r6
 800e9b0:	432c      	orrs	r4, r5
 800e9b2:	40d3      	lsrs	r3, r2
 800e9b4:	6004      	str	r4, [r0, #0]
 800e9b6:	f840 3f04 	str.w	r3, [r0, #4]!
 800e9ba:	4288      	cmp	r0, r1
 800e9bc:	d3f4      	bcc.n	800e9a8 <L_shift+0xc>
 800e9be:	bd70      	pop	{r4, r5, r6, pc}

0800e9c0 <__match>:
 800e9c0:	b530      	push	{r4, r5, lr}
 800e9c2:	6803      	ldr	r3, [r0, #0]
 800e9c4:	3301      	adds	r3, #1
 800e9c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e9ca:	b914      	cbnz	r4, 800e9d2 <__match+0x12>
 800e9cc:	6003      	str	r3, [r0, #0]
 800e9ce:	2001      	movs	r0, #1
 800e9d0:	bd30      	pop	{r4, r5, pc}
 800e9d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e9d6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e9da:	2d19      	cmp	r5, #25
 800e9dc:	bf98      	it	ls
 800e9de:	3220      	addls	r2, #32
 800e9e0:	42a2      	cmp	r2, r4
 800e9e2:	d0f0      	beq.n	800e9c6 <__match+0x6>
 800e9e4:	2000      	movs	r0, #0
 800e9e6:	e7f3      	b.n	800e9d0 <__match+0x10>

0800e9e8 <__hexnan>:
 800e9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9ec:	680b      	ldr	r3, [r1, #0]
 800e9ee:	115e      	asrs	r6, r3, #5
 800e9f0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e9f4:	f013 031f 	ands.w	r3, r3, #31
 800e9f8:	b087      	sub	sp, #28
 800e9fa:	bf18      	it	ne
 800e9fc:	3604      	addne	r6, #4
 800e9fe:	2500      	movs	r5, #0
 800ea00:	1f37      	subs	r7, r6, #4
 800ea02:	4690      	mov	r8, r2
 800ea04:	6802      	ldr	r2, [r0, #0]
 800ea06:	9301      	str	r3, [sp, #4]
 800ea08:	4682      	mov	sl, r0
 800ea0a:	f846 5c04 	str.w	r5, [r6, #-4]
 800ea0e:	46b9      	mov	r9, r7
 800ea10:	463c      	mov	r4, r7
 800ea12:	9502      	str	r5, [sp, #8]
 800ea14:	46ab      	mov	fp, r5
 800ea16:	7851      	ldrb	r1, [r2, #1]
 800ea18:	1c53      	adds	r3, r2, #1
 800ea1a:	9303      	str	r3, [sp, #12]
 800ea1c:	b341      	cbz	r1, 800ea70 <__hexnan+0x88>
 800ea1e:	4608      	mov	r0, r1
 800ea20:	9205      	str	r2, [sp, #20]
 800ea22:	9104      	str	r1, [sp, #16]
 800ea24:	f7ff fd68 	bl	800e4f8 <__hexdig_fun>
 800ea28:	2800      	cmp	r0, #0
 800ea2a:	d14f      	bne.n	800eacc <__hexnan+0xe4>
 800ea2c:	9904      	ldr	r1, [sp, #16]
 800ea2e:	9a05      	ldr	r2, [sp, #20]
 800ea30:	2920      	cmp	r1, #32
 800ea32:	d818      	bhi.n	800ea66 <__hexnan+0x7e>
 800ea34:	9b02      	ldr	r3, [sp, #8]
 800ea36:	459b      	cmp	fp, r3
 800ea38:	dd13      	ble.n	800ea62 <__hexnan+0x7a>
 800ea3a:	454c      	cmp	r4, r9
 800ea3c:	d206      	bcs.n	800ea4c <__hexnan+0x64>
 800ea3e:	2d07      	cmp	r5, #7
 800ea40:	dc04      	bgt.n	800ea4c <__hexnan+0x64>
 800ea42:	462a      	mov	r2, r5
 800ea44:	4649      	mov	r1, r9
 800ea46:	4620      	mov	r0, r4
 800ea48:	f7ff ffa8 	bl	800e99c <L_shift>
 800ea4c:	4544      	cmp	r4, r8
 800ea4e:	d950      	bls.n	800eaf2 <__hexnan+0x10a>
 800ea50:	2300      	movs	r3, #0
 800ea52:	f1a4 0904 	sub.w	r9, r4, #4
 800ea56:	f844 3c04 	str.w	r3, [r4, #-4]
 800ea5a:	f8cd b008 	str.w	fp, [sp, #8]
 800ea5e:	464c      	mov	r4, r9
 800ea60:	461d      	mov	r5, r3
 800ea62:	9a03      	ldr	r2, [sp, #12]
 800ea64:	e7d7      	b.n	800ea16 <__hexnan+0x2e>
 800ea66:	2929      	cmp	r1, #41	; 0x29
 800ea68:	d156      	bne.n	800eb18 <__hexnan+0x130>
 800ea6a:	3202      	adds	r2, #2
 800ea6c:	f8ca 2000 	str.w	r2, [sl]
 800ea70:	f1bb 0f00 	cmp.w	fp, #0
 800ea74:	d050      	beq.n	800eb18 <__hexnan+0x130>
 800ea76:	454c      	cmp	r4, r9
 800ea78:	d206      	bcs.n	800ea88 <__hexnan+0xa0>
 800ea7a:	2d07      	cmp	r5, #7
 800ea7c:	dc04      	bgt.n	800ea88 <__hexnan+0xa0>
 800ea7e:	462a      	mov	r2, r5
 800ea80:	4649      	mov	r1, r9
 800ea82:	4620      	mov	r0, r4
 800ea84:	f7ff ff8a 	bl	800e99c <L_shift>
 800ea88:	4544      	cmp	r4, r8
 800ea8a:	d934      	bls.n	800eaf6 <__hexnan+0x10e>
 800ea8c:	f1a8 0204 	sub.w	r2, r8, #4
 800ea90:	4623      	mov	r3, r4
 800ea92:	f853 1b04 	ldr.w	r1, [r3], #4
 800ea96:	f842 1f04 	str.w	r1, [r2, #4]!
 800ea9a:	429f      	cmp	r7, r3
 800ea9c:	d2f9      	bcs.n	800ea92 <__hexnan+0xaa>
 800ea9e:	1b3b      	subs	r3, r7, r4
 800eaa0:	f023 0303 	bic.w	r3, r3, #3
 800eaa4:	3304      	adds	r3, #4
 800eaa6:	3401      	adds	r4, #1
 800eaa8:	3e03      	subs	r6, #3
 800eaaa:	42b4      	cmp	r4, r6
 800eaac:	bf88      	it	hi
 800eaae:	2304      	movhi	r3, #4
 800eab0:	4443      	add	r3, r8
 800eab2:	2200      	movs	r2, #0
 800eab4:	f843 2b04 	str.w	r2, [r3], #4
 800eab8:	429f      	cmp	r7, r3
 800eaba:	d2fb      	bcs.n	800eab4 <__hexnan+0xcc>
 800eabc:	683b      	ldr	r3, [r7, #0]
 800eabe:	b91b      	cbnz	r3, 800eac8 <__hexnan+0xe0>
 800eac0:	4547      	cmp	r7, r8
 800eac2:	d127      	bne.n	800eb14 <__hexnan+0x12c>
 800eac4:	2301      	movs	r3, #1
 800eac6:	603b      	str	r3, [r7, #0]
 800eac8:	2005      	movs	r0, #5
 800eaca:	e026      	b.n	800eb1a <__hexnan+0x132>
 800eacc:	3501      	adds	r5, #1
 800eace:	2d08      	cmp	r5, #8
 800ead0:	f10b 0b01 	add.w	fp, fp, #1
 800ead4:	dd06      	ble.n	800eae4 <__hexnan+0xfc>
 800ead6:	4544      	cmp	r4, r8
 800ead8:	d9c3      	bls.n	800ea62 <__hexnan+0x7a>
 800eada:	2300      	movs	r3, #0
 800eadc:	f844 3c04 	str.w	r3, [r4, #-4]
 800eae0:	2501      	movs	r5, #1
 800eae2:	3c04      	subs	r4, #4
 800eae4:	6822      	ldr	r2, [r4, #0]
 800eae6:	f000 000f 	and.w	r0, r0, #15
 800eaea:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800eaee:	6022      	str	r2, [r4, #0]
 800eaf0:	e7b7      	b.n	800ea62 <__hexnan+0x7a>
 800eaf2:	2508      	movs	r5, #8
 800eaf4:	e7b5      	b.n	800ea62 <__hexnan+0x7a>
 800eaf6:	9b01      	ldr	r3, [sp, #4]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d0df      	beq.n	800eabc <__hexnan+0xd4>
 800eafc:	f04f 32ff 	mov.w	r2, #4294967295
 800eb00:	f1c3 0320 	rsb	r3, r3, #32
 800eb04:	fa22 f303 	lsr.w	r3, r2, r3
 800eb08:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800eb0c:	401a      	ands	r2, r3
 800eb0e:	f846 2c04 	str.w	r2, [r6, #-4]
 800eb12:	e7d3      	b.n	800eabc <__hexnan+0xd4>
 800eb14:	3f04      	subs	r7, #4
 800eb16:	e7d1      	b.n	800eabc <__hexnan+0xd4>
 800eb18:	2004      	movs	r0, #4
 800eb1a:	b007      	add	sp, #28
 800eb1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800eb20 <__ascii_mbtowc>:
 800eb20:	b082      	sub	sp, #8
 800eb22:	b901      	cbnz	r1, 800eb26 <__ascii_mbtowc+0x6>
 800eb24:	a901      	add	r1, sp, #4
 800eb26:	b142      	cbz	r2, 800eb3a <__ascii_mbtowc+0x1a>
 800eb28:	b14b      	cbz	r3, 800eb3e <__ascii_mbtowc+0x1e>
 800eb2a:	7813      	ldrb	r3, [r2, #0]
 800eb2c:	600b      	str	r3, [r1, #0]
 800eb2e:	7812      	ldrb	r2, [r2, #0]
 800eb30:	1e10      	subs	r0, r2, #0
 800eb32:	bf18      	it	ne
 800eb34:	2001      	movne	r0, #1
 800eb36:	b002      	add	sp, #8
 800eb38:	4770      	bx	lr
 800eb3a:	4610      	mov	r0, r2
 800eb3c:	e7fb      	b.n	800eb36 <__ascii_mbtowc+0x16>
 800eb3e:	f06f 0001 	mvn.w	r0, #1
 800eb42:	e7f8      	b.n	800eb36 <__ascii_mbtowc+0x16>

0800eb44 <__malloc_lock>:
 800eb44:	4801      	ldr	r0, [pc, #4]	; (800eb4c <__malloc_lock+0x8>)
 800eb46:	f001 bba1 	b.w	801028c <__retarget_lock_acquire_recursive>
 800eb4a:	bf00      	nop
 800eb4c:	20000660 	.word	0x20000660

0800eb50 <__malloc_unlock>:
 800eb50:	4801      	ldr	r0, [pc, #4]	; (800eb58 <__malloc_unlock+0x8>)
 800eb52:	f001 bb9c 	b.w	801028e <__retarget_lock_release_recursive>
 800eb56:	bf00      	nop
 800eb58:	20000660 	.word	0x20000660

0800eb5c <_Balloc>:
 800eb5c:	b570      	push	{r4, r5, r6, lr}
 800eb5e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800eb60:	4604      	mov	r4, r0
 800eb62:	460d      	mov	r5, r1
 800eb64:	b976      	cbnz	r6, 800eb84 <_Balloc+0x28>
 800eb66:	2010      	movs	r0, #16
 800eb68:	f7fe fada 	bl	800d120 <malloc>
 800eb6c:	4602      	mov	r2, r0
 800eb6e:	6260      	str	r0, [r4, #36]	; 0x24
 800eb70:	b920      	cbnz	r0, 800eb7c <_Balloc+0x20>
 800eb72:	4b18      	ldr	r3, [pc, #96]	; (800ebd4 <_Balloc+0x78>)
 800eb74:	4818      	ldr	r0, [pc, #96]	; (800ebd8 <_Balloc+0x7c>)
 800eb76:	2166      	movs	r1, #102	; 0x66
 800eb78:	f7ff fc3c 	bl	800e3f4 <__assert_func>
 800eb7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eb80:	6006      	str	r6, [r0, #0]
 800eb82:	60c6      	str	r6, [r0, #12]
 800eb84:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800eb86:	68f3      	ldr	r3, [r6, #12]
 800eb88:	b183      	cbz	r3, 800ebac <_Balloc+0x50>
 800eb8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eb8c:	68db      	ldr	r3, [r3, #12]
 800eb8e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800eb92:	b9b8      	cbnz	r0, 800ebc4 <_Balloc+0x68>
 800eb94:	2101      	movs	r1, #1
 800eb96:	fa01 f605 	lsl.w	r6, r1, r5
 800eb9a:	1d72      	adds	r2, r6, #5
 800eb9c:	0092      	lsls	r2, r2, #2
 800eb9e:	4620      	mov	r0, r4
 800eba0:	f000 fc90 	bl	800f4c4 <_calloc_r>
 800eba4:	b160      	cbz	r0, 800ebc0 <_Balloc+0x64>
 800eba6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ebaa:	e00e      	b.n	800ebca <_Balloc+0x6e>
 800ebac:	2221      	movs	r2, #33	; 0x21
 800ebae:	2104      	movs	r1, #4
 800ebb0:	4620      	mov	r0, r4
 800ebb2:	f000 fc87 	bl	800f4c4 <_calloc_r>
 800ebb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ebb8:	60f0      	str	r0, [r6, #12]
 800ebba:	68db      	ldr	r3, [r3, #12]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d1e4      	bne.n	800eb8a <_Balloc+0x2e>
 800ebc0:	2000      	movs	r0, #0
 800ebc2:	bd70      	pop	{r4, r5, r6, pc}
 800ebc4:	6802      	ldr	r2, [r0, #0]
 800ebc6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ebca:	2300      	movs	r3, #0
 800ebcc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ebd0:	e7f7      	b.n	800ebc2 <_Balloc+0x66>
 800ebd2:	bf00      	nop
 800ebd4:	08010a84 	.word	0x08010a84
 800ebd8:	08010d20 	.word	0x08010d20

0800ebdc <_Bfree>:
 800ebdc:	b570      	push	{r4, r5, r6, lr}
 800ebde:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ebe0:	4605      	mov	r5, r0
 800ebe2:	460c      	mov	r4, r1
 800ebe4:	b976      	cbnz	r6, 800ec04 <_Bfree+0x28>
 800ebe6:	2010      	movs	r0, #16
 800ebe8:	f7fe fa9a 	bl	800d120 <malloc>
 800ebec:	4602      	mov	r2, r0
 800ebee:	6268      	str	r0, [r5, #36]	; 0x24
 800ebf0:	b920      	cbnz	r0, 800ebfc <_Bfree+0x20>
 800ebf2:	4b09      	ldr	r3, [pc, #36]	; (800ec18 <_Bfree+0x3c>)
 800ebf4:	4809      	ldr	r0, [pc, #36]	; (800ec1c <_Bfree+0x40>)
 800ebf6:	218a      	movs	r1, #138	; 0x8a
 800ebf8:	f7ff fbfc 	bl	800e3f4 <__assert_func>
 800ebfc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ec00:	6006      	str	r6, [r0, #0]
 800ec02:	60c6      	str	r6, [r0, #12]
 800ec04:	b13c      	cbz	r4, 800ec16 <_Bfree+0x3a>
 800ec06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ec08:	6862      	ldr	r2, [r4, #4]
 800ec0a:	68db      	ldr	r3, [r3, #12]
 800ec0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ec10:	6021      	str	r1, [r4, #0]
 800ec12:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ec16:	bd70      	pop	{r4, r5, r6, pc}
 800ec18:	08010a84 	.word	0x08010a84
 800ec1c:	08010d20 	.word	0x08010d20

0800ec20 <__multadd>:
 800ec20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec24:	690d      	ldr	r5, [r1, #16]
 800ec26:	4607      	mov	r7, r0
 800ec28:	460c      	mov	r4, r1
 800ec2a:	461e      	mov	r6, r3
 800ec2c:	f101 0c14 	add.w	ip, r1, #20
 800ec30:	2000      	movs	r0, #0
 800ec32:	f8dc 3000 	ldr.w	r3, [ip]
 800ec36:	b299      	uxth	r1, r3
 800ec38:	fb02 6101 	mla	r1, r2, r1, r6
 800ec3c:	0c1e      	lsrs	r6, r3, #16
 800ec3e:	0c0b      	lsrs	r3, r1, #16
 800ec40:	fb02 3306 	mla	r3, r2, r6, r3
 800ec44:	b289      	uxth	r1, r1
 800ec46:	3001      	adds	r0, #1
 800ec48:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ec4c:	4285      	cmp	r5, r0
 800ec4e:	f84c 1b04 	str.w	r1, [ip], #4
 800ec52:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ec56:	dcec      	bgt.n	800ec32 <__multadd+0x12>
 800ec58:	b30e      	cbz	r6, 800ec9e <__multadd+0x7e>
 800ec5a:	68a3      	ldr	r3, [r4, #8]
 800ec5c:	42ab      	cmp	r3, r5
 800ec5e:	dc19      	bgt.n	800ec94 <__multadd+0x74>
 800ec60:	6861      	ldr	r1, [r4, #4]
 800ec62:	4638      	mov	r0, r7
 800ec64:	3101      	adds	r1, #1
 800ec66:	f7ff ff79 	bl	800eb5c <_Balloc>
 800ec6a:	4680      	mov	r8, r0
 800ec6c:	b928      	cbnz	r0, 800ec7a <__multadd+0x5a>
 800ec6e:	4602      	mov	r2, r0
 800ec70:	4b0c      	ldr	r3, [pc, #48]	; (800eca4 <__multadd+0x84>)
 800ec72:	480d      	ldr	r0, [pc, #52]	; (800eca8 <__multadd+0x88>)
 800ec74:	21b5      	movs	r1, #181	; 0xb5
 800ec76:	f7ff fbbd 	bl	800e3f4 <__assert_func>
 800ec7a:	6922      	ldr	r2, [r4, #16]
 800ec7c:	3202      	adds	r2, #2
 800ec7e:	f104 010c 	add.w	r1, r4, #12
 800ec82:	0092      	lsls	r2, r2, #2
 800ec84:	300c      	adds	r0, #12
 800ec86:	f7fe fa5b 	bl	800d140 <memcpy>
 800ec8a:	4621      	mov	r1, r4
 800ec8c:	4638      	mov	r0, r7
 800ec8e:	f7ff ffa5 	bl	800ebdc <_Bfree>
 800ec92:	4644      	mov	r4, r8
 800ec94:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ec98:	3501      	adds	r5, #1
 800ec9a:	615e      	str	r6, [r3, #20]
 800ec9c:	6125      	str	r5, [r4, #16]
 800ec9e:	4620      	mov	r0, r4
 800eca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eca4:	08010c95 	.word	0x08010c95
 800eca8:	08010d20 	.word	0x08010d20

0800ecac <__s2b>:
 800ecac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ecb0:	460c      	mov	r4, r1
 800ecb2:	4615      	mov	r5, r2
 800ecb4:	461f      	mov	r7, r3
 800ecb6:	2209      	movs	r2, #9
 800ecb8:	3308      	adds	r3, #8
 800ecba:	4606      	mov	r6, r0
 800ecbc:	fb93 f3f2 	sdiv	r3, r3, r2
 800ecc0:	2100      	movs	r1, #0
 800ecc2:	2201      	movs	r2, #1
 800ecc4:	429a      	cmp	r2, r3
 800ecc6:	db09      	blt.n	800ecdc <__s2b+0x30>
 800ecc8:	4630      	mov	r0, r6
 800ecca:	f7ff ff47 	bl	800eb5c <_Balloc>
 800ecce:	b940      	cbnz	r0, 800ece2 <__s2b+0x36>
 800ecd0:	4602      	mov	r2, r0
 800ecd2:	4b19      	ldr	r3, [pc, #100]	; (800ed38 <__s2b+0x8c>)
 800ecd4:	4819      	ldr	r0, [pc, #100]	; (800ed3c <__s2b+0x90>)
 800ecd6:	21ce      	movs	r1, #206	; 0xce
 800ecd8:	f7ff fb8c 	bl	800e3f4 <__assert_func>
 800ecdc:	0052      	lsls	r2, r2, #1
 800ecde:	3101      	adds	r1, #1
 800ece0:	e7f0      	b.n	800ecc4 <__s2b+0x18>
 800ece2:	9b08      	ldr	r3, [sp, #32]
 800ece4:	6143      	str	r3, [r0, #20]
 800ece6:	2d09      	cmp	r5, #9
 800ece8:	f04f 0301 	mov.w	r3, #1
 800ecec:	6103      	str	r3, [r0, #16]
 800ecee:	dd16      	ble.n	800ed1e <__s2b+0x72>
 800ecf0:	f104 0909 	add.w	r9, r4, #9
 800ecf4:	46c8      	mov	r8, r9
 800ecf6:	442c      	add	r4, r5
 800ecf8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ecfc:	4601      	mov	r1, r0
 800ecfe:	3b30      	subs	r3, #48	; 0x30
 800ed00:	220a      	movs	r2, #10
 800ed02:	4630      	mov	r0, r6
 800ed04:	f7ff ff8c 	bl	800ec20 <__multadd>
 800ed08:	45a0      	cmp	r8, r4
 800ed0a:	d1f5      	bne.n	800ecf8 <__s2b+0x4c>
 800ed0c:	f1a5 0408 	sub.w	r4, r5, #8
 800ed10:	444c      	add	r4, r9
 800ed12:	1b2d      	subs	r5, r5, r4
 800ed14:	1963      	adds	r3, r4, r5
 800ed16:	42bb      	cmp	r3, r7
 800ed18:	db04      	blt.n	800ed24 <__s2b+0x78>
 800ed1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed1e:	340a      	adds	r4, #10
 800ed20:	2509      	movs	r5, #9
 800ed22:	e7f6      	b.n	800ed12 <__s2b+0x66>
 800ed24:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ed28:	4601      	mov	r1, r0
 800ed2a:	3b30      	subs	r3, #48	; 0x30
 800ed2c:	220a      	movs	r2, #10
 800ed2e:	4630      	mov	r0, r6
 800ed30:	f7ff ff76 	bl	800ec20 <__multadd>
 800ed34:	e7ee      	b.n	800ed14 <__s2b+0x68>
 800ed36:	bf00      	nop
 800ed38:	08010c95 	.word	0x08010c95
 800ed3c:	08010d20 	.word	0x08010d20

0800ed40 <__hi0bits>:
 800ed40:	0c02      	lsrs	r2, r0, #16
 800ed42:	0412      	lsls	r2, r2, #16
 800ed44:	4603      	mov	r3, r0
 800ed46:	b9ca      	cbnz	r2, 800ed7c <__hi0bits+0x3c>
 800ed48:	0403      	lsls	r3, r0, #16
 800ed4a:	2010      	movs	r0, #16
 800ed4c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ed50:	bf04      	itt	eq
 800ed52:	021b      	lsleq	r3, r3, #8
 800ed54:	3008      	addeq	r0, #8
 800ed56:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ed5a:	bf04      	itt	eq
 800ed5c:	011b      	lsleq	r3, r3, #4
 800ed5e:	3004      	addeq	r0, #4
 800ed60:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ed64:	bf04      	itt	eq
 800ed66:	009b      	lsleq	r3, r3, #2
 800ed68:	3002      	addeq	r0, #2
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	db05      	blt.n	800ed7a <__hi0bits+0x3a>
 800ed6e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800ed72:	f100 0001 	add.w	r0, r0, #1
 800ed76:	bf08      	it	eq
 800ed78:	2020      	moveq	r0, #32
 800ed7a:	4770      	bx	lr
 800ed7c:	2000      	movs	r0, #0
 800ed7e:	e7e5      	b.n	800ed4c <__hi0bits+0xc>

0800ed80 <__lo0bits>:
 800ed80:	6803      	ldr	r3, [r0, #0]
 800ed82:	4602      	mov	r2, r0
 800ed84:	f013 0007 	ands.w	r0, r3, #7
 800ed88:	d00b      	beq.n	800eda2 <__lo0bits+0x22>
 800ed8a:	07d9      	lsls	r1, r3, #31
 800ed8c:	d421      	bmi.n	800edd2 <__lo0bits+0x52>
 800ed8e:	0798      	lsls	r0, r3, #30
 800ed90:	bf49      	itett	mi
 800ed92:	085b      	lsrmi	r3, r3, #1
 800ed94:	089b      	lsrpl	r3, r3, #2
 800ed96:	2001      	movmi	r0, #1
 800ed98:	6013      	strmi	r3, [r2, #0]
 800ed9a:	bf5c      	itt	pl
 800ed9c:	6013      	strpl	r3, [r2, #0]
 800ed9e:	2002      	movpl	r0, #2
 800eda0:	4770      	bx	lr
 800eda2:	b299      	uxth	r1, r3
 800eda4:	b909      	cbnz	r1, 800edaa <__lo0bits+0x2a>
 800eda6:	0c1b      	lsrs	r3, r3, #16
 800eda8:	2010      	movs	r0, #16
 800edaa:	b2d9      	uxtb	r1, r3
 800edac:	b909      	cbnz	r1, 800edb2 <__lo0bits+0x32>
 800edae:	3008      	adds	r0, #8
 800edb0:	0a1b      	lsrs	r3, r3, #8
 800edb2:	0719      	lsls	r1, r3, #28
 800edb4:	bf04      	itt	eq
 800edb6:	091b      	lsreq	r3, r3, #4
 800edb8:	3004      	addeq	r0, #4
 800edba:	0799      	lsls	r1, r3, #30
 800edbc:	bf04      	itt	eq
 800edbe:	089b      	lsreq	r3, r3, #2
 800edc0:	3002      	addeq	r0, #2
 800edc2:	07d9      	lsls	r1, r3, #31
 800edc4:	d403      	bmi.n	800edce <__lo0bits+0x4e>
 800edc6:	085b      	lsrs	r3, r3, #1
 800edc8:	f100 0001 	add.w	r0, r0, #1
 800edcc:	d003      	beq.n	800edd6 <__lo0bits+0x56>
 800edce:	6013      	str	r3, [r2, #0]
 800edd0:	4770      	bx	lr
 800edd2:	2000      	movs	r0, #0
 800edd4:	4770      	bx	lr
 800edd6:	2020      	movs	r0, #32
 800edd8:	4770      	bx	lr
	...

0800eddc <__i2b>:
 800eddc:	b510      	push	{r4, lr}
 800edde:	460c      	mov	r4, r1
 800ede0:	2101      	movs	r1, #1
 800ede2:	f7ff febb 	bl	800eb5c <_Balloc>
 800ede6:	4602      	mov	r2, r0
 800ede8:	b928      	cbnz	r0, 800edf6 <__i2b+0x1a>
 800edea:	4b05      	ldr	r3, [pc, #20]	; (800ee00 <__i2b+0x24>)
 800edec:	4805      	ldr	r0, [pc, #20]	; (800ee04 <__i2b+0x28>)
 800edee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800edf2:	f7ff faff 	bl	800e3f4 <__assert_func>
 800edf6:	2301      	movs	r3, #1
 800edf8:	6144      	str	r4, [r0, #20]
 800edfa:	6103      	str	r3, [r0, #16]
 800edfc:	bd10      	pop	{r4, pc}
 800edfe:	bf00      	nop
 800ee00:	08010c95 	.word	0x08010c95
 800ee04:	08010d20 	.word	0x08010d20

0800ee08 <__multiply>:
 800ee08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee0c:	4691      	mov	r9, r2
 800ee0e:	690a      	ldr	r2, [r1, #16]
 800ee10:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ee14:	429a      	cmp	r2, r3
 800ee16:	bfb8      	it	lt
 800ee18:	460b      	movlt	r3, r1
 800ee1a:	460c      	mov	r4, r1
 800ee1c:	bfbc      	itt	lt
 800ee1e:	464c      	movlt	r4, r9
 800ee20:	4699      	movlt	r9, r3
 800ee22:	6927      	ldr	r7, [r4, #16]
 800ee24:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ee28:	68a3      	ldr	r3, [r4, #8]
 800ee2a:	6861      	ldr	r1, [r4, #4]
 800ee2c:	eb07 060a 	add.w	r6, r7, sl
 800ee30:	42b3      	cmp	r3, r6
 800ee32:	b085      	sub	sp, #20
 800ee34:	bfb8      	it	lt
 800ee36:	3101      	addlt	r1, #1
 800ee38:	f7ff fe90 	bl	800eb5c <_Balloc>
 800ee3c:	b930      	cbnz	r0, 800ee4c <__multiply+0x44>
 800ee3e:	4602      	mov	r2, r0
 800ee40:	4b43      	ldr	r3, [pc, #268]	; (800ef50 <__multiply+0x148>)
 800ee42:	4844      	ldr	r0, [pc, #272]	; (800ef54 <__multiply+0x14c>)
 800ee44:	f240 115d 	movw	r1, #349	; 0x15d
 800ee48:	f7ff fad4 	bl	800e3f4 <__assert_func>
 800ee4c:	f100 0514 	add.w	r5, r0, #20
 800ee50:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ee54:	462b      	mov	r3, r5
 800ee56:	2200      	movs	r2, #0
 800ee58:	4543      	cmp	r3, r8
 800ee5a:	d321      	bcc.n	800eea0 <__multiply+0x98>
 800ee5c:	f104 0314 	add.w	r3, r4, #20
 800ee60:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ee64:	f109 0314 	add.w	r3, r9, #20
 800ee68:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ee6c:	9202      	str	r2, [sp, #8]
 800ee6e:	1b3a      	subs	r2, r7, r4
 800ee70:	3a15      	subs	r2, #21
 800ee72:	f022 0203 	bic.w	r2, r2, #3
 800ee76:	3204      	adds	r2, #4
 800ee78:	f104 0115 	add.w	r1, r4, #21
 800ee7c:	428f      	cmp	r7, r1
 800ee7e:	bf38      	it	cc
 800ee80:	2204      	movcc	r2, #4
 800ee82:	9201      	str	r2, [sp, #4]
 800ee84:	9a02      	ldr	r2, [sp, #8]
 800ee86:	9303      	str	r3, [sp, #12]
 800ee88:	429a      	cmp	r2, r3
 800ee8a:	d80c      	bhi.n	800eea6 <__multiply+0x9e>
 800ee8c:	2e00      	cmp	r6, #0
 800ee8e:	dd03      	ble.n	800ee98 <__multiply+0x90>
 800ee90:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d059      	beq.n	800ef4c <__multiply+0x144>
 800ee98:	6106      	str	r6, [r0, #16]
 800ee9a:	b005      	add	sp, #20
 800ee9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eea0:	f843 2b04 	str.w	r2, [r3], #4
 800eea4:	e7d8      	b.n	800ee58 <__multiply+0x50>
 800eea6:	f8b3 a000 	ldrh.w	sl, [r3]
 800eeaa:	f1ba 0f00 	cmp.w	sl, #0
 800eeae:	d023      	beq.n	800eef8 <__multiply+0xf0>
 800eeb0:	f104 0e14 	add.w	lr, r4, #20
 800eeb4:	46a9      	mov	r9, r5
 800eeb6:	f04f 0c00 	mov.w	ip, #0
 800eeba:	f85e 2b04 	ldr.w	r2, [lr], #4
 800eebe:	f8d9 1000 	ldr.w	r1, [r9]
 800eec2:	fa1f fb82 	uxth.w	fp, r2
 800eec6:	b289      	uxth	r1, r1
 800eec8:	fb0a 110b 	mla	r1, sl, fp, r1
 800eecc:	4461      	add	r1, ip
 800eece:	f8d9 c000 	ldr.w	ip, [r9]
 800eed2:	0c12      	lsrs	r2, r2, #16
 800eed4:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800eed8:	fb0a c202 	mla	r2, sl, r2, ip
 800eedc:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800eee0:	b289      	uxth	r1, r1
 800eee2:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800eee6:	4577      	cmp	r7, lr
 800eee8:	f849 1b04 	str.w	r1, [r9], #4
 800eeec:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800eef0:	d8e3      	bhi.n	800eeba <__multiply+0xb2>
 800eef2:	9a01      	ldr	r2, [sp, #4]
 800eef4:	f845 c002 	str.w	ip, [r5, r2]
 800eef8:	9a03      	ldr	r2, [sp, #12]
 800eefa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800eefe:	3304      	adds	r3, #4
 800ef00:	f1b9 0f00 	cmp.w	r9, #0
 800ef04:	d020      	beq.n	800ef48 <__multiply+0x140>
 800ef06:	6829      	ldr	r1, [r5, #0]
 800ef08:	f104 0c14 	add.w	ip, r4, #20
 800ef0c:	46ae      	mov	lr, r5
 800ef0e:	f04f 0a00 	mov.w	sl, #0
 800ef12:	f8bc b000 	ldrh.w	fp, [ip]
 800ef16:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ef1a:	fb09 220b 	mla	r2, r9, fp, r2
 800ef1e:	4492      	add	sl, r2
 800ef20:	b289      	uxth	r1, r1
 800ef22:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ef26:	f84e 1b04 	str.w	r1, [lr], #4
 800ef2a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ef2e:	f8be 1000 	ldrh.w	r1, [lr]
 800ef32:	0c12      	lsrs	r2, r2, #16
 800ef34:	fb09 1102 	mla	r1, r9, r2, r1
 800ef38:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ef3c:	4567      	cmp	r7, ip
 800ef3e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ef42:	d8e6      	bhi.n	800ef12 <__multiply+0x10a>
 800ef44:	9a01      	ldr	r2, [sp, #4]
 800ef46:	50a9      	str	r1, [r5, r2]
 800ef48:	3504      	adds	r5, #4
 800ef4a:	e79b      	b.n	800ee84 <__multiply+0x7c>
 800ef4c:	3e01      	subs	r6, #1
 800ef4e:	e79d      	b.n	800ee8c <__multiply+0x84>
 800ef50:	08010c95 	.word	0x08010c95
 800ef54:	08010d20 	.word	0x08010d20

0800ef58 <__pow5mult>:
 800ef58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef5c:	4615      	mov	r5, r2
 800ef5e:	f012 0203 	ands.w	r2, r2, #3
 800ef62:	4606      	mov	r6, r0
 800ef64:	460f      	mov	r7, r1
 800ef66:	d007      	beq.n	800ef78 <__pow5mult+0x20>
 800ef68:	4c25      	ldr	r4, [pc, #148]	; (800f000 <__pow5mult+0xa8>)
 800ef6a:	3a01      	subs	r2, #1
 800ef6c:	2300      	movs	r3, #0
 800ef6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ef72:	f7ff fe55 	bl	800ec20 <__multadd>
 800ef76:	4607      	mov	r7, r0
 800ef78:	10ad      	asrs	r5, r5, #2
 800ef7a:	d03d      	beq.n	800eff8 <__pow5mult+0xa0>
 800ef7c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ef7e:	b97c      	cbnz	r4, 800efa0 <__pow5mult+0x48>
 800ef80:	2010      	movs	r0, #16
 800ef82:	f7fe f8cd 	bl	800d120 <malloc>
 800ef86:	4602      	mov	r2, r0
 800ef88:	6270      	str	r0, [r6, #36]	; 0x24
 800ef8a:	b928      	cbnz	r0, 800ef98 <__pow5mult+0x40>
 800ef8c:	4b1d      	ldr	r3, [pc, #116]	; (800f004 <__pow5mult+0xac>)
 800ef8e:	481e      	ldr	r0, [pc, #120]	; (800f008 <__pow5mult+0xb0>)
 800ef90:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ef94:	f7ff fa2e 	bl	800e3f4 <__assert_func>
 800ef98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ef9c:	6004      	str	r4, [r0, #0]
 800ef9e:	60c4      	str	r4, [r0, #12]
 800efa0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800efa4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800efa8:	b94c      	cbnz	r4, 800efbe <__pow5mult+0x66>
 800efaa:	f240 2171 	movw	r1, #625	; 0x271
 800efae:	4630      	mov	r0, r6
 800efb0:	f7ff ff14 	bl	800eddc <__i2b>
 800efb4:	2300      	movs	r3, #0
 800efb6:	f8c8 0008 	str.w	r0, [r8, #8]
 800efba:	4604      	mov	r4, r0
 800efbc:	6003      	str	r3, [r0, #0]
 800efbe:	f04f 0900 	mov.w	r9, #0
 800efc2:	07eb      	lsls	r3, r5, #31
 800efc4:	d50a      	bpl.n	800efdc <__pow5mult+0x84>
 800efc6:	4639      	mov	r1, r7
 800efc8:	4622      	mov	r2, r4
 800efca:	4630      	mov	r0, r6
 800efcc:	f7ff ff1c 	bl	800ee08 <__multiply>
 800efd0:	4639      	mov	r1, r7
 800efd2:	4680      	mov	r8, r0
 800efd4:	4630      	mov	r0, r6
 800efd6:	f7ff fe01 	bl	800ebdc <_Bfree>
 800efda:	4647      	mov	r7, r8
 800efdc:	106d      	asrs	r5, r5, #1
 800efde:	d00b      	beq.n	800eff8 <__pow5mult+0xa0>
 800efe0:	6820      	ldr	r0, [r4, #0]
 800efe2:	b938      	cbnz	r0, 800eff4 <__pow5mult+0x9c>
 800efe4:	4622      	mov	r2, r4
 800efe6:	4621      	mov	r1, r4
 800efe8:	4630      	mov	r0, r6
 800efea:	f7ff ff0d 	bl	800ee08 <__multiply>
 800efee:	6020      	str	r0, [r4, #0]
 800eff0:	f8c0 9000 	str.w	r9, [r0]
 800eff4:	4604      	mov	r4, r0
 800eff6:	e7e4      	b.n	800efc2 <__pow5mult+0x6a>
 800eff8:	4638      	mov	r0, r7
 800effa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800effe:	bf00      	nop
 800f000:	08010e70 	.word	0x08010e70
 800f004:	08010a84 	.word	0x08010a84
 800f008:	08010d20 	.word	0x08010d20

0800f00c <__lshift>:
 800f00c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f010:	460c      	mov	r4, r1
 800f012:	6849      	ldr	r1, [r1, #4]
 800f014:	6923      	ldr	r3, [r4, #16]
 800f016:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f01a:	68a3      	ldr	r3, [r4, #8]
 800f01c:	4607      	mov	r7, r0
 800f01e:	4691      	mov	r9, r2
 800f020:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f024:	f108 0601 	add.w	r6, r8, #1
 800f028:	42b3      	cmp	r3, r6
 800f02a:	db0b      	blt.n	800f044 <__lshift+0x38>
 800f02c:	4638      	mov	r0, r7
 800f02e:	f7ff fd95 	bl	800eb5c <_Balloc>
 800f032:	4605      	mov	r5, r0
 800f034:	b948      	cbnz	r0, 800f04a <__lshift+0x3e>
 800f036:	4602      	mov	r2, r0
 800f038:	4b2a      	ldr	r3, [pc, #168]	; (800f0e4 <__lshift+0xd8>)
 800f03a:	482b      	ldr	r0, [pc, #172]	; (800f0e8 <__lshift+0xdc>)
 800f03c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f040:	f7ff f9d8 	bl	800e3f4 <__assert_func>
 800f044:	3101      	adds	r1, #1
 800f046:	005b      	lsls	r3, r3, #1
 800f048:	e7ee      	b.n	800f028 <__lshift+0x1c>
 800f04a:	2300      	movs	r3, #0
 800f04c:	f100 0114 	add.w	r1, r0, #20
 800f050:	f100 0210 	add.w	r2, r0, #16
 800f054:	4618      	mov	r0, r3
 800f056:	4553      	cmp	r3, sl
 800f058:	db37      	blt.n	800f0ca <__lshift+0xbe>
 800f05a:	6920      	ldr	r0, [r4, #16]
 800f05c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f060:	f104 0314 	add.w	r3, r4, #20
 800f064:	f019 091f 	ands.w	r9, r9, #31
 800f068:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f06c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f070:	d02f      	beq.n	800f0d2 <__lshift+0xc6>
 800f072:	f1c9 0e20 	rsb	lr, r9, #32
 800f076:	468a      	mov	sl, r1
 800f078:	f04f 0c00 	mov.w	ip, #0
 800f07c:	681a      	ldr	r2, [r3, #0]
 800f07e:	fa02 f209 	lsl.w	r2, r2, r9
 800f082:	ea42 020c 	orr.w	r2, r2, ip
 800f086:	f84a 2b04 	str.w	r2, [sl], #4
 800f08a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f08e:	4298      	cmp	r0, r3
 800f090:	fa22 fc0e 	lsr.w	ip, r2, lr
 800f094:	d8f2      	bhi.n	800f07c <__lshift+0x70>
 800f096:	1b03      	subs	r3, r0, r4
 800f098:	3b15      	subs	r3, #21
 800f09a:	f023 0303 	bic.w	r3, r3, #3
 800f09e:	3304      	adds	r3, #4
 800f0a0:	f104 0215 	add.w	r2, r4, #21
 800f0a4:	4290      	cmp	r0, r2
 800f0a6:	bf38      	it	cc
 800f0a8:	2304      	movcc	r3, #4
 800f0aa:	f841 c003 	str.w	ip, [r1, r3]
 800f0ae:	f1bc 0f00 	cmp.w	ip, #0
 800f0b2:	d001      	beq.n	800f0b8 <__lshift+0xac>
 800f0b4:	f108 0602 	add.w	r6, r8, #2
 800f0b8:	3e01      	subs	r6, #1
 800f0ba:	4638      	mov	r0, r7
 800f0bc:	612e      	str	r6, [r5, #16]
 800f0be:	4621      	mov	r1, r4
 800f0c0:	f7ff fd8c 	bl	800ebdc <_Bfree>
 800f0c4:	4628      	mov	r0, r5
 800f0c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0ca:	f842 0f04 	str.w	r0, [r2, #4]!
 800f0ce:	3301      	adds	r3, #1
 800f0d0:	e7c1      	b.n	800f056 <__lshift+0x4a>
 800f0d2:	3904      	subs	r1, #4
 800f0d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800f0d8:	f841 2f04 	str.w	r2, [r1, #4]!
 800f0dc:	4298      	cmp	r0, r3
 800f0de:	d8f9      	bhi.n	800f0d4 <__lshift+0xc8>
 800f0e0:	e7ea      	b.n	800f0b8 <__lshift+0xac>
 800f0e2:	bf00      	nop
 800f0e4:	08010c95 	.word	0x08010c95
 800f0e8:	08010d20 	.word	0x08010d20

0800f0ec <__mcmp>:
 800f0ec:	690a      	ldr	r2, [r1, #16]
 800f0ee:	4603      	mov	r3, r0
 800f0f0:	6900      	ldr	r0, [r0, #16]
 800f0f2:	1a80      	subs	r0, r0, r2
 800f0f4:	b530      	push	{r4, r5, lr}
 800f0f6:	d10d      	bne.n	800f114 <__mcmp+0x28>
 800f0f8:	3314      	adds	r3, #20
 800f0fa:	3114      	adds	r1, #20
 800f0fc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f100:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f104:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f108:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f10c:	4295      	cmp	r5, r2
 800f10e:	d002      	beq.n	800f116 <__mcmp+0x2a>
 800f110:	d304      	bcc.n	800f11c <__mcmp+0x30>
 800f112:	2001      	movs	r0, #1
 800f114:	bd30      	pop	{r4, r5, pc}
 800f116:	42a3      	cmp	r3, r4
 800f118:	d3f4      	bcc.n	800f104 <__mcmp+0x18>
 800f11a:	e7fb      	b.n	800f114 <__mcmp+0x28>
 800f11c:	f04f 30ff 	mov.w	r0, #4294967295
 800f120:	e7f8      	b.n	800f114 <__mcmp+0x28>
	...

0800f124 <__mdiff>:
 800f124:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f128:	460d      	mov	r5, r1
 800f12a:	4607      	mov	r7, r0
 800f12c:	4611      	mov	r1, r2
 800f12e:	4628      	mov	r0, r5
 800f130:	4614      	mov	r4, r2
 800f132:	f7ff ffdb 	bl	800f0ec <__mcmp>
 800f136:	1e06      	subs	r6, r0, #0
 800f138:	d111      	bne.n	800f15e <__mdiff+0x3a>
 800f13a:	4631      	mov	r1, r6
 800f13c:	4638      	mov	r0, r7
 800f13e:	f7ff fd0d 	bl	800eb5c <_Balloc>
 800f142:	4602      	mov	r2, r0
 800f144:	b928      	cbnz	r0, 800f152 <__mdiff+0x2e>
 800f146:	4b39      	ldr	r3, [pc, #228]	; (800f22c <__mdiff+0x108>)
 800f148:	f240 2132 	movw	r1, #562	; 0x232
 800f14c:	4838      	ldr	r0, [pc, #224]	; (800f230 <__mdiff+0x10c>)
 800f14e:	f7ff f951 	bl	800e3f4 <__assert_func>
 800f152:	2301      	movs	r3, #1
 800f154:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800f158:	4610      	mov	r0, r2
 800f15a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f15e:	bfa4      	itt	ge
 800f160:	4623      	movge	r3, r4
 800f162:	462c      	movge	r4, r5
 800f164:	4638      	mov	r0, r7
 800f166:	6861      	ldr	r1, [r4, #4]
 800f168:	bfa6      	itte	ge
 800f16a:	461d      	movge	r5, r3
 800f16c:	2600      	movge	r6, #0
 800f16e:	2601      	movlt	r6, #1
 800f170:	f7ff fcf4 	bl	800eb5c <_Balloc>
 800f174:	4602      	mov	r2, r0
 800f176:	b918      	cbnz	r0, 800f180 <__mdiff+0x5c>
 800f178:	4b2c      	ldr	r3, [pc, #176]	; (800f22c <__mdiff+0x108>)
 800f17a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f17e:	e7e5      	b.n	800f14c <__mdiff+0x28>
 800f180:	6927      	ldr	r7, [r4, #16]
 800f182:	60c6      	str	r6, [r0, #12]
 800f184:	692e      	ldr	r6, [r5, #16]
 800f186:	f104 0014 	add.w	r0, r4, #20
 800f18a:	f105 0914 	add.w	r9, r5, #20
 800f18e:	f102 0e14 	add.w	lr, r2, #20
 800f192:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 800f196:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f19a:	3410      	adds	r4, #16
 800f19c:	46f2      	mov	sl, lr
 800f19e:	2100      	movs	r1, #0
 800f1a0:	f859 3b04 	ldr.w	r3, [r9], #4
 800f1a4:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800f1a8:	fa1f f883 	uxth.w	r8, r3
 800f1ac:	fa11 f18b 	uxtah	r1, r1, fp
 800f1b0:	0c1b      	lsrs	r3, r3, #16
 800f1b2:	eba1 0808 	sub.w	r8, r1, r8
 800f1b6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f1ba:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f1be:	fa1f f888 	uxth.w	r8, r8
 800f1c2:	1419      	asrs	r1, r3, #16
 800f1c4:	454e      	cmp	r6, r9
 800f1c6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f1ca:	f84a 3b04 	str.w	r3, [sl], #4
 800f1ce:	d8e7      	bhi.n	800f1a0 <__mdiff+0x7c>
 800f1d0:	1b73      	subs	r3, r6, r5
 800f1d2:	3b15      	subs	r3, #21
 800f1d4:	f023 0303 	bic.w	r3, r3, #3
 800f1d8:	3304      	adds	r3, #4
 800f1da:	3515      	adds	r5, #21
 800f1dc:	42ae      	cmp	r6, r5
 800f1de:	bf38      	it	cc
 800f1e0:	2304      	movcc	r3, #4
 800f1e2:	4418      	add	r0, r3
 800f1e4:	4473      	add	r3, lr
 800f1e6:	469e      	mov	lr, r3
 800f1e8:	4606      	mov	r6, r0
 800f1ea:	4566      	cmp	r6, ip
 800f1ec:	d30e      	bcc.n	800f20c <__mdiff+0xe8>
 800f1ee:	f10c 0103 	add.w	r1, ip, #3
 800f1f2:	1a09      	subs	r1, r1, r0
 800f1f4:	f021 0103 	bic.w	r1, r1, #3
 800f1f8:	3803      	subs	r0, #3
 800f1fa:	4584      	cmp	ip, r0
 800f1fc:	bf38      	it	cc
 800f1fe:	2100      	movcc	r1, #0
 800f200:	4419      	add	r1, r3
 800f202:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800f206:	b17b      	cbz	r3, 800f228 <__mdiff+0x104>
 800f208:	6117      	str	r7, [r2, #16]
 800f20a:	e7a5      	b.n	800f158 <__mdiff+0x34>
 800f20c:	f856 8b04 	ldr.w	r8, [r6], #4
 800f210:	fa11 f488 	uxtah	r4, r1, r8
 800f214:	1425      	asrs	r5, r4, #16
 800f216:	eb05 4518 	add.w	r5, r5, r8, lsr #16
 800f21a:	b2a4      	uxth	r4, r4
 800f21c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800f220:	f84e 4b04 	str.w	r4, [lr], #4
 800f224:	1429      	asrs	r1, r5, #16
 800f226:	e7e0      	b.n	800f1ea <__mdiff+0xc6>
 800f228:	3f01      	subs	r7, #1
 800f22a:	e7ea      	b.n	800f202 <__mdiff+0xde>
 800f22c:	08010c95 	.word	0x08010c95
 800f230:	08010d20 	.word	0x08010d20

0800f234 <__ulp>:
 800f234:	4b11      	ldr	r3, [pc, #68]	; (800f27c <__ulp+0x48>)
 800f236:	400b      	ands	r3, r1
 800f238:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	dd02      	ble.n	800f246 <__ulp+0x12>
 800f240:	2000      	movs	r0, #0
 800f242:	4619      	mov	r1, r3
 800f244:	4770      	bx	lr
 800f246:	425b      	negs	r3, r3
 800f248:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800f24c:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f250:	f04f 0000 	mov.w	r0, #0
 800f254:	f04f 0100 	mov.w	r1, #0
 800f258:	da04      	bge.n	800f264 <__ulp+0x30>
 800f25a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f25e:	fa43 f102 	asr.w	r1, r3, r2
 800f262:	4770      	bx	lr
 800f264:	f1a2 0314 	sub.w	r3, r2, #20
 800f268:	2b1e      	cmp	r3, #30
 800f26a:	bfda      	itte	le
 800f26c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800f270:	fa22 f303 	lsrle.w	r3, r2, r3
 800f274:	2301      	movgt	r3, #1
 800f276:	4618      	mov	r0, r3
 800f278:	4770      	bx	lr
 800f27a:	bf00      	nop
 800f27c:	7ff00000 	.word	0x7ff00000

0800f280 <__b2d>:
 800f280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f284:	6907      	ldr	r7, [r0, #16]
 800f286:	f100 0914 	add.w	r9, r0, #20
 800f28a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800f28e:	f1a7 0804 	sub.w	r8, r7, #4
 800f292:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800f296:	4630      	mov	r0, r6
 800f298:	f7ff fd52 	bl	800ed40 <__hi0bits>
 800f29c:	f1c0 0320 	rsb	r3, r0, #32
 800f2a0:	280a      	cmp	r0, #10
 800f2a2:	600b      	str	r3, [r1, #0]
 800f2a4:	491f      	ldr	r1, [pc, #124]	; (800f324 <__b2d+0xa4>)
 800f2a6:	dc17      	bgt.n	800f2d8 <__b2d+0x58>
 800f2a8:	f1c0 0c0b 	rsb	ip, r0, #11
 800f2ac:	45c1      	cmp	r9, r8
 800f2ae:	fa26 f30c 	lsr.w	r3, r6, ip
 800f2b2:	bf38      	it	cc
 800f2b4:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800f2b8:	ea43 0501 	orr.w	r5, r3, r1
 800f2bc:	bf28      	it	cs
 800f2be:	2200      	movcs	r2, #0
 800f2c0:	f100 0315 	add.w	r3, r0, #21
 800f2c4:	fa06 f303 	lsl.w	r3, r6, r3
 800f2c8:	fa22 f20c 	lsr.w	r2, r2, ip
 800f2cc:	ea43 0402 	orr.w	r4, r3, r2
 800f2d0:	4620      	mov	r0, r4
 800f2d2:	4629      	mov	r1, r5
 800f2d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f2d8:	45c1      	cmp	r9, r8
 800f2da:	bf3a      	itte	cc
 800f2dc:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800f2e0:	f1a7 0808 	subcc.w	r8, r7, #8
 800f2e4:	2200      	movcs	r2, #0
 800f2e6:	f1b0 030b 	subs.w	r3, r0, #11
 800f2ea:	d016      	beq.n	800f31a <__b2d+0x9a>
 800f2ec:	f1c3 0720 	rsb	r7, r3, #32
 800f2f0:	fa22 f107 	lsr.w	r1, r2, r7
 800f2f4:	45c8      	cmp	r8, r9
 800f2f6:	fa06 f603 	lsl.w	r6, r6, r3
 800f2fa:	ea46 0601 	orr.w	r6, r6, r1
 800f2fe:	bf8c      	ite	hi
 800f300:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800f304:	2100      	movls	r1, #0
 800f306:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800f30a:	fa02 f003 	lsl.w	r0, r2, r3
 800f30e:	40f9      	lsrs	r1, r7
 800f310:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800f314:	ea40 0401 	orr.w	r4, r0, r1
 800f318:	e7da      	b.n	800f2d0 <__b2d+0x50>
 800f31a:	ea46 0501 	orr.w	r5, r6, r1
 800f31e:	4614      	mov	r4, r2
 800f320:	e7d6      	b.n	800f2d0 <__b2d+0x50>
 800f322:	bf00      	nop
 800f324:	3ff00000 	.word	0x3ff00000

0800f328 <__d2b>:
 800f328:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800f32c:	2101      	movs	r1, #1
 800f32e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800f332:	4690      	mov	r8, r2
 800f334:	461d      	mov	r5, r3
 800f336:	f7ff fc11 	bl	800eb5c <_Balloc>
 800f33a:	4604      	mov	r4, r0
 800f33c:	b930      	cbnz	r0, 800f34c <__d2b+0x24>
 800f33e:	4602      	mov	r2, r0
 800f340:	4b25      	ldr	r3, [pc, #148]	; (800f3d8 <__d2b+0xb0>)
 800f342:	4826      	ldr	r0, [pc, #152]	; (800f3dc <__d2b+0xb4>)
 800f344:	f240 310a 	movw	r1, #778	; 0x30a
 800f348:	f7ff f854 	bl	800e3f4 <__assert_func>
 800f34c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800f350:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800f354:	bb2d      	cbnz	r5, 800f3a2 <__d2b+0x7a>
 800f356:	9301      	str	r3, [sp, #4]
 800f358:	f1b8 0300 	subs.w	r3, r8, #0
 800f35c:	d026      	beq.n	800f3ac <__d2b+0x84>
 800f35e:	4668      	mov	r0, sp
 800f360:	9300      	str	r3, [sp, #0]
 800f362:	f7ff fd0d 	bl	800ed80 <__lo0bits>
 800f366:	9900      	ldr	r1, [sp, #0]
 800f368:	b1f0      	cbz	r0, 800f3a8 <__d2b+0x80>
 800f36a:	9a01      	ldr	r2, [sp, #4]
 800f36c:	f1c0 0320 	rsb	r3, r0, #32
 800f370:	fa02 f303 	lsl.w	r3, r2, r3
 800f374:	430b      	orrs	r3, r1
 800f376:	40c2      	lsrs	r2, r0
 800f378:	6163      	str	r3, [r4, #20]
 800f37a:	9201      	str	r2, [sp, #4]
 800f37c:	9b01      	ldr	r3, [sp, #4]
 800f37e:	61a3      	str	r3, [r4, #24]
 800f380:	2b00      	cmp	r3, #0
 800f382:	bf14      	ite	ne
 800f384:	2102      	movne	r1, #2
 800f386:	2101      	moveq	r1, #1
 800f388:	6121      	str	r1, [r4, #16]
 800f38a:	b1c5      	cbz	r5, 800f3be <__d2b+0x96>
 800f38c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f390:	4405      	add	r5, r0
 800f392:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f396:	603d      	str	r5, [r7, #0]
 800f398:	6030      	str	r0, [r6, #0]
 800f39a:	4620      	mov	r0, r4
 800f39c:	b002      	add	sp, #8
 800f39e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f3a6:	e7d6      	b.n	800f356 <__d2b+0x2e>
 800f3a8:	6161      	str	r1, [r4, #20]
 800f3aa:	e7e7      	b.n	800f37c <__d2b+0x54>
 800f3ac:	a801      	add	r0, sp, #4
 800f3ae:	f7ff fce7 	bl	800ed80 <__lo0bits>
 800f3b2:	9b01      	ldr	r3, [sp, #4]
 800f3b4:	6163      	str	r3, [r4, #20]
 800f3b6:	2101      	movs	r1, #1
 800f3b8:	6121      	str	r1, [r4, #16]
 800f3ba:	3020      	adds	r0, #32
 800f3bc:	e7e5      	b.n	800f38a <__d2b+0x62>
 800f3be:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800f3c2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f3c6:	6038      	str	r0, [r7, #0]
 800f3c8:	6918      	ldr	r0, [r3, #16]
 800f3ca:	f7ff fcb9 	bl	800ed40 <__hi0bits>
 800f3ce:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800f3d2:	6031      	str	r1, [r6, #0]
 800f3d4:	e7e1      	b.n	800f39a <__d2b+0x72>
 800f3d6:	bf00      	nop
 800f3d8:	08010c95 	.word	0x08010c95
 800f3dc:	08010d20 	.word	0x08010d20

0800f3e0 <__ratio>:
 800f3e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3e4:	4688      	mov	r8, r1
 800f3e6:	4669      	mov	r1, sp
 800f3e8:	4681      	mov	r9, r0
 800f3ea:	f7ff ff49 	bl	800f280 <__b2d>
 800f3ee:	460f      	mov	r7, r1
 800f3f0:	4604      	mov	r4, r0
 800f3f2:	460d      	mov	r5, r1
 800f3f4:	4640      	mov	r0, r8
 800f3f6:	a901      	add	r1, sp, #4
 800f3f8:	f7ff ff42 	bl	800f280 <__b2d>
 800f3fc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f400:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f404:	eba3 0c02 	sub.w	ip, r3, r2
 800f408:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f40c:	1a9b      	subs	r3, r3, r2
 800f40e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f412:	2b00      	cmp	r3, #0
 800f414:	bfd5      	itete	le
 800f416:	460a      	movle	r2, r1
 800f418:	462a      	movgt	r2, r5
 800f41a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f41e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f422:	468b      	mov	fp, r1
 800f424:	bfd8      	it	le
 800f426:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800f42a:	465b      	mov	r3, fp
 800f42c:	4602      	mov	r2, r0
 800f42e:	4639      	mov	r1, r7
 800f430:	4620      	mov	r0, r4
 800f432:	f7f1 f9e3 	bl	80007fc <__aeabi_ddiv>
 800f436:	b003      	add	sp, #12
 800f438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f43c <__copybits>:
 800f43c:	3901      	subs	r1, #1
 800f43e:	b570      	push	{r4, r5, r6, lr}
 800f440:	1149      	asrs	r1, r1, #5
 800f442:	6914      	ldr	r4, [r2, #16]
 800f444:	3101      	adds	r1, #1
 800f446:	f102 0314 	add.w	r3, r2, #20
 800f44a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f44e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f452:	1f05      	subs	r5, r0, #4
 800f454:	42a3      	cmp	r3, r4
 800f456:	d30c      	bcc.n	800f472 <__copybits+0x36>
 800f458:	1aa3      	subs	r3, r4, r2
 800f45a:	3b11      	subs	r3, #17
 800f45c:	f023 0303 	bic.w	r3, r3, #3
 800f460:	3211      	adds	r2, #17
 800f462:	42a2      	cmp	r2, r4
 800f464:	bf88      	it	hi
 800f466:	2300      	movhi	r3, #0
 800f468:	4418      	add	r0, r3
 800f46a:	2300      	movs	r3, #0
 800f46c:	4288      	cmp	r0, r1
 800f46e:	d305      	bcc.n	800f47c <__copybits+0x40>
 800f470:	bd70      	pop	{r4, r5, r6, pc}
 800f472:	f853 6b04 	ldr.w	r6, [r3], #4
 800f476:	f845 6f04 	str.w	r6, [r5, #4]!
 800f47a:	e7eb      	b.n	800f454 <__copybits+0x18>
 800f47c:	f840 3b04 	str.w	r3, [r0], #4
 800f480:	e7f4      	b.n	800f46c <__copybits+0x30>

0800f482 <__any_on>:
 800f482:	f100 0214 	add.w	r2, r0, #20
 800f486:	6900      	ldr	r0, [r0, #16]
 800f488:	114b      	asrs	r3, r1, #5
 800f48a:	4298      	cmp	r0, r3
 800f48c:	b510      	push	{r4, lr}
 800f48e:	db11      	blt.n	800f4b4 <__any_on+0x32>
 800f490:	dd0a      	ble.n	800f4a8 <__any_on+0x26>
 800f492:	f011 011f 	ands.w	r1, r1, #31
 800f496:	d007      	beq.n	800f4a8 <__any_on+0x26>
 800f498:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f49c:	fa24 f001 	lsr.w	r0, r4, r1
 800f4a0:	fa00 f101 	lsl.w	r1, r0, r1
 800f4a4:	428c      	cmp	r4, r1
 800f4a6:	d10b      	bne.n	800f4c0 <__any_on+0x3e>
 800f4a8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f4ac:	4293      	cmp	r3, r2
 800f4ae:	d803      	bhi.n	800f4b8 <__any_on+0x36>
 800f4b0:	2000      	movs	r0, #0
 800f4b2:	bd10      	pop	{r4, pc}
 800f4b4:	4603      	mov	r3, r0
 800f4b6:	e7f7      	b.n	800f4a8 <__any_on+0x26>
 800f4b8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f4bc:	2900      	cmp	r1, #0
 800f4be:	d0f5      	beq.n	800f4ac <__any_on+0x2a>
 800f4c0:	2001      	movs	r0, #1
 800f4c2:	e7f6      	b.n	800f4b2 <__any_on+0x30>

0800f4c4 <_calloc_r>:
 800f4c4:	b570      	push	{r4, r5, r6, lr}
 800f4c6:	fba1 5402 	umull	r5, r4, r1, r2
 800f4ca:	b934      	cbnz	r4, 800f4da <_calloc_r+0x16>
 800f4cc:	4629      	mov	r1, r5
 800f4ce:	f7fd feb7 	bl	800d240 <_malloc_r>
 800f4d2:	4606      	mov	r6, r0
 800f4d4:	b928      	cbnz	r0, 800f4e2 <_calloc_r+0x1e>
 800f4d6:	4630      	mov	r0, r6
 800f4d8:	bd70      	pop	{r4, r5, r6, pc}
 800f4da:	220c      	movs	r2, #12
 800f4dc:	6002      	str	r2, [r0, #0]
 800f4de:	2600      	movs	r6, #0
 800f4e0:	e7f9      	b.n	800f4d6 <_calloc_r+0x12>
 800f4e2:	462a      	mov	r2, r5
 800f4e4:	4621      	mov	r1, r4
 800f4e6:	f7fd fe39 	bl	800d15c <memset>
 800f4ea:	e7f4      	b.n	800f4d6 <_calloc_r+0x12>

0800f4ec <__ssputs_r>:
 800f4ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f4f0:	688e      	ldr	r6, [r1, #8]
 800f4f2:	429e      	cmp	r6, r3
 800f4f4:	4682      	mov	sl, r0
 800f4f6:	460c      	mov	r4, r1
 800f4f8:	4690      	mov	r8, r2
 800f4fa:	461f      	mov	r7, r3
 800f4fc:	d838      	bhi.n	800f570 <__ssputs_r+0x84>
 800f4fe:	898a      	ldrh	r2, [r1, #12]
 800f500:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f504:	d032      	beq.n	800f56c <__ssputs_r+0x80>
 800f506:	6825      	ldr	r5, [r4, #0]
 800f508:	6909      	ldr	r1, [r1, #16]
 800f50a:	eba5 0901 	sub.w	r9, r5, r1
 800f50e:	6965      	ldr	r5, [r4, #20]
 800f510:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f514:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f518:	3301      	adds	r3, #1
 800f51a:	444b      	add	r3, r9
 800f51c:	106d      	asrs	r5, r5, #1
 800f51e:	429d      	cmp	r5, r3
 800f520:	bf38      	it	cc
 800f522:	461d      	movcc	r5, r3
 800f524:	0553      	lsls	r3, r2, #21
 800f526:	d531      	bpl.n	800f58c <__ssputs_r+0xa0>
 800f528:	4629      	mov	r1, r5
 800f52a:	f7fd fe89 	bl	800d240 <_malloc_r>
 800f52e:	4606      	mov	r6, r0
 800f530:	b950      	cbnz	r0, 800f548 <__ssputs_r+0x5c>
 800f532:	230c      	movs	r3, #12
 800f534:	f8ca 3000 	str.w	r3, [sl]
 800f538:	89a3      	ldrh	r3, [r4, #12]
 800f53a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f53e:	81a3      	strh	r3, [r4, #12]
 800f540:	f04f 30ff 	mov.w	r0, #4294967295
 800f544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f548:	6921      	ldr	r1, [r4, #16]
 800f54a:	464a      	mov	r2, r9
 800f54c:	f7fd fdf8 	bl	800d140 <memcpy>
 800f550:	89a3      	ldrh	r3, [r4, #12]
 800f552:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f556:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f55a:	81a3      	strh	r3, [r4, #12]
 800f55c:	6126      	str	r6, [r4, #16]
 800f55e:	6165      	str	r5, [r4, #20]
 800f560:	444e      	add	r6, r9
 800f562:	eba5 0509 	sub.w	r5, r5, r9
 800f566:	6026      	str	r6, [r4, #0]
 800f568:	60a5      	str	r5, [r4, #8]
 800f56a:	463e      	mov	r6, r7
 800f56c:	42be      	cmp	r6, r7
 800f56e:	d900      	bls.n	800f572 <__ssputs_r+0x86>
 800f570:	463e      	mov	r6, r7
 800f572:	6820      	ldr	r0, [r4, #0]
 800f574:	4632      	mov	r2, r6
 800f576:	4641      	mov	r1, r8
 800f578:	f000 fef0 	bl	801035c <memmove>
 800f57c:	68a3      	ldr	r3, [r4, #8]
 800f57e:	1b9b      	subs	r3, r3, r6
 800f580:	60a3      	str	r3, [r4, #8]
 800f582:	6823      	ldr	r3, [r4, #0]
 800f584:	4433      	add	r3, r6
 800f586:	6023      	str	r3, [r4, #0]
 800f588:	2000      	movs	r0, #0
 800f58a:	e7db      	b.n	800f544 <__ssputs_r+0x58>
 800f58c:	462a      	mov	r2, r5
 800f58e:	f000 feff 	bl	8010390 <_realloc_r>
 800f592:	4606      	mov	r6, r0
 800f594:	2800      	cmp	r0, #0
 800f596:	d1e1      	bne.n	800f55c <__ssputs_r+0x70>
 800f598:	6921      	ldr	r1, [r4, #16]
 800f59a:	4650      	mov	r0, sl
 800f59c:	f7fd fde6 	bl	800d16c <_free_r>
 800f5a0:	e7c7      	b.n	800f532 <__ssputs_r+0x46>
	...

0800f5a4 <_svfiprintf_r>:
 800f5a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5a8:	4698      	mov	r8, r3
 800f5aa:	898b      	ldrh	r3, [r1, #12]
 800f5ac:	061b      	lsls	r3, r3, #24
 800f5ae:	b09d      	sub	sp, #116	; 0x74
 800f5b0:	4607      	mov	r7, r0
 800f5b2:	460d      	mov	r5, r1
 800f5b4:	4614      	mov	r4, r2
 800f5b6:	d50e      	bpl.n	800f5d6 <_svfiprintf_r+0x32>
 800f5b8:	690b      	ldr	r3, [r1, #16]
 800f5ba:	b963      	cbnz	r3, 800f5d6 <_svfiprintf_r+0x32>
 800f5bc:	2140      	movs	r1, #64	; 0x40
 800f5be:	f7fd fe3f 	bl	800d240 <_malloc_r>
 800f5c2:	6028      	str	r0, [r5, #0]
 800f5c4:	6128      	str	r0, [r5, #16]
 800f5c6:	b920      	cbnz	r0, 800f5d2 <_svfiprintf_r+0x2e>
 800f5c8:	230c      	movs	r3, #12
 800f5ca:	603b      	str	r3, [r7, #0]
 800f5cc:	f04f 30ff 	mov.w	r0, #4294967295
 800f5d0:	e0d1      	b.n	800f776 <_svfiprintf_r+0x1d2>
 800f5d2:	2340      	movs	r3, #64	; 0x40
 800f5d4:	616b      	str	r3, [r5, #20]
 800f5d6:	2300      	movs	r3, #0
 800f5d8:	9309      	str	r3, [sp, #36]	; 0x24
 800f5da:	2320      	movs	r3, #32
 800f5dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f5e0:	f8cd 800c 	str.w	r8, [sp, #12]
 800f5e4:	2330      	movs	r3, #48	; 0x30
 800f5e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f790 <_svfiprintf_r+0x1ec>
 800f5ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f5ee:	f04f 0901 	mov.w	r9, #1
 800f5f2:	4623      	mov	r3, r4
 800f5f4:	469a      	mov	sl, r3
 800f5f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f5fa:	b10a      	cbz	r2, 800f600 <_svfiprintf_r+0x5c>
 800f5fc:	2a25      	cmp	r2, #37	; 0x25
 800f5fe:	d1f9      	bne.n	800f5f4 <_svfiprintf_r+0x50>
 800f600:	ebba 0b04 	subs.w	fp, sl, r4
 800f604:	d00b      	beq.n	800f61e <_svfiprintf_r+0x7a>
 800f606:	465b      	mov	r3, fp
 800f608:	4622      	mov	r2, r4
 800f60a:	4629      	mov	r1, r5
 800f60c:	4638      	mov	r0, r7
 800f60e:	f7ff ff6d 	bl	800f4ec <__ssputs_r>
 800f612:	3001      	adds	r0, #1
 800f614:	f000 80aa 	beq.w	800f76c <_svfiprintf_r+0x1c8>
 800f618:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f61a:	445a      	add	r2, fp
 800f61c:	9209      	str	r2, [sp, #36]	; 0x24
 800f61e:	f89a 3000 	ldrb.w	r3, [sl]
 800f622:	2b00      	cmp	r3, #0
 800f624:	f000 80a2 	beq.w	800f76c <_svfiprintf_r+0x1c8>
 800f628:	2300      	movs	r3, #0
 800f62a:	f04f 32ff 	mov.w	r2, #4294967295
 800f62e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f632:	f10a 0a01 	add.w	sl, sl, #1
 800f636:	9304      	str	r3, [sp, #16]
 800f638:	9307      	str	r3, [sp, #28]
 800f63a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f63e:	931a      	str	r3, [sp, #104]	; 0x68
 800f640:	4654      	mov	r4, sl
 800f642:	2205      	movs	r2, #5
 800f644:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f648:	4851      	ldr	r0, [pc, #324]	; (800f790 <_svfiprintf_r+0x1ec>)
 800f64a:	f7f0 fda1 	bl	8000190 <memchr>
 800f64e:	9a04      	ldr	r2, [sp, #16]
 800f650:	b9d8      	cbnz	r0, 800f68a <_svfiprintf_r+0xe6>
 800f652:	06d0      	lsls	r0, r2, #27
 800f654:	bf44      	itt	mi
 800f656:	2320      	movmi	r3, #32
 800f658:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f65c:	0711      	lsls	r1, r2, #28
 800f65e:	bf44      	itt	mi
 800f660:	232b      	movmi	r3, #43	; 0x2b
 800f662:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f666:	f89a 3000 	ldrb.w	r3, [sl]
 800f66a:	2b2a      	cmp	r3, #42	; 0x2a
 800f66c:	d015      	beq.n	800f69a <_svfiprintf_r+0xf6>
 800f66e:	9a07      	ldr	r2, [sp, #28]
 800f670:	4654      	mov	r4, sl
 800f672:	2000      	movs	r0, #0
 800f674:	f04f 0c0a 	mov.w	ip, #10
 800f678:	4621      	mov	r1, r4
 800f67a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f67e:	3b30      	subs	r3, #48	; 0x30
 800f680:	2b09      	cmp	r3, #9
 800f682:	d94e      	bls.n	800f722 <_svfiprintf_r+0x17e>
 800f684:	b1b0      	cbz	r0, 800f6b4 <_svfiprintf_r+0x110>
 800f686:	9207      	str	r2, [sp, #28]
 800f688:	e014      	b.n	800f6b4 <_svfiprintf_r+0x110>
 800f68a:	eba0 0308 	sub.w	r3, r0, r8
 800f68e:	fa09 f303 	lsl.w	r3, r9, r3
 800f692:	4313      	orrs	r3, r2
 800f694:	9304      	str	r3, [sp, #16]
 800f696:	46a2      	mov	sl, r4
 800f698:	e7d2      	b.n	800f640 <_svfiprintf_r+0x9c>
 800f69a:	9b03      	ldr	r3, [sp, #12]
 800f69c:	1d19      	adds	r1, r3, #4
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	9103      	str	r1, [sp, #12]
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	bfbb      	ittet	lt
 800f6a6:	425b      	neglt	r3, r3
 800f6a8:	f042 0202 	orrlt.w	r2, r2, #2
 800f6ac:	9307      	strge	r3, [sp, #28]
 800f6ae:	9307      	strlt	r3, [sp, #28]
 800f6b0:	bfb8      	it	lt
 800f6b2:	9204      	strlt	r2, [sp, #16]
 800f6b4:	7823      	ldrb	r3, [r4, #0]
 800f6b6:	2b2e      	cmp	r3, #46	; 0x2e
 800f6b8:	d10c      	bne.n	800f6d4 <_svfiprintf_r+0x130>
 800f6ba:	7863      	ldrb	r3, [r4, #1]
 800f6bc:	2b2a      	cmp	r3, #42	; 0x2a
 800f6be:	d135      	bne.n	800f72c <_svfiprintf_r+0x188>
 800f6c0:	9b03      	ldr	r3, [sp, #12]
 800f6c2:	1d1a      	adds	r2, r3, #4
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	9203      	str	r2, [sp, #12]
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	bfb8      	it	lt
 800f6cc:	f04f 33ff 	movlt.w	r3, #4294967295
 800f6d0:	3402      	adds	r4, #2
 800f6d2:	9305      	str	r3, [sp, #20]
 800f6d4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800f794 <_svfiprintf_r+0x1f0>
 800f6d8:	7821      	ldrb	r1, [r4, #0]
 800f6da:	2203      	movs	r2, #3
 800f6dc:	4650      	mov	r0, sl
 800f6de:	f7f0 fd57 	bl	8000190 <memchr>
 800f6e2:	b140      	cbz	r0, 800f6f6 <_svfiprintf_r+0x152>
 800f6e4:	2340      	movs	r3, #64	; 0x40
 800f6e6:	eba0 000a 	sub.w	r0, r0, sl
 800f6ea:	fa03 f000 	lsl.w	r0, r3, r0
 800f6ee:	9b04      	ldr	r3, [sp, #16]
 800f6f0:	4303      	orrs	r3, r0
 800f6f2:	3401      	adds	r4, #1
 800f6f4:	9304      	str	r3, [sp, #16]
 800f6f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f6fa:	4827      	ldr	r0, [pc, #156]	; (800f798 <_svfiprintf_r+0x1f4>)
 800f6fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f700:	2206      	movs	r2, #6
 800f702:	f7f0 fd45 	bl	8000190 <memchr>
 800f706:	2800      	cmp	r0, #0
 800f708:	d038      	beq.n	800f77c <_svfiprintf_r+0x1d8>
 800f70a:	4b24      	ldr	r3, [pc, #144]	; (800f79c <_svfiprintf_r+0x1f8>)
 800f70c:	bb1b      	cbnz	r3, 800f756 <_svfiprintf_r+0x1b2>
 800f70e:	9b03      	ldr	r3, [sp, #12]
 800f710:	3307      	adds	r3, #7
 800f712:	f023 0307 	bic.w	r3, r3, #7
 800f716:	3308      	adds	r3, #8
 800f718:	9303      	str	r3, [sp, #12]
 800f71a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f71c:	4433      	add	r3, r6
 800f71e:	9309      	str	r3, [sp, #36]	; 0x24
 800f720:	e767      	b.n	800f5f2 <_svfiprintf_r+0x4e>
 800f722:	fb0c 3202 	mla	r2, ip, r2, r3
 800f726:	460c      	mov	r4, r1
 800f728:	2001      	movs	r0, #1
 800f72a:	e7a5      	b.n	800f678 <_svfiprintf_r+0xd4>
 800f72c:	2300      	movs	r3, #0
 800f72e:	3401      	adds	r4, #1
 800f730:	9305      	str	r3, [sp, #20]
 800f732:	4619      	mov	r1, r3
 800f734:	f04f 0c0a 	mov.w	ip, #10
 800f738:	4620      	mov	r0, r4
 800f73a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f73e:	3a30      	subs	r2, #48	; 0x30
 800f740:	2a09      	cmp	r2, #9
 800f742:	d903      	bls.n	800f74c <_svfiprintf_r+0x1a8>
 800f744:	2b00      	cmp	r3, #0
 800f746:	d0c5      	beq.n	800f6d4 <_svfiprintf_r+0x130>
 800f748:	9105      	str	r1, [sp, #20]
 800f74a:	e7c3      	b.n	800f6d4 <_svfiprintf_r+0x130>
 800f74c:	fb0c 2101 	mla	r1, ip, r1, r2
 800f750:	4604      	mov	r4, r0
 800f752:	2301      	movs	r3, #1
 800f754:	e7f0      	b.n	800f738 <_svfiprintf_r+0x194>
 800f756:	ab03      	add	r3, sp, #12
 800f758:	9300      	str	r3, [sp, #0]
 800f75a:	462a      	mov	r2, r5
 800f75c:	4b10      	ldr	r3, [pc, #64]	; (800f7a0 <_svfiprintf_r+0x1fc>)
 800f75e:	a904      	add	r1, sp, #16
 800f760:	4638      	mov	r0, r7
 800f762:	f3af 8000 	nop.w
 800f766:	1c42      	adds	r2, r0, #1
 800f768:	4606      	mov	r6, r0
 800f76a:	d1d6      	bne.n	800f71a <_svfiprintf_r+0x176>
 800f76c:	89ab      	ldrh	r3, [r5, #12]
 800f76e:	065b      	lsls	r3, r3, #25
 800f770:	f53f af2c 	bmi.w	800f5cc <_svfiprintf_r+0x28>
 800f774:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f776:	b01d      	add	sp, #116	; 0x74
 800f778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f77c:	ab03      	add	r3, sp, #12
 800f77e:	9300      	str	r3, [sp, #0]
 800f780:	462a      	mov	r2, r5
 800f782:	4b07      	ldr	r3, [pc, #28]	; (800f7a0 <_svfiprintf_r+0x1fc>)
 800f784:	a904      	add	r1, sp, #16
 800f786:	4638      	mov	r0, r7
 800f788:	f000 f9d2 	bl	800fb30 <_printf_i>
 800f78c:	e7eb      	b.n	800f766 <_svfiprintf_r+0x1c2>
 800f78e:	bf00      	nop
 800f790:	08010e7c 	.word	0x08010e7c
 800f794:	08010e82 	.word	0x08010e82
 800f798:	08010e86 	.word	0x08010e86
 800f79c:	00000000 	.word	0x00000000
 800f7a0:	0800f4ed 	.word	0x0800f4ed

0800f7a4 <__sfputc_r>:
 800f7a4:	6893      	ldr	r3, [r2, #8]
 800f7a6:	3b01      	subs	r3, #1
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	b410      	push	{r4}
 800f7ac:	6093      	str	r3, [r2, #8]
 800f7ae:	da07      	bge.n	800f7c0 <__sfputc_r+0x1c>
 800f7b0:	6994      	ldr	r4, [r2, #24]
 800f7b2:	42a3      	cmp	r3, r4
 800f7b4:	db01      	blt.n	800f7ba <__sfputc_r+0x16>
 800f7b6:	290a      	cmp	r1, #10
 800f7b8:	d102      	bne.n	800f7c0 <__sfputc_r+0x1c>
 800f7ba:	bc10      	pop	{r4}
 800f7bc:	f000 bae4 	b.w	800fd88 <__swbuf_r>
 800f7c0:	6813      	ldr	r3, [r2, #0]
 800f7c2:	1c58      	adds	r0, r3, #1
 800f7c4:	6010      	str	r0, [r2, #0]
 800f7c6:	7019      	strb	r1, [r3, #0]
 800f7c8:	4608      	mov	r0, r1
 800f7ca:	bc10      	pop	{r4}
 800f7cc:	4770      	bx	lr

0800f7ce <__sfputs_r>:
 800f7ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7d0:	4606      	mov	r6, r0
 800f7d2:	460f      	mov	r7, r1
 800f7d4:	4614      	mov	r4, r2
 800f7d6:	18d5      	adds	r5, r2, r3
 800f7d8:	42ac      	cmp	r4, r5
 800f7da:	d101      	bne.n	800f7e0 <__sfputs_r+0x12>
 800f7dc:	2000      	movs	r0, #0
 800f7de:	e007      	b.n	800f7f0 <__sfputs_r+0x22>
 800f7e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f7e4:	463a      	mov	r2, r7
 800f7e6:	4630      	mov	r0, r6
 800f7e8:	f7ff ffdc 	bl	800f7a4 <__sfputc_r>
 800f7ec:	1c43      	adds	r3, r0, #1
 800f7ee:	d1f3      	bne.n	800f7d8 <__sfputs_r+0xa>
 800f7f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f7f4 <_vfiprintf_r>:
 800f7f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7f8:	460d      	mov	r5, r1
 800f7fa:	b09d      	sub	sp, #116	; 0x74
 800f7fc:	4614      	mov	r4, r2
 800f7fe:	4698      	mov	r8, r3
 800f800:	4606      	mov	r6, r0
 800f802:	b118      	cbz	r0, 800f80c <_vfiprintf_r+0x18>
 800f804:	6983      	ldr	r3, [r0, #24]
 800f806:	b90b      	cbnz	r3, 800f80c <_vfiprintf_r+0x18>
 800f808:	f000 fca2 	bl	8010150 <__sinit>
 800f80c:	4b89      	ldr	r3, [pc, #548]	; (800fa34 <_vfiprintf_r+0x240>)
 800f80e:	429d      	cmp	r5, r3
 800f810:	d11b      	bne.n	800f84a <_vfiprintf_r+0x56>
 800f812:	6875      	ldr	r5, [r6, #4]
 800f814:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f816:	07d9      	lsls	r1, r3, #31
 800f818:	d405      	bmi.n	800f826 <_vfiprintf_r+0x32>
 800f81a:	89ab      	ldrh	r3, [r5, #12]
 800f81c:	059a      	lsls	r2, r3, #22
 800f81e:	d402      	bmi.n	800f826 <_vfiprintf_r+0x32>
 800f820:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f822:	f000 fd33 	bl	801028c <__retarget_lock_acquire_recursive>
 800f826:	89ab      	ldrh	r3, [r5, #12]
 800f828:	071b      	lsls	r3, r3, #28
 800f82a:	d501      	bpl.n	800f830 <_vfiprintf_r+0x3c>
 800f82c:	692b      	ldr	r3, [r5, #16]
 800f82e:	b9eb      	cbnz	r3, 800f86c <_vfiprintf_r+0x78>
 800f830:	4629      	mov	r1, r5
 800f832:	4630      	mov	r0, r6
 800f834:	f000 fb08 	bl	800fe48 <__swsetup_r>
 800f838:	b1c0      	cbz	r0, 800f86c <_vfiprintf_r+0x78>
 800f83a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f83c:	07dc      	lsls	r4, r3, #31
 800f83e:	d50e      	bpl.n	800f85e <_vfiprintf_r+0x6a>
 800f840:	f04f 30ff 	mov.w	r0, #4294967295
 800f844:	b01d      	add	sp, #116	; 0x74
 800f846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f84a:	4b7b      	ldr	r3, [pc, #492]	; (800fa38 <_vfiprintf_r+0x244>)
 800f84c:	429d      	cmp	r5, r3
 800f84e:	d101      	bne.n	800f854 <_vfiprintf_r+0x60>
 800f850:	68b5      	ldr	r5, [r6, #8]
 800f852:	e7df      	b.n	800f814 <_vfiprintf_r+0x20>
 800f854:	4b79      	ldr	r3, [pc, #484]	; (800fa3c <_vfiprintf_r+0x248>)
 800f856:	429d      	cmp	r5, r3
 800f858:	bf08      	it	eq
 800f85a:	68f5      	ldreq	r5, [r6, #12]
 800f85c:	e7da      	b.n	800f814 <_vfiprintf_r+0x20>
 800f85e:	89ab      	ldrh	r3, [r5, #12]
 800f860:	0598      	lsls	r0, r3, #22
 800f862:	d4ed      	bmi.n	800f840 <_vfiprintf_r+0x4c>
 800f864:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f866:	f000 fd12 	bl	801028e <__retarget_lock_release_recursive>
 800f86a:	e7e9      	b.n	800f840 <_vfiprintf_r+0x4c>
 800f86c:	2300      	movs	r3, #0
 800f86e:	9309      	str	r3, [sp, #36]	; 0x24
 800f870:	2320      	movs	r3, #32
 800f872:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f876:	f8cd 800c 	str.w	r8, [sp, #12]
 800f87a:	2330      	movs	r3, #48	; 0x30
 800f87c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800fa40 <_vfiprintf_r+0x24c>
 800f880:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f884:	f04f 0901 	mov.w	r9, #1
 800f888:	4623      	mov	r3, r4
 800f88a:	469a      	mov	sl, r3
 800f88c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f890:	b10a      	cbz	r2, 800f896 <_vfiprintf_r+0xa2>
 800f892:	2a25      	cmp	r2, #37	; 0x25
 800f894:	d1f9      	bne.n	800f88a <_vfiprintf_r+0x96>
 800f896:	ebba 0b04 	subs.w	fp, sl, r4
 800f89a:	d00b      	beq.n	800f8b4 <_vfiprintf_r+0xc0>
 800f89c:	465b      	mov	r3, fp
 800f89e:	4622      	mov	r2, r4
 800f8a0:	4629      	mov	r1, r5
 800f8a2:	4630      	mov	r0, r6
 800f8a4:	f7ff ff93 	bl	800f7ce <__sfputs_r>
 800f8a8:	3001      	adds	r0, #1
 800f8aa:	f000 80aa 	beq.w	800fa02 <_vfiprintf_r+0x20e>
 800f8ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f8b0:	445a      	add	r2, fp
 800f8b2:	9209      	str	r2, [sp, #36]	; 0x24
 800f8b4:	f89a 3000 	ldrb.w	r3, [sl]
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	f000 80a2 	beq.w	800fa02 <_vfiprintf_r+0x20e>
 800f8be:	2300      	movs	r3, #0
 800f8c0:	f04f 32ff 	mov.w	r2, #4294967295
 800f8c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f8c8:	f10a 0a01 	add.w	sl, sl, #1
 800f8cc:	9304      	str	r3, [sp, #16]
 800f8ce:	9307      	str	r3, [sp, #28]
 800f8d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f8d4:	931a      	str	r3, [sp, #104]	; 0x68
 800f8d6:	4654      	mov	r4, sl
 800f8d8:	2205      	movs	r2, #5
 800f8da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f8de:	4858      	ldr	r0, [pc, #352]	; (800fa40 <_vfiprintf_r+0x24c>)
 800f8e0:	f7f0 fc56 	bl	8000190 <memchr>
 800f8e4:	9a04      	ldr	r2, [sp, #16]
 800f8e6:	b9d8      	cbnz	r0, 800f920 <_vfiprintf_r+0x12c>
 800f8e8:	06d1      	lsls	r1, r2, #27
 800f8ea:	bf44      	itt	mi
 800f8ec:	2320      	movmi	r3, #32
 800f8ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f8f2:	0713      	lsls	r3, r2, #28
 800f8f4:	bf44      	itt	mi
 800f8f6:	232b      	movmi	r3, #43	; 0x2b
 800f8f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f8fc:	f89a 3000 	ldrb.w	r3, [sl]
 800f900:	2b2a      	cmp	r3, #42	; 0x2a
 800f902:	d015      	beq.n	800f930 <_vfiprintf_r+0x13c>
 800f904:	9a07      	ldr	r2, [sp, #28]
 800f906:	4654      	mov	r4, sl
 800f908:	2000      	movs	r0, #0
 800f90a:	f04f 0c0a 	mov.w	ip, #10
 800f90e:	4621      	mov	r1, r4
 800f910:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f914:	3b30      	subs	r3, #48	; 0x30
 800f916:	2b09      	cmp	r3, #9
 800f918:	d94e      	bls.n	800f9b8 <_vfiprintf_r+0x1c4>
 800f91a:	b1b0      	cbz	r0, 800f94a <_vfiprintf_r+0x156>
 800f91c:	9207      	str	r2, [sp, #28]
 800f91e:	e014      	b.n	800f94a <_vfiprintf_r+0x156>
 800f920:	eba0 0308 	sub.w	r3, r0, r8
 800f924:	fa09 f303 	lsl.w	r3, r9, r3
 800f928:	4313      	orrs	r3, r2
 800f92a:	9304      	str	r3, [sp, #16]
 800f92c:	46a2      	mov	sl, r4
 800f92e:	e7d2      	b.n	800f8d6 <_vfiprintf_r+0xe2>
 800f930:	9b03      	ldr	r3, [sp, #12]
 800f932:	1d19      	adds	r1, r3, #4
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	9103      	str	r1, [sp, #12]
 800f938:	2b00      	cmp	r3, #0
 800f93a:	bfbb      	ittet	lt
 800f93c:	425b      	neglt	r3, r3
 800f93e:	f042 0202 	orrlt.w	r2, r2, #2
 800f942:	9307      	strge	r3, [sp, #28]
 800f944:	9307      	strlt	r3, [sp, #28]
 800f946:	bfb8      	it	lt
 800f948:	9204      	strlt	r2, [sp, #16]
 800f94a:	7823      	ldrb	r3, [r4, #0]
 800f94c:	2b2e      	cmp	r3, #46	; 0x2e
 800f94e:	d10c      	bne.n	800f96a <_vfiprintf_r+0x176>
 800f950:	7863      	ldrb	r3, [r4, #1]
 800f952:	2b2a      	cmp	r3, #42	; 0x2a
 800f954:	d135      	bne.n	800f9c2 <_vfiprintf_r+0x1ce>
 800f956:	9b03      	ldr	r3, [sp, #12]
 800f958:	1d1a      	adds	r2, r3, #4
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	9203      	str	r2, [sp, #12]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	bfb8      	it	lt
 800f962:	f04f 33ff 	movlt.w	r3, #4294967295
 800f966:	3402      	adds	r4, #2
 800f968:	9305      	str	r3, [sp, #20]
 800f96a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800fa44 <_vfiprintf_r+0x250>
 800f96e:	7821      	ldrb	r1, [r4, #0]
 800f970:	2203      	movs	r2, #3
 800f972:	4650      	mov	r0, sl
 800f974:	f7f0 fc0c 	bl	8000190 <memchr>
 800f978:	b140      	cbz	r0, 800f98c <_vfiprintf_r+0x198>
 800f97a:	2340      	movs	r3, #64	; 0x40
 800f97c:	eba0 000a 	sub.w	r0, r0, sl
 800f980:	fa03 f000 	lsl.w	r0, r3, r0
 800f984:	9b04      	ldr	r3, [sp, #16]
 800f986:	4303      	orrs	r3, r0
 800f988:	3401      	adds	r4, #1
 800f98a:	9304      	str	r3, [sp, #16]
 800f98c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f990:	482d      	ldr	r0, [pc, #180]	; (800fa48 <_vfiprintf_r+0x254>)
 800f992:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f996:	2206      	movs	r2, #6
 800f998:	f7f0 fbfa 	bl	8000190 <memchr>
 800f99c:	2800      	cmp	r0, #0
 800f99e:	d03f      	beq.n	800fa20 <_vfiprintf_r+0x22c>
 800f9a0:	4b2a      	ldr	r3, [pc, #168]	; (800fa4c <_vfiprintf_r+0x258>)
 800f9a2:	bb1b      	cbnz	r3, 800f9ec <_vfiprintf_r+0x1f8>
 800f9a4:	9b03      	ldr	r3, [sp, #12]
 800f9a6:	3307      	adds	r3, #7
 800f9a8:	f023 0307 	bic.w	r3, r3, #7
 800f9ac:	3308      	adds	r3, #8
 800f9ae:	9303      	str	r3, [sp, #12]
 800f9b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f9b2:	443b      	add	r3, r7
 800f9b4:	9309      	str	r3, [sp, #36]	; 0x24
 800f9b6:	e767      	b.n	800f888 <_vfiprintf_r+0x94>
 800f9b8:	fb0c 3202 	mla	r2, ip, r2, r3
 800f9bc:	460c      	mov	r4, r1
 800f9be:	2001      	movs	r0, #1
 800f9c0:	e7a5      	b.n	800f90e <_vfiprintf_r+0x11a>
 800f9c2:	2300      	movs	r3, #0
 800f9c4:	3401      	adds	r4, #1
 800f9c6:	9305      	str	r3, [sp, #20]
 800f9c8:	4619      	mov	r1, r3
 800f9ca:	f04f 0c0a 	mov.w	ip, #10
 800f9ce:	4620      	mov	r0, r4
 800f9d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f9d4:	3a30      	subs	r2, #48	; 0x30
 800f9d6:	2a09      	cmp	r2, #9
 800f9d8:	d903      	bls.n	800f9e2 <_vfiprintf_r+0x1ee>
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d0c5      	beq.n	800f96a <_vfiprintf_r+0x176>
 800f9de:	9105      	str	r1, [sp, #20]
 800f9e0:	e7c3      	b.n	800f96a <_vfiprintf_r+0x176>
 800f9e2:	fb0c 2101 	mla	r1, ip, r1, r2
 800f9e6:	4604      	mov	r4, r0
 800f9e8:	2301      	movs	r3, #1
 800f9ea:	e7f0      	b.n	800f9ce <_vfiprintf_r+0x1da>
 800f9ec:	ab03      	add	r3, sp, #12
 800f9ee:	9300      	str	r3, [sp, #0]
 800f9f0:	462a      	mov	r2, r5
 800f9f2:	4b17      	ldr	r3, [pc, #92]	; (800fa50 <_vfiprintf_r+0x25c>)
 800f9f4:	a904      	add	r1, sp, #16
 800f9f6:	4630      	mov	r0, r6
 800f9f8:	f3af 8000 	nop.w
 800f9fc:	4607      	mov	r7, r0
 800f9fe:	1c78      	adds	r0, r7, #1
 800fa00:	d1d6      	bne.n	800f9b0 <_vfiprintf_r+0x1bc>
 800fa02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fa04:	07d9      	lsls	r1, r3, #31
 800fa06:	d405      	bmi.n	800fa14 <_vfiprintf_r+0x220>
 800fa08:	89ab      	ldrh	r3, [r5, #12]
 800fa0a:	059a      	lsls	r2, r3, #22
 800fa0c:	d402      	bmi.n	800fa14 <_vfiprintf_r+0x220>
 800fa0e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fa10:	f000 fc3d 	bl	801028e <__retarget_lock_release_recursive>
 800fa14:	89ab      	ldrh	r3, [r5, #12]
 800fa16:	065b      	lsls	r3, r3, #25
 800fa18:	f53f af12 	bmi.w	800f840 <_vfiprintf_r+0x4c>
 800fa1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fa1e:	e711      	b.n	800f844 <_vfiprintf_r+0x50>
 800fa20:	ab03      	add	r3, sp, #12
 800fa22:	9300      	str	r3, [sp, #0]
 800fa24:	462a      	mov	r2, r5
 800fa26:	4b0a      	ldr	r3, [pc, #40]	; (800fa50 <_vfiprintf_r+0x25c>)
 800fa28:	a904      	add	r1, sp, #16
 800fa2a:	4630      	mov	r0, r6
 800fa2c:	f000 f880 	bl	800fb30 <_printf_i>
 800fa30:	e7e4      	b.n	800f9fc <_vfiprintf_r+0x208>
 800fa32:	bf00      	nop
 800fa34:	08010ed0 	.word	0x08010ed0
 800fa38:	08010ef0 	.word	0x08010ef0
 800fa3c:	08010eb0 	.word	0x08010eb0
 800fa40:	08010e7c 	.word	0x08010e7c
 800fa44:	08010e82 	.word	0x08010e82
 800fa48:	08010e86 	.word	0x08010e86
 800fa4c:	00000000 	.word	0x00000000
 800fa50:	0800f7cf 	.word	0x0800f7cf

0800fa54 <_printf_common>:
 800fa54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa58:	4616      	mov	r6, r2
 800fa5a:	4699      	mov	r9, r3
 800fa5c:	688a      	ldr	r2, [r1, #8]
 800fa5e:	690b      	ldr	r3, [r1, #16]
 800fa60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fa64:	4293      	cmp	r3, r2
 800fa66:	bfb8      	it	lt
 800fa68:	4613      	movlt	r3, r2
 800fa6a:	6033      	str	r3, [r6, #0]
 800fa6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fa70:	4607      	mov	r7, r0
 800fa72:	460c      	mov	r4, r1
 800fa74:	b10a      	cbz	r2, 800fa7a <_printf_common+0x26>
 800fa76:	3301      	adds	r3, #1
 800fa78:	6033      	str	r3, [r6, #0]
 800fa7a:	6823      	ldr	r3, [r4, #0]
 800fa7c:	0699      	lsls	r1, r3, #26
 800fa7e:	bf42      	ittt	mi
 800fa80:	6833      	ldrmi	r3, [r6, #0]
 800fa82:	3302      	addmi	r3, #2
 800fa84:	6033      	strmi	r3, [r6, #0]
 800fa86:	6825      	ldr	r5, [r4, #0]
 800fa88:	f015 0506 	ands.w	r5, r5, #6
 800fa8c:	d106      	bne.n	800fa9c <_printf_common+0x48>
 800fa8e:	f104 0a19 	add.w	sl, r4, #25
 800fa92:	68e3      	ldr	r3, [r4, #12]
 800fa94:	6832      	ldr	r2, [r6, #0]
 800fa96:	1a9b      	subs	r3, r3, r2
 800fa98:	42ab      	cmp	r3, r5
 800fa9a:	dc26      	bgt.n	800faea <_printf_common+0x96>
 800fa9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800faa0:	1e13      	subs	r3, r2, #0
 800faa2:	6822      	ldr	r2, [r4, #0]
 800faa4:	bf18      	it	ne
 800faa6:	2301      	movne	r3, #1
 800faa8:	0692      	lsls	r2, r2, #26
 800faaa:	d42b      	bmi.n	800fb04 <_printf_common+0xb0>
 800faac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fab0:	4649      	mov	r1, r9
 800fab2:	4638      	mov	r0, r7
 800fab4:	47c0      	blx	r8
 800fab6:	3001      	adds	r0, #1
 800fab8:	d01e      	beq.n	800faf8 <_printf_common+0xa4>
 800faba:	6823      	ldr	r3, [r4, #0]
 800fabc:	68e5      	ldr	r5, [r4, #12]
 800fabe:	6832      	ldr	r2, [r6, #0]
 800fac0:	f003 0306 	and.w	r3, r3, #6
 800fac4:	2b04      	cmp	r3, #4
 800fac6:	bf08      	it	eq
 800fac8:	1aad      	subeq	r5, r5, r2
 800faca:	68a3      	ldr	r3, [r4, #8]
 800facc:	6922      	ldr	r2, [r4, #16]
 800face:	bf0c      	ite	eq
 800fad0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fad4:	2500      	movne	r5, #0
 800fad6:	4293      	cmp	r3, r2
 800fad8:	bfc4      	itt	gt
 800fada:	1a9b      	subgt	r3, r3, r2
 800fadc:	18ed      	addgt	r5, r5, r3
 800fade:	2600      	movs	r6, #0
 800fae0:	341a      	adds	r4, #26
 800fae2:	42b5      	cmp	r5, r6
 800fae4:	d11a      	bne.n	800fb1c <_printf_common+0xc8>
 800fae6:	2000      	movs	r0, #0
 800fae8:	e008      	b.n	800fafc <_printf_common+0xa8>
 800faea:	2301      	movs	r3, #1
 800faec:	4652      	mov	r2, sl
 800faee:	4649      	mov	r1, r9
 800faf0:	4638      	mov	r0, r7
 800faf2:	47c0      	blx	r8
 800faf4:	3001      	adds	r0, #1
 800faf6:	d103      	bne.n	800fb00 <_printf_common+0xac>
 800faf8:	f04f 30ff 	mov.w	r0, #4294967295
 800fafc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb00:	3501      	adds	r5, #1
 800fb02:	e7c6      	b.n	800fa92 <_printf_common+0x3e>
 800fb04:	18e1      	adds	r1, r4, r3
 800fb06:	1c5a      	adds	r2, r3, #1
 800fb08:	2030      	movs	r0, #48	; 0x30
 800fb0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fb0e:	4422      	add	r2, r4
 800fb10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fb14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fb18:	3302      	adds	r3, #2
 800fb1a:	e7c7      	b.n	800faac <_printf_common+0x58>
 800fb1c:	2301      	movs	r3, #1
 800fb1e:	4622      	mov	r2, r4
 800fb20:	4649      	mov	r1, r9
 800fb22:	4638      	mov	r0, r7
 800fb24:	47c0      	blx	r8
 800fb26:	3001      	adds	r0, #1
 800fb28:	d0e6      	beq.n	800faf8 <_printf_common+0xa4>
 800fb2a:	3601      	adds	r6, #1
 800fb2c:	e7d9      	b.n	800fae2 <_printf_common+0x8e>
	...

0800fb30 <_printf_i>:
 800fb30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fb34:	7e0f      	ldrb	r7, [r1, #24]
 800fb36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fb38:	2f78      	cmp	r7, #120	; 0x78
 800fb3a:	4691      	mov	r9, r2
 800fb3c:	4680      	mov	r8, r0
 800fb3e:	460c      	mov	r4, r1
 800fb40:	469a      	mov	sl, r3
 800fb42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fb46:	d807      	bhi.n	800fb58 <_printf_i+0x28>
 800fb48:	2f62      	cmp	r7, #98	; 0x62
 800fb4a:	d80a      	bhi.n	800fb62 <_printf_i+0x32>
 800fb4c:	2f00      	cmp	r7, #0
 800fb4e:	f000 80d8 	beq.w	800fd02 <_printf_i+0x1d2>
 800fb52:	2f58      	cmp	r7, #88	; 0x58
 800fb54:	f000 80a3 	beq.w	800fc9e <_printf_i+0x16e>
 800fb58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fb5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fb60:	e03a      	b.n	800fbd8 <_printf_i+0xa8>
 800fb62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fb66:	2b15      	cmp	r3, #21
 800fb68:	d8f6      	bhi.n	800fb58 <_printf_i+0x28>
 800fb6a:	a101      	add	r1, pc, #4	; (adr r1, 800fb70 <_printf_i+0x40>)
 800fb6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fb70:	0800fbc9 	.word	0x0800fbc9
 800fb74:	0800fbdd 	.word	0x0800fbdd
 800fb78:	0800fb59 	.word	0x0800fb59
 800fb7c:	0800fb59 	.word	0x0800fb59
 800fb80:	0800fb59 	.word	0x0800fb59
 800fb84:	0800fb59 	.word	0x0800fb59
 800fb88:	0800fbdd 	.word	0x0800fbdd
 800fb8c:	0800fb59 	.word	0x0800fb59
 800fb90:	0800fb59 	.word	0x0800fb59
 800fb94:	0800fb59 	.word	0x0800fb59
 800fb98:	0800fb59 	.word	0x0800fb59
 800fb9c:	0800fce9 	.word	0x0800fce9
 800fba0:	0800fc0d 	.word	0x0800fc0d
 800fba4:	0800fccb 	.word	0x0800fccb
 800fba8:	0800fb59 	.word	0x0800fb59
 800fbac:	0800fb59 	.word	0x0800fb59
 800fbb0:	0800fd0b 	.word	0x0800fd0b
 800fbb4:	0800fb59 	.word	0x0800fb59
 800fbb8:	0800fc0d 	.word	0x0800fc0d
 800fbbc:	0800fb59 	.word	0x0800fb59
 800fbc0:	0800fb59 	.word	0x0800fb59
 800fbc4:	0800fcd3 	.word	0x0800fcd3
 800fbc8:	682b      	ldr	r3, [r5, #0]
 800fbca:	1d1a      	adds	r2, r3, #4
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	602a      	str	r2, [r5, #0]
 800fbd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fbd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fbd8:	2301      	movs	r3, #1
 800fbda:	e0a3      	b.n	800fd24 <_printf_i+0x1f4>
 800fbdc:	6820      	ldr	r0, [r4, #0]
 800fbde:	6829      	ldr	r1, [r5, #0]
 800fbe0:	0606      	lsls	r6, r0, #24
 800fbe2:	f101 0304 	add.w	r3, r1, #4
 800fbe6:	d50a      	bpl.n	800fbfe <_printf_i+0xce>
 800fbe8:	680e      	ldr	r6, [r1, #0]
 800fbea:	602b      	str	r3, [r5, #0]
 800fbec:	2e00      	cmp	r6, #0
 800fbee:	da03      	bge.n	800fbf8 <_printf_i+0xc8>
 800fbf0:	232d      	movs	r3, #45	; 0x2d
 800fbf2:	4276      	negs	r6, r6
 800fbf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fbf8:	485e      	ldr	r0, [pc, #376]	; (800fd74 <_printf_i+0x244>)
 800fbfa:	230a      	movs	r3, #10
 800fbfc:	e019      	b.n	800fc32 <_printf_i+0x102>
 800fbfe:	680e      	ldr	r6, [r1, #0]
 800fc00:	602b      	str	r3, [r5, #0]
 800fc02:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fc06:	bf18      	it	ne
 800fc08:	b236      	sxthne	r6, r6
 800fc0a:	e7ef      	b.n	800fbec <_printf_i+0xbc>
 800fc0c:	682b      	ldr	r3, [r5, #0]
 800fc0e:	6820      	ldr	r0, [r4, #0]
 800fc10:	1d19      	adds	r1, r3, #4
 800fc12:	6029      	str	r1, [r5, #0]
 800fc14:	0601      	lsls	r1, r0, #24
 800fc16:	d501      	bpl.n	800fc1c <_printf_i+0xec>
 800fc18:	681e      	ldr	r6, [r3, #0]
 800fc1a:	e002      	b.n	800fc22 <_printf_i+0xf2>
 800fc1c:	0646      	lsls	r6, r0, #25
 800fc1e:	d5fb      	bpl.n	800fc18 <_printf_i+0xe8>
 800fc20:	881e      	ldrh	r6, [r3, #0]
 800fc22:	4854      	ldr	r0, [pc, #336]	; (800fd74 <_printf_i+0x244>)
 800fc24:	2f6f      	cmp	r7, #111	; 0x6f
 800fc26:	bf0c      	ite	eq
 800fc28:	2308      	moveq	r3, #8
 800fc2a:	230a      	movne	r3, #10
 800fc2c:	2100      	movs	r1, #0
 800fc2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fc32:	6865      	ldr	r5, [r4, #4]
 800fc34:	60a5      	str	r5, [r4, #8]
 800fc36:	2d00      	cmp	r5, #0
 800fc38:	bfa2      	ittt	ge
 800fc3a:	6821      	ldrge	r1, [r4, #0]
 800fc3c:	f021 0104 	bicge.w	r1, r1, #4
 800fc40:	6021      	strge	r1, [r4, #0]
 800fc42:	b90e      	cbnz	r6, 800fc48 <_printf_i+0x118>
 800fc44:	2d00      	cmp	r5, #0
 800fc46:	d04d      	beq.n	800fce4 <_printf_i+0x1b4>
 800fc48:	4615      	mov	r5, r2
 800fc4a:	fbb6 f1f3 	udiv	r1, r6, r3
 800fc4e:	fb03 6711 	mls	r7, r3, r1, r6
 800fc52:	5dc7      	ldrb	r7, [r0, r7]
 800fc54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fc58:	4637      	mov	r7, r6
 800fc5a:	42bb      	cmp	r3, r7
 800fc5c:	460e      	mov	r6, r1
 800fc5e:	d9f4      	bls.n	800fc4a <_printf_i+0x11a>
 800fc60:	2b08      	cmp	r3, #8
 800fc62:	d10b      	bne.n	800fc7c <_printf_i+0x14c>
 800fc64:	6823      	ldr	r3, [r4, #0]
 800fc66:	07de      	lsls	r6, r3, #31
 800fc68:	d508      	bpl.n	800fc7c <_printf_i+0x14c>
 800fc6a:	6923      	ldr	r3, [r4, #16]
 800fc6c:	6861      	ldr	r1, [r4, #4]
 800fc6e:	4299      	cmp	r1, r3
 800fc70:	bfde      	ittt	le
 800fc72:	2330      	movle	r3, #48	; 0x30
 800fc74:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fc78:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fc7c:	1b52      	subs	r2, r2, r5
 800fc7e:	6122      	str	r2, [r4, #16]
 800fc80:	f8cd a000 	str.w	sl, [sp]
 800fc84:	464b      	mov	r3, r9
 800fc86:	aa03      	add	r2, sp, #12
 800fc88:	4621      	mov	r1, r4
 800fc8a:	4640      	mov	r0, r8
 800fc8c:	f7ff fee2 	bl	800fa54 <_printf_common>
 800fc90:	3001      	adds	r0, #1
 800fc92:	d14c      	bne.n	800fd2e <_printf_i+0x1fe>
 800fc94:	f04f 30ff 	mov.w	r0, #4294967295
 800fc98:	b004      	add	sp, #16
 800fc9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc9e:	4835      	ldr	r0, [pc, #212]	; (800fd74 <_printf_i+0x244>)
 800fca0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800fca4:	6829      	ldr	r1, [r5, #0]
 800fca6:	6823      	ldr	r3, [r4, #0]
 800fca8:	f851 6b04 	ldr.w	r6, [r1], #4
 800fcac:	6029      	str	r1, [r5, #0]
 800fcae:	061d      	lsls	r5, r3, #24
 800fcb0:	d514      	bpl.n	800fcdc <_printf_i+0x1ac>
 800fcb2:	07df      	lsls	r7, r3, #31
 800fcb4:	bf44      	itt	mi
 800fcb6:	f043 0320 	orrmi.w	r3, r3, #32
 800fcba:	6023      	strmi	r3, [r4, #0]
 800fcbc:	b91e      	cbnz	r6, 800fcc6 <_printf_i+0x196>
 800fcbe:	6823      	ldr	r3, [r4, #0]
 800fcc0:	f023 0320 	bic.w	r3, r3, #32
 800fcc4:	6023      	str	r3, [r4, #0]
 800fcc6:	2310      	movs	r3, #16
 800fcc8:	e7b0      	b.n	800fc2c <_printf_i+0xfc>
 800fcca:	6823      	ldr	r3, [r4, #0]
 800fccc:	f043 0320 	orr.w	r3, r3, #32
 800fcd0:	6023      	str	r3, [r4, #0]
 800fcd2:	2378      	movs	r3, #120	; 0x78
 800fcd4:	4828      	ldr	r0, [pc, #160]	; (800fd78 <_printf_i+0x248>)
 800fcd6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fcda:	e7e3      	b.n	800fca4 <_printf_i+0x174>
 800fcdc:	0659      	lsls	r1, r3, #25
 800fcde:	bf48      	it	mi
 800fce0:	b2b6      	uxthmi	r6, r6
 800fce2:	e7e6      	b.n	800fcb2 <_printf_i+0x182>
 800fce4:	4615      	mov	r5, r2
 800fce6:	e7bb      	b.n	800fc60 <_printf_i+0x130>
 800fce8:	682b      	ldr	r3, [r5, #0]
 800fcea:	6826      	ldr	r6, [r4, #0]
 800fcec:	6961      	ldr	r1, [r4, #20]
 800fcee:	1d18      	adds	r0, r3, #4
 800fcf0:	6028      	str	r0, [r5, #0]
 800fcf2:	0635      	lsls	r5, r6, #24
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	d501      	bpl.n	800fcfc <_printf_i+0x1cc>
 800fcf8:	6019      	str	r1, [r3, #0]
 800fcfa:	e002      	b.n	800fd02 <_printf_i+0x1d2>
 800fcfc:	0670      	lsls	r0, r6, #25
 800fcfe:	d5fb      	bpl.n	800fcf8 <_printf_i+0x1c8>
 800fd00:	8019      	strh	r1, [r3, #0]
 800fd02:	2300      	movs	r3, #0
 800fd04:	6123      	str	r3, [r4, #16]
 800fd06:	4615      	mov	r5, r2
 800fd08:	e7ba      	b.n	800fc80 <_printf_i+0x150>
 800fd0a:	682b      	ldr	r3, [r5, #0]
 800fd0c:	1d1a      	adds	r2, r3, #4
 800fd0e:	602a      	str	r2, [r5, #0]
 800fd10:	681d      	ldr	r5, [r3, #0]
 800fd12:	6862      	ldr	r2, [r4, #4]
 800fd14:	2100      	movs	r1, #0
 800fd16:	4628      	mov	r0, r5
 800fd18:	f7f0 fa3a 	bl	8000190 <memchr>
 800fd1c:	b108      	cbz	r0, 800fd22 <_printf_i+0x1f2>
 800fd1e:	1b40      	subs	r0, r0, r5
 800fd20:	6060      	str	r0, [r4, #4]
 800fd22:	6863      	ldr	r3, [r4, #4]
 800fd24:	6123      	str	r3, [r4, #16]
 800fd26:	2300      	movs	r3, #0
 800fd28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fd2c:	e7a8      	b.n	800fc80 <_printf_i+0x150>
 800fd2e:	6923      	ldr	r3, [r4, #16]
 800fd30:	462a      	mov	r2, r5
 800fd32:	4649      	mov	r1, r9
 800fd34:	4640      	mov	r0, r8
 800fd36:	47d0      	blx	sl
 800fd38:	3001      	adds	r0, #1
 800fd3a:	d0ab      	beq.n	800fc94 <_printf_i+0x164>
 800fd3c:	6823      	ldr	r3, [r4, #0]
 800fd3e:	079b      	lsls	r3, r3, #30
 800fd40:	d413      	bmi.n	800fd6a <_printf_i+0x23a>
 800fd42:	68e0      	ldr	r0, [r4, #12]
 800fd44:	9b03      	ldr	r3, [sp, #12]
 800fd46:	4298      	cmp	r0, r3
 800fd48:	bfb8      	it	lt
 800fd4a:	4618      	movlt	r0, r3
 800fd4c:	e7a4      	b.n	800fc98 <_printf_i+0x168>
 800fd4e:	2301      	movs	r3, #1
 800fd50:	4632      	mov	r2, r6
 800fd52:	4649      	mov	r1, r9
 800fd54:	4640      	mov	r0, r8
 800fd56:	47d0      	blx	sl
 800fd58:	3001      	adds	r0, #1
 800fd5a:	d09b      	beq.n	800fc94 <_printf_i+0x164>
 800fd5c:	3501      	adds	r5, #1
 800fd5e:	68e3      	ldr	r3, [r4, #12]
 800fd60:	9903      	ldr	r1, [sp, #12]
 800fd62:	1a5b      	subs	r3, r3, r1
 800fd64:	42ab      	cmp	r3, r5
 800fd66:	dcf2      	bgt.n	800fd4e <_printf_i+0x21e>
 800fd68:	e7eb      	b.n	800fd42 <_printf_i+0x212>
 800fd6a:	2500      	movs	r5, #0
 800fd6c:	f104 0619 	add.w	r6, r4, #25
 800fd70:	e7f5      	b.n	800fd5e <_printf_i+0x22e>
 800fd72:	bf00      	nop
 800fd74:	08010e8d 	.word	0x08010e8d
 800fd78:	08010e9e 	.word	0x08010e9e

0800fd7c <nan>:
 800fd7c:	4901      	ldr	r1, [pc, #4]	; (800fd84 <nan+0x8>)
 800fd7e:	2000      	movs	r0, #0
 800fd80:	4770      	bx	lr
 800fd82:	bf00      	nop
 800fd84:	7ff80000 	.word	0x7ff80000

0800fd88 <__swbuf_r>:
 800fd88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd8a:	460e      	mov	r6, r1
 800fd8c:	4614      	mov	r4, r2
 800fd8e:	4605      	mov	r5, r0
 800fd90:	b118      	cbz	r0, 800fd9a <__swbuf_r+0x12>
 800fd92:	6983      	ldr	r3, [r0, #24]
 800fd94:	b90b      	cbnz	r3, 800fd9a <__swbuf_r+0x12>
 800fd96:	f000 f9db 	bl	8010150 <__sinit>
 800fd9a:	4b21      	ldr	r3, [pc, #132]	; (800fe20 <__swbuf_r+0x98>)
 800fd9c:	429c      	cmp	r4, r3
 800fd9e:	d12b      	bne.n	800fdf8 <__swbuf_r+0x70>
 800fda0:	686c      	ldr	r4, [r5, #4]
 800fda2:	69a3      	ldr	r3, [r4, #24]
 800fda4:	60a3      	str	r3, [r4, #8]
 800fda6:	89a3      	ldrh	r3, [r4, #12]
 800fda8:	071a      	lsls	r2, r3, #28
 800fdaa:	d52f      	bpl.n	800fe0c <__swbuf_r+0x84>
 800fdac:	6923      	ldr	r3, [r4, #16]
 800fdae:	b36b      	cbz	r3, 800fe0c <__swbuf_r+0x84>
 800fdb0:	6923      	ldr	r3, [r4, #16]
 800fdb2:	6820      	ldr	r0, [r4, #0]
 800fdb4:	1ac0      	subs	r0, r0, r3
 800fdb6:	6963      	ldr	r3, [r4, #20]
 800fdb8:	b2f6      	uxtb	r6, r6
 800fdba:	4283      	cmp	r3, r0
 800fdbc:	4637      	mov	r7, r6
 800fdbe:	dc04      	bgt.n	800fdca <__swbuf_r+0x42>
 800fdc0:	4621      	mov	r1, r4
 800fdc2:	4628      	mov	r0, r5
 800fdc4:	f000 f930 	bl	8010028 <_fflush_r>
 800fdc8:	bb30      	cbnz	r0, 800fe18 <__swbuf_r+0x90>
 800fdca:	68a3      	ldr	r3, [r4, #8]
 800fdcc:	3b01      	subs	r3, #1
 800fdce:	60a3      	str	r3, [r4, #8]
 800fdd0:	6823      	ldr	r3, [r4, #0]
 800fdd2:	1c5a      	adds	r2, r3, #1
 800fdd4:	6022      	str	r2, [r4, #0]
 800fdd6:	701e      	strb	r6, [r3, #0]
 800fdd8:	6963      	ldr	r3, [r4, #20]
 800fdda:	3001      	adds	r0, #1
 800fddc:	4283      	cmp	r3, r0
 800fdde:	d004      	beq.n	800fdea <__swbuf_r+0x62>
 800fde0:	89a3      	ldrh	r3, [r4, #12]
 800fde2:	07db      	lsls	r3, r3, #31
 800fde4:	d506      	bpl.n	800fdf4 <__swbuf_r+0x6c>
 800fde6:	2e0a      	cmp	r6, #10
 800fde8:	d104      	bne.n	800fdf4 <__swbuf_r+0x6c>
 800fdea:	4621      	mov	r1, r4
 800fdec:	4628      	mov	r0, r5
 800fdee:	f000 f91b 	bl	8010028 <_fflush_r>
 800fdf2:	b988      	cbnz	r0, 800fe18 <__swbuf_r+0x90>
 800fdf4:	4638      	mov	r0, r7
 800fdf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fdf8:	4b0a      	ldr	r3, [pc, #40]	; (800fe24 <__swbuf_r+0x9c>)
 800fdfa:	429c      	cmp	r4, r3
 800fdfc:	d101      	bne.n	800fe02 <__swbuf_r+0x7a>
 800fdfe:	68ac      	ldr	r4, [r5, #8]
 800fe00:	e7cf      	b.n	800fda2 <__swbuf_r+0x1a>
 800fe02:	4b09      	ldr	r3, [pc, #36]	; (800fe28 <__swbuf_r+0xa0>)
 800fe04:	429c      	cmp	r4, r3
 800fe06:	bf08      	it	eq
 800fe08:	68ec      	ldreq	r4, [r5, #12]
 800fe0a:	e7ca      	b.n	800fda2 <__swbuf_r+0x1a>
 800fe0c:	4621      	mov	r1, r4
 800fe0e:	4628      	mov	r0, r5
 800fe10:	f000 f81a 	bl	800fe48 <__swsetup_r>
 800fe14:	2800      	cmp	r0, #0
 800fe16:	d0cb      	beq.n	800fdb0 <__swbuf_r+0x28>
 800fe18:	f04f 37ff 	mov.w	r7, #4294967295
 800fe1c:	e7ea      	b.n	800fdf4 <__swbuf_r+0x6c>
 800fe1e:	bf00      	nop
 800fe20:	08010ed0 	.word	0x08010ed0
 800fe24:	08010ef0 	.word	0x08010ef0
 800fe28:	08010eb0 	.word	0x08010eb0

0800fe2c <__ascii_wctomb>:
 800fe2c:	4603      	mov	r3, r0
 800fe2e:	4608      	mov	r0, r1
 800fe30:	b141      	cbz	r1, 800fe44 <__ascii_wctomb+0x18>
 800fe32:	2aff      	cmp	r2, #255	; 0xff
 800fe34:	d904      	bls.n	800fe40 <__ascii_wctomb+0x14>
 800fe36:	228a      	movs	r2, #138	; 0x8a
 800fe38:	601a      	str	r2, [r3, #0]
 800fe3a:	f04f 30ff 	mov.w	r0, #4294967295
 800fe3e:	4770      	bx	lr
 800fe40:	700a      	strb	r2, [r1, #0]
 800fe42:	2001      	movs	r0, #1
 800fe44:	4770      	bx	lr
	...

0800fe48 <__swsetup_r>:
 800fe48:	4b32      	ldr	r3, [pc, #200]	; (800ff14 <__swsetup_r+0xcc>)
 800fe4a:	b570      	push	{r4, r5, r6, lr}
 800fe4c:	681d      	ldr	r5, [r3, #0]
 800fe4e:	4606      	mov	r6, r0
 800fe50:	460c      	mov	r4, r1
 800fe52:	b125      	cbz	r5, 800fe5e <__swsetup_r+0x16>
 800fe54:	69ab      	ldr	r3, [r5, #24]
 800fe56:	b913      	cbnz	r3, 800fe5e <__swsetup_r+0x16>
 800fe58:	4628      	mov	r0, r5
 800fe5a:	f000 f979 	bl	8010150 <__sinit>
 800fe5e:	4b2e      	ldr	r3, [pc, #184]	; (800ff18 <__swsetup_r+0xd0>)
 800fe60:	429c      	cmp	r4, r3
 800fe62:	d10f      	bne.n	800fe84 <__swsetup_r+0x3c>
 800fe64:	686c      	ldr	r4, [r5, #4]
 800fe66:	89a3      	ldrh	r3, [r4, #12]
 800fe68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fe6c:	0719      	lsls	r1, r3, #28
 800fe6e:	d42c      	bmi.n	800feca <__swsetup_r+0x82>
 800fe70:	06dd      	lsls	r5, r3, #27
 800fe72:	d411      	bmi.n	800fe98 <__swsetup_r+0x50>
 800fe74:	2309      	movs	r3, #9
 800fe76:	6033      	str	r3, [r6, #0]
 800fe78:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fe7c:	81a3      	strh	r3, [r4, #12]
 800fe7e:	f04f 30ff 	mov.w	r0, #4294967295
 800fe82:	e03e      	b.n	800ff02 <__swsetup_r+0xba>
 800fe84:	4b25      	ldr	r3, [pc, #148]	; (800ff1c <__swsetup_r+0xd4>)
 800fe86:	429c      	cmp	r4, r3
 800fe88:	d101      	bne.n	800fe8e <__swsetup_r+0x46>
 800fe8a:	68ac      	ldr	r4, [r5, #8]
 800fe8c:	e7eb      	b.n	800fe66 <__swsetup_r+0x1e>
 800fe8e:	4b24      	ldr	r3, [pc, #144]	; (800ff20 <__swsetup_r+0xd8>)
 800fe90:	429c      	cmp	r4, r3
 800fe92:	bf08      	it	eq
 800fe94:	68ec      	ldreq	r4, [r5, #12]
 800fe96:	e7e6      	b.n	800fe66 <__swsetup_r+0x1e>
 800fe98:	0758      	lsls	r0, r3, #29
 800fe9a:	d512      	bpl.n	800fec2 <__swsetup_r+0x7a>
 800fe9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fe9e:	b141      	cbz	r1, 800feb2 <__swsetup_r+0x6a>
 800fea0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fea4:	4299      	cmp	r1, r3
 800fea6:	d002      	beq.n	800feae <__swsetup_r+0x66>
 800fea8:	4630      	mov	r0, r6
 800feaa:	f7fd f95f 	bl	800d16c <_free_r>
 800feae:	2300      	movs	r3, #0
 800feb0:	6363      	str	r3, [r4, #52]	; 0x34
 800feb2:	89a3      	ldrh	r3, [r4, #12]
 800feb4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800feb8:	81a3      	strh	r3, [r4, #12]
 800feba:	2300      	movs	r3, #0
 800febc:	6063      	str	r3, [r4, #4]
 800febe:	6923      	ldr	r3, [r4, #16]
 800fec0:	6023      	str	r3, [r4, #0]
 800fec2:	89a3      	ldrh	r3, [r4, #12]
 800fec4:	f043 0308 	orr.w	r3, r3, #8
 800fec8:	81a3      	strh	r3, [r4, #12]
 800feca:	6923      	ldr	r3, [r4, #16]
 800fecc:	b94b      	cbnz	r3, 800fee2 <__swsetup_r+0x9a>
 800fece:	89a3      	ldrh	r3, [r4, #12]
 800fed0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fed4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fed8:	d003      	beq.n	800fee2 <__swsetup_r+0x9a>
 800feda:	4621      	mov	r1, r4
 800fedc:	4630      	mov	r0, r6
 800fede:	f000 f9fd 	bl	80102dc <__smakebuf_r>
 800fee2:	89a0      	ldrh	r0, [r4, #12]
 800fee4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fee8:	f010 0301 	ands.w	r3, r0, #1
 800feec:	d00a      	beq.n	800ff04 <__swsetup_r+0xbc>
 800feee:	2300      	movs	r3, #0
 800fef0:	60a3      	str	r3, [r4, #8]
 800fef2:	6963      	ldr	r3, [r4, #20]
 800fef4:	425b      	negs	r3, r3
 800fef6:	61a3      	str	r3, [r4, #24]
 800fef8:	6923      	ldr	r3, [r4, #16]
 800fefa:	b943      	cbnz	r3, 800ff0e <__swsetup_r+0xc6>
 800fefc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ff00:	d1ba      	bne.n	800fe78 <__swsetup_r+0x30>
 800ff02:	bd70      	pop	{r4, r5, r6, pc}
 800ff04:	0781      	lsls	r1, r0, #30
 800ff06:	bf58      	it	pl
 800ff08:	6963      	ldrpl	r3, [r4, #20]
 800ff0a:	60a3      	str	r3, [r4, #8]
 800ff0c:	e7f4      	b.n	800fef8 <__swsetup_r+0xb0>
 800ff0e:	2000      	movs	r0, #0
 800ff10:	e7f7      	b.n	800ff02 <__swsetup_r+0xba>
 800ff12:	bf00      	nop
 800ff14:	20000010 	.word	0x20000010
 800ff18:	08010ed0 	.word	0x08010ed0
 800ff1c:	08010ef0 	.word	0x08010ef0
 800ff20:	08010eb0 	.word	0x08010eb0

0800ff24 <__sflush_r>:
 800ff24:	898a      	ldrh	r2, [r1, #12]
 800ff26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff28:	4605      	mov	r5, r0
 800ff2a:	0710      	lsls	r0, r2, #28
 800ff2c:	460c      	mov	r4, r1
 800ff2e:	d457      	bmi.n	800ffe0 <__sflush_r+0xbc>
 800ff30:	684b      	ldr	r3, [r1, #4]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	dc04      	bgt.n	800ff40 <__sflush_r+0x1c>
 800ff36:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	dc01      	bgt.n	800ff40 <__sflush_r+0x1c>
 800ff3c:	2000      	movs	r0, #0
 800ff3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ff40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ff42:	2e00      	cmp	r6, #0
 800ff44:	d0fa      	beq.n	800ff3c <__sflush_r+0x18>
 800ff46:	2300      	movs	r3, #0
 800ff48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ff4c:	682f      	ldr	r7, [r5, #0]
 800ff4e:	602b      	str	r3, [r5, #0]
 800ff50:	d032      	beq.n	800ffb8 <__sflush_r+0x94>
 800ff52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ff54:	89a3      	ldrh	r3, [r4, #12]
 800ff56:	075a      	lsls	r2, r3, #29
 800ff58:	d505      	bpl.n	800ff66 <__sflush_r+0x42>
 800ff5a:	6863      	ldr	r3, [r4, #4]
 800ff5c:	1ac0      	subs	r0, r0, r3
 800ff5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ff60:	b10b      	cbz	r3, 800ff66 <__sflush_r+0x42>
 800ff62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ff64:	1ac0      	subs	r0, r0, r3
 800ff66:	2300      	movs	r3, #0
 800ff68:	4602      	mov	r2, r0
 800ff6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ff6c:	6a21      	ldr	r1, [r4, #32]
 800ff6e:	4628      	mov	r0, r5
 800ff70:	47b0      	blx	r6
 800ff72:	1c43      	adds	r3, r0, #1
 800ff74:	89a3      	ldrh	r3, [r4, #12]
 800ff76:	d106      	bne.n	800ff86 <__sflush_r+0x62>
 800ff78:	6829      	ldr	r1, [r5, #0]
 800ff7a:	291d      	cmp	r1, #29
 800ff7c:	d82c      	bhi.n	800ffd8 <__sflush_r+0xb4>
 800ff7e:	4a29      	ldr	r2, [pc, #164]	; (8010024 <__sflush_r+0x100>)
 800ff80:	40ca      	lsrs	r2, r1
 800ff82:	07d6      	lsls	r6, r2, #31
 800ff84:	d528      	bpl.n	800ffd8 <__sflush_r+0xb4>
 800ff86:	2200      	movs	r2, #0
 800ff88:	6062      	str	r2, [r4, #4]
 800ff8a:	04d9      	lsls	r1, r3, #19
 800ff8c:	6922      	ldr	r2, [r4, #16]
 800ff8e:	6022      	str	r2, [r4, #0]
 800ff90:	d504      	bpl.n	800ff9c <__sflush_r+0x78>
 800ff92:	1c42      	adds	r2, r0, #1
 800ff94:	d101      	bne.n	800ff9a <__sflush_r+0x76>
 800ff96:	682b      	ldr	r3, [r5, #0]
 800ff98:	b903      	cbnz	r3, 800ff9c <__sflush_r+0x78>
 800ff9a:	6560      	str	r0, [r4, #84]	; 0x54
 800ff9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ff9e:	602f      	str	r7, [r5, #0]
 800ffa0:	2900      	cmp	r1, #0
 800ffa2:	d0cb      	beq.n	800ff3c <__sflush_r+0x18>
 800ffa4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ffa8:	4299      	cmp	r1, r3
 800ffaa:	d002      	beq.n	800ffb2 <__sflush_r+0x8e>
 800ffac:	4628      	mov	r0, r5
 800ffae:	f7fd f8dd 	bl	800d16c <_free_r>
 800ffb2:	2000      	movs	r0, #0
 800ffb4:	6360      	str	r0, [r4, #52]	; 0x34
 800ffb6:	e7c2      	b.n	800ff3e <__sflush_r+0x1a>
 800ffb8:	6a21      	ldr	r1, [r4, #32]
 800ffba:	2301      	movs	r3, #1
 800ffbc:	4628      	mov	r0, r5
 800ffbe:	47b0      	blx	r6
 800ffc0:	1c41      	adds	r1, r0, #1
 800ffc2:	d1c7      	bne.n	800ff54 <__sflush_r+0x30>
 800ffc4:	682b      	ldr	r3, [r5, #0]
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d0c4      	beq.n	800ff54 <__sflush_r+0x30>
 800ffca:	2b1d      	cmp	r3, #29
 800ffcc:	d001      	beq.n	800ffd2 <__sflush_r+0xae>
 800ffce:	2b16      	cmp	r3, #22
 800ffd0:	d101      	bne.n	800ffd6 <__sflush_r+0xb2>
 800ffd2:	602f      	str	r7, [r5, #0]
 800ffd4:	e7b2      	b.n	800ff3c <__sflush_r+0x18>
 800ffd6:	89a3      	ldrh	r3, [r4, #12]
 800ffd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ffdc:	81a3      	strh	r3, [r4, #12]
 800ffde:	e7ae      	b.n	800ff3e <__sflush_r+0x1a>
 800ffe0:	690f      	ldr	r7, [r1, #16]
 800ffe2:	2f00      	cmp	r7, #0
 800ffe4:	d0aa      	beq.n	800ff3c <__sflush_r+0x18>
 800ffe6:	0793      	lsls	r3, r2, #30
 800ffe8:	680e      	ldr	r6, [r1, #0]
 800ffea:	bf08      	it	eq
 800ffec:	694b      	ldreq	r3, [r1, #20]
 800ffee:	600f      	str	r7, [r1, #0]
 800fff0:	bf18      	it	ne
 800fff2:	2300      	movne	r3, #0
 800fff4:	1bf6      	subs	r6, r6, r7
 800fff6:	608b      	str	r3, [r1, #8]
 800fff8:	2e00      	cmp	r6, #0
 800fffa:	dd9f      	ble.n	800ff3c <__sflush_r+0x18>
 800fffc:	6a21      	ldr	r1, [r4, #32]
 800fffe:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8010002:	4633      	mov	r3, r6
 8010004:	463a      	mov	r2, r7
 8010006:	4628      	mov	r0, r5
 8010008:	47e0      	blx	ip
 801000a:	2800      	cmp	r0, #0
 801000c:	dc06      	bgt.n	801001c <__sflush_r+0xf8>
 801000e:	89a3      	ldrh	r3, [r4, #12]
 8010010:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010014:	81a3      	strh	r3, [r4, #12]
 8010016:	f04f 30ff 	mov.w	r0, #4294967295
 801001a:	e790      	b.n	800ff3e <__sflush_r+0x1a>
 801001c:	4407      	add	r7, r0
 801001e:	1a36      	subs	r6, r6, r0
 8010020:	e7ea      	b.n	800fff8 <__sflush_r+0xd4>
 8010022:	bf00      	nop
 8010024:	20400001 	.word	0x20400001

08010028 <_fflush_r>:
 8010028:	b538      	push	{r3, r4, r5, lr}
 801002a:	690b      	ldr	r3, [r1, #16]
 801002c:	4605      	mov	r5, r0
 801002e:	460c      	mov	r4, r1
 8010030:	b913      	cbnz	r3, 8010038 <_fflush_r+0x10>
 8010032:	2500      	movs	r5, #0
 8010034:	4628      	mov	r0, r5
 8010036:	bd38      	pop	{r3, r4, r5, pc}
 8010038:	b118      	cbz	r0, 8010042 <_fflush_r+0x1a>
 801003a:	6983      	ldr	r3, [r0, #24]
 801003c:	b90b      	cbnz	r3, 8010042 <_fflush_r+0x1a>
 801003e:	f000 f887 	bl	8010150 <__sinit>
 8010042:	4b14      	ldr	r3, [pc, #80]	; (8010094 <_fflush_r+0x6c>)
 8010044:	429c      	cmp	r4, r3
 8010046:	d11b      	bne.n	8010080 <_fflush_r+0x58>
 8010048:	686c      	ldr	r4, [r5, #4]
 801004a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801004e:	2b00      	cmp	r3, #0
 8010050:	d0ef      	beq.n	8010032 <_fflush_r+0xa>
 8010052:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010054:	07d0      	lsls	r0, r2, #31
 8010056:	d404      	bmi.n	8010062 <_fflush_r+0x3a>
 8010058:	0599      	lsls	r1, r3, #22
 801005a:	d402      	bmi.n	8010062 <_fflush_r+0x3a>
 801005c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801005e:	f000 f915 	bl	801028c <__retarget_lock_acquire_recursive>
 8010062:	4628      	mov	r0, r5
 8010064:	4621      	mov	r1, r4
 8010066:	f7ff ff5d 	bl	800ff24 <__sflush_r>
 801006a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801006c:	07da      	lsls	r2, r3, #31
 801006e:	4605      	mov	r5, r0
 8010070:	d4e0      	bmi.n	8010034 <_fflush_r+0xc>
 8010072:	89a3      	ldrh	r3, [r4, #12]
 8010074:	059b      	lsls	r3, r3, #22
 8010076:	d4dd      	bmi.n	8010034 <_fflush_r+0xc>
 8010078:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801007a:	f000 f908 	bl	801028e <__retarget_lock_release_recursive>
 801007e:	e7d9      	b.n	8010034 <_fflush_r+0xc>
 8010080:	4b05      	ldr	r3, [pc, #20]	; (8010098 <_fflush_r+0x70>)
 8010082:	429c      	cmp	r4, r3
 8010084:	d101      	bne.n	801008a <_fflush_r+0x62>
 8010086:	68ac      	ldr	r4, [r5, #8]
 8010088:	e7df      	b.n	801004a <_fflush_r+0x22>
 801008a:	4b04      	ldr	r3, [pc, #16]	; (801009c <_fflush_r+0x74>)
 801008c:	429c      	cmp	r4, r3
 801008e:	bf08      	it	eq
 8010090:	68ec      	ldreq	r4, [r5, #12]
 8010092:	e7da      	b.n	801004a <_fflush_r+0x22>
 8010094:	08010ed0 	.word	0x08010ed0
 8010098:	08010ef0 	.word	0x08010ef0
 801009c:	08010eb0 	.word	0x08010eb0

080100a0 <std>:
 80100a0:	2300      	movs	r3, #0
 80100a2:	b510      	push	{r4, lr}
 80100a4:	4604      	mov	r4, r0
 80100a6:	e9c0 3300 	strd	r3, r3, [r0]
 80100aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80100ae:	6083      	str	r3, [r0, #8]
 80100b0:	8181      	strh	r1, [r0, #12]
 80100b2:	6643      	str	r3, [r0, #100]	; 0x64
 80100b4:	81c2      	strh	r2, [r0, #14]
 80100b6:	6183      	str	r3, [r0, #24]
 80100b8:	4619      	mov	r1, r3
 80100ba:	2208      	movs	r2, #8
 80100bc:	305c      	adds	r0, #92	; 0x5c
 80100be:	f7fd f84d 	bl	800d15c <memset>
 80100c2:	4b05      	ldr	r3, [pc, #20]	; (80100d8 <std+0x38>)
 80100c4:	6263      	str	r3, [r4, #36]	; 0x24
 80100c6:	4b05      	ldr	r3, [pc, #20]	; (80100dc <std+0x3c>)
 80100c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80100ca:	4b05      	ldr	r3, [pc, #20]	; (80100e0 <std+0x40>)
 80100cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80100ce:	4b05      	ldr	r3, [pc, #20]	; (80100e4 <std+0x44>)
 80100d0:	6224      	str	r4, [r4, #32]
 80100d2:	6323      	str	r3, [r4, #48]	; 0x30
 80100d4:	bd10      	pop	{r4, pc}
 80100d6:	bf00      	nop
 80100d8:	080103ef 	.word	0x080103ef
 80100dc:	08010411 	.word	0x08010411
 80100e0:	08010449 	.word	0x08010449
 80100e4:	0801046d 	.word	0x0801046d

080100e8 <_cleanup_r>:
 80100e8:	4901      	ldr	r1, [pc, #4]	; (80100f0 <_cleanup_r+0x8>)
 80100ea:	f000 b8af 	b.w	801024c <_fwalk_reent>
 80100ee:	bf00      	nop
 80100f0:	08010029 	.word	0x08010029

080100f4 <__sfmoreglue>:
 80100f4:	b570      	push	{r4, r5, r6, lr}
 80100f6:	2268      	movs	r2, #104	; 0x68
 80100f8:	1e4d      	subs	r5, r1, #1
 80100fa:	4355      	muls	r5, r2
 80100fc:	460e      	mov	r6, r1
 80100fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010102:	f7fd f89d 	bl	800d240 <_malloc_r>
 8010106:	4604      	mov	r4, r0
 8010108:	b140      	cbz	r0, 801011c <__sfmoreglue+0x28>
 801010a:	2100      	movs	r1, #0
 801010c:	e9c0 1600 	strd	r1, r6, [r0]
 8010110:	300c      	adds	r0, #12
 8010112:	60a0      	str	r0, [r4, #8]
 8010114:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010118:	f7fd f820 	bl	800d15c <memset>
 801011c:	4620      	mov	r0, r4
 801011e:	bd70      	pop	{r4, r5, r6, pc}

08010120 <__sfp_lock_acquire>:
 8010120:	4801      	ldr	r0, [pc, #4]	; (8010128 <__sfp_lock_acquire+0x8>)
 8010122:	f000 b8b3 	b.w	801028c <__retarget_lock_acquire_recursive>
 8010126:	bf00      	nop
 8010128:	20000661 	.word	0x20000661

0801012c <__sfp_lock_release>:
 801012c:	4801      	ldr	r0, [pc, #4]	; (8010134 <__sfp_lock_release+0x8>)
 801012e:	f000 b8ae 	b.w	801028e <__retarget_lock_release_recursive>
 8010132:	bf00      	nop
 8010134:	20000661 	.word	0x20000661

08010138 <__sinit_lock_acquire>:
 8010138:	4801      	ldr	r0, [pc, #4]	; (8010140 <__sinit_lock_acquire+0x8>)
 801013a:	f000 b8a7 	b.w	801028c <__retarget_lock_acquire_recursive>
 801013e:	bf00      	nop
 8010140:	20000662 	.word	0x20000662

08010144 <__sinit_lock_release>:
 8010144:	4801      	ldr	r0, [pc, #4]	; (801014c <__sinit_lock_release+0x8>)
 8010146:	f000 b8a2 	b.w	801028e <__retarget_lock_release_recursive>
 801014a:	bf00      	nop
 801014c:	20000662 	.word	0x20000662

08010150 <__sinit>:
 8010150:	b510      	push	{r4, lr}
 8010152:	4604      	mov	r4, r0
 8010154:	f7ff fff0 	bl	8010138 <__sinit_lock_acquire>
 8010158:	69a3      	ldr	r3, [r4, #24]
 801015a:	b11b      	cbz	r3, 8010164 <__sinit+0x14>
 801015c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010160:	f7ff bff0 	b.w	8010144 <__sinit_lock_release>
 8010164:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010168:	6523      	str	r3, [r4, #80]	; 0x50
 801016a:	4b13      	ldr	r3, [pc, #76]	; (80101b8 <__sinit+0x68>)
 801016c:	4a13      	ldr	r2, [pc, #76]	; (80101bc <__sinit+0x6c>)
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	62a2      	str	r2, [r4, #40]	; 0x28
 8010172:	42a3      	cmp	r3, r4
 8010174:	bf04      	itt	eq
 8010176:	2301      	moveq	r3, #1
 8010178:	61a3      	streq	r3, [r4, #24]
 801017a:	4620      	mov	r0, r4
 801017c:	f000 f820 	bl	80101c0 <__sfp>
 8010180:	6060      	str	r0, [r4, #4]
 8010182:	4620      	mov	r0, r4
 8010184:	f000 f81c 	bl	80101c0 <__sfp>
 8010188:	60a0      	str	r0, [r4, #8]
 801018a:	4620      	mov	r0, r4
 801018c:	f000 f818 	bl	80101c0 <__sfp>
 8010190:	2200      	movs	r2, #0
 8010192:	60e0      	str	r0, [r4, #12]
 8010194:	2104      	movs	r1, #4
 8010196:	6860      	ldr	r0, [r4, #4]
 8010198:	f7ff ff82 	bl	80100a0 <std>
 801019c:	68a0      	ldr	r0, [r4, #8]
 801019e:	2201      	movs	r2, #1
 80101a0:	2109      	movs	r1, #9
 80101a2:	f7ff ff7d 	bl	80100a0 <std>
 80101a6:	68e0      	ldr	r0, [r4, #12]
 80101a8:	2202      	movs	r2, #2
 80101aa:	2112      	movs	r1, #18
 80101ac:	f7ff ff78 	bl	80100a0 <std>
 80101b0:	2301      	movs	r3, #1
 80101b2:	61a3      	str	r3, [r4, #24]
 80101b4:	e7d2      	b.n	801015c <__sinit+0xc>
 80101b6:	bf00      	nop
 80101b8:	08010a80 	.word	0x08010a80
 80101bc:	080100e9 	.word	0x080100e9

080101c0 <__sfp>:
 80101c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101c2:	4607      	mov	r7, r0
 80101c4:	f7ff ffac 	bl	8010120 <__sfp_lock_acquire>
 80101c8:	4b1e      	ldr	r3, [pc, #120]	; (8010244 <__sfp+0x84>)
 80101ca:	681e      	ldr	r6, [r3, #0]
 80101cc:	69b3      	ldr	r3, [r6, #24]
 80101ce:	b913      	cbnz	r3, 80101d6 <__sfp+0x16>
 80101d0:	4630      	mov	r0, r6
 80101d2:	f7ff ffbd 	bl	8010150 <__sinit>
 80101d6:	3648      	adds	r6, #72	; 0x48
 80101d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80101dc:	3b01      	subs	r3, #1
 80101de:	d503      	bpl.n	80101e8 <__sfp+0x28>
 80101e0:	6833      	ldr	r3, [r6, #0]
 80101e2:	b30b      	cbz	r3, 8010228 <__sfp+0x68>
 80101e4:	6836      	ldr	r6, [r6, #0]
 80101e6:	e7f7      	b.n	80101d8 <__sfp+0x18>
 80101e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80101ec:	b9d5      	cbnz	r5, 8010224 <__sfp+0x64>
 80101ee:	4b16      	ldr	r3, [pc, #88]	; (8010248 <__sfp+0x88>)
 80101f0:	60e3      	str	r3, [r4, #12]
 80101f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80101f6:	6665      	str	r5, [r4, #100]	; 0x64
 80101f8:	f000 f847 	bl	801028a <__retarget_lock_init_recursive>
 80101fc:	f7ff ff96 	bl	801012c <__sfp_lock_release>
 8010200:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010204:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010208:	6025      	str	r5, [r4, #0]
 801020a:	61a5      	str	r5, [r4, #24]
 801020c:	2208      	movs	r2, #8
 801020e:	4629      	mov	r1, r5
 8010210:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010214:	f7fc ffa2 	bl	800d15c <memset>
 8010218:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801021c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010220:	4620      	mov	r0, r4
 8010222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010224:	3468      	adds	r4, #104	; 0x68
 8010226:	e7d9      	b.n	80101dc <__sfp+0x1c>
 8010228:	2104      	movs	r1, #4
 801022a:	4638      	mov	r0, r7
 801022c:	f7ff ff62 	bl	80100f4 <__sfmoreglue>
 8010230:	4604      	mov	r4, r0
 8010232:	6030      	str	r0, [r6, #0]
 8010234:	2800      	cmp	r0, #0
 8010236:	d1d5      	bne.n	80101e4 <__sfp+0x24>
 8010238:	f7ff ff78 	bl	801012c <__sfp_lock_release>
 801023c:	230c      	movs	r3, #12
 801023e:	603b      	str	r3, [r7, #0]
 8010240:	e7ee      	b.n	8010220 <__sfp+0x60>
 8010242:	bf00      	nop
 8010244:	08010a80 	.word	0x08010a80
 8010248:	ffff0001 	.word	0xffff0001

0801024c <_fwalk_reent>:
 801024c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010250:	4606      	mov	r6, r0
 8010252:	4688      	mov	r8, r1
 8010254:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010258:	2700      	movs	r7, #0
 801025a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801025e:	f1b9 0901 	subs.w	r9, r9, #1
 8010262:	d505      	bpl.n	8010270 <_fwalk_reent+0x24>
 8010264:	6824      	ldr	r4, [r4, #0]
 8010266:	2c00      	cmp	r4, #0
 8010268:	d1f7      	bne.n	801025a <_fwalk_reent+0xe>
 801026a:	4638      	mov	r0, r7
 801026c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010270:	89ab      	ldrh	r3, [r5, #12]
 8010272:	2b01      	cmp	r3, #1
 8010274:	d907      	bls.n	8010286 <_fwalk_reent+0x3a>
 8010276:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801027a:	3301      	adds	r3, #1
 801027c:	d003      	beq.n	8010286 <_fwalk_reent+0x3a>
 801027e:	4629      	mov	r1, r5
 8010280:	4630      	mov	r0, r6
 8010282:	47c0      	blx	r8
 8010284:	4307      	orrs	r7, r0
 8010286:	3568      	adds	r5, #104	; 0x68
 8010288:	e7e9      	b.n	801025e <_fwalk_reent+0x12>

0801028a <__retarget_lock_init_recursive>:
 801028a:	4770      	bx	lr

0801028c <__retarget_lock_acquire_recursive>:
 801028c:	4770      	bx	lr

0801028e <__retarget_lock_release_recursive>:
 801028e:	4770      	bx	lr

08010290 <__swhatbuf_r>:
 8010290:	b570      	push	{r4, r5, r6, lr}
 8010292:	460e      	mov	r6, r1
 8010294:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010298:	2900      	cmp	r1, #0
 801029a:	b096      	sub	sp, #88	; 0x58
 801029c:	4614      	mov	r4, r2
 801029e:	461d      	mov	r5, r3
 80102a0:	da08      	bge.n	80102b4 <__swhatbuf_r+0x24>
 80102a2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80102a6:	2200      	movs	r2, #0
 80102a8:	602a      	str	r2, [r5, #0]
 80102aa:	061a      	lsls	r2, r3, #24
 80102ac:	d410      	bmi.n	80102d0 <__swhatbuf_r+0x40>
 80102ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80102b2:	e00e      	b.n	80102d2 <__swhatbuf_r+0x42>
 80102b4:	466a      	mov	r2, sp
 80102b6:	f000 f8ff 	bl	80104b8 <_fstat_r>
 80102ba:	2800      	cmp	r0, #0
 80102bc:	dbf1      	blt.n	80102a2 <__swhatbuf_r+0x12>
 80102be:	9a01      	ldr	r2, [sp, #4]
 80102c0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80102c4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80102c8:	425a      	negs	r2, r3
 80102ca:	415a      	adcs	r2, r3
 80102cc:	602a      	str	r2, [r5, #0]
 80102ce:	e7ee      	b.n	80102ae <__swhatbuf_r+0x1e>
 80102d0:	2340      	movs	r3, #64	; 0x40
 80102d2:	2000      	movs	r0, #0
 80102d4:	6023      	str	r3, [r4, #0]
 80102d6:	b016      	add	sp, #88	; 0x58
 80102d8:	bd70      	pop	{r4, r5, r6, pc}
	...

080102dc <__smakebuf_r>:
 80102dc:	898b      	ldrh	r3, [r1, #12]
 80102de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80102e0:	079d      	lsls	r5, r3, #30
 80102e2:	4606      	mov	r6, r0
 80102e4:	460c      	mov	r4, r1
 80102e6:	d507      	bpl.n	80102f8 <__smakebuf_r+0x1c>
 80102e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80102ec:	6023      	str	r3, [r4, #0]
 80102ee:	6123      	str	r3, [r4, #16]
 80102f0:	2301      	movs	r3, #1
 80102f2:	6163      	str	r3, [r4, #20]
 80102f4:	b002      	add	sp, #8
 80102f6:	bd70      	pop	{r4, r5, r6, pc}
 80102f8:	ab01      	add	r3, sp, #4
 80102fa:	466a      	mov	r2, sp
 80102fc:	f7ff ffc8 	bl	8010290 <__swhatbuf_r>
 8010300:	9900      	ldr	r1, [sp, #0]
 8010302:	4605      	mov	r5, r0
 8010304:	4630      	mov	r0, r6
 8010306:	f7fc ff9b 	bl	800d240 <_malloc_r>
 801030a:	b948      	cbnz	r0, 8010320 <__smakebuf_r+0x44>
 801030c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010310:	059a      	lsls	r2, r3, #22
 8010312:	d4ef      	bmi.n	80102f4 <__smakebuf_r+0x18>
 8010314:	f023 0303 	bic.w	r3, r3, #3
 8010318:	f043 0302 	orr.w	r3, r3, #2
 801031c:	81a3      	strh	r3, [r4, #12]
 801031e:	e7e3      	b.n	80102e8 <__smakebuf_r+0xc>
 8010320:	4b0d      	ldr	r3, [pc, #52]	; (8010358 <__smakebuf_r+0x7c>)
 8010322:	62b3      	str	r3, [r6, #40]	; 0x28
 8010324:	89a3      	ldrh	r3, [r4, #12]
 8010326:	6020      	str	r0, [r4, #0]
 8010328:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801032c:	81a3      	strh	r3, [r4, #12]
 801032e:	9b00      	ldr	r3, [sp, #0]
 8010330:	6163      	str	r3, [r4, #20]
 8010332:	9b01      	ldr	r3, [sp, #4]
 8010334:	6120      	str	r0, [r4, #16]
 8010336:	b15b      	cbz	r3, 8010350 <__smakebuf_r+0x74>
 8010338:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801033c:	4630      	mov	r0, r6
 801033e:	f000 f8cd 	bl	80104dc <_isatty_r>
 8010342:	b128      	cbz	r0, 8010350 <__smakebuf_r+0x74>
 8010344:	89a3      	ldrh	r3, [r4, #12]
 8010346:	f023 0303 	bic.w	r3, r3, #3
 801034a:	f043 0301 	orr.w	r3, r3, #1
 801034e:	81a3      	strh	r3, [r4, #12]
 8010350:	89a0      	ldrh	r0, [r4, #12]
 8010352:	4305      	orrs	r5, r0
 8010354:	81a5      	strh	r5, [r4, #12]
 8010356:	e7cd      	b.n	80102f4 <__smakebuf_r+0x18>
 8010358:	080100e9 	.word	0x080100e9

0801035c <memmove>:
 801035c:	4288      	cmp	r0, r1
 801035e:	b510      	push	{r4, lr}
 8010360:	eb01 0402 	add.w	r4, r1, r2
 8010364:	d902      	bls.n	801036c <memmove+0x10>
 8010366:	4284      	cmp	r4, r0
 8010368:	4623      	mov	r3, r4
 801036a:	d807      	bhi.n	801037c <memmove+0x20>
 801036c:	1e43      	subs	r3, r0, #1
 801036e:	42a1      	cmp	r1, r4
 8010370:	d008      	beq.n	8010384 <memmove+0x28>
 8010372:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010376:	f803 2f01 	strb.w	r2, [r3, #1]!
 801037a:	e7f8      	b.n	801036e <memmove+0x12>
 801037c:	4402      	add	r2, r0
 801037e:	4601      	mov	r1, r0
 8010380:	428a      	cmp	r2, r1
 8010382:	d100      	bne.n	8010386 <memmove+0x2a>
 8010384:	bd10      	pop	{r4, pc}
 8010386:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801038a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801038e:	e7f7      	b.n	8010380 <memmove+0x24>

08010390 <_realloc_r>:
 8010390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010394:	4680      	mov	r8, r0
 8010396:	4614      	mov	r4, r2
 8010398:	460e      	mov	r6, r1
 801039a:	b921      	cbnz	r1, 80103a6 <_realloc_r+0x16>
 801039c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80103a0:	4611      	mov	r1, r2
 80103a2:	f7fc bf4d 	b.w	800d240 <_malloc_r>
 80103a6:	b92a      	cbnz	r2, 80103b4 <_realloc_r+0x24>
 80103a8:	f7fc fee0 	bl	800d16c <_free_r>
 80103ac:	4625      	mov	r5, r4
 80103ae:	4628      	mov	r0, r5
 80103b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103b4:	f000 f8b4 	bl	8010520 <_malloc_usable_size_r>
 80103b8:	4284      	cmp	r4, r0
 80103ba:	4607      	mov	r7, r0
 80103bc:	d802      	bhi.n	80103c4 <_realloc_r+0x34>
 80103be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80103c2:	d812      	bhi.n	80103ea <_realloc_r+0x5a>
 80103c4:	4621      	mov	r1, r4
 80103c6:	4640      	mov	r0, r8
 80103c8:	f7fc ff3a 	bl	800d240 <_malloc_r>
 80103cc:	4605      	mov	r5, r0
 80103ce:	2800      	cmp	r0, #0
 80103d0:	d0ed      	beq.n	80103ae <_realloc_r+0x1e>
 80103d2:	42bc      	cmp	r4, r7
 80103d4:	4622      	mov	r2, r4
 80103d6:	4631      	mov	r1, r6
 80103d8:	bf28      	it	cs
 80103da:	463a      	movcs	r2, r7
 80103dc:	f7fc feb0 	bl	800d140 <memcpy>
 80103e0:	4631      	mov	r1, r6
 80103e2:	4640      	mov	r0, r8
 80103e4:	f7fc fec2 	bl	800d16c <_free_r>
 80103e8:	e7e1      	b.n	80103ae <_realloc_r+0x1e>
 80103ea:	4635      	mov	r5, r6
 80103ec:	e7df      	b.n	80103ae <_realloc_r+0x1e>

080103ee <__sread>:
 80103ee:	b510      	push	{r4, lr}
 80103f0:	460c      	mov	r4, r1
 80103f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80103f6:	f000 f89b 	bl	8010530 <_read_r>
 80103fa:	2800      	cmp	r0, #0
 80103fc:	bfab      	itete	ge
 80103fe:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010400:	89a3      	ldrhlt	r3, [r4, #12]
 8010402:	181b      	addge	r3, r3, r0
 8010404:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010408:	bfac      	ite	ge
 801040a:	6563      	strge	r3, [r4, #84]	; 0x54
 801040c:	81a3      	strhlt	r3, [r4, #12]
 801040e:	bd10      	pop	{r4, pc}

08010410 <__swrite>:
 8010410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010414:	461f      	mov	r7, r3
 8010416:	898b      	ldrh	r3, [r1, #12]
 8010418:	05db      	lsls	r3, r3, #23
 801041a:	4605      	mov	r5, r0
 801041c:	460c      	mov	r4, r1
 801041e:	4616      	mov	r6, r2
 8010420:	d505      	bpl.n	801042e <__swrite+0x1e>
 8010422:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010426:	2302      	movs	r3, #2
 8010428:	2200      	movs	r2, #0
 801042a:	f000 f867 	bl	80104fc <_lseek_r>
 801042e:	89a3      	ldrh	r3, [r4, #12]
 8010430:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010434:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010438:	81a3      	strh	r3, [r4, #12]
 801043a:	4632      	mov	r2, r6
 801043c:	463b      	mov	r3, r7
 801043e:	4628      	mov	r0, r5
 8010440:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010444:	f000 b816 	b.w	8010474 <_write_r>

08010448 <__sseek>:
 8010448:	b510      	push	{r4, lr}
 801044a:	460c      	mov	r4, r1
 801044c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010450:	f000 f854 	bl	80104fc <_lseek_r>
 8010454:	1c43      	adds	r3, r0, #1
 8010456:	89a3      	ldrh	r3, [r4, #12]
 8010458:	bf15      	itete	ne
 801045a:	6560      	strne	r0, [r4, #84]	; 0x54
 801045c:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010460:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010464:	81a3      	strheq	r3, [r4, #12]
 8010466:	bf18      	it	ne
 8010468:	81a3      	strhne	r3, [r4, #12]
 801046a:	bd10      	pop	{r4, pc}

0801046c <__sclose>:
 801046c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010470:	f000 b812 	b.w	8010498 <_close_r>

08010474 <_write_r>:
 8010474:	b538      	push	{r3, r4, r5, lr}
 8010476:	4d07      	ldr	r5, [pc, #28]	; (8010494 <_write_r+0x20>)
 8010478:	4604      	mov	r4, r0
 801047a:	4608      	mov	r0, r1
 801047c:	4611      	mov	r1, r2
 801047e:	2200      	movs	r2, #0
 8010480:	602a      	str	r2, [r5, #0]
 8010482:	461a      	mov	r2, r3
 8010484:	f7f5 fb91 	bl	8005baa <_write>
 8010488:	1c43      	adds	r3, r0, #1
 801048a:	d102      	bne.n	8010492 <_write_r+0x1e>
 801048c:	682b      	ldr	r3, [r5, #0]
 801048e:	b103      	cbz	r3, 8010492 <_write_r+0x1e>
 8010490:	6023      	str	r3, [r4, #0]
 8010492:	bd38      	pop	{r3, r4, r5, pc}
 8010494:	2000065c 	.word	0x2000065c

08010498 <_close_r>:
 8010498:	b538      	push	{r3, r4, r5, lr}
 801049a:	4d06      	ldr	r5, [pc, #24]	; (80104b4 <_close_r+0x1c>)
 801049c:	2300      	movs	r3, #0
 801049e:	4604      	mov	r4, r0
 80104a0:	4608      	mov	r0, r1
 80104a2:	602b      	str	r3, [r5, #0]
 80104a4:	f7f5 fb9d 	bl	8005be2 <_close>
 80104a8:	1c43      	adds	r3, r0, #1
 80104aa:	d102      	bne.n	80104b2 <_close_r+0x1a>
 80104ac:	682b      	ldr	r3, [r5, #0]
 80104ae:	b103      	cbz	r3, 80104b2 <_close_r+0x1a>
 80104b0:	6023      	str	r3, [r4, #0]
 80104b2:	bd38      	pop	{r3, r4, r5, pc}
 80104b4:	2000065c 	.word	0x2000065c

080104b8 <_fstat_r>:
 80104b8:	b538      	push	{r3, r4, r5, lr}
 80104ba:	4d07      	ldr	r5, [pc, #28]	; (80104d8 <_fstat_r+0x20>)
 80104bc:	2300      	movs	r3, #0
 80104be:	4604      	mov	r4, r0
 80104c0:	4608      	mov	r0, r1
 80104c2:	4611      	mov	r1, r2
 80104c4:	602b      	str	r3, [r5, #0]
 80104c6:	f7f5 fb97 	bl	8005bf8 <_fstat>
 80104ca:	1c43      	adds	r3, r0, #1
 80104cc:	d102      	bne.n	80104d4 <_fstat_r+0x1c>
 80104ce:	682b      	ldr	r3, [r5, #0]
 80104d0:	b103      	cbz	r3, 80104d4 <_fstat_r+0x1c>
 80104d2:	6023      	str	r3, [r4, #0]
 80104d4:	bd38      	pop	{r3, r4, r5, pc}
 80104d6:	bf00      	nop
 80104d8:	2000065c 	.word	0x2000065c

080104dc <_isatty_r>:
 80104dc:	b538      	push	{r3, r4, r5, lr}
 80104de:	4d06      	ldr	r5, [pc, #24]	; (80104f8 <_isatty_r+0x1c>)
 80104e0:	2300      	movs	r3, #0
 80104e2:	4604      	mov	r4, r0
 80104e4:	4608      	mov	r0, r1
 80104e6:	602b      	str	r3, [r5, #0]
 80104e8:	f7f5 fb95 	bl	8005c16 <_isatty>
 80104ec:	1c43      	adds	r3, r0, #1
 80104ee:	d102      	bne.n	80104f6 <_isatty_r+0x1a>
 80104f0:	682b      	ldr	r3, [r5, #0]
 80104f2:	b103      	cbz	r3, 80104f6 <_isatty_r+0x1a>
 80104f4:	6023      	str	r3, [r4, #0]
 80104f6:	bd38      	pop	{r3, r4, r5, pc}
 80104f8:	2000065c 	.word	0x2000065c

080104fc <_lseek_r>:
 80104fc:	b538      	push	{r3, r4, r5, lr}
 80104fe:	4d07      	ldr	r5, [pc, #28]	; (801051c <_lseek_r+0x20>)
 8010500:	4604      	mov	r4, r0
 8010502:	4608      	mov	r0, r1
 8010504:	4611      	mov	r1, r2
 8010506:	2200      	movs	r2, #0
 8010508:	602a      	str	r2, [r5, #0]
 801050a:	461a      	mov	r2, r3
 801050c:	f7f5 fb8d 	bl	8005c2a <_lseek>
 8010510:	1c43      	adds	r3, r0, #1
 8010512:	d102      	bne.n	801051a <_lseek_r+0x1e>
 8010514:	682b      	ldr	r3, [r5, #0]
 8010516:	b103      	cbz	r3, 801051a <_lseek_r+0x1e>
 8010518:	6023      	str	r3, [r4, #0]
 801051a:	bd38      	pop	{r3, r4, r5, pc}
 801051c:	2000065c 	.word	0x2000065c

08010520 <_malloc_usable_size_r>:
 8010520:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010524:	1f18      	subs	r0, r3, #4
 8010526:	2b00      	cmp	r3, #0
 8010528:	bfbc      	itt	lt
 801052a:	580b      	ldrlt	r3, [r1, r0]
 801052c:	18c0      	addlt	r0, r0, r3
 801052e:	4770      	bx	lr

08010530 <_read_r>:
 8010530:	b538      	push	{r3, r4, r5, lr}
 8010532:	4d07      	ldr	r5, [pc, #28]	; (8010550 <_read_r+0x20>)
 8010534:	4604      	mov	r4, r0
 8010536:	4608      	mov	r0, r1
 8010538:	4611      	mov	r1, r2
 801053a:	2200      	movs	r2, #0
 801053c:	602a      	str	r2, [r5, #0]
 801053e:	461a      	mov	r2, r3
 8010540:	f7f5 fb16 	bl	8005b70 <_read>
 8010544:	1c43      	adds	r3, r0, #1
 8010546:	d102      	bne.n	801054e <_read_r+0x1e>
 8010548:	682b      	ldr	r3, [r5, #0]
 801054a:	b103      	cbz	r3, 801054e <_read_r+0x1e>
 801054c:	6023      	str	r3, [r4, #0]
 801054e:	bd38      	pop	{r3, r4, r5, pc}
 8010550:	2000065c 	.word	0x2000065c

08010554 <_init>:
 8010554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010556:	bf00      	nop
 8010558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801055a:	bc08      	pop	{r3}
 801055c:	469e      	mov	lr, r3
 801055e:	4770      	bx	lr

08010560 <_fini>:
 8010560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010562:	bf00      	nop
 8010564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010566:	bc08      	pop	{r3}
 8010568:	469e      	mov	lr, r3
 801056a:	4770      	bx	lr
